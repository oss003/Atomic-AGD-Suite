; AGD Game Compiler test program.

; Define the play area in characters
; top edge, left edge, height and width respectively

DEFINEWINDOW	1 9 $16 22	; use a dollar prefix when using hex

; Background blocks to be used in the game
; First we define the type - eg EMPTYBLOCK, PLATFORMBLOCK or DEADLYBLOCK
; Next 16 numbers are alternating graphic and attribute bytes from top to bottom

; Block 0

DEFINEBLOCK     EMPTYBLOCK      ; property
;                0 71 0 71 0 71 0 71 0 71 0 71 0 71 0 71             ; Next.
                0 0 0 0 0 0 0 0 71                                  ; Spectrum.
;                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0      ; CPC.


; Block 1

DEFINEBLOCK     WALLBLOCK       ; property
;                254,2,254,2,254,2,0,0,239,3,239,3,239,3,0,0         ; Next.
                254,254,254,0,239,239,239,0,2                       ; Spectrum.
;                28 12 8 28 12 8 28 12 8 60 60 40
;                12 28 8 12 28 8 12 28 8 60 60 40                     ; CPC.


; Sprites
; First argument defines the number of frames
; Then 32 bytes for each sprite frame (Spectrum)
;   or 80 bytes per frame (Amstrad CPC464)

DEFINESPRITE    1		; number of frames
                7,224,31,248,63,252,127,254,127,254,255,255,255,255,255,255            ; Spectrum and Timex/Next.
                255,255,255,255,255,255,127,254,127,254,63,252,31,248,7,224
;                0,63,63,42,0           ; CPC.
;                21,63,63,63,0
;                21,63,63,63,0
;                63,63,63,63,42
;                63,63,63,63,42
;                63,63,63,63,42
;                63,63,63,63,42
;                63,63,63,63,42
;                63,63,63,63,42
;                63,63,63,63,42
;                63,63,63,63,42
;                63,63,63,63,42
;                63,63,63,63,42
;                21,63,63,63,0
;                21,63,63,63,0
;                0,63,63,42,0

DEFINESPRITE    2		; number of frames
                255,255,128,1,128,1,128,1,128,1,128,1,128,1,128,1                      ; Spectrum and Timex/Next.
                128,1,128,1,128,1,128,1,128,1,128,1,128,1,255,255
                255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
                255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255

;                195,195,195,195,130,130,0,0,0,130                                       ; CPC.
;                130,0,0,0,130,130,0,0,0,130
;                130,0,0,0,130,130,0,0,0,130
;                130,0,0,0,130,130,0,0,0,130
;                130,0,0,0,130,130,0,0,0,130
;                130,0,0,0,130,130,0,0,0,130
;                130,0,0,0,130,130,0,0,0,130
;                130,0,0,0,130,195,195,195,195,130
;                195,195,195,195,130,194,192,192,192,130
;                194,192,192,192,130,194,192,192,192,130
;                194,192,192,192,130,194,192,192,192,130
;                194,192,192,192,130,194,192,192,192,130
;                194,192,192,192,130,194,192,192,192,130
;                194,192,192,192,130,194,192,192,192,130
;                194,192,192,192,130,194,192,192,192,130
;                194,192,192,192,130,195,195,195,195,130


; Screen layouts are best arranged in monospaced rows and columns
; DEFINESCREEN is followed by the block numbers that make up the screen
; Our play area is 22x22, so we need 22 rows of 22 columns
; The compiler will automatically compress screens

DEFINESCREEN
001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001

; Next we define the sprites that appear on the screen
; SPRITEPOSITION requires 4 numbers for type, image, Y coordinate and X coordinate in that order

SPRITEPOSITION 0,0,128,128
SPRITEPOSITION 1,1,32,88

DEFINESCREEN
001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 001 001 001 001 001 001 001 001 000 000 000 000 001 001 001 001 001 001 001 001 001
SPRITEPOSITION 0,0,128,128
SPRITEPOSITION 1,1,88,160
SPRITEPOSITION 1,1,136,96

DEFINESCREEN
001 001 001 001 001 001 001 001 001 000 000 000 000 001 001 001 001 001 001 001 001 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001
SPRITEPOSITION 0,0,128,128
SPRITEPOSITION 1,1,88,160

SPRITEPOSITION 0,0,128,128

; Define objects
; For the Next:
; First number is the starting room, next 2 are for Y and X coordinates
; We then need 32 bytes to define the image, just as for sprite frames
; For the Spectrum we start with an attribute byte, then the rest of the data.

; Next.
;DEFINEOBJECT    2,160,104      ; room, Y, X
;                31,240,42,168,86,212,64,4,12;8,2,182,218,182,218,182,218               ; image data.
;                182,218,182,218,182,218,128,2,64,4,86,212,42,168,31,240

; Spectrum.
DEFINEOBJECT    67,2,160,104   ; attribute, room, Y, X
                31,240,42,168,86,212,64,4,128,2,182,218,182,218,182,218                ; image data.
                182,218,182,218,182,218,128,2,64,4,86,212,42,168,31,240

; CPC.
;DEFINEOBJECT    2,160,104       ; attribute, room, Y, X
;                0,51,51,0,17,63,63,34,17,63,63,34,17,63,63,34                          ; image data.
;                55,63,63,59,51,63,63,51,35,51,51,19,35,3,3,19
;                35,3,3,19,51,3,3,51,55,51,51,59,55,63,63,59
;                17,63,63,34,17,63,63,34,17,63,63,34,0,51,51,0

; Map.
; First argument is WIDTH, second is the startscreen
; We then arrange the map as a grid with correct width, monospaced here for readability
; where no room is present we put 255

MAP		WIDTH 4
		STARTSCREEN 0

		255 001 000 255
		255 002 255 255

ENDMAP

; Sprite events
; Player controls

EVENT PLAYER

SPRITEINK 7

DETECTOBJ
IF OBJ = 0
    GET OBJ
ENDIF

IF KEY UP
    IF Y <= TOPEDGE
        SCREENUP
        LET Y = BOTTOMEDGE
        EXIT
    ELSE
        IF CANGOUP
            SPRITEUP
        ENDIF
    ENDIF
ENDIF

IF KEY DOWN
    IF Y >= BOTTOMEDGE
        SCREENDOWN
        LET Y = TOPEDGE
        EXIT
    ELSE
        IF CANGODOWN
            SPRITEDOWN
        ENDIF
    ENDIF
ENDIF

IF KEY LEFT
    IF X <= LEFTEDGE
        SCREENLEFT
        LET X = RIGHTEDGE
        EXIT
    ELSE
        IF CANGOLEFT
            SPRITELEFT
        ENDIF
    ENDIF
ENDIF

IF KEY RIGHT
    IF X >= RIGHTEDGE
        SCREENRIGHT
        LET X = LEFTEDGE
        EXIT
    ELSE
        IF CANGORIGHT
            SPRITERIGHT
        ENDIF
    ENDIF
ENDIF

IF KEY FIRE
    EXPLODE 16
ENDIF

SPRITEINK 6



EVENT SPRITETYPE1

; Up/down movement.
; DIRECTION variable indicates which way we're going.
IF DIRECTION = 0
    IF CANGOUP
        SPRITEUP
    ELSE
        LET DIRECTION = 1
    ENDIF
ELSE
    IF CANGODOWN
        SPRITEDOWN
    ELSE
        LET DIRECTION = 0
    ENDIF
ENDIF

; Left/right movement.
; Only one DIRECTION variable per sprite, so we use SETTINGA for the horizontal.
IF SETTINGA = 0
    IF CANGOLEFT
        SPRITELEFT
    ELSE
        LET SETTINGA = 1
    ENDIF
ELSE
    IF CANGORIGHT
        SPRITERIGHT
    ELSE
        LET SETTINGA = 0
    ENDIF
ENDIF

SPRITEINK 5
ANIMATE

; Kill player if this sprite comes into contact with him/her.
IF COLLISION PLAYER
    KILL
ENDIF

EVENT SPRITETYPE2

EVENT SPRITETYPE3

EVENT SPRITETYPE4

EVENT SPRITETYPE5

EVENT SPRITETYPE6

EVENT SPRITETYPE7

EVENT SPRITETYPE8

EVENT INITSPRITE

EVENT MAINLOOP1
IF SCREEN = 0
    IF GOT 0
        ENDGAME
    ENDIF
ENDIF

EVENT MAINLOOP2

EVENT INTROMENU

; This is the intro menu with 3 control options and one to redefine the keys.
; You may wish to edit this depending upon whether you're building for Sinclair or Amstrad.
COLOUR 7
CLS
AT 4 8
PRINT "SIMPLE TEST GAME"
AT 8 8
PRINT "1. KEYBOARD"
AT 10 8
PRINT "2. KEMPSTON"
;PRINT "2. JOYSTICK 0"
AT 12 8
PRINT "3. SINCLAIR"
;PRINT "3. JOYSTICK 1"
AT 14 8
PRINT "4. REDEFINE KEYS"
INK 4
AT 0 1
TICKER 30 "COLLECT THE BARREL THEN RETURN TO THE START SCREEN "
WAITKEY
TICKER 0                               ; turn off the scrolling ticker message.
IF KEY OPTION1
    LET CONTROL = KEYBOARD
ENDIF
IF KEY OPTION2
    LET CONTROL = KEMPSTON
;    LET CONTROL = JOYSTICK0
ENDIF
IF KEY OPTION3
    LET CONTROL = SINCLAIR
;    LET CONTROL = JOYSTICK1
ENDIF
IF KEY OPTION4
    DELAY 50
    CLS
    INK 5
    AT 2 4
    PRINT "PRESS KEY FOR:"
    AT 5 15
    INK 6
    PRINT "UP"
    DEFINEKEY UP
    DELAY 50
    AT 7 14
    PRINT "DOWN"
    DEFINEKEY DOWN
    DELAY 50
    AT 9 14
    PRINT "LEFT"
    DEFINEKEY LEFT
    DELAY 50
    AT 11 13
    PRINT "RIGHT"
    DEFINEKEY RIGHT
    DELAY 50
    LET CONTROL = KEYBOARD
ENDIF
CLS

EVENT GAMEINIT
LET LIVES = 3
LET LINE = 0
LET COLUMN = 31
PUTBLOCK 1

EVENT RESTARTSCREEN
INK 4
AT 2 1
PRINT "LIVES"
INK 5
AT 3 3
DISPLAY LIVES

EVENT FELLTOOFAR

EVENT KILLPLAYER
SUBTRACT 1 FROM LIVES

EVENT LOSTGAME
AT 11 16
PRINT "GAME"
AT 12 16
PRINT "OVER"

EVENT COMPLETEDGAME
CLS
INK 6
PAPER 1
AT 5 10
PRINT "CONGRATULATIONS!"

EVENT NEWHIGHSCORE
AT 4,9
PRINT "NEW HIGH SCORE"
