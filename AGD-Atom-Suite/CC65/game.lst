ca65 V2.17 - Git d13d068
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2017
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $0300
000000r 1               	.DEFINE header   1		; Header Wouter Ras emulator
000000r 1               	.DEFINE filenaam "AGD"
000000r 1               
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               mflag = 0 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               cflag = 0 ;
000000r 2               oflag = 1 ;
000000r 2               lflag = 1 ;
000000r 2               
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "z80-zp.inc"
000000r 2               ;.segment "ZEROPAGE"
000000r 2               
000000r 2               ws	 = $60
000000r 2               
000000r 2               z80_f	 = ws+$00
000000r 2               z80_a	 = ws+$01
000000r 2               z80_af	 = z80_f
000000r 2               
000000r 2               z80_c	 = ws+$02
000000r 2               z80_b	 = ws+$03
000000r 2               z80_bc	 = z80_c
000000r 2               
000000r 2               z80_e	 = ws+$04
000000r 2               z80_d	 = ws+$05
000000r 2               z80_de	 = z80_e
000000r 2               
000000r 2               z80_l	 = ws+$06
000000r 2               z80_h	 = ws+$07
000000r 2               z80_hl	 = z80_l
000000r 2               
000000r 2               z80_x    = ws+$08
000000r 2               z80_i    = ws+$09
000000r 2               z80_ix	 = z80_x
000000r 2               
000000r 2               z80_iy	 = ws+$0a
000000r 2               
000000r 2               z80_fp	 = ws+$0c
000000r 2               z80_ap	 = ws+$0d
000000r 2               
000000r 2               z80_cp	 = ws+$0e
000000r 2               z80_bp	 = ws+$0f
000000r 2               z80_bcp	 = z80_cp
000000r 2               
000000r 2               z80_ep	 = ws+$10
000000r 2               z80_dp	 = ws+$11
000000r 2               z80_dep	 = z80_ep
000000r 2               
000000r 2               z80_lp	 = ws+$12
000000r 2               z80_hp	 = ws+$13
000000r 2               z80_hlp	 = z80_lp
000000r 2               
000000r 2               z80_sp   = ws+$14
000000r 2               
000000r 2               z80_reg0 = ws+$16
000000r 2               z80_reg1 = ws+$17
000000r 2               z80_reg2 = ws+$18
000000r 2               z80_reg3 = ws+$19
000000r 2               
000000r 2               z80_r	 = ws+$1a
000000r 2               
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        	; last random number.
00001Er 2  xx           varobj:	.res 1  	   	; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:	    .res 1
00002Br 2  xx           loopb:	    .res 1
00002Cr 2  xx           loopc:	    .res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2  xx xx        advbuff:    .res 2
000039r 2               
000039r 2  xx xx        tmp:        .res 2
00003Br 2  xx xx        scr_l:      .res 2
00003Dr 2  xx xx        scr_r:      .res 2
00003Fr 2  xx xx        scr_txt:    .res 2
000041r 2               
000041r 2  xx           xtmp:	    .res 1
000042r 2  xx           ytmp:	    .res 1
000043r 2  xx           spcnt:	    .res 1
000044r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000046r 2  xx           seed:	    .res 1		; seed for random numbers.
000047r 2               
000047r 2  xx           ccnt:       .res 1
000048r 2  xx           flag:	    .res 1
000049r 2  xx           rcol:	    .res 1
00004Ar 2  xx           rrow:	    .res 1
00004Br 2               
00004Br 2  xx           combyt:	    .res 1		; byte type compressed.
00004Cr 2  xx           comcnt:	    .res 1		; compression counter.
00004Dr 2  xx           prtmod:	    .res 1      	; print mode, 0 = standard, 1 = double-height.
00004Er 2  xx           qscnt:	    .res 1
00004Fr 2               
00004Fr 2  xx           sprptr:	    .res 1      	; not a ptr
000050r 2  xx           sprcnt:	    .res 1
000051r 2               
000051r 2  xx xx        skptr:	    .res 2		; search pointer.
000053r 2  xx           sktptr:	    .res 1      	; not a ptr
000054r 2  xx           tmproom:    .res 1
000055r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000057r 2               
000057r 2               .if mflag
000057r 2               TmpAddr:    .res 2
000057r 2               bwid:	    .res 1     		; box/menu width.
000057r 2               blen:	    .res 1     		; box/menu height.
000057r 2               btop:	    .res 1    	 	; box coordinates.
000057r 2               blft:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if sflag .or pflag
000057r 2               shrctr:	    .res 1
000057r 2               .endif
000057r 2               .if pflag
000057r 2               explcnt:    .res 1
000057r 2               seed3:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if aflag
000057r 2               pbptr:       .res 2
000057r 2               pbbuf:	     .res 2
000057r 2               .endif
000057r 2               
000057r 1               
000057r 1               .segment "CODE"
000000r 1               
000000r 1               .if header
000000r 1               ;********************************************************************
000000r 1               ; ATM Header for Atom emulator Wouter Ras
000000r 1               
000000r 1               .org asm_code-22*header
0002EA  1               name_start:
0002EA  1  41 47 44     	.byte filenaam			; Filename
0002ED  1               name_end:
0002ED  1  00 00 00 00  	.repeat 16-name_end+name_start	; Fill with 0 till 16 chars
0002F1  1  00 00 00 00  
0002F5  1  00 00 00 00  
0002FA  1               	  .byte $0
0002FA  1               	.endrep
0002FA  1               
0002FA  1  00 03        	.word asm_code			; 2 bytes startaddress
0002FC  1  00 03        	.word exec			; 2 bytes linkaddress
0002FE  1  1F 7A        	.word eind_asm-start_asm	; 2 bytes filelength
000300  1               
000300  1               ;********************************************************************
000300  1               .else
000300  1               .org asm_code
000300  1               .endif
000300  1               
000300  1               exec:
000300  1               start_asm:
000300  1               	.include "game.inc"
000300  2               .include "mystery2.inc"
000300  3               ;--------------------------------------------------------------
000300  3               ; Arcade Game Designer.
000300  3               ; (C) 2008 Jonathan Cauldwell.
000300  3               ; ZX Spectrum Next Engine v0.7.
000300  3               ; Acorn Atom port by K.v.Oss 2018
000300  3               ;--------------------------------------------------------------
000300  3               
000300  3               ; Conditional compilation flags
000300  3               ; Code is installed if flag is set
000300  3               ; Flags are set in commandline assembly or by the compiler
000300  3               
000300  3               ; Flags set by AGD compiler
000300  3               ;	mflag  			; MENU + INV
000300  3               ;	pflag 			; particle engine
000300  3               ;	sflag 			; scrollytext
000300  3               ;	dflag 			; digging mode
000300  3               ;	cflag			; collectable blocks
000300  3               ;	oflag			; objects
000300  3               ;	lflag			; ladders
000300  3               ;
000300  3               ; Flags set manually
000300  3               ;	aflag			; adventure mode
000300  3               ;	bflag			; big sprites (16x24)
000300  3               ;	fflag			; floppy version (skip #0axx)
000300  3               ;	gflag			; graphic colour mode
000300  3               ;	hflag			; hidden sprite mode
000300  3               ;	iflag			; invert mode
000300  3               
000300  3               .if mflag
000300  3               	.out "- MEN/INV enabled"
000300  3               .endif
000300  3               .if pflag
000300  3               	.out "- Particles enabled"
000300  3               .endif
000300  3               .if sflag
000300  3               	.out "- Scrolling enabled"
000300  3               .endif
000300  3               .if dflag
000300  3               	.out "- Digging enabled"
000300  3               .endif
000300  3               .if cflag
000300  3               	.out "- Collectable blocks enabled"
000300  3               .endif
000300  3               .if oflag
000300  3               	.out "- Objects enabled"
000300  3               .endif
000300  3               .if lflag
000300  3               	.out "- Ladders enabled"
000300  3               .endif
000300  3               .if aflag
000300  3               	.out "- Adventure mode enabled"
000300  3               .endif
000300  3               .if bflag
000300  3               	.out "- Big Sprites (16x24) enabled"
000300  3               .endif
000300  3               .if gflag
000300  3               	.out "- Colourmode enabled"
000300  3               .endif
000300  3               .if hflag
000300  3               	.out "- Hidden sprites/foregroundblocks enabled"
000300  3               .endif
000300  3               .if iflag
000300  3               	.out "- Invert mode enabled"
000300  3               .endif
000300  3               
000300  3               ; Global definitions ------------------------------------------------------------
000300  3               
000300  3               	FONT = font		; Font address
000300  3               
000300  3               	green	= $00		; Colour definition filters
000300  3               	yellow	= $55
000300  3               	blue	= $aa
000300  3               	red	= $ff
000300  3               
000300  3               ; Block characteristics.
000300  3               
000300  3               	PLATFM	= 1		; platform.
000300  3               	WALL	= PLATFM + 1	; solid wall.
000300  3               	LADDER	= WALL + 1	; ladder.
000300  3               	FODDER	= LADDER + 1	; fodder block.
000300  3               	DEADLY	= FODDER + 1	; deadly block.
000300  3               	CUSTOM	= DEADLY + 1	; custom block.
000300  3               	WATER	= CUSTOM + 1	; water block.
000300  3                       COLECT	= WATER + 1	; collectable block.
000300  3                       NUMTYP	= COLECT + 1	; number of types.
000300  3               
000300  3               ; Sprites.
000300  3               
000300  3               .if bflag
000300  3               	SPR_HGT	= 24		; Sprite height
000300  3               	SPR_WID = 16		; Sprite width
000300  3               	NUMSPR	= 8		; number of sprites.
000300  3               .else				; 16x16 sprites
000300  3               	SPR_HGT = 16		; Sprite height
000300  3               	SPR_WID = 16		; Sprite width
000300  3               	NUMSPR	= 12		; number of sprites.
000300  3               .endif
000300  3               
000300  3               	TABSIZ = 17		; size of each entry.
000300  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
000300  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
000300  3               	var_X  = 8		; new x coordinate of sprite.
000300  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
000300  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
000300  3               
000300  3               ; Particle engine.
000300  3               
000300  3               	NUMSHR = 55		; pieces of shrapnel.
000300  3               	SHRSIZ = 6		; bytes per particle.
000300  3               
000300  3               ; System constants
000300  3               
000300  3               	ScreenAddr  = $8000	; Startaddress video RAM
000300  3               	ScrSelAddr  = $b000	; Screen selection address
000300  3               	KeyRowAddr  = $b000	; PIA key matrix row
000300  3               	KeyColAddr  = $b001	; PIA key matrix column
000300  3               	SpeakerBit  = $b002	; Speaker bit
000300  3               	CmdReg      = $b400	; Command register AtoMMC
000300  3               	DatReg      = $b401	; Data register AtoMMC
000300  3               	Timer2_Low  = $b808	; Timer 2 low byte
000300  3               	Timer2_High = $b809	; Timer 2 high byte
000300  3               
000300  3               ; System calls
000300  3               
000300  3               	SCRSYNC	 = $fe66	; wait for next CRT field flyback 60 Hz
000300  3               	SCRSYNC1 = $fe6b	; wait for CRT field flyback 60 Hz
000300  3               	OSRDCH   = $fe94	; get key subroutine
000300  3                       READKEY  = $fe71	; scan key matrix subroutine
000300  3               	OSWRCH	 = $fff4	; write character
000300  3               
000300  3               
000300  3               .if iflag
000300  3               	TxtInvert   = $ff	; Invert byte for character printing
000300  3               	ScrFillByte = $ff	; Screen fill byte for CLS
000300  3               .else
000300  3               	TxtInvert   = $00	; Invert byte for character printing
000300  3               	ScrFillByte = $00	; Screen fill byte for CLS
000300  3               .endif
000300  3               
000300  3               .if gflag
000300  3               	ScrMode     = $d0	;  $d0 = CLEAR4a colour
000300  3               .else
000300  3               	ScrMode     = $f0	;  $f0 = CLEAR4  mono
000300  3               .endif
000300  3               
000300  3               ;===============================================================
000300  3               ; Game starts here
000300  3               ;===============================================================
000300  3               
000300  3               .segment "CODE"
000300  3               
000300  3               ; Clear variables
000300  3               
000300  3  A9 00        	lda #0
000302  3  A2 00        	ldx #0
000304  3               clrloop:
000304  3  95 00        	sta 0,x
000306  3  E8           	inx
000307  3  D0 FB        	bne clrloop
000309  3               
000309  3  20 36 04     	jsr game	 	; start the game.
00030C  3  A9 0C        	lda #12			; Clear screen + exit to Basic
00030E  3  20 F4 FF     	jsr OSWRCH
000311  3  4C B2 C2     	jmp $C2B2		; Back to Basic
000314  3               
000314  3               ; Definition of variables
000314  3               ; Make sure pointers are arranged in the same order as the data itself.
000314  3               
000314  3  F2 26        msgptr:		.word msgdat	; messages
000316  3  D5 27        blkptr:		.word chgfx	; block graphics.
000318  3  95 2B        proptr:		.word bprop	; address of char properties.
00031A  3  0D 2C        sptptr:		.word sprgfx	; sprite graphics
00031C  3  8D 45        frmptr:		.word frmlst	; sprite frames.
00031E  3  BB 45        scrptr:		.word scdat	; address of screens.
000320  3  36 78        nmeptr:		.word nmedat	; enemy start positions.
000322  3  A7 79        objptr:		.word objdta	; object graphics
000324  3               
000324  3               ;TxtFilter:	.byte $ff
000324  3  00 55 AA FF  txtcol:		.byte green,yellow,blue,red
000328  3               
000328  3               ; Don't change the order of these four.
000328  3               ; Menu routine relies on winlft following wintop.
000328  3               
000328  3  01           wintop:		.byte WINDOWTOP	; top of window.
000329  3  00           winlft:		.byte WINDOWLFT	; left edge.
00032A  3  17           winhgt:		.byte WINDOWHGT	; window height.
00032B  3  20           winwid:		.byte WINDOWWID	; window width.
00032C  3  01           numob:		.byte NUMOBJ	; number of objects in game.
00032D  3               
00032D  3               ; Variables start here.
00032D  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
00032D  3               
00032D  3  08           wntopx:		.byte (8 * WINDOWTOP)
00032E  3  00           wnlftx:		.byte (8 * WINDOWLFT)
00032F  3  B0           wnbotx:		.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
000330  3  EE           wnrgtx:		.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
000331  3               
000331  3               ; Assorted game routines which can go in contended memory.
000331  3               
000331  3               ;--------------------------------------------------------------
000331  3               ; Entry for inventory called by the INV command
000331  3               ;
000331  3               ; Input:
000331  3               ;  X   = message nr with objects seperated with ,
000331  3               ;
000331  3               ; Output:
000331  3               ;  OPT = selected objectnr of INV menu
000331  3               ;--------------------------------------------------------------
000331  3               
000331  3               .if mflag
000331  3               minve:
000331  3               .if gflag
000331  3               	lda #$ff		; blue frontcolour
000331  3               	sta andeor
000331  3               	lda #$aa		; yellow backcoloour
000331  3               	sta andeor+1
000331  3               .endif
000331  3               	lda #<(invdis)		; routine address.
000331  3               	sta mod0+1		; set up menu routine.
000331  3               	sta mod2+1		; set up count routine.
000331  3               	lda #>(invdis)
000331  3               	sta mod0+2
000331  3               	sta mod2+2
000331  3               	lda #<(fopt)		; find option from available objects.
000331  3               	sta mod1+1		; set up routine.
000331  3               	lda #>(fopt)
000331  3               	sta mod1+1+1
000331  3               	jmp dbox		; do menu routine.
000331  3               
000331  3               ;--------------------------------------------------------------
000331  3               ; Entry for menu called by the MENU command
000331  3               ;
000331  3               ; Input:
000331  3               ;  X   = message nr with menu items seperated with ,
000331  3               ;
000331  3               ; Output:
000331  3               ;  OPT = selected line nr of MENU menu
000331  3               ;--------------------------------------------------------------
000331  3               
000331  3               mmenu:
000331  3               	lda #<(always)		; routine address.
000331  3               	sta mod0+1		; set up routine.
000331  3               	sta mod2+1		; set up count routine.
000331  3               	lda #>(always)
000331  3               	sta mod0+2
000331  3               	sta mod2+2
000331  3               
000331  3               	lda #<(fstd)		; standard option selection.
000331  3               	sta mod1+1		; set up routine.
000331  3               	lda #>(fstd)
000331  3               	sta mod1+2
000331  3               
000331  3               ; Drop through into box routine.
000331  3               
000331  3               ;--------------------------------------------------------------
000331  3               ; Work out size of box for message or menu.
000331  3               ;--------------------------------------------------------------
000331  3               
000331  3               dbox:
000331  3               	lda #<(msgdat)		; pointer to messages.
000331  3               	sta z80_l
000331  3               	lda #>(msgdat)
000331  3               	sta z80_h
000331  3               
000331  3               	jsr getwrd		; get message number.
000331  3               
000331  3               	lda z80_h		; store pointer to message.
000331  3               	sta TmpAddr
000331  3               	lda z80_l
000331  3               	sta TmpAddr+1
000331  3               
000331  3               	lda #1			; height.
000331  3               	sta z80_d
000331  3               	lda #0			; start at object zero.
000331  3               	sta combyt		; store number of object in combyt.
000331  3               	sta z80_e		; maximum width.
000331  3               dbox5:
000331  3               	lda #0			; this line"s width.
000331  3               	sta z80_b
000331  3               mod2:
000331  3               	jsr always		; item in player"s possession?
000331  3               	cmp #255
000331  3               	bne dbox6		; not in inventory, skip this line.
000331  3               	inc z80_d		; add to tally.
000331  3               dbox6:
000331  3               	ldy #0			; get character.
000331  3               	lda (z80_hl),y
000331  3               	sta z80_a
000331  3               	inc z80_l		; next character.
000331  3               	bne :+
000331  3               	inc z80_h
000331  3               :
000331  3               	lda z80_a		; reached end of line?
000331  3               	cmp #','
000331  3               	beq dbox3		; yes.
000331  3               	cmp #13
000331  3               	beq dbox3		; yes.
000331  3               	inc z80_b		; add to this line"s width.
000331  3               	lda z80_a
000331  3               	bmi dbox4		; end of message? yes, end count.
000331  3               	jmp dbox6		; repeat until we find the end.
000331  3               dbox3:
000331  3               	lda z80_e		; maximum line width.
000331  3               	cmp z80_b		; have we exceeded longest so far?
000331  3               	bpl dbox5		; no, carry on looking.
000331  3               	lda z80_b		; make this the widest so far.
000331  3               	sta z80_e
000331  3               	jmp dbox5		; keep looking.
000331  3               dbox4:
000331  3               	lda z80_e		; maximum line width.
000331  3               	cmp z80_b		; have we exceeded longest so far?
000331  3               	bpl dbox8		; no, carry on looking.
000331  3               	lda z80_b		; final line is the longest so far.
000331  3               	sta z80_e
000331  3               dbox8:
000331  3               	dec z80_d		; decrement items found.
000331  3               	bne :+			; total was zero.
000331  3               	lda #255
000331  3               	sta varopt
000331  3               	jmp dbox15
000331  3               :
000331  3               	lda z80_e		; longest line.
000331  3               	bne :+			; was it zero?
000331  3               	jmp dbox15		; total was zero.
000331  3               :
000331  3               	sta bwid		; set up size.
000331  3               	lda z80_d
000331  3               	sta blen
000331  3               
000331  3               ;--------------------------------------------------------------
000331  3               ; That's set up our box size.
000331  3               ;--------------------------------------------------------------
000331  3               
000331  3               	lda winhgt		; window height in characters.
000331  3               	sec
000331  3               	sbc z80_d		; subtract height of box.
000331  3               	lsr a			; divide by 2.
000331  3               	clc
000331  3               	adc wintop		; add top edge of window.
000331  3               	sta btop		; set up box top.
000331  3               
000331  3               	lda winwid		; window width in characters.
000331  3               	sec
000331  3               	sbc z80_e		; subtract box width.
000331  3               	lsr a			; divide by 2.
000331  3               	clc
000331  3               	adc winlft		; add left edge of window.
000331  3               	sta blft		; box left.
000331  3               
000331  3               	lda #<(FONT-256)		; font.
000331  3               	sta grbase		; set up for text display.
000331  3               	lda #>(FONT-256)
000331  3               	sta grbase+1
000331  3               
000331  3               	lda TmpAddr+1		; restore message pointer.
000331  3               	sta z80_l
000331  3               	lda TmpAddr
000331  3               	sta z80_h
000331  3               
000331  3               	lda btop		; box top.
000331  3               	sta dispy		; set display coordinate.
000331  3               	lda #0			; start at object zero.
000331  3               	sta combyt		; store number of object in combyt.
000331  3               dbox2:
000331  3               	lda combyt		; get object number.
000331  3               	sta z80_a
000331  3               mod0:
000331  3               	jsr always		; check inventory for display.
000331  3               	cmp #255
000331  3               	beq :+
000331  3               	jmp dbox13		; not in inventory, skip this line.
000331  3               :
000331  3               	lda blft		; box left.
000331  3               	sta dispx		; set left display position.
000331  3               	lda bwid		; box width.
000331  3               	sta z80_b		; store width.
000331  3               dbox0:
000331  3               	ldy #0
000331  3               	lda (z80_hl),y		; get character.
000331  3               	cmp #','		; end of line?
000331  3               	beq dbox1		; yes, next one.
000331  3               	cmp #13			; end of line?
000331  3               	beq dbox1		; yes, next one.
000331  3               
000331  3               	cmp #141			; end of line?
000331  3               	bne :+
000331  3               	dec bwid
000331  3               	jmp dbox7		; yes, next one.
000331  3               :
000331  3               	dec z80_b		; one less to display.
000331  3               	and #127		; remove terminator.
000331  3               
000331  3               	jsr pchr		; display on screen.
000331  3               
000331  3               	ldy #0
000331  3               	lda (z80_hl),y		; get character.
000331  3               	sta z80_a
000331  3               	inc z80_l		; next character.
000331  3               	bne :+
000331  3               	inc z80_h
000331  3               :
000331  3               	lda z80_a
000331  3               	cmp #128		; end of message?
000331  3               	bmi :+
000331  3               	jmp dbox7		; yes, job done.
000331  3               :
000331  3               	lda z80_b		; chars remaining.
000331  3               	beq :+			; are any left?
000331  3               	jmp dbox0		; yes, continue.
000331  3               :
000331  3               ;---------------------------------------------------
000331  3               ; Reached limit of characters per line.
000331  3               ;---------------------------------------------------
000331  3               
000331  3               dbox9:
000331  3               	ldy #0
000331  3               	lda (z80_hl),y		; get character.
000331  3               	inc z80_l		; next one.
000331  3               	bne :+
000331  3               	inc z80_h
000331  3               :
000331  3               	cmp #','		; another line?
000331  3               	beq dbox10		; yes, do next line.
000331  3               	cmp #13			; another line?
000331  3               	beq dbox10		; yes, do next line.
000331  3               	cmp #128		; end of message?
000331  3               	bcs :+
000331  3               	jmp dbox11		; yes, finish message.
000331  3               :
000331  3               	jmp dbox9
000331  3               
000331  3               ;---------------------------------------------------
000331  3               ; Fill box to end of line.
000331  3               ;---------------------------------------------------
000331  3               
000331  3               dboxf:
000331  3               	lda #32			; space character.
000331  3               	jsr pchr		; display character.
000331  3               	dec z80_b
000331  3               	beq :+
000331  3               	jmp dboxf		; repeat for remaining chars on line.
000331  3               :
000331  3               	rts
000331  3               dbox1:
000331  3               	inc z80_l		; skip character.
000331  3               	bne :+
000331  3               	inc z80_h
000331  3               :
000331  3               	jsr dboxf		; fill box out to right side.
000331  3               dbox10:
000331  3               	inc dispy		; y coordinate down a line next position.
000331  3               	jmp dbox2		; next line.
000331  3               dbox7:
000331  3               	lda z80_b		; chars remaining.
000331  3               	bne :+			; are any left?
000331  3               	jmp dbox11		; no, nothing to draw.
000331  3               :
000331  3               	jsr dboxf		; fill message to line.
000331  3               
000331  3               ;------------------------------------------------------
000331  3               ; Drawn the box menu, now select option.
000331  3               ;------------------------------------------------------
000331  3               
000331  3               dbox11:
000331  3               	lda btop		; box top.
000331  3               	sta dispy		; set bar position.
000331  3               dbox14:
000331  3               	jsr joykey		; get controls.
000331  3               	cmp #$7f		; anything pressed?
000331  3               	bne dbox14		; yes, debounce it.
000331  3               	jsr dbar		; draw bar.
000331  3               dbox12:
000331  3               	jsr joykey		; get controls.
000331  3               	cmp #$7f		; anything pressed?
000331  3               	beq dbox12		; no, nothing.
000331  3               	and #16			; fire button pressed?
000331  3               	bne :+
000331  3               mod1:
000331  3               	jmp fstd		; yes, job done.
000331  3               :
000331  3               	jsr dbar		; delete bar.
000331  3               
000331  3               	lda joyval		; joystick reading.
000331  3               	and #8			; going up?
000331  3               	beq dboxu		; yes, go up.
000331  3               
000331  3               	ldx dispy		; vertical position of bar.
000331  3               	inx			; look down.
000331  3               	txa
000331  3               	sec
000331  3               	sbc btop		; find distance from top.
000331  3               	cmp blen		; top of box.
000331  3               	bne :+
000331  3               	jmp dbox14		; yes, go no further.
000331  3               :
000331  3               	inc dispy		; move bar.
000331  3               	jmp dbox14		; continue.
000331  3               dboxu:
000331  3               	lda dispy		; vertical position of bar.
000331  3               	cmp btop		; are we at the top?
000331  3               	bne :+
000331  3               	jmp dbox14		; yes, go no further.
000331  3               :
000331  3               	dec dispy		; move bar.
000331  3               	jmp dbox14		; continue.
000331  3               fstd:
000331  3               	lda dispy		; bar position.
000331  3               	sec
000331  3               	sbc btop		; find selected option.
000331  3               	sta varopt		; store the option.
000331  3               	jmp redraw		; redraw the screen.
000331  3               
000331  3               ;------------------------------------------------------
000331  3               ; Option not available.  Skip this line.
000331  3               ;------------------------------------------------------
000331  3               
000331  3               dbox13:
000331  3               	ldy #0
000331  3               	lda (z80_hl),y		; get character.
000331  3               	inc z80_l		; next one.
000331  3               	bne :+
000331  3               	inc z80_h
000331  3               :
000331  3               	cmp #','		; another line?
000331  3               	bne :+
000331  3               	jmp dbox2		; yes, do next line.
000331  3               :
000331  3               	cmp #13			; another line?
000331  3               	bne :+
000331  3               	jmp dbox2		; yes, do next line.
000331  3               :
000331  3               
000331  3               	bpl :+			; end of message?
000331  3               	jmp dbox11		; yes, finish message.
000331  3               :
000331  3               	jmp dbox13
000331  3               dbox15:
000331  3               	lda TmpAddr		; pop message pointer from the stack.
000331  3               	sta z80_h
000331  3               	lda TmpAddr+1
000331  3               	sta z80_l
000331  3               	rts
000331  3               
000331  3               ;------------------------------------------------------
000331  3               ; Invert bar
000331  3               ;------------------------------------------------------
000331  3               
000331  3               dbar:
000331  3               	lda blft		; box left.
000331  3               	sta dispx		; set display coordinate.
000331  3               	jsr gprad		; get printing address.
000331  3               
000331  3               	lda bwid		; box width.
000331  3               	sta z80_c		; loop counter in c.
000331  3               	lda z80_h
000331  3               	sta z80_d		; store screen address high byte.
000331  3               dbar1:
000331  3               	ldx #7			; pixel height in b.
000331  3               dbar0:
000331  3               	ldy scrtab,x
000331  3               	lda (scraddr),y		; get screen byte.
000331  3               	eor #255		; reverse all bits.
000331  3               	sta (scraddr),y		; write back to screen.
000331  3               	dex			; next line down.
000331  3               	bpl dbar0		; draw rest of character.
000331  3               
000331  3               	inc scraddr		; one char right.
000331  3               	dec z80_c		; decrement character counter.
000331  3               	bne dbar1		; repeat for whole line.
000331  3               	rts
000331  3               
000331  3               ;------------------------------------------------------
000331  3               ; Point to object
000331  3               ;
000331  3               ; Input:
000331  3               ;  combyt
000331  3               ;
000331  3               ; Output:
000331  3               ;  A = object number, A=255 if already in possession
000331  3               ;------------------------------------------------------
000331  3               
000331  3               invdis:
000331  3               	lda z80_l		; store message text pointer.
000331  3               	pha
000331  3               	lda z80_h
000331  3               	pha
000331  3               	lda combyt		; object number.
000331  3               	inc combyt		; ready for next one.
000331  3               	jsr gotob		; check if we have object.
000331  3               	tay
000331  3               	pla
000331  3               	sta z80_h
000331  3               	pla
000331  3               	sta z80_l
000331  3               	tya
000331  3               	rts
000331  3               
000331  3               ;------------------------------------------------------
000331  3               ; Find option selected.
000331  3               ;
000331  3               ; Input:
000331  3               ;  -
000331  3               ;
000331  3               ; Output:
000331  3               ;  OPT = selected object
000331  3               ;------------------------------------------------------
000331  3               
000331  3               fopt:
000331  3               	lda dispy
000331  3               	sec
000331  3               	sbc btop		; find selected option.
000331  3               	sta tmp+2		; option selected in b register.
000331  3               	inc tmp+2
000331  3               
000331  3               	lda #0			; set to first item.
000331  3               	sta combyt		; object number.
000331  3               fopt0:
000331  3               	jsr fobj		; find next object in inventory.
000331  3               	dec tmp+2
000331  3               	bne fopt0		; repeat for relevant steps down the list.
000331  3               
000331  3               	lda combyt		; get option.
000331  3               	sta varopt		; store the option.
000331  3               	dec varopt		; one less, due to where we increment combyt.
000331  3               	jmp redraw		; redraw the screen.
000331  3               fobj:
000331  3               	ldy combyt		; object number.
000331  3               	inc combyt		; ready for next item.
000331  3               	tya
000331  3               	jsr gotob		; do we have this item?
000331  3               	cmp #255
000331  3               	bne :+
000331  3               	rts
000331  3               :
000331  3               	jmp fobj		; yes, it's on the list.
000331  3               
000331  3               ;bwid:	.byte 0              ; box/menu width.
000331  3               ;blen:	.byte 0              ; box/menu height.
000331  3               ;btop:	.byte 0              ; box coordinates.
000331  3               ;blft:	.byte 0
000331  3               .endif
000331  3               
000331  3               ;----------------------------------------------------
000331  3               ; Wait for keypress.
000331  3               ;----------------------------------------------------
000331  3               
000331  3               prskey:
000331  3  98           	tya
000332  3  48           	pha
000333  3               prsloop:
000333  3  20 97 03     	jsr vsync
000336  3  20 71 FE     	jsr READKEY
000339  3  C0 FF        	cpy #255
00033B  3  F0 F6        	beq prsloop		; wait until key pressed
00033D  3  20 FE 0D     	jsr joykey
000340  3  68           	pla
000341  3  A8           	tay
000342  3  60           	rts
000343  3               
000343  3               ;----------------------------------------------------
000343  3               ; Delay routine 1/50 sec
000343  3               ;
000343  3               ; Wait 1/60 sec = 16666 usec
000343  3               ; Wait 208 x 16 =  3328 usec
000343  3               ;                 19994 usec
000343  3               ; rts           =     6 usec
000343  3               ; Total         = 20000 usec
000343  3               ;----------------------------------------------------
000343  3               
000343  3               delay:
000343  3  85 rr        	sta xtmp
000345  3               del_loop:
000345  3  20 66 FE     	jsr SCRSYNC		; wait for flyback
000348  3               
000348  3  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
00034A  3               delay1:
00034A  3  61 80        	adc ($80,x)		;	 6 usec
00034C  3  61 80        	adc ($80,x)		;	 6 usec
00034E  3  88           	dey			;	 2 usec
00034F  3  D0 F9        	bne delay1		;	 2 usec
000351  3  EA           	nop			; 2 usec
000352  3  EA           	nop			; 2 usec
000353  3               				; tot: 20000 usec
000353  3  C6 rr        	dec xtmp
000355  3  D0 EE        	bne del_loop
000357  3  60           	rts
000358  3               
000358  3               ;----------------------------------------------------
000358  3               ; Clear sprite table.
000358  3               ;
000358  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
000358  3               ;----------------------------------------------------
000358  3               
000358  3               xspr:
000358  3  A9 FF        	lda #255		; clear byte.
00035A  3  A2 00        	ldx #0			; length of table.
00035C  3               xspr0:
00035C  3  9D 56 17     	sta sprtab,x		; sprite table.
00035F  3  E8           	inx			; move to next byte.
000360  3  E0 CC        	cpx #SPRBUF
000362  3  D0 F8        	bne xspr0		; repeat for rest of table.
000364  3  60           	rts
000365  3               
000365  3               ;-------------------------------------------------------------
000365  3               ; Initialise all objects.
000365  3               ;
000365  3               ; Reset current room,y,x to start room,y,x for all objects
000365  3               ;-------------------------------------------------------------
000365  3               
000365  3               .if oflag
000365  3               iniob:
000365  3  A9 A7        	lda #<objdta 		; objects table.
000367  3  85 68        	sta z80_x
000369  3  A9 79        	lda #>objdta
00036B  3  85 69        	sta z80_i
00036D  3               
00036D  3  AE 2C 03     	ldx numob 		; number of objects in the game.
000370  3               iniob0:
000370  3  A0 23        	ldy #35
000372  3  B1 68        	lda (z80_ix),y 		; start screen.
000374  3  A0 20        	ldy #32
000376  3  91 68        	sta (z80_ix),y 		; set start screen.
000378  3               
000378  3  A0 24        	ldy #36
00037A  3  B1 68        	lda (z80_ix),y 		; find start y.
00037C  3  A0 21        	ldy #33
00037E  3  91 68        	sta (z80_ix),y 		; set start y.
000380  3               
000380  3  A0 25        	ldy #37
000382  3  B1 68        	lda (z80_ix),y 		; get initial x.
000384  3  A0 22        	ldy #34
000386  3  91 68        	sta (z80_ix),y 		; set x coord.
000388  3               
000388  3  18           	clc 			; point to next object.
000389  3  A5 68        	lda z80_x
00038B  3  69 26        	adc #38			; distance between objects.
00038D  3  85 68        	sta z80_x
00038F  3  90 02        	bcc :+
000391  3  E6 69        	inc z80_i
000393  3               :
000393  3  CA           	dex 			; repeat.
000394  3  D0 DA        	bne iniob0
000396  3               
000396  3  60           	rts
000397  3               .endif
000397  3               
000397  3               ;-------------------------------------------------------------
000397  3               ; Screen synchronisation.
000397  3               ;
000397  3               ;  - read joystick/keyboard
000397  3               ;  - handle sound
000397  3               ;  - sync framerate with clock
000397  3               ;  - handle shrapnel every even frame
000397  3               ;-------------------------------------------------------------
000397  3               
000397  3               vsync:
000397  3  48           	pha
000398  3  98           	tya
000399  3  48           	pha
00039A  3  8A           	txa
00039B  3  48           	pha
00039C  3  20 FE 0D     	jsr joykey		; read joystick/keyboard.
00039F  3               vsync1:
00039F  3  AD 09 B8     	lda Timer2_High		; sync framerate with clock
0003A2  3  C9 FF        	cmp #$ff
0003A4  3  D0 F9        	bne vsync1
0003A6  3  A9 C3        	lda #>50000
0003A8  3  8D 09 B8     	sta Timer2_High
0003AB  3  A9 50        	lda #<50000
0003AD  3  8D 08 B8     	sta Timer2_Low
0003B0  3               
0003B0  3  A5 rr        	lda clock
0003B2  3  29 01        	and #1
0003B4  3  D0 03        	bne:+
0003B6  3  20 35 04     	jsr proshr		; handle shrapnel every even frame
0003B9  3               :
0003B9  3  AD D7 03     	lda sndtyp
0003BC  3  F0 13        	beq sndskip
0003BE  3               sndloop:
0003BE  3  AD 02 B0     	lda SpeakerBit		; handle sound
0003C1  3  AC D7 03     	ldy sndtyp
0003C4  3               sndwait:
0003C4  3  88           	dey
0003C5  3  D0 FD        	bne sndwait
0003C7  3  49 04        	eor #4
0003C9  3  8D 02 B0     	sta SpeakerBit
0003CC  3  CE D7 03     	dec sndtyp
0003CF  3  D0 ED        	bne sndloop
0003D1  3               sndskip:
0003D1  3  68           	pla
0003D2  3  AA           	tax
0003D3  3  68           	pla
0003D4  3  A8           	tay
0003D5  3  68           	pla
0003D6  3  60           	rts
0003D7  3               
0003D7  3  00           sndtyp:	.byte 0
0003D8  3               
0003D8  3               ;-----------------------------------------------
0003D8  3               ; Redraw the screen.
0003D8  3               ;
0003D8  3               ; Remove old copy of all sprites for redraw.
0003D8  3               ;-----------------------------------------------
0003D8  3               
0003D8  3               redraw:
0003D8  3               .if gflag
0003D8  3               	lda #$ff
0003D8  3               	sta andeor
0003D8  3               	lda #$00
0003D8  3               	sta andeor+1
0003D8  3               .endif
0003D8  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
0003DA  3  48           	pha
0003DB  3  A5 68        	lda z80_x
0003DD  3  48           	pha
0003DE  3               
0003DE  3  20 0F 0B     	jsr droom		; show screen layout.
0003E1  3               .if oflag
0003E1  3  20 39 06     	jsr shwob		; draw objects.
0003E4  3               .endif
0003E4  3               numsp0:
0003E4  3  A9 0C        	lda #NUMSPR		; sprites to draw.
0003E6  3  85 rr        	sta tmp
0003E8  3               
0003E8  3  A9 56        	lda #<sprtab		; sprite table.
0003EA  3  85 68        	sta z80_x
0003EC  3  A9 17        	lda #>sprtab
0003EE  3  85 69        	sta z80_i
0003F0  3               redrw0:
0003F0  3  A0 00        	ldy #0
0003F2  3  B1 68        	lda (z80_ix),y		; old sprite type.
0003F4  3  C9 FF        	cmp #255		; is it enabled?
0003F6  3  F0 0B        	beq redrw1 		; no, find next one.
0003F8  3               
0003F8  3  A0 03        	ldy #3
0003FA  3  B1 68        	lda (z80_ix),y 		; sprite y.
0003FC  3  C9 B1        	cmp #177		; beyond maximum?
0003FE  3  B0 03        	bcs redrw1		; yes, nothing to draw.
000400  3               
000400  3  20 1F 12     	jsr sspria		; show single sprite.
000403  3               redrw1:
000403  3  18           	clc			; next sprite.
000404  3  A5 68        	lda z80_x
000406  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
000408  3  85 68        	sta z80_x
00040A  3  90 02        	bcc :+
00040C  3  E6 69        	inc z80_i
00040E  3               :
00040E  3  C6 rr        	dec tmp			; repeat for remaining sprites.
000410  3  D0 DE        	bne redrw0
000412  3               rpblc1:
000412  3               ;	jsr dshrp		; redraw shrapnel.
000412  3               
000412  3               .if aflag
000412  3               	jsr rbloc		; draw blocks for this screen
000412  3               .endif
000412  3  68           	pla			; retrieve sprite pointer.
000413  3  85 68        	sta z80_x
000415  3  68           	pla
000416  3  85 69        	sta z80_i
000418  3               
000418  3  60           	rts
000419  3               
000419  3               ;----------------------------------------------------------------------
000419  3               ; Clear screen routine.
000419  3               ;
000419  3               ; Fill screenmem $8000-$97ff with ScrFillByte
000419  3               ;----------------------------------------------------------------------
000419  3               
000419  3               cls:
000419  3  A9 80        	lda #>ScreenAddr		; screen address.
00041B  3  8D 25 04     	sta clsloop+2
00041E  3  AD 59 18     	lda andeor+1
000421  3               .if iflag
000421  3               	eor #$ff
000421  3               .endif
000421  3  A0 00        	ldy #0
000423  3               clsloop:
000423  3  99 00 80     	sta ScreenAddr,y
000426  3  C8           	iny
000427  3  D0 FA        	bne clsloop
000429  3  EE 25 04     	inc clsloop+2
00042C  3  AE 25 04     	ldx clsloop+2
00042F  3  E0 98        	cpx #>(ScreenAddr+$1800)
000431  3  D0 F0        	bne clsloop
000433  3  60           	rts
000434  3               
000434  3               ;----------------------------------------------------------------------
000434  3               ; Atomic palette is static
000434  3               ;----------------------------------------------------------------------
000434  3               
000434  3               setpal:
000434  3  60           	rts
000435  3               
000435  3               ;----------------------------------------------------------------------
000435  3               ; FODDER check
000435  3               ;----------------------------------------------------------------------
000435  3               
000435  3               .if pflag .or dflag
000435  3               fdchk:
000435  3               	cmp #FODDER 		; is it fodder?
000435  3               	beq :+
000435  3               	rts 			; no.
000435  3               :
000435  3               	lda #0			; wipe fodder in MAP
000435  3               	ldy #0
000435  3               	sta (bufaddr),y 	; rewrite block type.
000435  3               
000435  3               	lda dispx		; x=x/8
000435  3               	pha
000435  3               	lsr a
000435  3               	lsr a
000435  3               	lsr a
000435  3               	sta dispx
000435  3               
000435  3               	lda dispy		; y=y/8
000435  3               	pha
000435  3               	lsr a
000435  3               	lsr a
000435  3               	lsr a
000435  3               	sta dispy
000435  3               
000435  3               	lda #0 			; block to write.
000435  3               	jsr pattr 		; write block.
000435  3               
000435  3               	pla
000435  3               	sta dispy
000435  3               	pla
000435  3               	sta dispx
000435  3               	rts
000435  3               .endif
000435  3               
000435  3               ;----------------------------------------------------
000435  3               ; Scrolly text and puzzle variables.
000435  3               ;----------------------------------------------------
000435  3               
000435  3               .if sflag
000435  3               txtbit:	.byte 128		; bit to write.
000435  3               txtwid:	.byte 16		; width of ticker message.
000435  3               txtpos:	.word msgdat
000435  3               txtini:	.word msgdat
000435  3               txtscr:	.word ScreenAddr
000435  3               .endif
000435  3               
000435  3               ;----------------------------------------------------
000435  3               ; Specialist routines.
000435  3               ; Process shrapnel.
000435  3               ;----------------------------------------------------
000435  3               proshr:
000435  3               .if pflag
000435  3               	lda #<SHRAPN		; table.
000435  3               	sta z80_x
000435  3               	lda #>SHRAPN
000435  3               	sta z80_i
000435  3               
000435  3               	lda #NUMSHR		; shrapnel pieces to process.
000435  3               	sta shrctr
000435  3               prosh0:
000435  3               	ldy #0
000435  3               	lda (z80_ix),y		; on/off marker.
000435  3               	asl a
000435  3               proshx:
000435  3               	bcs :+
000435  3               	jsr prosh1 		; on, so process it.
000435  3               :
000435  3               	clc
000435  3               	lda z80_x
000435  3               	adc #SHRSIZ
000435  3               	sta z80_x
000435  3               	bcc :+
000435  3               	inc z80_i
000435  3               :
000435  3               	dec shrctr		; round again.
000435  3               	bne prosh0
000435  3               .endif
000435  3               .if sflag
000435  3               	jsr scrly
000435  3               .endif
000435  3  60           	rts
000436  3               
000436  3               .if pflag
000436  3               ;shrctr:	.byte 0
000436  3               
000436  3               ;----------------------------------------------------
000436  3               ; Proces shrapnel piece
000436  3               ;----------------------------------------------------
000436  3               
000436  3               prosh1:
000436  3               	jsr plot 		; delete the pixel.
000436  3               
000436  3               	lda #<shrptr		; shrapnel routine pointers.
000436  3               	sta z80_l
000436  3               	lda #>shrptr
000436  3               	sta z80_h
000436  3               
000436  3               	ldy #0
000436  3               	lda (z80_ix),y		; restore shrapnel type.
000436  3               	jsr prosh2 		; run the routine.
000436  3               	jsr chkxy		; check x and y are good before we redisplay.
000436  3               
000436  3               	lda #<SHRSIZ 		; distance to next.
000436  3               	sta z80_e
000436  3               	lda #>SHRSIZ
000436  3               	sta z80_d
000436  3               	rts
000436  3               
000436  3               ;----------------------------------------------------
000436  3               ; Run the routine
000436  3               ;----------------------------------------------------
000436  3               
000436  3               prosh2:
000436  3               	asl a 			; 2 bytes per address.
000436  3               	tay
000436  3               	lda shrptr,y
000436  3               	sta z80_l
000436  3               	lda shrptr+1,y 		; fetch high byte from table.
000436  3               	sta z80_h
000436  3               	jmp (z80_hl) 		; jump to routine.
000436  3               
000436  3               ;----------------------------------------------------
000436  3               ; Paricle routine table
000436  3               ;----------------------------------------------------
000436  3               
000436  3               shrptr:	.word laser		; laser.
000436  3               	.word trail		; vapour trail.
000436  3               	.word shrap		; shrapnel from explosion.
000436  3               	.word dotl		; horizontal starfield left.
000436  3               	.word dotr		; horizontal starfield right.
000436  3               	.word dotu		; vertical starfield up.
000436  3               	.word dotd		; vertical starfield down.
000436  3               	.word ptcusr		; user particle.
000436  3               
000436  3               ;----------------------------------------------------
000436  3               ; Explosion shrapnel.
000436  3               ;----------------------------------------------------
000436  3               
000436  3               shrap:
000436  3               	ldy #1
000436  3               	lda (z80_ix),y 		; get the angle.
000436  3               	clc
000436  3               	adc #<shrsin		; shrapnel sine table.
000436  3               	sta z80_l
000436  3               	lda #>shrsin
000436  3               	adc #0
000436  3               	sta z80_h
000436  3               
000436  3               	ldy #0
000436  3               	lda (z80_hl),y 		; fetch value from table.
000436  3               	sta z80_e
000436  3               	inc z80_l 		; next byte of table.
000436  3               	bne :+
000436  3               	inc z80_h
000436  3               :
000436  3               	ldy #0
000436  3               	lda (z80_hl),y		; fetch value from table.
000436  3               	sta z80_d
000436  3               	inc z80_l		; next byte of table.
000436  3               	bne :+
000436  3               	inc z80_h
000436  3               :
000436  3               	ldy #0
000436  3               	lda (z80_hl),y 		; fetch value from table.
000436  3               	sta z80_c
000436  3               	inc z80_l 		; next byte of table.
000436  3               	bne :+
000436  3               	inc z80_h
000436  3               :
000436  3               	ldy #0
000436  3               	lda (z80_hl),y 		; fetch value from table.
000436  3               	sta z80_b
000436  3               
000436  3               	ldy #2
000436  3               	lda (z80_ix),y 		; x coordinate in hl.
000436  3               	clc
000436  3               	adc z80_e		; add sine lb
000436  3               	sta (z80_ix),y		; store new coordinate lb.
000436  3               	ldy #3
000436  3               	lda (z80_ix),y
000436  3               	adc z80_d		; add sine hb
000436  3               	sta (z80_ix),y		; store new coordinate hb.
000436  3               
000436  3               	ldy #4
000436  3               	lda (z80_ix),y	 	; y coordinate in hl.
000436  3               	clc
000436  3               	adc z80_c		; add cosine lb
000436  3               	sta (z80_ix),y		; store new coordinate lb.
000436  3               	ldy #5
000436  3               	lda (z80_ix),y
000436  3               	adc z80_b		; add cosine lb
000436  3               	sta (z80_ix),y		; store new coordinate hb.
000436  3               
000436  3               	rts
000436  3               
000436  3               ;----------------------------------------------------
000436  3               ; Move dots
000436  3               ;----------------------------------------------------
000436  3               
000436  3               dotl:
000436  3               	ldy #5
000436  3               	lda (z80_ix),y
000436  3               	sec
000436  3               	sbc #1		 	; move left.
000436  3               	sta (z80_ix),y
000436  3               	rts
000436  3               dotr:
000436  3               	ldy #5
000436  3               	lda (z80_ix),y
000436  3               	clc
000436  3               	adc #1		 	; move left.
000436  3               	sta (z80_ix),y
000436  3               	rts
000436  3               dotu:
000436  3               	ldy #3
000436  3               	lda (z80_ix),y
000436  3               	sec
000436  3               	sbc #1		 	; move up.
000436  3               	sta (z80_ix),y
000436  3               	rts
000436  3               dotd:
000436  3               	ldy #3
000436  3               	lda (z80_ix),y
000436  3               	clc
000436  3               	adc #1			; move down.
000436  3               	sta (z80_ix),y
000436  3               	rts
000436  3               
000436  3               ;----------------------------------------------------
000436  3               ; Check if coordinates are ok before redrawing at new position.
000436  3               ;
000436  3               ; left:   X>L		X=L	Ok
000436  3               ; right:  R+15>X	X=R	Ok
000436  3               ; top:    Y>T		Y=T	Ok
000436  3               ; bottom: B+15>Y	Y=B	Ok
000436  3               ;----------------------------------------------------
000436  3               
000436  3               chkxy:
000436  3               
000436  3               ; top:    Y>T		Y=T	Ok
000436  3               
000436  3               	ldy #3
000436  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000436  3               	cmp wntopx		; window top.
000436  3               	bcs :+			; compare with top window limit.
000436  3               	jmp kilshr		; out of window, kill shrapnel.
000436  3               :
000436  3               ; left:   X>L		X=L	Ok
000436  3               
000436  3               	ldy #5
000436  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000436  3               	cmp wnlftx		; left edge.
000436  3               	bcs :+			; compare with left window limit.
000436  3               	jmp kilshr		; out of window, kill shrapnel.
000436  3               :
000436  3               ; bottom: B+15>Y	Y=B	Ok
000436  3               
000436  3               	lda wnbotx		; point to bottom.
000436  3               	clc
000436  3               	adc #15
000436  3               	ldy #3
000436  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
000436  3               	bcs :+			; compare with shrapnel x coordinate.
000436  3               	jmp kilshr		; off screen, kill shrapnel..
000436  3               :
000436  3               ; right:  R+15>X	X=R	Ok
000436  3               
000436  3               	lda wnrgtx		; point to right edge.
000436  3               	clc
000436  3               	adc #15
000436  3               	ldy #5
000436  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
000436  3               	bcs :+			; compare with window limit.
000436  3               	jmp kilshr		; off screen, kill shrapnel.
000436  3               :
000436  3               
000436  3               ;----------------------------------------------------
000436  3               ; Drop through.
000436  3               ; Display shrapnel.
000436  3               ;----------------------------------------------------
000436  3               
000436  3               plot:
000436  3               	ldy #3
000436  3               	lda (z80_ix),y		; y integer.
000436  3               	sta dispy	 	; workspace coordinates.
000436  3               	ldy #5
000436  3               	lda (z80_ix),y	 	; x integer.
000436  3               	sta dispx 		; workspace coordinates.
000436  3               
000436  3               	ldy #0
000436  3               	lda (z80_ix),y 		; type.
000436  3               	bne :+			; is it a laser?
000436  3               	jmp plot1 		; yes, draw laser instead.
000436  3               :
000436  3               plot0:
000436  3               	lda dispx		; which pixel within byte do we
000436  3               	and #7			; want to set first?
000436  3               	tay
000436  3               	lda dots,y 		; table of small pixel positions.
000436  3               	sta z80_e 		; get value.
000436  3               
000436  3               	jsr scadd 		; screen address.
000436  3               	ldy #0
000436  3               	lda (scraddr),y		; see what's already there.
000436  3               	eor z80_e
000436  3               	sta (scraddr),y 	; put back on screen.
000436  3               	rts
000436  3               
000436  3               plot1:
000436  3               	jsr scadd 		; screen address.
000436  3               	ldy #0
000436  3               	lda (scraddr),y 	; fetch byte there.
000436  3               	eor #255 		; toggle all bits.
000436  3               	sta (scraddr),y 	; new byte.
000436  3               	rts
000436  3               
000436  3               ;----------------------------------------------------
000436  3               ; Switch off shrapnel
000436  3               ;----------------------------------------------------
000436  3               
000436  3               kilshr:
000436  3               	lda #128
000436  3               	ldy #0
000436  3               	sta (z80_ix),y	; switch off shrapnel.
000436  3               	rts
000436  3               
000436  3               ;----------------------------------------------------
000436  3               ; Sine/cosine table
000436  3               ;----------------------------------------------------
000436  3               
000436  3               shrsin:	.word 0,1024,391,946,724,724,946,391
000436  3               	.word 1024,0,946,65144,724,64811,391,64589
000436  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
000436  3               	.word 64512,0,64589,391,64811,724,65144,946
000436  3               
000436  3               ;----------------------------------------------------
000436  3               ; Create trail
000436  3               ;----------------------------------------------------
000436  3               
000436  3               trail:
000436  3               	ldy #1
000436  3               	lda (z80_ix),y 	; time remaining.
000436  3               	sec
000436  3               	sbc #1
000436  3               	sta (z80_ix),y
000436  3               	bne :+
000436  3               	jmp trailk		; time to switch it off.
000436  3               :
000436  3               	jsr qrand		; get a random number.
000436  3               	lsr a 			; x or y axis?
000436  3               	bcc :+
000436  3               	jmp trailv		; use y.
000436  3               :
000436  3               ; Trail horizontal
000436  3               
000436  3               	lsr a 			; which direction?
000436  3               	bcc :+
000436  3               	jmp traill		; go left.
000436  3               :
000436  3               ; Trail right
000436  3               
000436  3               	ldy #5
000436  3               	lda (z80_ix),y
000436  3               	clc
000436  3               	adc #1	 		; go right.
000436  3               	sta (z80_ix),y
000436  3               	rts
000436  3               
000436  3               ; Trail left
000436  3               
000436  3               traill:
000436  3               	ldy #5
000436  3               	lda (z80_ix),y
000436  3               	sec
000436  3               	sbc #1 			; go left.
000436  3               	sta (z80_ix),y
000436  3               	rts
000436  3               
000436  3               ; Trail vertical
000436  3               
000436  3               trailv:
000436  3               	lsr a		 	; which direction?
000436  3               	bcc :+
000436  3               	jmp trailu		; go up.
000436  3               :
000436  3               ; Trail down
000436  3               
000436  3               	ldy #3
000436  3               	lda (z80_ix),y
000436  3               	clc
000436  3               	adc #1 			; go down.
000436  3               	sta (z80_ix),y
000436  3               	rts
000436  3               
000436  3               ; Trail up
000436  3               
000436  3               trailu:
000436  3               	ldy #3
000436  3               	lda (z80_ix),y
000436  3               	sec
000436  3               	sbc #1 			; go up.
000436  3               	sta (z80_ix),y
000436  3               	rts
000436  3               
000436  3               ; Kill trail
000436  3               
000436  3               trailk:
000436  3               	lda #200		; set off-screen to kill vapour trail.
000436  3               	ldy #3
000436  3               	sta (z80_ix),y
000436  3               	rts
000436  3               
000436  3               ;----------------------------------------------------
000436  3               ; Create laser beam
000436  3               ;----------------------------------------------------
000436  3               
000436  3               laser:
000436  3               	ldy #1
000436  3               	lda (z80_ix),y 		; direction.
000436  3               	ror a 			; left or right?
000436  3               	bcs :+
000436  3               	jmp laserl		; move left.
000436  3               :
000436  3               ; Laser right
000436  3               
000436  3               	lda #8			; distance to travel.
000436  3               	sta z80_b
000436  3               	jmp laserm		; move laser.
000436  3               
000436  3               ; Laser left
000436  3               
000436  3               laserl:
000436  3               	lda #248		; distance to travel.
000436  3               	sta z80_b
000436  3               laserm:
000436  3               	ldy #5
000436  3               	lda (z80_ix),y		; x position.
000436  3               	clc
000436  3               	adc z80_b		; add distance.
000436  3               	sta (z80_ix),y		; set new x coordinate.
000436  3               
000436  3               ; Test new block.
000436  3               
000436  3               	sta dispx 		; set x for block collision detection purposes.
000436  3               	ldy #3
000436  3               	lda (z80_ix),y 		; get y.
000436  3               	sta dispy		; set coordinate for collision test.
000436  3               	jsr tstbl 		; get block type there.
000436  3               	cmp #WALL		; is it solid?
000436  3               	bne :+
000436  3               	jmp trailk		; yes, it cannot pass.
000436  3               :
000436  3               .if pflag .or dflag
000436  3                       cmp #FODDER             ; is it fodder?
000436  3                       bne :+
000436  3                       jsr fdchk               ; remove fodder block.
000436  3                       jmp trailk              ; destroy laser.
000436  3               :
000436  3               .endif
000436  3                       rts                     ; no, ignore it.
000436  3               
000436  3               ;----------------------------------------------------
000436  3               ; Dots mask
000436  3               ;----------------------------------------------------
000436  3               
000436  3               dots:	.byte 128,64,32,16,8,4,2,1
000436  3               
000436  3               
000436  3               ;----------------------------------------------------
000436  3               ; Plot, preserving de.
000436  3               ;----------------------------------------------------
000436  3               
000436  3               plotde:
000436  3               	lda z80_d 		; put de on stack.
000436  3               	pha
000436  3               	lda z80_e
000436  3               	pha
000436  3               
000436  3               	jsr plot 		; plot pixel.
000436  3               
000436  3               	pla			; restore de from stack.
000436  3               	sta z80_e
000436  3               	pla
000436  3               	sta z80_d
000436  3               
000436  3               	rts
000436  3               
000436  3               ;----------------------------------------------------
000436  3               ; Shoot a laser.
000436  3               ;----------------------------------------------------
000436  3               
000436  3               shoot:
000436  3               	sta z80_c		; store direction in c register.
000436  3               	ldy #8
000436  3               	lda (z80_ix),y 		; y coordinate.
000436  3               	clc
000436  3               shoot1:
000436  3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
000436  3               	sta z80_l 		; puty y coordinate in l.
000436  3               
000436  3               	ldy #9
000436  3               	lda (z80_ix),y 		; x coordinate in h.
000436  3               	sta z80_h
000436  3               
000436  3               	lda z80_i		; store pointer to sprite.
000436  3               	pha
000436  3               	lda z80_x
000436  3               	pha
000436  3               
000436  3               	jsr fpslot 		; find particle slot.
000436  3               	bcs :+
000436  3               	jmp vapou2		; failed, restore ix.
000436  3               :
000436  3               	lda #0
000436  3               	ldy #0
000436  3               	sta (z80_ix),y 		; set up a laser.
000436  3               
000436  3               	lda z80_c
000436  3               	ldy #1
000436  3               	sta (z80_ix),y 		; set the direction.
000436  3               
000436  3               	lda z80_l
000436  3               	ldy #3
000436  3               	sta (z80_ix),y		; set y coordinate.
000436  3               
000436  3               	ror z80_c		; check direction we want.
000436  3               	bcc :+
000436  3               	jmp shootr		; shoot right.
000436  3               :
000436  3               	lda z80_h		; X position.
000436  3               shoot0:
000436  3               	and #248		; align on character boundary.
000436  3               	ldy #5
000436  3               	sta (z80_ix),y		; set x coordinate.
000436  3               	jmp vapou0 		; draw first image.
000436  3               shootr:
000436  3               	lda z80_h		; x position.
000436  3               	clc
000436  3               	adc #15			; look right.
000436  3               	jmp shoot0		; align and continue.
000436  3               
000436  3               ;----------------------------------------------------
000436  3               ; Create a bit of vapour trail.
000436  3               ;----------------------------------------------------
000436  3               
000436  3               vapour:
000436  3               	lda z80_i		; store pointer to sprite.
000436  3               	pha
000436  3               	lda z80_x
000436  3               	pha
000436  3               
000436  3               	ldy #8
000436  3               	lda (z80_ix),y 		; y coordinate.
000436  3               	clc
000436  3               vapou3:
000436  3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
000436  3               	sta z80_l
000436  3               
000436  3               	ldy #9
000436  3               	lda (z80_ix),y 		; x coordinate.
000436  3               	adc #7
000436  3               	sta z80_h
000436  3               
000436  3               	jsr fpslot 		; find particle slot.
000436  3               	bcc :+
000436  3               	jmp vapou1		; no, we can use it.
000436  3               :
000436  3               vapou2:
000436  3               	pla
000436  3               	sta z80_x
000436  3               	pla
000436  3               	sta z80_i
000436  3               	rts
000436  3               vapou1:
000436  3               	lda z80_l
000436  3               	ldy #3
000436  3               	sta (z80_ix),y		; set up y.
000436  3               
000436  3               	lda z80_h
000436  3               	ldy #5
000436  3               	sta (z80_ix),y 		; set up x coordinate.
000436  3               
000436  3               	jsr qrand		; get quick random number.
000436  3               	and #15			; random time.
000436  3               	clc
000436  3               	adc #15			; minimum time on screen.
000436  3               	ldy #1
000436  3               	sta (z80_ix),y		; set time on screen.
000436  3               
000436  3               	lda #1
000436  3               	ldy #0
000436  3               	sta (z80_ix),y		; define particle as vapour trail.
000436  3               vapou0:
000436  3               	jsr chkxy		; plot first position.
000436  3               	jmp vapou2
000436  3               
000436  3               ;----------------------------------------------------
000436  3               ; Create a user particle.
000436  3               ;----------------------------------------------------
000436  3               
000436  3               ptusr:
000436  3               	sta z80_f		; store timer.
000436  3               
000436  3               	ldy #8
000436  3               	lda (z80_ix),y 		; y coordinate.
000436  3               	clc
000436  3               	adc #7			; mid-point of sprite.
000436  3               	sta z80_l
000436  3               
000436  3               	ldy #9
000436  3               	lda (z80_ix),y 		; x coordinate.
000436  3               	clc
000436  3               	adc #7			; mid-point of sprite.
000436  3               	sta z80_h
000436  3               
000436  3               	jsr fpslot 		; find particle slot.
000436  3               	bcs ptusr1
000436  3               	rts 			; out of slots, can't generate anything.
000436  3               ptusr1:
000436  3               	lda z80_l
000436  3               	ldy #3
000436  3               	sta (z80_ix),y 		; set up y.
000436  3               
000436  3               	lda z80_h
000436  3               	ldy #5
000436  3               	sta (z80_ix),y		; set up x coordinate.
000436  3               
000436  3               	lda z80_f 		; restore timer.
000436  3               	ldy #1
000436  3               	sta (z80_ix),y		; set time on screen.
000436  3               
000436  3               	lda #7
000436  3               	ldy #0
000436  3               	sta (z80_ix),y		; define particle as user particle.
000436  3               
000436  3               	jmp chkxy		; plot first position.
000436  3               
000436  3               ;----------------------------------------------------
000436  3               ; Create a vertical or horizontal star.
000436  3               ;----------------------------------------------------
000436  3               
000436  3               star:
000436  3               	lda z80_i		; store pointer to sprite.
000436  3               	pha
000436  3               	lda z80_x
000436  3               	pha
000436  3               
000436  3               	jsr fpslot 		; find particle slot.
000436  3               	bcs star7		; found one we can use.
000436  3               star0:
000436  3               	pla 			; restore sprite pointer.
000436  3               	sta z80_x
000436  3               	pla
000436  3               	sta z80_i
000436  3               	rts 			; out of slots, can't generate anything.
000436  3               star7:
000436  3               	lda z80_c		; direction.
000436  3               	and #3 			; is it left?
000436  3               	bne :+
000436  3               	jmp star1 		; yes, it's left.
000436  3               :
000436  3               	cmp #1 			; is it right?
000436  3               	bne :+
000436  3               	jmp star2 		; yes, it's right.
000436  3               :
000436  3               	cmp #2 			; is it up?
000436  3               	bne :+
000436  3               	jmp star3 		; yes, it's up.
000436  3               :
000436  3               	ldy wntopx 		; get edge of screen.
000436  3               	iny			; down one pixel.
000436  3               	tya
000436  3               star8:
000436  3               	ldy #3
000436  3               	sta (z80_ix),y 		; set y coord.
000436  3               	jsr qrand 		; get quick random number.
000436  3               star9:
000436  3               	ldy #5
000436  3               	sta (z80_ix),y		; set x position.
000436  3               
000436  3               	lda z80_c		; direction.
000436  3               	and #3			; zero to three.
000436  3               	clc
000436  3               	adc #3			; 3 to 6 for starfield.
000436  3               	ldy #0
000436  3               	sta (z80_ix),y		; define particle as star.
000436  3               	jsr chkxy		; plot first position.
000436  3               	jmp star0
000436  3               star1:
000436  3               	jsr qrand		; get quick random number.
000436  3               	ldy #3
000436  3               	sta (z80_ix),y 		; set y coord.
000436  3               
000436  3               	lda wnrgtx 		; get edge of screen.
000436  3               	clc
000436  3               	adc #15			; add width of sprite minus 1.
000436  3               	jmp star9
000436  3               star2:
000436  3               	jsr qrand 		; get quick random number.
000436  3               	ldy #3
000436  3               	sta (z80_ix),y		; set y coord.
000436  3               
000436  3               	lda wnlftx		; get edge of screen.
000436  3               	jmp star9
000436  3               star3:
000436  3               	lda wnbotx 		; get edge of screen.
000436  3               	clc
000436  3               	adc #15 		; height of sprite minus one pixel.
000436  3               	jmp star8
000436  3               
000436  3               ;----------------------------------------------------
000436  3               ; Find particle slot for lasers or vapour trail.
000436  3               ; can't use alternate accumulator.
000436  3               ;----------------------------------------------------
000436  3               
000436  3               fpslot:
000436  3               	lda #<SHRAPN 		; shrapnel table.
000436  3               	sta z80_x
000436  3               	lda #>SHRAPN
000436  3               	sta z80_i
000436  3               
000436  3               	lda #NUMSHR		; number of pieces in table.
000436  3               	sta z80_b
000436  3               fpslt0:
000436  3               	ldy #0
000436  3               	lda (z80_ix),y		; get type.
000436  3               	asl a  			; is this slot in use?
000436  3               	bcc :+
000436  3               	rts			; no, we can use it.
000436  3               :
000436  3               	clc			; point to more shrapnel.
000436  3               	lda z80_x
000436  3               	adc #SHRSIZ
000436  3               	sta z80_x
000436  3               	bcc :+
000436  3               	inc z80_i
000436  3               :
000436  3               	dec z80_b		; repeat for all shrapnel.
000436  3               	bne fpslt0
000436  3               
000436  3               	clc
000436  3               	rts 			; out of slots, can't generate anything.
000436  3               
000436  3               ;----------------------------------------------------
000436  3               ; Create an explosion at sprite position.
000436  3               ;----------------------------------------------------
000436  3               
000436  3               explod:
000436  3               	sta z80_c 		; particles to create.
000436  3               
000436  3               	lda z80_i 		; store pointer to sprite.
000436  3               	pha
000436  3               	lda z80_x
000436  3               	pha
000436  3               
000436  3               	ldy #8
000436  3               	lda (z80_ix),y 		; y coordinate.
000436  3               	sta z80_l
000436  3               	ldy #9
000436  3               	lda (z80_ix),y		; x coordinate.
000436  3               	sta z80_h
000436  3               
000436  3               	lda #<SHRAPN		; shrapnel table.
000436  3               	sta z80_x
000436  3               	lda #>SHRAPN
000436  3               	sta z80_i
000436  3               
000436  3               	lda #NUMSHR		; number of pieces in table.
000436  3               	sta explcnt
000436  3               expld0:
000436  3               	ldy #0
000436  3               	lda (z80_ix),y		; get type.
000436  3               	asl a 			; is this slot in use?
000436  3               	bcs expld1		; no, we can use it.
000436  3               expld2:
000436  3               	clc
000436  3               	lda z80_x
000436  3               	adc #SHRSIZ
000436  3               	sta z80_x
000436  3               	bcc :+
000436  3               	inc z80_i
000436  3               :
000436  3               	dec explcnt		; repeat for all shrapnel.
000436  3               	bne expld0
000436  3               expld3:
000436  3               	pla			; restore sprite pointer.
000436  3               	sta z80_x
000436  3               	pla
000436  3               	sta z80_i
000436  3               	rts 			; out of slots, can't generate any more.
000436  3               
000436  3               expld1:
000436  3               	lda z80_c		; shrapnel counter.
000436  3               	and #15			; 0 to 15.
000436  3               	clc			; add to x.
000436  3               	adc z80_l
000436  3               	ldy #3
000436  3               	sta (z80_ix),y		; y coord.
000436  3               
000436  3               	lda seed3 		; crap random number.
000436  3               	and #15			; 0 to 15.
000436  3               	clc 			; add to y.
000436  3               	adc z80_h
000436  3               	ldy #5
000436  3               	sta (z80_ix),y		; x coord.
000436  3               
000436  3               	lda #2
000436  3               	ldy #0
000436  3               	sta (z80_ix),y		; switch it on.
000436  3               
000436  3               	jsr chkxy		; plot first position.
000436  3               	jsr qrand		; quick random angle.
000436  3               	and #60 		; keep within range.
000436  3               	ldy #1
000436  3               	sta (z80_ix),y		; angle.
000436  3               
000436  3               	dec z80_c		; one less piece of shrapnel to generate.
000436  3               	bne expld2 		; back to main explosion loop.
000436  3               	jmp expld3 		; restore sprite pointer and exit.
000436  3               
000436  3               ;explcnt:	.byte 0
000436  3               
000436  3               ;----------------------------------------------------
000436  3               ; Quick random
000436  3               ;----------------------------------------------------
000436  3               
000436  3               qrand:
000436  3               	jsr random		; r register.
000436  3               	eor seed3		; combine with seed.
000436  3               	sta seed3 		; new seed.
000436  3               	rts
000436  3               
000436  3               ;seed3:	.byte 0
000436  3               
000436  3               ;----------------------------------------------------
000436  3               ; Display all shrapnel.
000436  3               ;----------------------------------------------------
000436  3               
000436  3               dshrp:
000436  3               	lda #<plotde		; display routine.
000436  3               	sta proshx+1
000436  3               	lda #>plotde
000436  3               	sta proshx+2
000436  3               	jsr proshr		; process shrapnel.
000436  3               
000436  3               	lda #<prosh1		; processing routine.
000436  3               	sta proshx+1
000436  3               	lda #>prosh1
000436  3               	sta proshx+2
000436  3               	rts
000436  3               
000436  3               ;------------------------------------------------------
000436  3               ; Particle engine.
000436  3               ;
000436  3               ; Init particle data for 55 particles in SHRAPN table.
000436  3               ; Every particle has 6 bytes.
000436  3               ;
000436  3               ; global:	-
000436  3               ; local:	x,y,hl
000436  3               ; calls:	-
000436  3               ;------------------------------------------------------
000436  3               
000436  3               inishr:
000436  3               	lda #<SHRAPN 		; table.
000436  3               	sta z80_l
000436  3               	lda #>SHRAPN
000436  3               	sta z80_h
000436  3               
000436  3               	ldy #0
000436  3               	ldx #NUMSHR		; shrapnel pieces to process.
000436  3               inish0:
000436  3               	lda #255 		; kill the shrapnel.
000436  3               	sta (z80_hl),y
000436  3               
000436  3               	clc 			; point there.
000436  3               	lda z80_l
000436  3               	adc #SHRSIZ		; distance to next.
000436  3               	sta z80_l
000436  3               	bcc :+
000436  3               	inc z80_h
000436  3               :
000436  3               	dex
000436  3               	bne inish0 		; round again.
000436  3               	rts
000436  3               
000436  3               ;------------------------------------------------------
000436  3               ; Check for collision between laser and sprite.
000436  3               ;------------------------------------------------------
000436  3               
000436  3               lcol:
000436  3               	lda #<SHRAPN		; shrapnel table.
000436  3               	sta z80_l
000436  3               	lda #>SHRAPN
000436  3               	sta z80_h
000436  3               
000436  3               	lda #NUMSHR		; number of pieces in table.
000436  3               	sta z80_b
000436  3               lcol0:
000436  3               	ldy #0
000436  3               	lda (z80_hl),y 		; get type.
000436  3               	beq lcol1		; yes, check collision.
000436  3               lcol3:
000436  3               	clc			; point to more shrapnel.
000436  3               	lda z80_l
000436  3               	adc #SHRSIZ
000436  3               	sta z80_l
000436  3               	bcc :+
000436  3               	inc z80_h
000436  3               :
000436  3               	dec z80_b		; repeat for all shrapnel.
000436  3               	bne lcol0
000436  3               	rts 			; no collision, carry not set.
000436  3               lcol1:
000436  3               	ldy #3
000436  3               	lda (z80_hl),y		; get y.
000436  3               	sec
000436  3               	ldy #8
000436  3               	sbc (z80_ix),y		; subtract sprite y.
000436  3               lcolh:
000436  3               	cmp #SPR_HGT 		; within range?
000436  3               	bcc :+
000436  3               	jmp lcol2		; no, missed.
000436  3               :
000436  3               	ldy #5
000436  3               	lda (z80_hl),y 		; get x.
000436  3               	sec
000436  3               	ldy #9
000436  3               	sbc (z80_ix),y 		; subtract sprite y.
000436  3               	cmp #16			; within range?
000436  3               	bcs :+
000436  3               	jmp lcol4 		; yes, collision occurred.
000436  3               :
000436  3               lcol2:
000436  3               	jmp lcol3
000436  3               lcol4:
000436  3               	sec
000436  3               	rts 			; return with carry set for collision.
000436  3               .endif
000436  3               
000436  3               ;------------------------------------------------------
000436  3               ; Main game engine code starts here.
000436  3               ; After initialisation, mloop is the main loop
000436  3               ;------------------------------------------------------
000436  3               
000436  3               game:
000436  3               
000436  3               ; Set up screen address table.
000436  3               
000436  3               setsat:
000436  3  A9 00        	lda #<ScreenAddr		; start of screen.
000438  3  85 rr        	sta scraddr
00043A  3  A9 80        	lda #>ScreenAddr
00043C  3  85 rr        	sta scraddr+1
00043E  3               
00043E  3  A0 00        	ldy #0			; vertical lines on screen.
000440  3               setsa0:
000440  3  A5 rr        	lda scraddr
000442  3  99 00 9B     	sta SCADTB_lb,y		; write low byte.
000445  3  A5 rr        	lda scraddr+1
000447  3  C0 C0        	cpy #192		; vertical lines on screen.
000449  3  90 02        	bcc :+
00044B  3  09 F0        	ora #$F0		; plot sprites in rom if of screen
00044D  3               :
00044D  3  99 00 9C     	sta SCADTB_hb,y		; write high byte.
000450  3  20 08 13     	jsr nline		; next line down.
000453  3  C8           	iny			; next position in table.
000454  3  D0 EA        	bne setsa0
000456  3               
000456  3               ; Init graphics mode
000456  3               
000456  3  A9 F0        	lda #ScrMode		; graphics mode
000458  3  8D 00 B0     	sta ScrSelAddr 		; screen selection address
00045B  3  20 34 04     	jsr setpal 		; set up palette.
00045E  3               
00045E  3               ; Init AtoMMC joystick
00045E  3  20 38 0E     	jsr joyinit		; AtoMMC joystick on PORT B
000461  3               
000461  3               rpblc2:
000461  3               .if pflag
000461  3               	jsr inishr 		; initialise particle engine.
000461  3               .endif
000461  3               evintr:
000461  3  20 2E 26     	jsr evnt12 		; call intro/menu event.
000464  3               
000464  3  A9 02        	lda #WALL 		; write default property.
000466  3  A2 00        	ldx #0
000468  3               clrmap:
000468  3  9D 00 98     	sta MAP,x 		; block properties.
00046B  3  9D 00 99     	sta MAP+256,x
00046E  3  9D 00 9A     	sta MAP+512,x
000471  3  E8           	inx			; next byte.
000472  3  D0 F4        	bne clrmap
000474  3               .if oflag
000474  3  20 65 03     	jsr iniob 		; initialise objects.
000477  3               .endif
000477  3  A9 00        	lda #0			; put zero in accumulator.
000479  3  85 rr        	sta gamwon		; reset game won flag.
00047B  3               
00047B  3  20 E9 05     	jsr inisc 		; init the score.
00047E  3               mapst:
00047E  3  AD B8 18     	lda stmap 		; start position on map.
000481  3  8D 33 18     	sta roomtb		; set up position in table, if there is one.
000484  3               
000484  3               inipbl:
000484  3               .if aflag
000484  3               	lda #<eop		; reset blockpointer
000484  3               	sta pbptr
000484  3               	lda #>eop
000484  3               	sta pbptr+1
000484  3               .endif
000484  3  20 1B 14     	jsr initsc 		; set up first screen.
000487  3               
000487  3  A9 22        	lda #<ssprit 		; default to spare sprite in table.
000489  3  85 68        	sta z80_x
00048B  3  A9 18        	lda #>ssprit
00048D  3  85 69        	sta z80_i
00048F  3               evini:
00048F  3  20 2F 26     	jsr evnt13 		; initialisation.
000492  3               
000492  3               ; Two restarts.
000492  3               ; First restart - clear all sprites and initialise everything.
000492  3               
000492  3               rstrt:
000492  3  20 89 05     	jsr rsevt 		; restart events.
000495  3  20 58 03     	jsr xspr 		; clear sprite table.
000498  3  20 87 15     	jsr sprlst 		; fetch pointer to screen sprites.
00049B  3  20 10 16     	jsr ispr 		; initialise sprite table.
00049E  3               
00049E  3  4C AD 04     	jmp rstrt0
0004A1  3               
0004A1  3               ; Second restart - clear all but player, and don't initialise him.
0004A1  3               
0004A1  3               rstrtn:
0004A1  3  20 89 05     	jsr rsevt		; restart events.
0004A4  3  20 B4 15     	jsr nspr 		; clear all non-player sprites.
0004A7  3  20 87 15     	jsr sprlst 		; fetch pointer to screen sprites.
0004AA  3  20 4D 16     	jsr kspr 		; initialise sprite table, no more players.
0004AD  3               
0004AD  3               ; Set up the player and/or enemy sprites.
0004AD  3               
0004AD  3               rstrt0:
0004AD  3  A9 00        	lda #0 			; zero in accumulator.
0004AF  3  85 rr        	sta nexlev 		; reset next level flag.
0004B1  3  85 rr        	sta restfl 		; reset restart flag.
0004B3  3  85 rr        	sta deadf 		; reset dead flag.
0004B5  3  20 0F 0B     	jsr droom 		; show screen layout.
0004B8  3               rpblc0:
0004B8  3               .if pflag
0004B8  3               	jsr inishr 		; initialise particle engine.
0004B8  3               .endif
0004B8  3               .if aflag
0004B8  3               	jsr rbloc		; draw blocks for this screen
0004B8  3               .endif
0004B8  3               .if oflag
0004B8  3  20 39 06     	jsr shwob		; draw objects.
0004BB  3               .endif
0004BB  3               
0004BB  3  A9 56        	lda #<sprtab 		; address of sprite table, even sprites.
0004BD  3  85 68        	sta z80_x
0004BF  3  A9 17        	lda #>sprtab
0004C1  3  85 69        	sta z80_i
0004C3  3  20 F9 10     	jsr dspr 		; display sprites.
0004C6  3               
0004C6  3  A9 67        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
0004C8  3  85 68        	sta z80_x
0004CA  3  A9 17        	lda #>(sprtab+TABSIZ)
0004CC  3  85 69        	sta z80_i
0004CE  3  20 F9 10     	jsr dspr 		; display sprites.
0004D1  3               mloop:
0004D1  3  20 97 03     	jsr vsync 		; synchronise with display.
0004D4  3  A9 56        	lda #<sprtab 		; address of sprite table, even sprites.
0004D6  3  85 68        	sta z80_x
0004D8  3  A9 17        	lda #>sprtab
0004DA  3  85 69        	sta z80_i
0004DC  3  20 F9 10     	jsr dspr 		; display even sprites.
0004DF  3               
0004DF  3               ;	jsr plsnd 		; play sounds.
0004DF  3               
0004DF  3  20 35 04     	jsr proshr
0004E2  3  A9 67        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
0004E4  3  85 68        	sta z80_x
0004E6  3  A9 17        	lda #>(sprtab+TABSIZ)
0004E8  3  85 69        	sta z80_i
0004EA  3  20 F9 10     	jsr dspr 		; display odd sprites.
0004ED  3               
0004ED  3  A9 22        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
0004EF  3  85 68        	sta z80_x
0004F1  3  A9 18        	lda #>(ssprit)
0004F3  3  85 69        	sta z80_i
0004F5  3               evlp1:
0004F5  3  20 FA 25     	jsr evnt10 		; called once per main loop.
0004F8  3  20 77 10     	jsr pspr 		; process sprites.
0004FB  3               
0004FB  3               ; Main loop events.
0004FB  3               
0004FB  3  A9 22        	lda #<ssprit 		; point to spare sprite for spawning purposes.
0004FD  3  85 68        	sta z80_x
0004FF  3  A9 18        	lda #>ssprit
000501  3  85 69        	sta z80_i
000503  3               evlp2:
000503  3  20 2D 26     	jsr evnt11 		; called once per main loop.
000506  3               bsortx:
000506  3  20 ED 0F     	jsr bsort 		; sort sprites.
000509  3               
000509  3  A5 rr        	lda nexlev		; finished level flag.
00050B  3  F0 03        	beq :+
00050D  3  4C 35 05     	jmp newlev		; is set, go to next level.
000510  3               :
000510  3  A5 rr        	lda gamwon		; finished game flag.
000512  3  F0 03        	beq :+
000514  3  4C 44 05     	jmp evwon		; is set, finish the game.
000517  3               :
000517  3  A5 rr        	lda restfl 		; finished level flag.
000519  3  C9 01        	cmp #1			; has it been set?
00051B  3  D0 03        	bne :+
00051D  3  4C 92 04     	jmp rstrt		; yes, go to next level.
000520  3               :
000520  3  C9 02        	cmp #2			; has it been set?
000522  3  D0 03        	bne :+
000524  3  4C A1 04     	jmp rstrtn		; yes, go to next level.
000527  3               :
000527  3  A5 rr        	lda deadf 		; dead flag.
000529  3  F0 03        	beq :+
00052B  3  4C 4A 05     	jmp pdead		; yes, player dead.
00052E  3               :
00052E  3               ; back to start of main loop.
00052E  3               
00052E  3  E6 rr        	inc frmno
000530  3  E6 rr        	inc clock
000532  3  4C D1 04     	jmp mloop		; switched to a jmp mloop during test mode.
000535  3               
000535  3               ;----------------------------------------------------------
000535  3               ; Read blocks from list and update screen accordingly.
000535  3               ;----------------------------------------------------------
000535  3               
000535  3               .if aflag
000535  3               rbloc:
000535  3               	lda #<eop		; reset temp blockpointer
000535  3               	sta pbbuf
000535  3               	lda #>eop
000535  3               	sta pbbuf+1
000535  3               
000535  3               rbloc2:
000535  3               	lda pbbuf			; check for last block
000535  3               	cmp pbptr
000535  3               	bne rbloc1
000535  3               	lda pbbuf+1
000535  3               	cmp pbptr+1
000535  3               	bne rbloc1
000535  3               	rts
000535  3               rbloc1:
000535  3               	ldy #0
000535  3               	lda (pbbuf),y		; check if block for this scno
000535  3               	cmp scno
000535  3               	bne rbloc0		; if not, skip
000535  3               	iny
000535  3               	lda (pbbuf),y		; get y
000535  3               	sta dispy
000535  3               	iny
000535  3               	lda (pbbuf),y		; get x
000535  3               	sta dispx
000535  3               	iny
000535  3               	lda (pbbuf),y		; get blocknr
000535  3               	jsr pattr2		; draw block
000535  3               rbloc0:
000535  3               	clc			; point to next block
000535  3               	lda pbbuf
000535  3               	adc #4
000535  3               	sta pbbuf
000535  3               	bcc rbloc2
000535  3               	inc pbbuf+1
000535  3               	jmp rbloc2
000535  3               .endif
000535  3               
000535  3               ;----------------------------------------------------------
000535  3               ; New level
000535  3               ;----------------------------------------------------------
000535  3               
000535  3               ;.repeat 270
000535  3               ;  .byte 0
000535  3               ;.endrep
000535  3               
000535  3               newlev:
000535  3  A5 rr        	lda scno 			; current screen.
000537  3  18           	clc
000538  3  69 01        	adc #1				; next screen.
00053A  3  CD 35 78     	cmp numsc			; total number of screens.
00053D  3  B0 05        	bcs evwon			; yes, game finished.
00053F  3  85 rr        	sta scno			; set new level number.
000541  3  4C 92 04     	jmp rstrt			; restart, clearing all aliens.
000544  3               
000544  3               evwon:
000544  3  20 AC 26     	jsr evnt18		 	; game completed.
000547  3  4C 5E 05     	jmp tidyup			; tidy up and return to BASIC/calling routine.
00054A  3               
00054A  3               ;----------------------------------------------------------
00054A  3               ; Player dead.
00054A  3               ;----------------------------------------------------------
00054A  3               
00054A  3               ;.repeat 258
00054A  3               ;  .byte 0
00054A  3               ;.endrep
00054A  3               
00054A  3               pdead:
00054A  3  A9 00        	lda #0				; zeroise accumulator.
00054C  3  85 rr        	sta deadf			; reset dead flag.
00054E  3               evdie:
00054E  3  20 AA 26     	jsr evnt16 			; death subroutine.
000551  3  A5 rr        	lda numlif			; number of lives.
000553  3  F0 03        	beq :+
000555  3  4C 92 04     	jmp rstrt 			; restart game.
000558  3               :
000558  3               evfail:
000558  3  20 AB 26     	jsr evnt17 			; failure event.
00055B  3  4C 36 04     	jmp game			; restart game
00055E  3               
00055E  3               ;----------------------------------------------------------
00055E  3               ; Tidy things up
00055E  3               ;----------------------------------------------------------
00055E  3               
00055E  3               ;.repeat 291
00055E  3               ;  .byte 0
00055E  3               ;.endrep
00055E  3               
00055E  3               tidyup:
00055E  3  A0 00        	ldy #0				; digits to check.
000560  3               tidyu2:
000560  3  B9 F3 07     	lda score,y 			; get score digit.
000563  3  CD F9 07     	cmp hiscor 			; are we larger than high score digit?
000566  3  90 07        	bcc tidyu0			; high score is bigger.
000568  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
00056A  3  C8           	iny				; next digit of high score.
00056B  3  C0 06        	cpy #6
00056D  3  D0 F1        	bne tidyu2			; repeat for all digits
00056F  3               tidyu0:
00056F  3  A9 F3        	lda #<score			; return pointing to score.
000571  3  85 62        	sta z80_c
000573  3  A9 07        	lda #>score
000575  3  85 63        	sta z80_b
000577  3  60           	rts
000578  3               tidyu1:
000578  3  A0 05        	ldy #5
00057A  3               tidyu3:
00057A  3  B9 F3 07     	lda score,y			; score.
00057D  3  99 F9 07     	sta hiscor,y			; high score.
000580  3  88           	dey
000581  3  10 F7        	bpl tidyu3 			; copy score to high score.
000583  3               evnewh:
000583  3  20 EF 26     	jsr evnt19			; new high score event.
000586  3  4C 6F 05     	jmp tidyu0			; tidy up.
000589  3               
000589  3               ;--------------------------------------------------
000589  3               ; Restart event.
000589  3               ;--------------------------------------------------
000589  3               
000589  3               rsevt:
000589  3  A9 22        	lda #<ssprit 			; default to spare element in table.
00058B  3  85 68        	sta z80_x
00058D  3  A9 18        	lda #>ssprit
00058F  3  85 69        	sta z80_i
000591  3               evrs:
000591  3  4C 70 26     	jmp evnt14	 		; call restart event.
000594  3               
000594  3               ;------------------------------------------------------------------
000594  3               ; Copy number passed in a to string position bc, right-justified.
000594  3               ;
000594  3               ; Input:
000594  3               ;  A  = number
000594  3               ;  BC = string address
000594  3               ;
000594  3               ; Output:
000594  3               ;  BC = string with number
000594  3               ;-----------------------------------------------------------------
000594  3               
000594  3               num2ch:
000594  3  85 65        	sta z80_d		; Save number
000596  3               
000596  3  A9 00        	lda #0
000598  3  85 rr        	sta flag
00059A  3               numdg3:
00059A  3  A2 64        	ldx #100		; hundreds column.
00059C  3  86 64        	stx z80_e
00059E  3  20 AE 05     	jsr numdg		; show digit.
0005A1  3               numdg2:
0005A1  3  A2 0A        	ldx #10			; tens column.
0005A3  3  86 64        	stx z80_e
0005A5  3  20 AE 05     	jsr numdg		; show digit.
0005A8  3               
0005A8  3  E6 rr        	inc flag
0005AA  3  A2 01        	ldx #1			; units column.
0005AC  3  86 64        	stx z80_e
0005AE  3               numdg:
0005AE  3  A9 30        	lda #48			; clear digit.
0005B0  3  85 61        	sta z80_a
0005B2  3               numdg1:
0005B2  3  A5 65        	lda z80_d
0005B4  3  C5 64        	cmp z80_e
0005B6  3  90 0E        	bcc numdg0		; nothing to show.
0005B8  3  38           	sec
0005B9  3  A5 65        	lda z80_d
0005BB  3  E5 64        	sbc z80_e		; subtract from column.
0005BD  3  85 65        	sta z80_d
0005BF  3  E6 61        	inc z80_a		; increment digit.
0005C1  3  E6 rr        	inc flag
0005C3  3  4C B2 05     	jmp numdg1		; repeat until column is zero.
0005C6  3               numdg0:
0005C6  3  A0 00        	ldy #0
0005C8  3  A5 61        	lda z80_a
0005CA  3  91 62        	sta (z80_bc),y		; write digit to buffer.
0005CC  3  A5 rr        	lda flag
0005CE  3  F0 06        	beq :+
0005D0  3  E6 62        	inc z80_c		; next buffer position.
0005D2  3  D0 02        	bne :+
0005D4  3  E6 63        	inc z80_b
0005D6  3               :
0005D6  3  60           	rts
0005D7  3               num2dd:
0005D7  3  85 65        	sta z80_d		; Save number
0005D9  3               
0005D9  3  A9 01        	lda #1
0005DB  3  85 rr        	sta flag
0005DD  3               
0005DD  3  4C A1 05     	jmp numdg2
0005E0  3               num2td:
0005E0  3  85 65        	sta z80_d		; Save number
0005E2  3               
0005E2  3  A9 01        	lda #1
0005E4  3  85 rr        	sta flag
0005E6  3  4C 9A 05     	jmp numdg3
0005E9  3               
0005E9  3               ;flag:	.byte 0
0005E9  3               
0005E9  3               ;---------------------------------------------------------
0005E9  3               ; Reset score to "000000"
0005E9  3               ;---------------------------------------------------------
0005E9  3               
0005E9  3               inisc:
0005E9  3  A9 30        	lda #'0'
0005EB  3  A2 05        	ldx #5			; digits to initialise.
0005ED  3               inisc0:
0005ED  3  9D F3 07     	sta score,x 		; write zero digit.
0005F0  3  CA           	dex			; next column.
0005F1  3  10 FA        	bpl inisc0		; repeat for all digits.
0005F3  3               
0005F3  3  60           	rts
0005F4  3               
0005F4  3               ;-----------------------------------------------------
0005F4  3               ; Multiply h by d and return in hl.
0005F4  3               ;
0005F4  3               ; Input:
0005F4  3               ;  H = first number
0005F4  3               ;  D = second number
0005F4  3               ;
0005F4  3               ; Output:
0005F4  3               ;  HL = result H x D
0005F4  3               ;-----------------------------------------------------
0005F4  3               
0005F4  3               imul:
0005F4  3  A5 65        	lda z80_d		; HL = H * D
0005F6  3  85 64        	sta z80_e
0005F8  3  A5 67        	lda z80_h
0005FA  3  85 62        	sta z80_c		; make c first multiplier.
0005FC  3               imul0:
0005FC  3  A9 00        	lda #0			; zeroise total.
0005FE  3  85 66        	sta z80_l
000600  3  85 67        	sta z80_h
000602  3               
000602  3  A5 67        	lda z80_h
000604  3  85 65        	sta z80_d		; zeroise high byte.
000606  3               
000606  3  A9 08        	lda #8			; repeat 8 times.
000608  3  85 63        	sta z80_b
00060A  3               imul1:
00060A  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
00060C  3  90 0E        	bcc imul2		; wasn't set.
00060E  3  18           	clc			; bit was set, so add de.
00060F  3  A5 66        	lda z80_l
000611  3  65 64        	adc z80_e
000613  3  85 66        	sta z80_l
000615  3  A5 67        	lda z80_h
000617  3  65 65        	adc z80_d
000619  3  85 67        	sta z80_h
00061B  3  18           	clc 			; reset carry.
00061C  3               imul2:
00061C  3  06 64        	asl z80_e 		; shift de 1 bit left.
00061E  3  26 65        	rol z80_d
000620  3  C6 63        	dec z80_b
000622  3  D0 E6        	bne imul1		; repeat 8 times.
000624  3               
000624  3  60           	rts
000625  3               
000625  3               ;-----------------------------------------------
000625  3               ; Divide d by e and return in d, remainder in a.
000625  3               ;
000625  3               ; Input:
000625  3               ;  D = first number
000625  3               ;  E = second number
000625  3               ;
000625  3               ; Output:
000625  3               ;  D = result D/E
000625  3               ;  A = remainder
000625  3               ;-----------------------------------------------
000625  3               
000625  3               idiv:
000625  3  A9 00        	lda #0
000627  3  A0 08        	ldy #8		 	; bits to shift.
000629  3  06 65        	asl z80_d
00062B  3               idiv0:
00062B  3  2A           	rol a 			; multiply d by 2.
00062C  3  C5 64        	cmp z80_e 		; test if e is smaller.
00062E  3  90 02        	bcc idiv1		; e is greater, no division this time.
000630  3  E5 64        	sbc z80_e		; subtract it.
000632  3               idiv1:
000632  3  26 65        	rol z80_d		; rotate into d.
000634  3  88           	dey
000635  3  D0 F4        	bne idiv0		; repeat
000637  3  60           	rts
000638  3               
000638  3               ;---------------------------------------------------
000638  3               ; Play AY sound effect
000638  3               ;---------------------------------------------------
000638  3               
000638  3               plsnd:
000638  3  60           	rts
000639  3               
000639  3               ;---------------------------------------------------
000639  3               ; Objects handling.
000639  3               ; 32 bytes for image
000639  3               ; 3 for room, y and x
000639  3               ; 3 for starting room, y and x.
000639  3               ; 254 = disabled.
000639  3               ; 255 = object in player"s pockets.
000639  3               ;---------------------------------------------------
000639  3               
000639  3               ;---------------------------------------------------
000639  3               ; Show items present.
000639  3               ;---------------------------------------------------
000639  3               
000639  3               .if oflag
000639  3               shwob:
000639  3  A9 A7        	lda #<objdta 			; objects table.
00063B  3  85 66        	sta z80_l
00063D  3  A9 79        	lda #>objdta
00063F  3  85 67        	sta z80_h
000641  3               
000641  3  AD 2C 03     	lda numob 			; number of objects in the game.
000644  3  85 rr        	sta sprcnt
000646  3               shwob0:
000646  3  A0 20        	ldy #32 			; distance to room number.
000648  3  B1 66        	lda (z80_hl),y 			; same as an item?
00064A  3  C5 rr        	cmp scno 			; current location.
00064C  3  D0 03        	bne :+
00064E  3  20 63 06     	jsr dobj 			; yes, display object.
000651  3               :
000651  3  18           	clc
000652  3  A5 66        	lda z80_l
000654  3  69 26        	adc #38 			; distance to next item.
000656  3  85 66        	sta z80_l
000658  3  A5 67        	lda z80_h
00065A  3  69 00        	adc #0
00065C  3  85 67        	sta z80_h	 		; point to it.
00065E  3  C6 rr        	dec sprcnt
000660  3  D0 E4        	bne shwob0 			; repeat for others.
000662  3  60           	rts
000663  3               
000663  3               ;---------------------------------------------------
000663  3               ; Display object.
000663  3               ; hl must point to object's start address.
000663  3               ;
000663  3               ; Input:
000663  3               ;  HL = object address
000663  3               ;---------------------------------------------------
000663  3               
000663  3               dobj:
000663  3  A0 21        	ldy #33
000665  3  B1 66        	lda (z80_hl),y 			; point to y.
000667  3  85 rr        	sta dispy
000669  3  C8           	iny
00066A  3  B1 66        	lda (z80_hl),y 			; point to x.
00066C  3  85 rr        	sta dispx
00066E  3               dobj1:
00066E  3  4C 57 0A     	jmp sprite 			; draw this sprite.
000671  3               
000671  3               ;--------------------------------------
000671  3               ; Remove an object.
000671  3               ;
000671  3               ; Input:
000671  3               ;  A = object number
000671  3               ;--------------------------------------
000671  3               
000671  3               remob:
000671  3  CD 2C 03     	cmp numob			; number of objects in game.
000674  3  90 01        	bcc :+				; are we checking past the end?
000676  3  60           	rts				; yes, can't get non-existent item.
000677  3               :
000677  3  48           	pha				; remember object.
000678  3  20 86 06     	jsr getob			; pick it up if we haven't already got it.
00067B  3  68           	pla				; retrieve object number.
00067C  3  20 B5 06     	jsr gotob			; get its address.
00067F  3  A9 FE        	lda #254
000681  3  A0 20        	ldy #32
000683  3  91 66        	sta (z80_hl),y			; remove it.
000685  3  60           	rts
000686  3               
000686  3               ;---------------------------------------------------
000686  3               ; Pick up object number held in the accumulator.
000686  3               ;
000686  3               ; Input:
000686  3               ;  A = object number
000686  3               ;---------------------------------------------------
000686  3               
000686  3               getob:
000686  3  CD 2C 03     	cmp numob 		; number of objects in game.
000689  3  90 01        	bcc :+			; are we checking past the end?
00068B  3  60           	rts			; yes, can't get non-existent item.
00068C  3               :
00068C  3  20 B5 06     	jsr gotob 		; check if we already have it.
00068F  3  C9 FF        	cmp #255
000691  3  D0 01        	bne :+
000693  3  60           	rts			; we already do.
000694  3               :
000694  3  A0 20        	ldy #32
000696  3  B1 66        	lda (z80_hl),y		; is it on this screen?
000698  3  C5 rr        	cmp scno 		; current screen.
00069A  3  D0 14        	bne getob0		; not on screen, so nothing to delete.
00069C  3               
00069C  3  A9 FF        	lda #255
00069E  3  91 66        	sta (z80_hl),y		; pick it up.
0006A0  3  C8           	iny 			; point to y coord.
0006A1  3               getob1:
0006A1  3  A0 21        	ldy #33
0006A3  3  B1 66        	lda (z80_hl),y		; y coord.
0006A5  3  85 rr        	sta dispy
0006A7  3  A0 22        	ldy #34
0006A9  3  B1 66        	lda (z80_hl),y 		; x coord.
0006AB  3  85 rr        	sta dispx
0006AD  3  4C 6E 06     	jmp dobj1 		; delete object sprite.
0006B0  3               getob0:
0006B0  3  A9 FF        	lda #255
0006B2  3  91 66        	sta (z80_hl),y 		; pick it up.
0006B4  3  60           	rts
0006B5  3               .endif
0006B5  3               
0006B5  3               ;-----------------------------------------------------------------
0006B5  3               ; Got object check.
0006B5  3               ; Call with object in accumulator, returns zero set if in pockets.
0006B5  3               ;
0006B5  3               ; Input:
0006B5  3               ;  A = object number
0006B5  3               ;-----------------------------------------------------------------
0006B5  3               .if oflag .or mflag
0006B5  3               gotob:
0006B5  3  CD 2C 03     	cmp numob 		; number of objects in game.
0006B8  3  90 03        	bcc :+ 			; are we checking past the end?
0006BA  3  4C C1 06     	jmp gotob0 		; yes, we can't have a non-existent object.
0006BD  3               :
0006BD  3  20 C6 06     	jsr findob		; find the object.
0006C0  3               gotob1:
0006C0  3  60           	rts
0006C1  3               
0006C1  3               gotob0:
0006C1  3  A9 FE        	lda #254 		; missing.
0006C3  3  4C C0 06     	jmp gotob1
0006C6  3               
0006C6  3               findob:
0006C6  3  48           	pha			; save object number
0006C7  3  A9 A7        	lda #<objdta 		; objects.
0006C9  3  85 66        	sta z80_l
0006CB  3  A9 79        	lda #>objdta
0006CD  3  85 67        	sta z80_h
0006CF  3  68           	pla			; retreive object number
0006D0  3  F0 0F        	beq fndob1 		; is it zero? yes, skip loop.
0006D2  3  AA           	tax 			; loop counter
0006D3  3               fndob2:
0006D3  3  18           	clc
0006D4  3  A5 66        	lda z80_l
0006D6  3  69 26        	adc #38 		; size of each object.
0006D8  3  85 66        	sta z80_l
0006DA  3  90 02        	bcc :+
0006DC  3  E6 67        	inc z80_h
0006DE  3               :
0006DE  3  CA           	dex 			; repeat until we find address.
0006DF  3  D0 F2        	bne fndob2
0006E1  3               fndob1:
0006E1  3  A0 20        	ldy #32			; distance to room it's in.
0006E3  3  B1 66        	lda (z80_hl),y		; fetch status.
0006E5  3  60           	rts
0006E6  3               .endif
0006E6  3               
0006E6  3               ;---------------------------------------------
0006E6  3               ; Drop object number at (dispx, dispy).
0006E6  3               ;
0006E6  3               ; Input:
0006E6  3               ;  A = object number
0006E6  3               ;---------------------------------------------
0006E6  3               
0006E6  3               .if oflag
0006E6  3               drpob:
0006E6  3  CD 2C 03     	cmp numob 		; are we checking past the end?
0006E9  3  90 01        	bcc :+
0006EB  3  60           	rts			; yes, can't drop non-existent item.
0006EC  3               :
0006EC  3  20 B5 06     	jsr gotob		; make sure object is in inventory.
0006EF  3  C5 rr        	cmp scno		; already on this screen?
0006F1  3  D0 01        	bne :+
0006F3  3  60           	rts			; yes, nothing to do.
0006F4  3               :
0006F4  3  A0 20        	ldy #32
0006F6  3  A5 rr        	lda scno
0006F8  3  91 66        	sta (z80_hl),y		; bring onto screen.
0006FA  3  A5 rr        	lda dispy		; sprite y coordinate.
0006FC  3  C8           	iny
0006FD  3  91 66        	sta (z80_hl),y		; point to object y.
0006FF  3  A5 rr        	lda dispx 		; sprite x coordinate.
000701  3  C8           	iny
000702  3  91 66        	sta (z80_hl),y 		; point to object x
000704  3  4C 63 06     	jmp dobj		; draw the object sprite.
000707  3               
000707  3               ;-----------------------------------------------
000707  3               ; Seek objects at sprite position.
000707  3               ;
000707  3               ; Output:
000707  3               ;  A = object number, if not found A=255
000707  3               ;-----------------------------------------------
000707  3               
000707  3               skobj:
000707  3  A9 A7        	lda #<objdta 		; pointer to objects.
000709  3  85 66        	sta z80_l
00070B  3  A9 79        	lda #>objdta
00070D  3  85 67        	sta z80_h
00070F  3               
00070F  3  AD 2C 03     	lda numob 		; number of objects in game.
000712  3  85 63        	sta z80_b 		; set up the loop counter.
000714  3               skobj0:
000714  3  A5 rr        	lda scno		; current room number.
000716  3  A0 20        	ldy #32
000718  3  D1 66        	cmp (z80_hl),y		; is object in here?
00071A  3  D0 03        	bne :+
00071C  3  20 31 07     	jsr skobj1		; yes, check coordinates.
00071F  3               :
00071F  3  18           	clc			; point to next object in table.
000720  3  A5 66        	lda z80_l
000722  3  69 26        	adc #38			; size of each object.
000724  3  85 66        	sta z80_l
000726  3  90 02        	bcc :+
000728  3  E6 67        	inc z80_h
00072A  3               :
00072A  3  C6 63        	dec z80_b
00072C  3  D0 E6        	bne skobj0		; repeat for all objects.
00072E  3               
00072E  3  A9 FF        	lda #255		; end of list and nothing found, return 255.
000730  3  60           	rts
000731  3               
000731  3               skobj1:
000731  3  A0 21        	ldy #33			; point to y coordinate.
000733  3  B1 66        	lda (z80_hl),y		; point to y coordinate.
000735  3  38           	sec
000736  3  A0 08        	ldy #8
000738  3  F1 68        	sbc (z80_ix),y 		; subtract sprite y.
00073A  3  18           	clc
00073B  3  69 0F        	adc #15			; add sprite height minus one.
00073D  3  C9 1F        	cmp #31			; within range?
00073F  3  B0 18        	bcs skobj2		; no, ignore object.
000741  3               
000741  3  A0 22        	ldy #34			; point to x coordinate now.
000743  3  B1 66        	lda (z80_hl),y 		; get coordinate.
000745  3  38           	sec
000746  3  A0 09        	ldy #9
000748  3  F1 68        	sbc (z80_ix),y 		; subtract the sprite x.
00074A  3  18           	clc			; add sprite width minus one.
00074B  3  69 0F        	adc #15
00074D  3  C9 1F        	cmp #31			; within range?
00074F  3  B0 08        	bcs skobj2		; no, ignore object.
000751  3               
000751  3  68           	pla			; remove return address from stack.
000752  3  68           	pla
000753  3               
000753  3  AD 2C 03     	lda numob 		; objects in game.
000756  3  38           	sec
000757  3  E5 63        	sbc z80_b		; subtract loop counter.
000759  3               skobj2:
000759  3  60           	rts			; accumulator now points to object.
00075A  3               .endif
00075A  3               
00075A  3               ;---------------------------------------------------------------------
00075A  3               ; Spawn a new sprite.
00075A  3               ;---------------------------------------------------------------------
00075A  3               
00075A  3               .if gflag
00075A  3                 offset = 0
00075A  3               .else
00075A  3                 offset = 20
00075A  3               .endif
00075A  3               
00075A  3               ;.repeat 343
00075A  3               ;  .byte 0
00075A  3               ;.endrep
00075A  3               
00075A  3               spawn:
00075A  3  A9 56        	lda #<sprtab		; sprite table.
00075C  3  85 66        	sta z80_l
00075E  3  A9 17        	lda #>sprtab
000760  3  85 67        	sta z80_h
000762  3               numsp1:
000762  3  A9 0C        	lda #NUMSPR		; number of sprites.
000764  3  85 rr        	sta spcnt
000766  3               spaw0:
000766  3  A0 00        	ldy #0
000768  3  B1 66        	lda (z80_hl),y		; get sprite type.
00076A  3  C9 FF        	cmp #255		; is it an unused slot?
00076C  3  F0 0F        	beq spaw1 		; yes, we can use this one.
00076E  3               
00076E  3  18           	clc 			; point to next sprite in table.
00076F  3  A5 66        	lda z80_l
000771  3  69 11        	adc #TABSIZ		; size of each entry.
000773  3  85 66        	sta z80_l
000775  3  90 02        	bcc :+
000777  3  E6 67        	inc z80_h
000779  3               :
000779  3  C6 rr        	dec spcnt		; one less iteration.
00077B  3  D0 E9        	bne spaw0		; keep going until we find a slot.
00077D  3               
00077D  3               ; Didn't find one but drop through and set up a dummy sprite instead.
00077D  3               
00077D  3               spaw1:
00077D  3  A5 69        	lda z80_i		; address of original sprite.
00077F  3  48           	pha
000780  3  A5 68        	lda z80_x
000782  3  48           	pha
000783  3               
000783  3  A5 66        	lda z80_l		; store spawned sprite address.
000785  3  85 rr        	sta spptr
000787  3  A5 67        	lda z80_h
000789  3  85 rr        	sta spptr+1
00078B  3               
00078B  3  A5 62        	lda z80_c
00078D  3  A0 00        	ldy #0
00078F  3  91 66        	sta (z80_hl),y 		; set the type.
000791  3  A0 05        	ldy #5
000793  3  91 66        	sta (z80_hl),y		; copy
000795  3               
000795  3  A5 63        	lda z80_b
000797  3  A0 01        	ldy #1
000799  3  91 66        	sta (z80_hl),y		; set the image.
00079B  3  A0 06        	ldy #6
00079D  3  91 66        	sta (z80_hl),y		; copy
00079F  3               
00079F  3  A9 00        	lda #0 			; frame zero.
0007A1  3  A0 02        	ldy #2
0007A3  3  91 66        	sta (z80_hl),y		; set frame.
0007A5  3  A0 07        	ldy #7
0007A7  3  91 66        	sta (z80_hl),y		; copy
0007A9  3               
0007A9  3  A0 08        	ldy #8
0007AB  3  B1 68        	lda (z80_ix),y 		; x coordinate.
0007AD  3  A0 03        	ldy #3
0007AF  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
0007B1  3  A0 08        	ldy #8
0007B3  3  91 66        	sta (z80_hl),y		; copy
0007B5  3               
0007B5  3  A0 09        	ldy #9
0007B7  3  B1 68        	lda (z80_ix),y 		; y coordinate.
0007B9  3  A0 04        	ldy #4
0007BB  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
0007BD  3  A0 09        	ldy #9
0007BF  3  91 66        	sta (z80_hl),y		; copy
0007C1  3               
0007C1  3  A0 0A        	ldy #10			; direction of original.
0007C3  3  B1 68        	lda (z80_ix),y
0007C5  3  91 66        	sta (z80_hl),y		; direction
0007C7  3               
0007C7  3  A9 00        	lda #0
0007C9  3  A0 0B        	ldy #11
0007CB  3  91 66        	sta (z80_hl),y		; reset parameter.
0007CD  3  C8           	iny
0007CE  3  91 66        	sta (z80_hl),y		; reset parameter.
0007D0  3  C8           	iny
0007D1  3  91 66        	sta (z80_hl),y		; reset parameter.
0007D3  3  C8           	iny
0007D4  3  91 66        	sta (z80_hl),y		; reset parameter.
0007D6  3               rtssp:
0007D6  3  A5 rr        	lda spptr		; address of new sprite.
0007D8  3  85 68        	sta z80_x
0007DA  3  A5 rr        	lda spptr+1
0007DC  3  85 69        	sta z80_i
0007DE  3               evis1:
0007DE  3  20 F9 25     	jsr evnt09 		; call sprite initialisation event.
0007E1  3               
0007E1  3  A5 rr        	lda spptr 		; address of new sprite.
0007E3  3  85 68        	sta z80_x
0007E5  3  A5 rr        	lda spptr+1
0007E7  3  85 69        	sta z80_i
0007E9  3  20 1F 12     	jsr sspria 		; display the new sprite.
0007EC  3               
0007EC  3  68           	pla			; address of original sprite.
0007ED  3  85 68        	sta z80_x
0007EF  3  68           	pla
0007F0  3  85 69        	sta z80_i
0007F2  3               
0007F2  3  60           	rts
0007F3  3               
0007F3  3               ;spcnt:	.byte 0
0007F3  3               ;spptr:	.word 0			; spawned sprite pointer.
0007F3  3               ;seed:	.byte 0			; seed for random numbers.
0007F3  3  30 30 30 30  score:	.byte "000000"		; player"s score.
0007F7  3  30 30        
0007F9  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
0007FD  3  30 30        
0007FF  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
000803  3  30 30        
000805  3  00 80        grbase:	.word ScreenAddr	; graphics base address.
000807  3               
000807  3               ;----------------------------------------------------
000807  3               ; Check y-pos
000807  3               ;----------------------------------------------------
000807  3               
000807  3               checkx:
000807  3  A5 rr        	lda dispy		; y position.
000809  3  C9 18        	cmp #24			; off screen?
00080B  3  B0 01        	bcs :+
00080D  3  60           	rts			; no, it's okay.
00080E  3               :
00080E  3  68           	pla			; remove return address from stack.
00080F  3  85 66        	sta z80_l
000811  3  68           	pla
000812  3  85 67        	sta z80_h
000814  3  60           	rts
000815  3               
000815  3               ;-----------------------------------------------
000815  3               ; Displays the current high score.
000815  3               ;-----------------------------------------------
000815  3               
000815  3               dhisc:
000815  3  A9 F9        	lda #<hiscor 		; high score text.
000817  3  8D 4C 08     	sta dscor3+1
00081A  3  8D 67 08     	sta bscor3+1
00081D  3  A9 07        	lda #>hiscor
00081F  3  8D 4D 08     	sta dscor3+2
000822  3  8D 68 08     	sta bscor3+2
000825  3  4C 38 08     	jmp dscor1		; check in printable range then show 6 digits.
000828  3               
000828  3               ;------------------------------------------------------
000828  3               ; Displays the current score.
000828  3               ;------------------------------------------------------
000828  3               
000828  3               ;.repeat 322
000828  3               ;  .byte 0
000828  3               ;.endrep
000828  3               
000828  3               dscor:
000828  3  A9 F3        	lda #<score		; score text.
00082A  3  8D 4C 08     	sta dscor3+1
00082D  3  8D 67 08     	sta bscor3+1
000830  3  A9 07        	lda #>score
000832  3  8D 4D 08     	sta dscor3+2
000835  3  8D 68 08     	sta bscor3+2
000838  3               dscor1:
000838  3  8C 63 08     	sty tmpscr
00083B  3  20 C1 0F     	jsr preprt		; set up font and print position.
00083E  3  20 07 08     	jsr checkx		; make sure we're in a printable range.
000841  3               
000841  3               ;	lda #6			; digits to display.
000841  3               ;	sta z80_b
000841  3  A5 rr        	lda prtmod		; get print mode.
000843  3  F0 03        	beq :+			; standard size text?
000845  3  4C 64 08     	jmp bscor0		; no, show double-height.
000848  3               :
000848  3               dscor0:
000848  3               ;	ldy #0
000848  3               ;	lda (z80_hl),y 		; fetch character.
000848  3  AC 63 08     	ldy tmpscr
00084B  3               dscor3:
00084B  3  B9 F3 07     	lda score,y
00084E  3  20 9B 09     	jsr pchar 		; display character.
000851  3  E6 rr        	inc dispx		; move along x coordinate
000853  3               
000853  3               ;	inc z80_l		; next score column.
000853  3               ;	bne :+
000853  3               ;	inc z80_h
000853  3               ;:
000853  3  EE 63 08     	inc tmpscr
000856  3  C6 63        	dec z80_b
000858  3  D0 EE        	bne dscor0 		; repeat for all digits.
00085A  3               dscor2:
00085A  3  A5 rr        	lda dispx 		; set up display coordinates.
00085C  3  85 rr        	sta charx
00085E  3  A5 rr        	lda dispy
000860  3  85 rr        	sta chary
000862  3  60           	rts
000863  3               
000863  3  00           tmpscr:	.byte 0
000864  3               ;------------------------------------------------------
000864  3               ; Displays the current score in double-height characters.
000864  3               ;
000864  3               ; Input:
000864  3               ;  B  = digit number
000864  3               ;  HL = score string
000864  3               ;------------------------------------------------------
000864  3               
000864  3               bscor0:
000864  3               ;	ldy #0
000864  3               
000864  3               ;	lda (z80_hl),y 		; fetch character.
000864  3  A4 rr        	ldy tmp
000866  3               bscor3:
000866  3  B9 F3 07     	lda score,y
000869  3  20 48 0F     	jsr bchar 		; display big char.
00086C  3               
00086C  3               ;	inc z80_l 		; next score column.
00086C  3               ;	bne :+
00086C  3               ;	inc z80_h
00086C  3               ;:
00086C  3  E6 rr        	inc tmp
00086E  3  C6 63        	dec z80_b
000870  3  F0 03        	beq :+
000872  3  4C 64 08     	jmp bscor0 		; repeat for all digits.
000875  3               :
000875  3  4C 5A 08     	jmp dscor2 		; tidy up line and column variables.
000878  3               
000878  3               ;-----------------------------------------------------
000878  3               ; Adds number in the hl pair to the score.
000878  3               ;-----------------------------------------------------
000878  3               
000878  3               addsc:
000878  3  A9 F4        	lda #<(score+1) 	; ten thousands column.
00087A  3  85 64        	sta z80_e
00087C  3  A9 07        	lda #>(score+1)
00087E  3  85 65        	sta z80_d
000880  3  A9 10        	lda #<10000		; amount to add each time.
000882  3  85 62        	sta z80_c
000884  3  A9 27        	lda #>10000
000886  3  85 63        	sta z80_b
000888  3  20 CC 08     	jsr incsc		; add to score.
00088B  3               
00088B  3  E6 64        	inc z80_e		; thousands column.
00088D  3  D0 02        	bne :+
00088F  3  E6 65        	inc z80_d
000891  3               :
000891  3  A9 E8        	lda #<1000		; amount to add each time.
000893  3  85 62        	sta z80_c
000895  3  A9 03        	lda #>1000
000897  3  85 63        	sta z80_b
000899  3  20 CC 08     	jsr incsc 		; add to score.
00089C  3               
00089C  3  E6 64        	inc z80_e		; hundreds column.
00089E  3  D0 02        	bne :+
0008A0  3  E6 65        	inc z80_d
0008A2  3               :
0008A2  3  A9 64        	lda #<100		; amount to add each time.
0008A4  3  85 62        	sta z80_c
0008A6  3  A9 00        	lda #>100
0008A8  3  85 63        	sta z80_b
0008AA  3  20 CC 08     	jsr incsc		; add to score.
0008AD  3               
0008AD  3  E6 64        	inc z80_e 		; tens column.
0008AF  3  D0 02        	bne :+
0008B1  3  E6 65        	inc z80_d
0008B3  3               :
0008B3  3  A9 0A        	lda #<10		; amount to add each time.
0008B5  3  85 62        	sta z80_c
0008B7  3  A9 00        	lda #>10
0008B9  3  85 63        	sta z80_b
0008BB  3  20 CC 08     	jsr incsc 		; add to score.
0008BE  3               
0008BE  3  E6 64        	inc z80_e		; units column.
0008C0  3  D0 02        	bne :+
0008C2  3  E6 65        	inc z80_d
0008C4  3               :
0008C4  3  A9 01        	lda #<1			; units.
0008C6  3  85 62        	sta z80_c
0008C8  3  A9 00        	lda #>1
0008CA  3  85 63        	sta z80_b
0008CC  3               incsc:
0008CC  3  A5 67        	lda z80_h		; store amount to add.
0008CE  3  48           	pha
0008CF  3  A5 66        	lda z80_l
0008D1  3  48           	pha
0008D2  3               
0008D2  3  38           	sec			; subtract from amount to add.
0008D3  3  A5 66        	lda z80_l
0008D5  3  E5 62        	sbc z80_c
0008D7  3  85 66        	sta z80_l
0008D9  3  A5 67        	lda z80_h
0008DB  3  E5 63        	sbc z80_b
0008DD  3  85 67        	sta z80_h
0008DF  3  90 14        	bcc incsc0		; too much, restore value.
0008E1  3               
0008E1  3  68           	pla			; delete the previous amount from the stack.
0008E2  3  68           	pla
0008E3  3               
0008E3  3  A5 65        	lda z80_d 		; store column position.
0008E5  3  48           	pha
0008E6  3  A5 64        	lda z80_e
0008E8  3  48           	pha
0008E9  3  20 FC 08     	jsr incsc2		; do the increment.
0008EC  3               
0008EC  3  68           	pla			; restore column.
0008ED  3  85 64        	sta z80_e
0008EF  3  68           	pla
0008F0  3  85 65        	sta z80_d
0008F2  3  4C CC 08     	jmp incsc		; repeat until all added.
0008F5  3               
0008F5  3               incsc0:
0008F5  3  68           	pla			; restore previous value.
0008F6  3  85 66        	sta z80_l
0008F8  3  68           	pla
0008F9  3  85 67        	sta z80_h
0008FB  3  60           	rts
0008FC  3               incsc2:
0008FC  3  A0 00        	ldy #0
0008FE  3  B1 64        	lda (z80_de),y 		; get amount.
000900  3  18           	clc
000901  3  69 01        	adc #1			; add one to column.
000903  3  91 64        	sta (z80_de),y		; write new column total.
000905  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
000907  3  B0 01        	bcs :+
000909  3  60           	rts			; no, carry on.
00090A  3               :
00090A  3  A9 30        	lda #'0'		; make it zero.
00090C  3  91 64        	sta (z80_de),y		; write new column total.
00090E  3  C6 64        	dec z80_e		; back one column.
000910  3  D0 02        	bne :+
000912  3  C6 65        	dec z80_d
000914  3               :
000914  3  4C FC 08     	jmp incsc2
000917  3               
000917  3               ;------------------------------------
000917  3               ; Add bonus to score and reset bonus
000917  3               ;------------------------------------
000917  3               
000917  3               addbo:
000917  3  A2 05        	ldx #5			; last digit.
000919  3  18           	clc
00091A  3               addbo0:
00091A  3  BD F3 07     	lda score,x		; get score.
00091D  3  7D FF 07     	adc bonus,x		; add bonus.
000920  3  38           	sec			; 0 to 18.
000921  3  E9 30        	sbc #48
000923  3  48           	pha
000924  3  A9 30        	lda #'0'
000926  3  9D FF 07     	sta bonus,x
000929  3  68           	pla
00092A  3  C9 3A        	cmp #58
00092C  3  90 03        	bcc addbo1
00092E  3  38           	sec
00092F  3  E9 0A        	sbc #10
000931  3               addbo1:
000931  3  9D F3 07     	sta score,x		; zeroise bonus.
000934  3  CA           	dex			; next digit.
000935  3  10 E3        	bpl addbo0		; repeat for all 6 digits.
000937  3  60           	rts
000938  3               
000938  3               ;------------------------------------
000938  3               ; Swap score and bonus.
000938  3               ;------------------------------------
000938  3               
000938  3               swpsb:
000938  3  A2 05        	ldx #5			; digits to add.
00093A  3               swpsb0:
00093A  3  BD F3 07     	lda score,x 		; get score digits.
00093D  3  48           	pha			; save digit
00093E  3  BD FF 07     	lda bonus,x 		; get bonus digits.
000941  3  9D F3 07     	sta score,x		; switch score-bonus
000944  3  68           	pla
000945  3  9D FF 07     	sta bonus,x
000948  3  CA           	dex 			; repeat for all 6 digits.
000949  3  10 EF        	bpl swpsb0
00094B  3  60           	rts
00094C  3               
00094C  3               ;----------------------------------------------------
00094C  3               ; Get print address.
00094C  3               ;----------------------------------------------------
00094C  3               
00094C  3               gprad:
00094C  3  A5 rr        	lda dispx		; get x
00094E  3  85 rr        	sta scraddr		; store lb address
000950  3               
000950  3  2A           	rol a
000951  3  26 rr        	rol tmp
000953  3  2A           	rol a
000954  3  26 rr        	rol tmp
000956  3  2A           	rol a
000957  3  26 rr        	rol tmp
000959  3  A5 rr        	lda tmp
00095B  3  29 07        	and #7
00095D  3  85 rr        	sta tmp
00095F  3  A5 rr        	lda prtmod
000961  3  F0 02        	beq :+
000963  3  06 rr        	asl tmp
000965  3               :
000965  3  A5 rr        	lda tmp
000967  3  18           	clc
000968  3  65 rr        	adc dispy		; get y
00096A  3  09 80        	ora #$80		; add $80
00096C  3  85 rr        	sta scraddr+1		; store hb address
00096E  3  60           	rts
00096F  3               
00096F  3               ;--------------------------------------------------------------
00096F  3               ; Get property buffer address of char at (dispx, dispy) in hl.
00096F  3               ;
00096F  3               ; Output:
00096F  3               ;  bufaddr = MAP + dispy*32 + dispx
00096F  3               ;--------------------------------------------------------------
00096F  3               
00096F  3               pradd:
00096F  3  A5 rr        	lda dispy 		; y coordinate.
000971  3  85 rr        	sta bufaddr
000973  3  A9 00        	lda #0
000975  3  85 rr        	sta bufaddr+1
000977  3  06 rr        	asl bufaddr  		; multiply char by 32
000979  3  26 rr        	rol bufaddr+1
00097B  3  06 rr        	asl bufaddr
00097D  3  26 rr        	rol bufaddr+1
00097F  3  06 rr        	asl bufaddr
000981  3  26 rr        	rol bufaddr+1
000983  3  06 rr        	asl bufaddr
000985  3  26 rr        	rol bufaddr+1
000987  3  06 rr        	asl bufaddr
000989  3  26 rr        	rol bufaddr+1
00098B  3  18           	clc			; add address of MAP graphics.
00098C  3  A5 rr        	lda bufaddr
00098E  3  65 rr        	adc dispx
000990  3  69 00        	adc #<MAP
000992  3  85 rr        	sta bufaddr
000994  3  A5 rr        	lda bufaddr+1
000996  3  69 98        	adc #>MAP
000998  3  85 rr        	sta bufaddr+1
00099A  3  60           	rts
00099B  3               
00099B  3               ;----------------------------------------------------
00099B  3               ; Display character in A at dispx,dispy.
00099B  3               ;
00099B  3               ; Input:
00099B  3               ;  A 	   = character to print
00099B  3               ;----------------------------------------------------
00099B  3               
00099B  3               pchar:
00099B  3  85 rr        	sta fntaddr
00099D  3  A9 00        	lda #0
00099F  3  85 rr        	sta fntaddr+1
0009A1  3  06 rr        	asl fntaddr  		; multiply char by 8.
0009A3  3  26 rr        	rol fntaddr+1
0009A5  3  06 rr        	asl fntaddr
0009A7  3  26 rr        	rol fntaddr+1
0009A9  3  06 rr        	asl fntaddr
0009AB  3  26 rr        	rol fntaddr+1
0009AD  3               
0009AD  3  A5 rr        	lda fntaddr
0009AF  3  18           	clc
0009B0  3  69 CD        	adc #<(FONT-256)
0009B2  3  85 rr        	sta fntaddr		; that's the low byte.
0009B4  3  A5 rr        	lda fntaddr+1
0009B6  3  69 78        	adc #>(FONT-256)
0009B8  3  85 rr        	sta fntaddr+1		; add displacement.
0009BA  3               pchark:
0009BA  3  20 4C 09     	jsr gprad		; get screen address.
0009BD  3  A2 07        	ldx #7			; lines to write.
0009BF  3               pchar0:
0009BF  3  A0 00        	ldy #0
0009C1  3  B1 rr        	lda (fntaddr),y 	; get image byte.
0009C3  3  BC D2 09     	ldy scrtab,x		; Get rowoffset
0009C6  3               .if gflag
0009C6  3               	and andeor
0009C6  3               	eor andeor+1
0009C6  3               .endif
0009C6  3               .if iflag
0009C6  3               	eor #$ff
0009C6  3               .endif
0009C6  3  91 rr        	sta (scraddr),y 	; copy to screen.
0009C8  3  E6 rr        	inc fntaddr		; next image byte.
0009CA  3  D0 02        	bne :+
0009CC  3  E6 rr        	inc fntaddr+1
0009CE  3               :
0009CE  3  CA           	dex			; next screen row down.
0009CF  3  10 EE        	bpl pchar0		; repeat.
0009D1  3  60           	rts
0009D2  3               
0009D2  3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
0009D6  3  60 40 20 00  
0009DA  3               
0009DA  3               ;----------------------------------------------
0009DA  3               
0009DA  3               ; Print attributes, properties and pixels.
0009DA  3               ;
0009DA  3               ; Input:
0009DA  3               ;  A	= tile number
0009DA  3               ;----------------------------------------------
0009DA  3               
0009DA  3               ;.repeat 294
0009DA  3               ;  .byte 0
0009DA  3               ;.endrep
0009DA  3               
0009DA  3               pbpattr:			; entry PUTBLOCK command
0009DA  3  A4 rr        	ldy charx
0009DC  3  84 rr        	sty dispx
0009DE  3  A4 rr        	ldy chary
0009E0  3  84 rr        	sty dispy
0009E2  3               pattr:
0009E2  3               .if aflag
0009E2  3               	pha
0009E2  3               	jsr wbloc		; save blockinfo
0009E2  3               	pla
0009E2  3               .endif
0009E2  3               
0009E2  3               pattr2:
0009E2  3  85 63        	sta z80_b		; store cell in b register for now.
0009E4  3  AA           	tax
0009E5  3  BD 95 2B     	lda bprop,x 		; block properties.
0009E8  3  85 62        	sta z80_c
0009EA  3  C9 08        	cmp #COLECT
0009EC  3  D0 05        	bne :+
0009EE  3  A5 63        	lda z80_b
0009F0  3  8D 01 0A     	sta colpatt
0009F3  3               :
0009F3  3  20 6F 09     	jsr pradd 		; get property buffer address.
0009F6  3  A5 62        	lda z80_c
0009F8  3  A0 00        	ldy #0
0009FA  3  91 rr        	sta (bufaddr),y 	; write property.
0009FC  3  A5 63        	lda z80_b 		; restore cell.
0009FE  3  4C 02 0A     	jmp panp
000A01  3               ; Print attributes, no properties.
000A01  3               
000A01  3               ;.repeat 263
000A01  3               ; .byte 0
000A01  3               ;.endrep
000A01  3               
000A01  3  00           colpatt:	.byte 0
000A02  3               
000A02  3               panp:
000A02  3  85 64        	sta z80_e		; displacement in e.
000A04  3  A9 00        	lda #0
000A06  3  85 65        	sta z80_d		; no high byte.
000A08  3  06 64        	asl z80_e  		; multiply char by 8.
000A0A  3  26 65        	rol z80_d
000A0C  3  06 64        	asl z80_e
000A0E  3  26 65        	rol z80_d
000A10  3  06 64        	asl z80_e
000A12  3  26 65        	rol z80_d
000A14  3  18           	clc
000A15  3  A5 64        	lda z80_e
000A17  3  69 D5        	adc #<chgfx 		; address of graphics.
000A19  3  85 rr        	sta tileaddr
000A1B  3  A5 65        	lda z80_d
000A1D  3  69 27        	adc #>chgfx
000A1F  3  85 rr        	sta tileaddr+1
000A21  3  20 4C 09     	jsr gprad 		; get screen address.
000A24  3  A2 07        	ldx #7			; number of pixel rows to write.
000A26  3               panp0:
000A26  3  A0 00        	ldy #0
000A28  3  B1 rr        	lda (tileaddr),y 	; get image byte.
000A2A  3               .if iflag
000A2A  3               	eor #$ff		; Invert
000A2A  3               .endif
000A2A  3  BC D2 09     	ldy scrtab,x
000A2D  3  91 rr        	sta (scraddr),y 	; copy to screen.
000A2F  3  E6 rr        	inc tileaddr 		; next image byte.
000A31  3  D0 02        	bne :+
000A33  3  E6 rr        	inc tileaddr+1
000A35  3               :
000A35  3  CA           	dex	 		; repeat for 8 pixel rows.
000A36  3  10 EE        	bpl panp0
000A38  3  E6 rr        	inc dispx 		; move along one.
000A3A  3  E6 rr        	inc charx
000A3C  3  60           	rts
000A3D  3               
000A3D  3               ;----------------------------------------------
000A3D  3               ; Write block
000A3D  3               ;----------------------------------------------
000A3D  3               
000A3D  3               .if aflag
000A3D  3               wbloc:
000A3D  3               	ldy #3
000A3D  3               	sta (pbptr),y		; store block number
000A3D  3               	dey
000A3D  3               	lda dispx
000A3D  3               	sta (pbptr),y		; write x position of block.
000A3D  3               	dey
000A3D  3               	lda dispy
000A3D  3               	sta (pbptr),y		; write y position of block.
000A3D  3               	dey
000A3D  3               	lda scno
000A3D  3               	sta (pbptr),y		; write screen.
000A3D  3               	clc			; point to next free location
000A3D  3               	lda pbptr
000A3D  3               	adc #4
000A3D  3               	sta pbptr
000A3D  3               	bcc :+
000A3D  3               	inc pbptr+1
000A3D  3               :
000A3D  3               	rts
000A3D  3               .endif
000A3D  3               
000A3D  3               ;----------------------------------------------
000A3D  3               ; Print character pixels, no more.
000A3D  3               ;
000A3D  3               ; Input:
000A3D  3               ;  A	= character to print
000A3D  3               ;----------------------------------------------
000A3D  3               
000A3D  3               pchr:
000A3D  3  20 9B 09     	jsr pchar 		; show character in accumulator.
000A40  3  E6 rr        	inc dispx		; move along one.
000A42  3  60           	rts
000A43  3               
000A43  3               ;----------------------------------------------------
000A43  3               ; Shifter sprite routine for objects.
000A43  3               ;----------------------------------------------------
000A43  3               
000A43  3               .if oflag
000A43  3               sprit7:
000A43  3  A5 63        	lda z80_b
000A45  3  F0 0F        	beq sprit0
000A47  3  85 61        	sta z80_a
000A49  3               sprit3:
000A49  3  4E D7 0A     	lsr spr			; shift into position.
000A4C  3  6E D8 0A     	ror spr+1
000A4F  3  6E D9 0A     	ror spr+2
000A52  3  C6 61        	dec z80_a		; one less iteration.
000A54  3  D0 F3        	bne sprit3
000A56  3               sprit0:
000A56  3  60           	rts 			; now apply to screen.
000A57  3               
000A57  3               ;----------------------------------------------------
000A57  3               ; Draw sprite
000A57  3               ;----------------------------------------------------
000A57  3               
000A57  3               sprite:
000A57  3  86 rr        	stx xtmp		; Save X-reg
000A59  3  20 FC 11     	jsr scadd 		; get screen address in scraddr.
000A5C  3               
000A5C  3  A5 rr        	lda dispx 		; x position.
000A5E  3  29 07        	and #7 			; position straddling cells.
000A60  3  85 63        	sta z80_b		; store in b register.
000A62  3               
000A62  3  A5 66        	lda z80_l		; store sprite graphic address.
000A64  3  8D 77 0A     	sta sprit1+1
000A67  3  8D 7E 0A     	sta sprit2+1
000A6A  3  A5 67        	lda z80_h
000A6C  3  8D 78 0A     	sta sprit1+2
000A6F  3  8D 7F 0A     	sta sprit2+2
000A72  3               
000A72  3  A2 00        	ldx #0			; pixel height.
000A74  3  A0 00        	ldy #0
000A76  3               sprit1:
000A76  3  BD A7 79     	lda objdta,x		; fetch first byte.
000A79  3  8D D7 0A     	sta spr
000A7C  3  E8           	inx
000A7D  3               sprit2:
000A7D  3  BD A7 79     	lda objdta,x
000A80  3  8D D8 0A     	sta spr+1
000A83  3               
000A83  3  A9 00        	lda #0
000A85  3  8D D9 0A     	sta spr+2
000A88  3  20 43 0A     	jsr sprit7		; shift sprite
000A8B  3               
000A8B  3  CA           	dex
000A8C  3  AD D7 0A     	lda spr			; fetch graphic.
000A8F  3  BC B7 0A     	ldy spritetab,x
000A92  3  51 rr        	eor (scraddr),y		; merge with screen image.
000A94  3  91 rr        	sta (scraddr),y		; write to screen.
000A96  3  E8           	inx			; next screen byte.
000A97  3               
000A97  3  AD D8 0A     	lda spr+1		; fetch graphic.
000A9A  3  BC B7 0A     	ldy spritetab,x
000A9D  3  51 rr        	eor (scraddr),y		; merge with screen image.
000A9F  3  91 rr        	sta (scraddr),y		; write to screen.
000AA1  3  C8           	iny
000AA2  3               
000AA2  3  AD D9 0A     	lda spr+2		; fetch graphic.
000AA5  3  51 rr        	eor (scraddr),y		; merge with screen image.
000AA7  3  91 rr        	sta (scraddr),y		; write to screen.
000AA9  3               
000AA9  3  E8           	inx			; next source byte.
000AAA  3  E0 10        	cpx #16
000AAC  3  D0 02        	bne :+
000AAE  3  E6 rr        	inc scraddr+1
000AB0  3               :
000AB0  3  E0 20        	cpx #32
000AB2  3  D0 C2        	bne sprit1		; repeat
000AB4  3               
000AB4  3  A6 rr        	ldx xtmp		; retreive X-reg
000AB6  3  60           	rts
000AB7  3               
000AB7  3               spritetab:
000AB7  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
000ABB  3  40 41 60 61  
000ABF  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
000AC3  3  C0 C1 E0 E1  
000AC7  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
000ACB  3  40 41 60 61  
000ACF  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
000AD3  3  C0 C1 E0 E1  
000AD7  3               
000AD7  3  00 00 00     spr:	.byte 0,0,0
000ADA  3               
000ADA  3               ;xtmp:	.byte 0
000ADA  3               .endif
000ADA  3               
000ADA  3               ;-----------------------------------------------------------
000ADA  3               ; Get room address.
000ADA  3               ;-----------------------------------------------------------
000ADA  3               
000ADA  3               ;.repeat 273
000ADA  3               ;  .byte 0
000ADA  3               ;.endrep
000ADA  3               
000ADA  3               groom:
000ADA  3  A6 rr        	ldx scno 		; screen number.
000ADC  3  A0 00        	ldy #0
000ADE  3               groomx:
000ADE  3  A9 BB        	lda #<scdat 		; pointer to screens.
000AE0  3  85 66        	sta z80_l
000AE2  3  A9 45        	lda #>scdat
000AE4  3  85 67        	sta z80_h
000AE6  3               groom1:
000AE6  3  E0 00        	cpx #0			; is it the first one?
000AE8  3  F0 15        	beq groom0 		; no more screens to skip.
000AEA  3               
000AEA  3  18           	clc
000AEB  3  A5 66        	lda z80_l
000AED  3  79 BB 45     	adc scdat,y 		; low byte of screen size.
000AF0  3  85 66        	sta z80_l
000AF2  3  C8           	iny			; point to high byte.
000AF3  3  A5 67        	lda z80_h
000AF5  3  79 BB 45     	adc scdat,y 		; high byte of screen size.
000AF8  3  85 67        	sta z80_h
000AFA  3  C8           	iny			; next address.
000AFB  3               
000AFB  3  CA           	dex 			; one less iteration.
000AFC  3  4C E6 0A     	jmp groom1 		; loop until we reach the end.
000AFF  3               groom0:
000AFF  3  AD 35 78     	lda numsc 		; add displacement.
000B02  3  0A           	asl a
000B03  3  18           	clc			; add double displacement to address.
000B04  3  65 66        	adc z80_l
000B06  3  85 66        	sta z80_l
000B08  3  A5 67        	lda z80_h
000B0A  3  69 00        	adc #0
000B0C  3  85 67        	sta z80_h
000B0E  3  60           	rts
000B0F  3               
000B0F  3               ;-----------------------------------------------------------
000B0F  3               ; Draw present room.
000B0F  3               ;-----------------------------------------------------------
000B0F  3               
000B0F  3               droom:
000B0F  3  AD 28 03     	lda wintop 		; window top.
000B12  3  85 rr        	sta dispy		; set cursor y position.
000B14  3               droom2:
000B14  3  20 DA 0A     	jsr groom 		; get address of current room.
000B17  3  A9 00        	lda #0	 		; zero in accumulator.
000B19  3  85 rr        	sta comcnt 		; reset compression counter.
000B1B  3  AD 2A 03     	lda winhgt 		; height of window.
000B1E  3  85 rr        	sta rrow		; set row counter
000B20  3               droom0:
000B20  3  AD 29 03     	lda winlft 		; window left edge.
000B23  3  85 rr        	sta dispx 		; set cursor x position.
000B25  3  AD 2B 03     	lda winwid 		; width of window.
000B28  3  85 rr        	sta rcol		; set column counter
000B2A  3               droom1:
000B2A  3  20 3B 0B     	jsr flbyt 		; decompress next byte on the fly.
000B2D  3  20 E2 09     	jsr pattr2 		; show attributes and block.
000B30  3  C6 rr        	dec rcol		; one less column.
000B32  3  D0 F6        	bne droom1 		; repeat for entire line.
000B34  3  E6 rr        	inc dispy		; move down one line.
000B36  3  C6 rr        	dec rrow 		; one less row.
000B38  3  D0 E6        	bne droom0 		; repeat for all rows.
000B3A  3  60           	rts
000B3B  3               
000B3B  3               ;rcol:	.byte 0
000B3B  3               ;rrow:	.byte 0
000B3B  3               
000B3B  3               ;----------------------------------------------
000B3B  3               ; Decompress bytes on-the-fly.
000B3B  3               ;----------------------------------------------
000B3B  3               
000B3B  3               flbyt:
000B3B  3  A5 rr        	lda comcnt 		; compression counter.
000B3D  3  D0 21        	bne flbyt1		; any more to decompress?  yes.
000B3F  3               
000B3F  3  A0 00        	ldy #0
000B41  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
000B43  3  E6 66        	inc z80_l 		; point to next cell.
000B45  3  D0 02        	bne :+
000B47  3  E6 67        	inc z80_h
000B49  3               :
000B49  3  C9 FF        	cmp #255 		; is this byte a control code?
000B4B  3  F0 01        	beq :+
000B4D  3  60           	rts 			; no, this byte is uncompressed.
000B4E  3               :
000B4E  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
000B50  3  85 rr        	sta combyt 		; set up the type.
000B52  3  E6 66        	inc z80_l 		; point to quantity.
000B54  3  D0 02        	bne :+
000B56  3  E6 67        	inc z80_h
000B58  3               :
000B58  3  B1 66        	lda (z80_hl),y 		; get quantity.
000B5A  3  E6 66        	inc z80_l 		; point to next byte.
000B5C  3  D0 02        	bne :+
000B5E  3  E6 67        	inc z80_h
000B60  3               :
000B60  3               flbyt1:
000B60  3  85 rr        	sta comcnt 		; store new quantity.
000B62  3  C6 rr        	dec comcnt		; one less.
000B64  3  A5 rr        	lda combyt 		; byte to expand.
000B66  3  60           	rts
000B67  3               
000B67  3               ;combyt:	.byte 0			; byte type compressed.
000B67  3               ;comcnt:	.byte 0			; compression counter.
000B67  3               
000B67  3               ;------------------------------------------
000B67  3               ; Ladder down check.
000B67  3               ;
000B67  3               ; Input:
000B67  3               ;  IX = sprite pointer
000B67  3               ;------------------------------------------
000B67  3               
000B67  3               .if lflag
000B67  3               laddd:
000B67  3  A0 09        	ldy #9
000B69  3  B1 68        	lda (z80_ix),y		; x coordinate.
000B6B  3  85 rr        	sta dispx
000B6D  3               
000B6D  3  A0 08        	ldy #8
000B6F  3  B1 68        	lda (z80_ix),y		; y coordinate.
000B71  3  29 FE        	and #254		; make it even.
000B73  3  91 68        	sta (z80_ix),y 		; reset it.
000B75  3  18           	clc 			; look down 16 pixels.
000B76  3               numsp5:
000B76  3  69 10        	adc #SPR_HGT
000B78  3  85 rr        	sta dispy		; coords in dispx,dispy.
000B7A  3  4C 90 0B     	jmp laddv
000B7D  3               
000B7D  3               ;------------------------------------------
000B7D  3               ; Ladder up check.
000B7D  3               ;
000B7D  3               ; Input:
000B7D  3               ;  IX = sprite pointer
000B7D  3               ;
000B7D  3               ; Output:
000B7D  3               ;  A  = 0 is ok, A <>0 is not ok
000B7D  3               ;------------------------------------------
000B7D  3               
000B7D  3               laddu:
000B7D  3  A0 09        	ldy #9
000B7F  3  B1 68        	lda (z80_ix),y		; x coordinate.
000B81  3  85 rr        	sta dispx
000B83  3               
000B83  3  A0 08        	ldy #8
000B85  3  B1 68        	lda (z80_ix),y		; y coordinate.
000B87  3  29 FE        	and #254 		; make it even.
000B89  3  91 68        	sta (z80_ix),y		; reset it.
000B8B  3  18           	clc 			; look 2 pixels above feet.
000B8C  3               numsp6:
000B8C  3  69 0E        	adc #SPR_HGT-2
000B8E  3  85 rr        	sta dispy		; coords in dispx,dispy.
000B90  3               laddv:
000B90  3  20 62 0D     	jsr tstbl 		; get map address.
000B93  3  20 99 0C     	jsr ldchk 		; standard ladder check.
000B96  3  F0 01        	beq :+
000B98  3  60           	rts 			; no way through.
000B99  3               :
000B99  3  E6 rr        	inc bufaddr 		; look right one cell.
000B9B  3  D0 02        	bne :+
000B9D  3  E6 rr        	inc bufaddr+1
000B9F  3               :
000B9F  3  20 99 0C     	jsr ldchk 		; do the check.
000BA2  3  F0 01        	beq :+
000BA4  3  60           	rts 			; impassable.
000BA5  3               :
000BA5  3  A5 rr        	lda dispx 		; y coordinate.
000BA7  3  29 07        	and #7 			; position straddling block cells.
000BA9  3  D0 01        	bne :+
000BAB  3  60           	rts 			; no more checks needed.
000BAC  3               :
000BAC  3  E6 rr        	inc bufaddr 		; look to third cell.
000BAE  3  D0 02        	bne :+
000BB0  3  E6 rr        	inc bufaddr+1
000BB2  3               :
000BB2  3  20 99 0C     	jsr ldchk 		; do the check.
000BB5  3  60           	rts  			; return with zero flag set accordingly.
000BB6  3               .endif
000BB6  3               
000BB6  3               ;---------------------------------------------------------
000BB6  3               ; Can go up check.
000BB6  3               ;
000BB6  3               ; Input:
000BB6  3               ;  IX = sprite pointer
000BB6  3               ;
000BB6  3               ; Output:
000BB6  3               ;  A  = 0 is ok, A <>0 is not ok
000BB6  3               ;---------------------------------------------------------
000BB6  3               
000BB6  3               cangu:
000BB6  3  A0 09        	ldy #9
000BB8  3  B1 68        	lda (z80_ix),y		; x coordinate.
000BBA  3  85 rr        	sta dispx
000BBC  3  A0 08        	ldy #8
000BBE  3  B1 68        	lda (z80_ix),y 		; y coordinate.
000BC0  3  38           	sec
000BC1  3  E9 02        	sbc #2
000BC3  3  85 rr        	sta dispy		; coords in dispx,dispy.
000BC5  3  20 62 0D     	jsr tstbl 		; get map address.
000BC8  3  20 68 0C     	jsr lrchk 		; standard left/right check.
000BCB  3  F0 01        	beq :+
000BCD  3  60           	rts			; no way through.
000BCE  3               :
000BCE  3  E6 rr        	inc bufaddr		; look right one cell.
000BD0  3  D0 02        	bne :+
000BD2  3  E6 rr        	inc bufaddr+1
000BD4  3               :
000BD4  3  20 68 0C     	jsr lrchk 		; do the check.
000BD7  3  F0 01        	beq :+
000BD9  3  60           	rts			; impassable.
000BDA  3               :
000BDA  3  A5 rr        	lda dispx		; x coordinate.
000BDC  3  29 07        	and #7			; position straddling block cells.
000BDE  3  D0 01        	bne :+
000BE0  3  60           	rts			; no more checks needed.
000BE1  3               :
000BE1  3  E6 rr        	inc bufaddr		; look to third cell.
000BE3  3  D0 02        	bne :+
000BE5  3  E6 rr        	inc bufaddr+1
000BE7  3               :
000BE7  3  20 68 0C     	jsr lrchk		; do the check.
000BEA  3  60           	rts 			; return with zero flag set accordingly.
000BEB  3               
000BEB  3               ;---------------------------------------------------------
000BEB  3               ; Can go down check.
000BEB  3               ;
000BEB  3               ; Input:
000BEB  3               ;  IX = sprite pointer
000BEB  3               ;
000BEB  3               ; Output:
000BEB  3               ;  A  = 0 is ok, A <>0 is not ok
000BEB  3               ;---------------------------------------------------------
000BEB  3               
000BEB  3               ;.repeat 264
000BEB  3               ;  .byte 0
000BEB  3               ;.endrep
000BEB  3               
000BEB  3               cangd:
000BEB  3  A0 09        	ldy #9
000BED  3  B1 68        	lda (z80_ix),y 		; x coordinate.
000BEF  3  85 rr        	sta dispx
000BF1  3  A0 08        	ldy #8
000BF3  3  B1 68        	lda (z80_ix),y		; y coordinate.
000BF5  3  18           	clc
000BF6  3               numsp3:
000BF6  3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
000BF8  3  85 rr        	sta dispy		; coords in dispx,dispy.
000BFA  3  20 62 0D     	jsr tstbl 		; get map address.
000BFD  3  20 7D 0C     	jsr plchk 		; block, platform check.
000C00  3  F0 01        	beq :+
000C02  3  60           	rts			; no way through.
000C03  3               :
000C03  3  E6 rr        	inc bufaddr		; look right one cell.
000C05  3  D0 02        	bne :+
000C07  3  E6 rr        	inc bufaddr+1
000C09  3               :
000C09  3  20 7D 0C     	jsr plchk		; block, platform check.
000C0C  3  F0 01        	beq :+
000C0E  3  60           	rts			; impassable.
000C0F  3               :
000C0F  3  A5 rr        	lda dispx		; x coordinate.
000C11  3  29 07        	and #7			; position straddling block cells.
000C13  3  D0 01        	bne :+
000C15  3  60           	rts			; no more checks needed.
000C16  3               :
000C16  3  E6 rr        	inc bufaddr		; look to third cell.
000C18  3  D0 02        	bne :+
000C1A  3  E6 rr        	inc bufaddr+1
000C1C  3               :
000C1C  3  20 7D 0C     	jsr plchk		; block, platform check.
000C1F  3  60           	rts			; return with zero flag set accordingly.
000C20  3               
000C20  3               ;---------------------------------------------------------
000C20  3               ; Can go left check.
000C20  3               ;
000C20  3               ; Input:
000C20  3               ;  IX = sprite pointer
000C20  3               ;
000C20  3               ; Output:
000C20  3               ;  A  = 0 is ok, A <>0 is not ok
000C20  3               ;---------------------------------------------------------
000C20  3               
000C20  3               cangl:
000C20  3  A0 08        	ldy #8
000C22  3  B1 68        	lda (z80_ix),y 		; y coordinate.
000C24  3  85 rr        	sta dispy
000C26  3  A0 09        	ldy #9
000C28  3  B1 68        	lda (z80_ix),y 		; x coordinate.
000C2A  3  38           	sec
000C2B  3  E9 02        	sbc #2			; look left 2 pixels.
000C2D  3  85 rr        	sta dispx		; coords in dispx,dispy.
000C2F  3  4C 41 0C     	jmp cangh		; test if we can go there.
000C32  3               
000C32  3               ;---------------------------------------------------------
000C32  3               ; Can go right check.
000C32  3               ;
000C32  3               ; Input:
000C32  3               ;  IX = sprite pointer
000C32  3               ;
000C32  3               ; Output:
000C32  3               ;  A  = 0 is ok, A <>0 is not ok
000C32  3               ;---------------------------------------------------------
000C32  3               
000C32  3               ;.repeat 272
000C32  3               ;  .byte 0
000C32  3               ;.endrep
000C32  3               
000C32  3               cangr:
000C32  3  A0 08        	ldy #8
000C34  3  B1 68        	lda (z80_ix),y		; y coordinate.
000C36  3  85 rr        	sta dispy
000C38  3  A0 09        	ldy #9
000C3A  3  B1 68        	lda (z80_ix),y		; x coordinate.
000C3C  3  18           	clc
000C3D  3  69 10        	adc #16			; look right 16 pixels.
000C3F  3  85 rr        	sta dispx		; coords in dispx,dispy.
000C41  3               cangh:
000C41  3               cangh2:
000C41  3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
000C43  3  85 63        	sta z80_b
000C45  3  A5 rr        	lda dispy		; y position.
000C47  3  29 07        	and #7			; does x straddle cells?
000C49  3  D0 02        	bne cangh0		; yes, loop counter is good.
000C4B  3  C6 63        	dec z80_b		; one less row to write.
000C4D  3               cangh0:
000C4D  3  20 62 0D     	jsr tstbl		; get map address.
000C50  3               cangh1:
000C50  3  20 68 0C     	jsr lrchk		; standard left/right check.
000C53  3  F0 01        	beq :+
000C55  3  60           	rts			; no way through.
000C56  3               :
000C56  3  48           	pha
000C57  3  18           	clc
000C58  3  A5 rr        	lda bufaddr
000C5A  3  69 20        	adc #32			; look down.
000C5C  3  85 rr        	sta bufaddr
000C5E  3  90 02        	bcc :+
000C60  3  E6 rr        	inc bufaddr+1
000C62  3               :
000C62  3  68           	pla
000C63  3               
000C63  3  C6 63        	dec z80_b
000C65  3  D0 E9        	bne cangh1
000C67  3  60           	rts
000C68  3               
000C68  3               ;-------------------------------------
000C68  3               ; Check left/right movement is okay.
000C68  3               ;
000C68  3               ; Input:
000C68  3               ;  bufaddr = MAP + x/8 + y/8*32
000C68  3               ;
000C68  3               ; Output:
000C68  3               ;  A  = 0 is ok, A <>0 is not ok
000C68  3               ;-------------------------------------
000C68  3               
000C68  3               lrchk:
000C68  3  A0 00        	ldy #0
000C6A  3  B1 rr        	lda (bufaddr),y		; fetch map cell.
000C6C  3  C9 02        	cmp #WALL 		; is it passable?
000C6E  3  F0 0A        	beq lrchkx		; no.
000C70  3               
000C70  3  C9 04        	cmp #FODDER		; fodder has to be dug.
000C72  3  F0 06        	beq lrchkx		; not passable.
000C74  3  A9 00        	lda #0
000C76  3  60           	rts
000C77  3               
000C77  3               ;--------------------------------------------------------------
000C77  3               ; Called by mmenu
000C77  3               ;--------------------------------------------------------------
000C77  3               
000C77  3               always:
000C77  3  A9 FF        	lda #255		; report it as okay.
000C79  3  60           	rts
000C7A  3               
000C7A  3               lrchkx:
000C7A  3  A9 01        	lda #1 			; reset all bits.
000C7C  3  60           	rts
000C7D  3               
000C7D  3               
000C7D  3               ;--------------------------------------------------------------
000C7D  3               ; Check platform or solid item is not in way.
000C7D  3               ;
000C7D  3               ; Input:
000C7D  3               ;  bufaddr = MAP + x/8 + y/8*32
000C7D  3               ;
000C7D  3               ; Output:
000C7D  3               ;  A  = 0 is ok, A <>0 is not ok
000C7D  3               ;--------------------------------------------------------------
000C7D  3               
000C7D  3               plchk:
000C7D  3  A0 00        	ldy #0
000C7F  3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
000C81  3  C9 02        	cmp #WALL 		; is it passable?
000C83  3  F0 F5        	beq lrchkx		; no.
000C85  3               .if pflag .or dflag
000C85  3               	cmp #FODDER		; fodder has to be dug.
000C85  3               	beq lrchkx		; not passable.
000C85  3               .endif
000C85  3  C9 01        	cmp #PLATFM		; platform is solid.
000C87  3  F0 07        	beq plchkx		; not passable.
000C89  3               .if lflag
000C89  3  C9 03        	cmp #LADDER		; is it a ladder?
000C8B  3  F0 ED        	beq lrchkx		; on ladder, deny movement.
000C8D  3               .endif
000C8D  3               plchk0:
000C8D  3  A9 00        	lda #0			; report as ok
000C8F  3  60           	rts
000C90  3               plchkx:
000C90  3  A5 rr        	lda dispy		; x coordinate.
000C92  3  29 07        	and #7			; position straddling blocks.
000C94  3  F0 E4        	beq lrchkx		; on platform, deny movement.
000C96  3  4C 8D 0C     	jmp plchk0
000C99  3               
000C99  3               ;--------------------------------------------------------------
000C99  3               ; Check ladder is available.
000C99  3               ;
000C99  3               ; Input:
000C99  3               ;  bufaddr = MAP + x/8 + y/8*32
000C99  3               ;
000C99  3               ; Output:
000C99  3               ;  A  = 0 is ok, A <>0 is not ok
000C99  3               ;--------------------------------------------------------------
000C99  3               
000C99  3               .if lflag
000C99  3               ldchk:
000C99  3  A0 00        	ldy #0
000C9B  3  B1 rr        	lda (bufaddr),y 	; fetch cell.
000C9D  3  C9 03        	cmp #LADDER 		; is it a ladder?
000C9F  3  F0 03        	beq :+
000CA1  3  A9 01        	lda #1
000CA3  3  60           	rts  			; return with zero flag set accordingly.
000CA4  3               :
000CA4  3  A9 00        	lda #0
000CA6  3  60           	rts
000CA7  3               .endif
000CA7  3               
000CA7  3               ;--------------------------------------------------------------
000CA7  3               ; Get collectables.
000CA7  3               ;--------------------------------------------------------------
000CA7  3               
000CA7  3               .if cflag
000CA7  3               getcol:
000CA7  3                       lda #COLECT             ; collectable blocks.
000CA7  3                       sta z80_b
000CA7  3                       jsr tded                ; test for collectable blocks.
000CA7  3                       cmp z80_b               ; did we find one?
000CA7  3                       beq :+
000CA7  3                       rts                     ; none were found, job done.
000CA7  3               :
000CA7  3                       jsr gtblk               ; get block.
000CA7  3                       jsr evnt20              ; collected block event.
000CA7  3                       jmp getcol              ; repeat until none left.
000CA7  3               
000CA7  3               ; Get collectable block.
000CA7  3               
000CA7  3               gtblk:
000CA7  3               	ldy #0
000CA7  3               	lda (bufaddr),y
000CA7  3               	sta z80_a
000CA7  3                       lda #0
000CA7  3                       sta (bufaddr),y		; make it empty now.
000CA7  3               
000CA7  3               	lda bufaddr		; set dispx
000CA7  3               	and #31
000CA7  3               	sta dispx
000CA7  3               
000CA7  3               	lda bufaddr+1		; Set dispy
000CA7  3               	sec
000CA7  3               	sbc #>MAP
000CA7  3               	sta bufaddr+1
000CA7  3               	asl bufaddr
000CA7  3               	rol bufaddr+1
000CA7  3               	asl bufaddr
000CA7  3               	rol bufaddr+1
000CA7  3               	asl bufaddr
000CA7  3               	rol bufaddr+1
000CA7  3               	lda bufaddr+1
000CA7  3               	sta dispy
000CA7  3               
000CA7  3               	lda colpatt		; get blocknr
000CA7  3               	sta z80_e		; displacement in e.
000CA7  3               	lda #0
000CA7  3               	sta z80_d		; no high byte.
000CA7  3               	asl z80_e  		; multiply char by 8.
000CA7  3               	rol z80_d
000CA7  3               	asl z80_e
000CA7  3               	rol z80_d
000CA7  3               	asl z80_e
000CA7  3               	rol z80_d
000CA7  3               	clc
000CA7  3               	lda z80_e
000CA7  3               	adc #<chgfx 		; address of graphics.
000CA7  3               	sta tileaddr
000CA7  3               	lda z80_d
000CA7  3               	adc #>chgfx
000CA7  3               	sta tileaddr+1
000CA7  3               	jsr gprad 		; get screen address.
000CA7  3               	ldx #7			; number of pixel rows to write.
000CA7  3               gtblk0:
000CA7  3               	ldy #0
000CA7  3               	lda (tileaddr),y 	; get image byte.
000CA7  3               	ldy scrtab,x
000CA7  3               	eor (scraddr),y 	; XOR tile on screen
000CA7  3               	sta (scraddr),y 	; copy to screen.
000CA7  3               	inc tileaddr 		; next image byte.
000CA7  3               	bne :+
000CA7  3               	inc tileaddr+1
000CA7  3               :
000CA7  3               	dex	 		; repeat for 8 pixel rows.
000CA7  3               	bpl gtblk0
000CA7  3               	rts
000CA7  3               .endif
000CA7  3               
000CA7  3               ;--------------------------------------------------------------
000CA7  3               ; Touched deadly block check.
000CA7  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
000CA7  3               ;
000CA7  3               ; Input:
000CA7  3               ;  IX = sprite address
000CA7  3               ;
000CA7  3               ; Output:
000CA7  3               ;  A  = 0 is ok, A=5 is not ok
000CA7  3               ;--------------------------------------------------------------
000CA7  3               
000CA7  3               tded:
000CA7  3  A0 08        	ldy #8
000CA9  3  B1 68        	lda (z80_ix),y 		; y coordinate.
000CAB  3  85 rr        	sta dispy
000CAD  3  C8           	iny
000CAE  3  B1 68        	lda (z80_ix),y 		; x coordinate.
000CB0  3  85 rr        	sta dispx		; coords in dispx,dispy.
000CB2  3  20 62 0D     	jsr tstbl		; get map address.
000CB5  3  48           	pha
000CB6  3  A9 1F        	lda #31			; default distance to next line down.
000CB8  3  85 64        	sta z80_e
000CBA  3  68           	pla
000CBB  3  C5 63        	cmp z80_b		; is this the required block?
000CBD  3  D0 01        	bne :+
000CBF  3  60           	rts			; yes.
000CC0  3               :
000CC0  3  E6 rr        	inc bufaddr 		; next cell.
000CC2  3  D0 02        	bne :+
000CC4  3  E6 rr        	inc bufaddr+1
000CC6  3               :
000CC6  3  A0 00        	ldy #0
000CC8  3  B1 rr        	lda (bufaddr),y		; fetch type.
000CCA  3  C5 63        	cmp z80_b 		; is this deadly/custom?
000CCC  3  D0 01        	bne :+
000CCE  3  60           	rts			; yes.
000CCF  3               :
000CCF  3  A5 rr        	lda dispx		; horizontal position.
000CD1  3  85 62        	sta z80_c 		; store column in c register.
000CD3  3  29 07        	and #7			; is it straddling cells?
000CD5  3  D0 03        	bne :+
000CD7  3  4C EB 0C     	jmp tded0		; no.
000CDA  3               :
000CDA  3  E6 rr        	inc bufaddr 		; last cell.
000CDC  3  D0 02        	bne :+
000CDE  3  E6 rr        	inc bufaddr+1
000CE0  3               :
000CE0  3  A0 00        	ldy #0
000CE2  3  B1 rr        	lda (bufaddr),y 	; fetch type.
000CE4  3  C5 63        	cmp z80_b		; is this the block?
000CE6  3  D0 01        	bne :+
000CE8  3  60           	rts			; yes.
000CE9  3               :
000CE9  3  C6 64        	dec z80_e		; one less cell to next row down.
000CEB  3               tded0:
000CEB  3  18           	clc 			; point to next row.
000CEC  3  A5 rr        	lda bufaddr
000CEE  3  65 64        	adc z80_e
000CF0  3  85 rr        	sta bufaddr
000CF2  3  90 02        	bcc :+
000CF4  3  E6 rr        	inc bufaddr+1
000CF6  3               :
000CF6  3  A0 00        	ldy #0
000CF8  3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
000CFA  3  C5 63        	cmp z80_b		; is this fatal?
000CFC  3  D0 01        	bne :+
000CFE  3  60           	rts			; yes.
000CFF  3               :
000CFF  3  E6 rr        	inc bufaddr 		; next cell.
000D01  3  D0 02        	bne :+
000D03  3  E6 rr        	inc bufaddr+1
000D05  3               :
000D05  3  A0 00        	ldy #0
000D07  3  B1 rr        	lda (bufaddr),y 	; fetch type.
000D09  3  C5 63        	cmp z80_b		; is this fatal?
000D0B  3  D0 01        	bne :+
000D0D  3  60           	rts			; yes.
000D0E  3               :
000D0E  3  A5 62        	lda z80_c		; horizontal position.
000D10  3  29 07        	and #7			; is it straddling cells?
000D12  3  D0 03        	bne :+
000D14  3  4C 26 0D     	jmp tded1 		; no.
000D17  3               :
000D17  3  E6 rr        	inc bufaddr		; last cell.
000D19  3  D0 02        	bne :+
000D1B  3  E6 rr        	inc bufaddr+1
000D1D  3               :
000D1D  3  A0 00        	ldy #0
000D1F  3  B1 rr        	lda (bufaddr),y		; fetch type.
000D21  3  C5 63        	cmp z80_b		; is this fatal?
000D23  3  D0 01        	bne :+
000D25  3  60           	rts			; yes.
000D26  3               :
000D26  3               tded1:
000D26  3  A5 rr        	lda dispy		; vertical position.
000D28  3  29 07        	and #7 			; is it straddling cells?
000D2A  3  D0 01        	bne :+
000D2C  3  60           	rts			; no, job done.
000D2D  3               :
000D2D  3  18           	clc			; point to next row.
000D2E  3  A5 rr        	lda bufaddr
000D30  3  65 64        	adc z80_e
000D32  3  85 rr        	sta bufaddr
000D34  3  90 02        	bcc :+
000D36  3  E6 rr        	inc bufaddr+1
000D38  3               :
000D38  3  A0 00        	ldy #0
000D3A  3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
000D3C  3  C5 63        	cmp z80_b		; is this fatal?
000D3E  3  D0 01        	bne :+
000D40  3  60           	rts			; yes.
000D41  3               :
000D41  3  E6 rr        	inc bufaddr		; next cell.
000D43  3  D0 02        	bne :+
000D45  3  E6 rr        	inc bufaddr+1
000D47  3               :
000D47  3  A0 00        	ldy #0
000D49  3  B1 rr        	lda (bufaddr),y 	; fetch type.
000D4B  3  C5 63        	cmp z80_b		; is this fatal?
000D4D  3  D0 01        	bne :+
000D4F  3  60           	rts			; yes.
000D50  3               :
000D50  3  A5 62        	lda z80_c		; horizontal position.
000D52  3  29 07        	and #7			; is it straddling cells?
000D54  3  D0 01        	bne :+
000D56  3  60           	rts			; no.
000D57  3               :
000D57  3  E6 rr        	inc bufaddr		; last cell.
000D59  3  D0 02        	bne :+
000D5B  3  E6 rr        	inc bufaddr+1
000D5D  3               :
000D5D  3  A0 00        	ldy #0
000D5F  3  B1 rr        	lda (bufaddr),y		; fetch final type.
000D61  3  60           	rts 			; return with final type in accumulator.
000D62  3               
000D62  3               ;---------------------------------------------------
000D62  3               ; Fetch block type at (dispx, dispy).
000D62  3               ;
000D62  3               ; Output:
000D62  3               ;  A = block type
000D62  3               ;---------------------------------------------------
000D62  3               
000D62  3               tstbl:
000D62  3  A5 rr        	lda dispy 		; fetch y coord.
000D64  3  4A           	lsr a			; bufaddr = y/8
000D65  3  4A           	lsr a
000D66  3  4A           	lsr a
000D67  3  85 rr        	sta chary
000D69  3               
000D69  3  85 rr        	sta bufaddr
000D6B  3  A9 00        	lda #0
000D6D  3  85 rr        	sta bufaddr+1
000D6F  3               
000D6F  3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
000D71  3  26 rr        	rol bufaddr+1
000D73  3  06 rr        	asl bufaddr
000D75  3  26 rr        	rol bufaddr+1
000D77  3  06 rr        	asl bufaddr
000D79  3  26 rr        	rol bufaddr+1
000D7B  3  06 rr        	asl bufaddr
000D7D  3  26 rr        	rol bufaddr+1
000D7F  3  06 rr        	asl bufaddr
000D81  3  26 rr        	rol bufaddr+1
000D83  3               
000D83  3  A5 rr        	lda dispx		; x/8
000D85  3  4A           	lsr a
000D86  3  4A           	lsr a
000D87  3  4A           	lsr a
000D88  3  85 rr        	sta charx
000D8A  3               
000D8A  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
000D8B  3  65 rr        	adc bufaddr
000D8D  3  69 00        	adc #<MAP
000D8F  3  85 rr        	sta bufaddr
000D91  3  A5 rr        	lda bufaddr+1
000D93  3  69 98        	adc #>MAP
000D95  3  85 rr        	sta bufaddr+1
000D97  3               
000D97  3  A0 00        	ldy #0
000D99  3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
000D9B  3  60           	rts
000D9C  3               
000D9C  3               
000D9C  3               ;-------------------------------------------------------------------
000D9C  3               ; Jump - if we can.
000D9C  3               ; Requires initial speed to be set up in accumulator prior to call.
000D9C  3               ;
000D9C  3               ; Input:
000D9C  3               ;  IX = sprite address
000D9C  3               ;-------------------------------------------------------------------
000D9C  3               
000D9C  3               jump:
000D9C  3  A0 0D        	ldy #13
000D9E  3  B1 68        	lda (z80_ix),y		; jump table low.
000DA0  3  A0 0E        	ldy #14
000DA2  3  11 68        	ora (z80_ix),y		; jump table high.
000DA4  3  F0 01        	beq :+
000DA6  3  60           	rts			; already in the air.
000DA7  3               :
000DA7  3  A9 7C        	lda #>jtab
000DA9  3  A0 0E        	ldy #14
000DAB  3  91 68        	sta (z80_ix),y		; set jump high.
000DAD  3  A9 CD        	lda #<jtab		; jump table start.
000DAF  3  A0 0D        	ldy #13
000DB1  3  91 68        	sta (z80_ix),y		; set jump low.
000DB3  3  60           	rts
000DB4  3               
000DB4  3               ; Jump table.
000DB4  3               
000DB4  3               ;jtab:
000DB4  3               ;	.byte 248,250,252
000DB4  3               ;	.byte 254,254,255
000DB4  3               ;	.byte 255,255,0,0
000DB4  3               ;	.byte 0,1,1,1,2,2
000DB4  3               ;	.byte 4,6,8,8,8,99
000DB4  3               
000DB4  3               ;------------------------------------------------
000DB4  3               ; Random numbers code.
000DB4  3               ; Pseudo-random number generator, 8-bit.
000DB4  3               ;
000DB4  3               ; Output:
000DB4  3               ;  RND = random number
000DB4  3               ;------------------------------------------------
000DB4  3               
000DB4  3               random:
000DB4  3  A5 rr        	lda seed
000DB6  3  F0 05        	beq doEor
000DB8  3  0A           	asl a
000DB9  3  F0 04        	beq noEor
000DBB  3  90 02        	bcc noEor
000DBD  3  49 1D        doEor:	eor #$1d
000DBF  3  85 rr        noEor:	sta seed
000DC1  3  60           	rts
000DC2  3               
000DC2  3  A5 rr        	lda seed		; get last random number.
000DC4  3  0A           	asl a
000DC5  3  0A           	asl a
000DC6  3  18           	clc
000DC7  3  65 rr        	adc seed
000DC9  3  18           	clc
000DCA  3  69 45        	adc #$45
000DCC  3  85 rr        	sta seed		; store new seed.
000DCE  3  85 rr        	sta varrnd		; return number in variable.
000DD0  3  60           	rts
000DD1  3               
000DD1  3               ;--------------------------------------------------------
000DD1  3               ; Keys
000DD1  3               ;
000DD1  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
000DD1  3               ;             ||||||||
000DD1  3               ;             |||||||+> Right    KEY 0  - X
000DD1  3               ;             ||||||+-> Left     KEY 1  - Z
000DD1  3               ;             |||||+--> Down     KEY 2  - .
000DD1  3               ;             ||||+---> Up       KEY 3  - ;
000DD1  3               ;             |||+----> Fire1    KEY 4  - SPC
000DD1  3               ;             ||+-----> Fire2    KEY 5  - Q
000DD1  3               ;             |+------> Fire3    KEY 6  - P
000DD1  3               ;             +-------> Not used
000DD1  3               ;
000DD1  3               ;                       Option1  KEY 7  - 1
000DD1  3               ;                       Option2  KEY 8  - 2
000DD1  3               ;                       Option3  KEY 9  - 3
000DD1  3               ;                       Option4  KEY 10 - 4
000DD1  3               ;--------------------------------------------------------
000DD1  3               
000DD1  3               ;              X   Z   .   ;  SPC  Q   P
000DD1  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
000DD1  3               ;        .byte $21,$11,$01,$92                   ; menu options.
000DD1  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
000DD5  3  00 04 14     
000DD8  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
000DDC  3               
000DDC  3               ;--------------------------------------------------------
000DDC  3               ; Keyboard test routine.
000DDC  3               ;
000DDC  3               ; Input:
000DDC  3               ;  A = key to read, high nibble=row and low nibble=col
000DDC  3               ;
000DDC  3               ; Output:
000DDC  3               ;  carry clr = key pressed
000DDC  3               ;  carry set = key not pressed
000DDC  3               ;--------------------------------------------------------
000DDC  3               
000DDC  3               ktest:
000DDC  3  85 61        	sta z80_a		; save key
000DDE  3               
000DDE  3  4A           	lsr a			; set row
000DDF  3  4A           	lsr a
000DE0  3  4A           	lsr a
000DE1  3  4A           	lsr a
000DE2  3  09 F0        	ora #ScrMode		; don't flip screenmode
000DE4  3  8D 00 B0     	sta KeyRowAddr
000DE7  3               
000DE7  3  A5 61        	lda z80_a
000DE9  3  29 0F        	and #$0f
000DEB  3  AA           	tax
000DEC  3  AD 01 B0     	lda KeyColAddr		; read column
000DEF  3               
000DEF  3  3D F8 0D     	and keymask,x		; check key pressed
000DF2  3  F0 02        	beq pressed
000DF4  3  38           	sec			; key not pressed
000DF5  3  60           	rts
000DF6  3               pressed:
000DF6  3  18           	clc			; key pressed
000DF7  3  60           	rts
000DF8  3               
000DF8  3  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20
000DFC  3  10 20        
000DFE  3               
000DFE  3               ;-------------------------------------------------------
000DFE  3               ; Joystick and keyboard reading routines.
000DFE  3               ;
000DFE  3               ; contrl = 0, Keyboard
000DFE  3               ;          1, JoyKeyb
000DFE  3               ;          2, JoyMMC
000DFE  3               ;-------------------------------------------------------
000DFE  3               
000DFE  3               joykey:
000DFE  3  A5 rr        	lda contrl 		; control flag.
000E00  3  C9 01        	cmp #1
000E02  3  D0 03        	bne :+
000E04  3  4C 22 0E     	jmp joyjoy 		; read keyboard joystick
000E07  3               :
000E07  3  C9 02        	cmp #2
000E09  3  D0 03        	bne :+
000E0B  3  4C 4B 0E     	jmp joysin 		; read MMC joystick.
000E0E  3               :
000E0E  3               ; Keyboard controls.
000E0E  3               
000E0E  3  A9 00        	lda #0		 	; zero reading.
000E10  3  85 64        	sta z80_e
000E12  3               
000E12  3  A0 06        	ldy #6	 		; address of last key.
000E14  3               joyke0:
000E14  3  B9 E3 7C     	lda keys,y 		; get key from table.
000E17  3  20 DC 0D     	jsr ktest		; being pressed?
000E1A  3  26 64        	rol z80_e 		; rotate into reading.
000E1C  3               
000E1C  3  88           	dey		 	; next key.
000E1D  3  10 F5        	bpl joyke0 		; repeat for all keys.
000E1F  3  4C 33 0E     	jmp joyjo1 		; store the value.
000E22  3               
000E22  3               ; Keyboard joystick controls.
000E22  3               
000E22  3               joyjoy:
000E22  3  A9 00        	lda #0		 	; zero reading.
000E24  3  85 64        	sta z80_e
000E26  3               
000E26  3  A0 06        	ldy #6	 		; address of last key.
000E28  3               joyjo3:
000E28  3  B9 D1 0D     	lda jkeys,y 		; get key from table.
000E2B  3  20 DC 0D     	jsr ktest		; being pressed?
000E2E  3  26 64        	rol z80_e 		; rotate into reading.
000E30  3               
000E30  3  88           	dey		 	; next key.
000E31  3  10 F5        	bpl joyjo3 		; repeat for all keys.
000E33  3               joyjo1:
000E33  3  A5 64        	lda z80_e 		; copy e register to accumulator.
000E35  3               joyjo2:
000E35  3  85 rr        	sta joyval		; remember value.
000E37  3  60           	rts
000E38  3               
000E38  3               
000E38  3               ; AtoMMC joystick controls.
000E38  3               
000E38  3               ; Set PORTB direction
000E38  3               
000E38  3               joyinit:
000E38  3  A9 FF        	lda #$ff   		; Write value to latch, bits 0-7 input
000E3A  3  8D 01 B4     	sta DatReg
000E3D  3  20 79 0E     	jsr interwritedelay
000E40  3  A9 A1        	lda #$a1   		; Write direction in latch to PORTB
000E42  3  8D 00 B4     	sta CmdReg
000E45  3               
000E45  3               wait_until_not_busy:
000E45  3  AD 00 B4     	lda CmdReg
000E48  3  30 FB        	bmi wait_until_not_busy
000E4A  3  60           	rts
000E4B  3               
000E4B  3               ; Get PORTB value
000E4B  3               
000E4B  3               joysin:
000E4B  3  A9 A2        	lda #$a2   		; Read value PORTB in latch
000E4D  3  8D 00 B4     	sta CmdReg
000E50  3  20 79 0E     	jsr interwritedelay
000E53  3               
000E53  3  AD 01 B4     	lda DatReg		; Read joystick status
000E56  3  29 7F        	and #$7f
000E58  3  85 rr        	sta joyval
000E5A  3  85 F0        	sta $f0
000E5C  3               
000E5C  3  AD E8 7C     	lda keys+5		; check fire2
000E5F  3  20 DC 0D     	jsr ktest
000E62  3  B0 06        	bcs :+
000E64  3  A5 rr        	lda joyval
000E66  3  29 DF        	and #$df
000E68  3  85 rr        	sta joyval
000E6A  3               :
000E6A  3  AD E9 7C     	lda keys+6		; check fire3
000E6D  3  20 DC 0D     	jsr ktest
000E70  3  B0 06        	bcs :+
000E72  3  A5 rr        	lda joyval
000E74  3  29 BF        	and #$bf
000E76  3  85 rr        	sta joyval
000E78  3               :
000E78  3  60           	rts
000E79  3               
000E79  3               ; Short delay
000E79  3               ; Enough to intersperse 2 writes to the FATPIC.
000E79  3               
000E79  3               interwritedelay:
000E79  3  A9 08        	lda  #8
000E7B  3  38           	sec
000E7C  3               loop:
000E7C  3  E9 01        	sbc  #1
000E7E  3  D0 FC        	bne  loop
000E80  3  60           	rts
000E81  3               
000E81  3               ;tmp_byte:   .byte 0
000E81  3               
000E81  3               ;---------------------------------------------------------------
000E81  3               ; Getkey in column,row format
000E81  3               ;
000E81  3               ; Output:
000E81  3               ;  A = high nibble=row and low nibble=column key in matrix
000E81  3               ;---------------------------------------------------------------
000E81  3               
000E81  3               kget:
000E81  3  A9 F0        	lda #ScrMode		; high-mono mode.
000E83  3  8D 00 B0     	sta ScrSelAddr		; screen select port
000E86  3  86 rr        	stx xtmp
000E88  3               kget4:
000E88  3  20 71 FE     	jsr READKEY		; read key until pressed
000E8B  3  C0 FF        	cpy #255
000E8D  3  F0 F9        	beq kget4
000E8F  3  85 rr        	sta rcol		; save column
000E91  3  86 rr        	stx rrow		; determine row
000E93  3               kget3:
000E93  3  20 71 FE     	jsr READKEY		; wait until key released
000E96  3  C0 FF        	cpy #255
000E98  3  D0 F9        	bne kget3
000E9A  3               
000E9A  3  38           	sec			; calculate matrix row
000E9B  3  A9 0A        	lda #10
000E9D  3  E5 rr        	sbc rrow
000E9F  3  0A           	asl a
000EA0  3  0A           	asl a
000EA1  3  0A           	asl a
000EA2  3  0A           	asl a
000EA3  3  85 rr        	sta rrow
000EA5  3               
000EA5  3  A0 FF        	ldy #255		; find column mask
000EA7  3               kget1:
000EA7  3  C8           	iny
000EA8  3  B9 F8 0D     	lda keymask,y
000EAB  3  C5 rr        	cmp rcol
000EAD  3  F0 03        	beq kget2
000EAF  3  4C A7 0E     	jmp kget1
000EB2  3               kget2:
000EB2  3  98           	tya			; determine column
000EB3  3  18           	clc
000EB4  3  65 rr        	adc rrow
000EB6  3  A6 rr        	ldx xtmp
000EB8  3  60           	rts
000EB9  3               
000EB9  3               ;---------------------------------------------------------------
000EB9  3               ; Display message.
000EB9  3               ;
000EB9  3               ; Input:
000EB9  3               ;  A = message number
000EB9  3               ;---------------------------------------------------------------
000EB9  3               
000EB9  3               dmsg:
000EB9  3  AA           	tax
000EBA  3  A9 F2        	lda #<msgdat		; pointer to messages.
000EBC  3  85 66        	sta z80_l
000EBE  3  A9 26        	lda #>msgdat
000EC0  3  85 67        	sta z80_h
000EC2  3  20 D4 0F     	jsr getwrd		; get message number.
000EC5  3               dmsg3:
000EC5  3  20 C1 0F     	jsr preprt		; pre-printing stuff.
000EC8  3  20 07 08     	jsr checkx		; make sure we"re in a printable range.
000ECB  3  A5 rr        	lda prtmod		; print mode.
000ECD  3  D0 47        	bne bmsg1		; no, double-height text.
000ECF  3               dmsg0:
000ECF  3  A5 67        	lda z80_h		; store string pointer.
000ED1  3  48           	pha
000ED2  3  A5 66        	lda z80_l
000ED4  3  48           	pha
000ED5  3               
000ED5  3  A0 00        	ldy #0
000ED7  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
000ED9  3  29 7F        	and #127		; remove any end marker.
000EDB  3  C9 0D        	cmp #13
000EDD  3  F0 24        	beq dmsg1
000EDF  3  20 9B 09     	jsr pchar		; display character.
000EE2  3  20 AE 0F     	jsr nexpos 		; display position.
000EE5  3  D0 03        	bne dmsg2		; not on a new line.
000EE7  3  20 B3 0F     	jsr nexlin		; next line down.
000EEA  3               dmsg2:
000EEA  3  68           	pla			; retrieve string pointer
000EEB  3  85 66        	sta z80_l
000EED  3  68           	pla
000EEE  3  85 67        	sta z80_h
000EF0  3               
000EF0  3  A0 00        	ldy #0
000EF2  3  B1 66        	lda (z80_hl),y		; fetch last character.
000EF4  3  0A           	asl a  			; was it the end?
000EF5  3  90 03        	bcc :+
000EF7  3  4C 5A 08     	jmp dscor2		; yes, job done.
000EFA  3               :
000EFA  3  E6 66        	inc z80_l		; next character to display.
000EFC  3  D0 02        	bne :+
000EFE  3  E6 67        	inc z80_h
000F00  3               :
000F00  3  4C CF 0E     	jmp dmsg0
000F03  3               dmsg1:
000F03  3  E6 rr        	inc dispy
000F05  3  A5 rr        	lda dispy
000F07  3  C9 18        	cmp #24
000F09  3  90 04        	bcc dmsg4
000F0B  3  A9 00        	lda #0
000F0D  3  85 rr        	sta dispy
000F0F  3               dmsg4:
000F0F  3  A9 00        	lda #0
000F11  3  85 rr        	sta dispx
000F13  3  4C EA 0E     	jmp dmsg2
000F16  3               
000F16  3               ;prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
000F16  3               
000F16  3               ;----------------------------------------------------------
000F16  3               ; Display message in big text.
000F16  3               ;
000F16  3               ; Input:
000F16  3               ;  HL = string pointer
000F16  3               ;----------------------------------------------------------
000F16  3               
000F16  3               bmsg1:
000F16  3  A0 00        	ldy #0
000F18  3  B1 66        	lda (z80_hl),y 		; get character to display.
000F1A  3  29 7F        	and #127		; only want 7 bits.
000F1C  3  C9 0D        	cmp #13
000F1E  3  F0 13        	beq bmsg2
000F20  3  20 48 0F     	jsr bchar 		; display big char.
000F23  3               bmsg3:
000F23  3  A0 00        	ldy #0
000F25  3  B1 66        	lda (z80_hl),y 		; look at last character.
000F27  3  48           	pha
000F28  3  E6 66        	inc z80_l 		; next character in list.
000F2A  3  D0 02        	bne :+
000F2C  3  E6 67        	inc z80_h
000F2E  3               :
000F2E  3  68           	pla
000F2F  3  0A           	asl a  			; was terminator flag set?
000F30  3  90 E4        	bcc bmsg1		; no, keep going.
000F32  3  60           	rts
000F33  3               bmsg2:
000F33  3  A9 00        	lda #0
000F35  3  85 rr        	sta dispx
000F37  3  E6 rr        	inc dispy
000F39  3  E6 rr        	inc dispy
000F3B  3  A5 rr        	lda dispy
000F3D  3  C9 17        	cmp #23
000F3F  3  90 E2        	bcc bmsg3
000F41  3  A9 00        	lda #0
000F43  3  85 rr        	sta dispy
000F45  3  4C 23 0F     	jmp bmsg3
000F48  3               
000F48  3               ;----------------------------------------------------------
000F48  3               ; Big character display.
000F48  3               ;
000F48  3               ; Input:
000F48  3               ;  A = character
000F48  3               ;----------------------------------------------------------
000F48  3               
000F48  3               bchar:
000F48  3  85 64        	sta z80_e		; save char in lb
000F4A  3  A9 00        	lda #0
000F4C  3  85 65        	sta z80_d		; reset hb
000F4E  3               
000F4E  3  06 64        	asl z80_e 		; multiply char by 8.
000F50  3  26 65        	rol z80_d
000F52  3  06 64        	asl z80_e
000F54  3  26 65        	rol z80_d
000F56  3  06 64        	asl z80_e
000F58  3  26 65        	rol z80_d		; de = a*8
000F5A  3               
000F5A  3  18           	clc			; de = Fontpointer + a*8
000F5B  3  A5 64        	lda z80_e
000F5D  3  69 CD        	adc #<(FONT-256) 		; address of font.
000F5F  3  85 64        	sta z80_e
000F61  3  A5 65        	lda z80_d
000F63  3  69 78        	adc #>(FONT-256)
000F65  3  85 65        	sta z80_d
000F67  3               
000F67  3  20 4C 09     	jsr gprad 		; get screen address.
000F6A  3               
000F6A  3  A2 00        	ldx #0			; height of character in font.
000F6C  3               bchar0:
000F6C  3  A0 00        	ldy #0
000F6E  3  B1 64        	lda (z80_de),y 		; get a bit of the font.
000F70  3               
000F70  3               .if gflag
000F70  3               	and andeor
000F70  3               	eor andeor+1
000F70  3               .endif
000F70  3               .if iflag
000F70  3               	eor #$ff
000F70  3               .endif
000F70  3               
000F70  3  91 rr        	sta (scraddr),y
000F72  3  48           	pha
000F73  3  20 08 13     	jsr nline 		; next line down.
000F76  3  68           	pla
000F77  3  91 rr        	sta (scraddr),y
000F79  3  20 08 13     	jsr nline 		; next line down.
000F7C  3               
000F7C  3  18           	clc
000F7D  3  E6 64        	inc z80_e 		; next line of font.
000F7F  3  D0 02        	bne :+
000F81  3  E6 65        	inc z80_d
000F83  3               :
000F83  3  E8           	inx
000F84  3  E0 08        	cpx #8
000F86  3  D0 E4        	bne bchar0
000F88  3               
000F88  3  20 AE 0F     	jsr nexpos		; display position.
000F8B  3  D0 05        	bne bchar2 		; not on a new line.
000F8D  3               bchar3:
000F8D  3  E6 rr        	inc dispy
000F8F  3  20 B3 0F     	jsr nexlin 		; next line check.
000F92  3               bchar2:
000F92  3  4C 5A 08     	jmp dscor2		; tidy up line and column variables.
000F95  3               
000F95  3               
000F95  3               ;-------------------------------------------------
000F95  3               ; Display a character.
000F95  3               ;
000F95  3               ; Input:
000F95  3               ;  A = character
000F95  3               ;-------------------------------------------------
000F95  3               
000F95  3               achar:
000F95  3  85 63        	sta z80_b 		; copy to b.
000F97  3  20 C1 0F     	jsr preprt 		; get ready to print.
000F9A  3  A5 63        	lda z80_b		; character in accumulator.
000F9C  3  A6 rr        	ldx prtmod 		; print mode.
000F9E  3  F0 03        	beq :+
000FA0  3  4C 48 0F     	jmp bchar 		; no, double-height text.
000FA3  3               :
000FA3  3  20 9B 09     	jsr pchar 		; display character.
000FA6  3  20 AE 0F     	jsr nexpos 		; display position.
000FA9  3  F0 E2        	beq bchar3		; next line down.
000FAB  3  4C 92 0F     	jmp bchar2 		; tidy up.
000FAE  3               
000FAE  3               
000FAE  3               ;-------------------------------------------------
000FAE  3               ; Get next print column position.
000FAE  3               ;-------------------------------------------------
000FAE  3               
000FAE  3               nexpos:
000FAE  3  E6 rr        	inc dispx		; move along one position.
000FB0  3  A5 rr        	lda dispx 		; get coordinate.
000FB2  3               ;	and #31
000FB2  3  60           	rts 			; return with status in zero flag.
000FB3  3               
000FB3  3               ;-------------------------------------------------
000FB3  3               ; Get next print line position.
000FB3  3               ;-------------------------------------------------
000FB3  3               
000FB3  3               nexlin:
000FB3  3  E6 rr        	inc dispy 		; newline.
000FB5  3  A5 rr        	lda dispy		; vertical position.
000FB7  3  C9 18        	cmp #24			; past screen edge?
000FB9  3  B0 01        	bcs :+
000FBB  3  60           	rts			; no, still okay.
000FBC  3               :
000FBC  3  A9 00        	lda #0			; restart at top.
000FBE  3  85 rr        	sta dispy
000FC0  3  60           	rts
000FC1  3               
000FC1  3               ;--------------------------------------------------------
000FC1  3               ; Pre-print preliminaries.
000FC1  3               ;--------------------------------------------------------
000FC1  3               
000FC1  3               preprt:
000FC1  3  A9 CD        	lda #<(FONT-256)		; font pointer.
000FC3  3  8D 05 08     	sta grbase		; set up graphics base.
000FC6  3  A9 78        	lda #>(FONT-256)
000FC8  3  8D 06 08     	sta grbase+1
000FCB  3               prescr:
000FCB  3  A5 rr        	lda charx 		; display coordinates.
000FCD  3  85 rr        	sta dispx		; set up general coordinates.
000FCF  3  A5 rr        	lda chary
000FD1  3  85 rr        	sta dispy
000FD3  3  60           	rts
000FD4  3               
000FD4  3               ;--------------------------------------------------------------
000FD4  3               ; Get messagenr x in hl
000FD4  3               ;
000FD4  3               ; Input:
000FD4  3               ;  HL = pointer to message list
000FD4  3               ;  X  = message number.
000FD4  3               ;--------------------------------------------------------------
000FD4  3               
000FD4  3               getwrd:
000FD4  3  E0 00        	cpx #0
000FD6  3  D0 01        	bne:+ 			; first word in list?
000FD8  3  60           	rts 			; yep, don't search.
000FD9  3               :
000FD9  3  A0 00        	ldy #0
000FDB  3               getwd0:
000FDB  3  B1 66        	lda (z80_hl),y
000FDD  3  48           	pha
000FDE  3  E6 66        	inc z80_l
000FE0  3  D0 02        	bne :+
000FE2  3  E6 67        	inc z80_h
000FE4  3               :
000FE4  3  68           	pla
000FE5  3  C9 80        	cmp #128		; found end?
000FE7  3  30 F2        	bmi getwd0		; no, carry on.
000FE9  3  CA           	dex			; until we have right number.
000FEA  3  D0 EF        	bne getwd0
000FEC  3  60           	rts
000FED  3               
000FED  3               ;-----------------------------------------------------------
000FED  3               ; Bubble sort.
000FED  3               ;-----------------------------------------------------------
000FED  3               
000FED  3               bsort:
000FED  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
000FEF  3  85 rr        	sta qscnt
000FF1  3               
000FF1  3  A9 56        	lda #<sprtab 		; sprite table.
000FF3  3  85 68        	sta z80_x
000FF5  3  A9 17        	lda #>sprtab
000FF7  3  85 69        	sta z80_i
000FF9  3               bsort0:
000FF9  3  A0 00        	ldy #0
000FFB  3  B1 68        	lda (z80_ix),y 		; first sprite type.
000FFD  3  C9 FF        	cmp #255 		; is it switched off?
000FFF  3  F0 30        	beq swemp		; yes, may need to switch another in here.
001001  3               
001001  3  A0 11        	ldy #TABSIZ
001003  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
001005  3  C9 FF        	cmp #255 		; is it enabled?
001007  3  F0 0A        	beq bsort2 		; no, nothing to swap.
001009  3               
001009  3  A0 14        	ldy #TABSIZ+3
00100B  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
00100D  3  A0 03        	ldy #3
00100F  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
001011  3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
001013  3               bsort2:
001013  3  18           	clc
001014  3  A5 68        	lda z80_x
001016  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
001018  3  85 68        	sta z80_x
00101A  3  90 02        	bcc :+
00101C  3  E6 69        	inc z80_i
00101E  3               :
00101E  3  C6 rr        	dec qscnt
001020  3  D0 D7        	bne bsort0		; repeat for remaining sprites.
001022  3  60           	rts
001023  3               
001023  3               ;qscnt:	.byte 0
001023  3               
001023  3               bsort1:
001023  3  A0 11        	ldy #TABSIZ
001025  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
001027  3  C9 FF        	cmp #255		; is it enabled?
001029  3  F0 E8        	beq bsort2		; no, nothing to swap.
00102B  3  20 3F 10     	jsr swspr		; swap positions.
00102E  3  4C 13 10     	jmp bsort2
001031  3               swemp:
001031  3  A0 11        	ldy #TABSIZ
001033  3  B1 68        	lda (z80_ix),y		; next table entry.
001035  3  C9 FF        	cmp #255		; is that one on?
001037  3  F0 DA        	beq bsort2		; no, nothing to swap.
001039  3  20 3F 10     	jsr swspr		; swap positions.
00103C  3  4C 13 10     	jmp bsort2
00103F  3               
00103F  3               ; Swap sprites.
00103F  3               
00103F  3               swspr:
00103F  3  A5 68        	lda z80_x		; table address
001041  3  85 64        	sta z80_e		; copy to de pair.
001043  3  85 66        	sta z80_l		; copy to hl pair.
001045  3  A5 69        	lda z80_i
001047  3  85 67        	sta z80_h
001049  3  85 65        	sta z80_d
00104B  3               
00104B  3  18           	clc
00104C  3  A5 66        	lda z80_l
00104E  3  69 11        	adc #TABSIZ		; distance to second entry.
001050  3  85 66        	sta z80_l
001052  3  90 02        	bcc :+
001054  3  E6 67        	inc z80_h
001056  3               :
001056  3  A9 11        	lda #TABSIZ		; bytes to swap.
001058  3  85 63        	sta z80_b
00105A  3  A0 00        	ldy #0
00105C  3               swspr0:
00105C  3  B1 66        	lda (z80_hl),y		; fetch second byte.
00105E  3  48           	pha
00105F  3  B1 64        	lda (z80_de),y 		; fetch first byte.
001061  3  91 66        	sta (z80_hl),y 		; copy to second.
001063  3  68           	pla
001064  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
001066  3               
001066  3  E6 64        	inc z80_e 		; next byte.
001068  3  D0 02        	bne :+
00106A  3  E6 65        	inc z80_d
00106C  3               :
00106C  3  E6 66        	inc z80_l 		; next byte.
00106E  3  D0 02        	bne :+
001070  3  E6 67        	inc z80_h
001072  3               :
001072  3  C6 63        	dec z80_b
001074  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
001076  3  60           	rts
001077  3               
001077  3               ;----------------------------------------------------
001077  3               ; Process sprites.
001077  3               ;----------------------------------------------------
001077  3               
001077  3               pspr:
001077  3  A9 0C        	lda #NUMSPR		; sprites to process.
001079  3  85 rr        	sta sprptr
00107B  3               
00107B  3  A9 56        	lda #<sprtab 		; sprite table.
00107D  3  85 68        	sta z80_x
00107F  3  A9 17        	lda #>sprtab
001081  3  85 69        	sta z80_i
001083  3               pspr1:
001083  3  A0 00        	ldy #0
001085  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
001087  3  C9 09        	cmp #9 			; within range of sprite types?
001089  3  B0 03        	bcs :+
00108B  3  20 9E 10     	jsr pspr2 		; yes, process this one.
00108E  3               :
00108E  3  18           	clc
00108F  3  A5 68        	lda z80_x
001091  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
001093  3  85 68        	sta z80_x
001095  3  90 02        	bcc :+
001097  3  E6 69        	inc z80_i		; next sprite.
001099  3               :
001099  3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
00109B  3  D0 E6        	bne pspr1
00109D  3  60           	rts
00109E  3               
00109E  3               ;sprptr:	.byte 0
00109E  3               
00109E  3               pspr2:
00109E  3  A5 68        	lda z80_x 		; store original sprite pointer.
0010A0  3  85 rr        	sta ogptr
0010A2  3  A5 69        	lda z80_i
0010A4  3  85 rr        	sta ogptr+1
0010A6  3  20 B2 10     	jsr pspr3		; do the routine.
0010A9  3               rtorg:
0010A9  3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
0010AB  3  85 68        	sta z80_x
0010AD  3  A5 rr        	lda ogptr+1
0010AF  3  85 69        	sta z80_i
0010B1  3               rtorg0:
0010B1  3  60           	rts
0010B2  3               
0010B2  3               pspr3:
0010B2  3  A9 E7        	lda #<evtyp0		; sprite type events list.
0010B4  3  85 66        	sta z80_l
0010B6  3  A9 10        	lda #>evtyp0
0010B8  3  85 67        	sta z80_h
0010BA  3               pspr4:
0010BA  3  B1 68        	lda (z80_ix),y
0010BC  3  0A           	asl a			; double accumulator.
0010BD  3  18           	clc
0010BE  3  65 66        	adc z80_l
0010C0  3  85 66        	sta z80_l
0010C2  3  90 02        	bcc :+
0010C4  3  E6 67        	inc z80_h
0010C6  3               :
0010C6  3  B1 66        	lda (z80_hl),y
0010C8  3  85 64        	sta z80_e 		; copy to de.
0010CA  3  48           	pha
0010CB  3               
0010CB  3  E6 66        	inc z80_l 		; next byte of address.
0010CD  3  D0 02        	bne :+
0010CF  3  E6 67        	inc z80_h
0010D1  3               :
0010D1  3  B1 66        	lda (z80_hl),y 		; address high.
0010D3  3  85 65        	sta z80_d
0010D5  3               
0010D5  3  48           	pha	 		; swap address into hl.
0010D6  3  A5 67        	lda z80_h
0010D8  3  85 65        	sta z80_d
0010DA  3  68           	pla
0010DB  3  85 67        	sta z80_h
0010DD  3  68           	pla
0010DE  3  85 66        	sta z80_l
0010E0  3  A5 66        	lda z80_l
0010E2  3  85 64        	sta z80_e
0010E4  3               
0010E4  3  6C 66 00     	jmp (z80_hl) 		; go there.
0010E7  3               
0010E7  3               ;ogptr:	.word 0			; original sprite pointer.
0010E7  3               
0010E7  3               ; Address of each sprite type's routine.
0010E7  3               
0010E7  3  B9 18        evtyp0:	.word evnt00
0010E9  3  F1 1D        evtyp1:	.word evnt01
0010EB  3  4B 1F        evtyp2:	.word evnt02
0010ED  3  37 20        evtyp3:	.word evnt03
0010EF  3  1E 21        evtyp4:	.word evnt04
0010F1  3  F7 21        evtyp5:	.word evnt05
0010F3  3  D2 22        evtyp6:	.word evnt06
0010F5  3  87 24        evtyp7:	.word evnt07
0010F7  3  ED 24        evtyp8:	.word evnt08
0010F9  3               
0010F9  3               ;--------------------------------------------------------------
0010F9  3               ; Display sprites.
0010F9  3               ;
0010F9  3               ; Input:
0010F9  3               ;  IX = sprite table
0010F9  3               ;--------------------------------------------------------------
0010F9  3               
0010F9  3               dspr:
0010F9  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
0010FB  3  85 rr        	sta sprcnt
0010FD  3               dspr0:
0010FD  3  A0 00        	ldy #0
0010FF  3  B1 68        	lda (z80_ix),y 		; get sprite type.
001101  3  C9 FF        	cmp #255 		; is it enabled?
001103  3  D0 42        	bne dspr1 		; yes, it needs deleting.
001105  3               dspr5:
001105  3  A0 05        	ldy #5
001107  3  B1 68        	lda (z80_ix),y 		; new type.
001109  3  C9 FF        	cmp #255		; is it enabled?
00110B  3  D0 77        	bne dspr3 		; yes, it needs drawing.
00110D  3               dspr2:
00110D  3  A0 05        	ldy #5
00110F  3  B1 68        	lda (z80_ix),y 		; copy new type.
001111  3  A0 00        	ldy #0
001113  3  91 68        	sta (z80_ix),y
001115  3  A0 06        	ldy #6
001117  3  B1 68        	lda (z80_ix),y 		; copy new image number.
001119  3  A0 01        	ldy #1
00111B  3  91 68        	sta (z80_ix),y
00111D  3  A0 07        	ldy #7
00111F  3  B1 68        	lda (z80_ix),y 		; copy new frame.
001121  3  A0 02        	ldy #2
001123  3  91 68        	sta (z80_ix),y
001125  3  A0 08        	ldy #8
001127  3  B1 68        	lda (z80_ix),y 		; copy new y.
001129  3  A0 03        	ldy #3
00112B  3  91 68        	sta (z80_ix),y
00112D  3  A0 09        	ldy #9
00112F  3  B1 68        	lda (z80_ix),y 		; copy new x.
001131  3  A0 04        	ldy #4
001133  3  91 68        	sta (z80_ix),y
001135  3               
001135  3  18           	clc
001136  3  A5 68        	lda z80_x
001138  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
00113A  3  85 68        	sta z80_x
00113C  3  A5 69        	lda z80_i
00113E  3  69 00        	adc #0
001140  3  85 69        	sta z80_i 		; next sprite.
001142  3  C6 rr        	dec sprcnt
001144  3  D0 B7        	bne dspr0		; repeat for remaining sprites.
001146  3  60           	rts
001147  3               dspr1:
001147  3  A0 05        	ldy #5
001149  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
00114B  3  C9 FF        	cmp #255		; is this enabled?
00114D  3  D0 06        	bne dspr4 		; yes, display both.
00114F  3               dspr6:
00114F  3  20 1F 12     	jsr sspria 		; show single sprite.
001152  3  4C 0D 11     	jmp dspr2
001155  3               
001155  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
001155  3               
001155  3               dspr4:
001155  3  A0 04        	ldy #4
001157  3  B1 68        	lda (z80_ix),y		; old x.
001159  3  A0 09        	ldy #9
00115B  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
00115D  3  D0 1F        	bne dspr7 		; they differ, need to redraw.
00115F  3               
00115F  3  A0 03        	ldy #3
001161  3  B1 68        	lda (z80_ix),y		; old y.
001163  3  A0 08        	ldy #8
001165  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
001167  3  D0 15        	bne dspr7		; they differ, need to redraw.
001169  3               
001169  3  A0 02        	ldy #2
00116B  3  B1 68        	lda (z80_ix),y 		; old frame.
00116D  3  A0 07        	ldy #7
00116F  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
001171  3  4C 7E 11     	jmp dspr7 		; they differ, need to redraw.
001174  3               
001174  3  A0 01        	ldy #1
001176  3  B1 68        	lda (z80_ix),y 		; old image.
001178  3  A0 06        	ldy #6
00117A  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
00117C  3  F0 8F        	beq dspr2		; everything is the same, don't redraw.
00117E  3               dspr7:
00117E  3  20 4C 12     	jsr sspric 		; delete old sprite, draw new one simultaneously.
001181  3  4C 0D 11     	jmp dspr2
001184  3               dspr3:
001184  3  20 46 12     	jsr ssprib 		; show single sprite.
001187  3  4C 0D 11     	jmp dspr2
00118A  3               
00118A  3               ;sprcnt:	.byte 0
00118A  3               
00118A  3               ;-----------------------------------------
00118A  3               ; Get sprite address calculations.
00118A  3               ; gspran = new sprite, gsprad = old sprite.
00118A  3               ;
00118A  3               ; Input:
00118A  3               ;  IX = sprite address
00118A  3               ;-----------------------------------------
00118A  3               
00118A  3               gspran:
00118A  3  A0 08        	ldy #8
00118C  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
00118E  3  85 rr        	sta dispy
001190  3  A0 09        	ldy #9
001192  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
001194  3  85 rr        	sta dispx
001196  3  A0 06        	ldy #6
001198  3  B1 68        	lda (z80_ix),y 		; new sprite image.
00119A  3  20 78 15     	jsr gfrm		; fetch start frame for this sprite.
00119D  3               
00119D  3  A0 00        	ldy #0
00119F  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
0011A1  3  A0 07        	ldy #7
0011A3  3  18           	clc
0011A4  3  71 68        	adc (z80_ix),y 		; new add frame number.
0011A6  3  4C C5 11     	jmp gspra0
0011A9  3               
0011A9  3               ;-----------------------------------------
0011A9  3               ; Calculate old sprite address
0011A9  3               ;
0011A9  3               ; Input:
0011A9  3               ;  IX = sprite address
0011A9  3               ;
0011A9  3               ; Output:
0011A9  3               ;  B  = right byte mask
0011A9  3               ;  C  = left byte mask
0011A9  3               ;  DE = spriteframe address
0011A9  3               ;  scraddr = screenaddress(dispx,dispy)
0011A9  3               ;-----------------------------------------
0011A9  3               
0011A9  3               gsprad:
0011A9  3  A0 03        	ldy #3
0011AB  3  B1 68        	lda (z80_ix),y		; y coordinate.
0011AD  3  85 rr        	sta dispy
0011AF  3  A0 04        	ldy #4
0011B1  3  B1 68        	lda (z80_ix),y		; x coordinate.
0011B3  3  85 rr        	sta dispx
0011B5  3  A0 01        	ldy #1
0011B7  3  B1 68        	lda (z80_ix),y 		; sprite image.
0011B9  3  20 78 15     	jsr gfrm 		; fetch start frame for this sprite.
0011BC  3               
0011BC  3  A0 00        	ldy #0
0011BE  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
0011C0  3  A0 02        	ldy #2
0011C2  3  18           	clc
0011C3  3  71 68        	adc (z80_ix),y 		; add frame number.
0011C5  3               gspra0:
0011C5  3  4A           	lsr a	  		; multiply by 128.
0011C6  3  85 65        	sta z80_d 		; store in d.
0011C8  3  8D 1D 12     	sta tmp1
0011CB  3  A9 00        	lda #0
0011CD  3  6A           	ror a
0011CE  3  85 64        	sta z80_e 		; got low byte.
0011D0  3  8D 1E 12     	sta tmp2
0011D3  3               .if bflag
0011D3  3               	lsr tmp1
0011D3  3               	ror tmp2
0011D3  3               	clc
0011D3  3               	lda tmp2
0011D3  3               	adc z80_e
0011D3  3               	sta z80_e
0011D3  3               	lda tmp1
0011D3  3               	adc z80_d
0011D3  3               	sta z80_d
0011D3  3               .endif
0011D3  3  18           	clc 			; address of play sprites.
0011D4  3  A5 64        	lda z80_e
0011D6  3  69 0D        	adc #<sprgfx
0011D8  3  85 64        	sta z80_e
0011DA  3  A5 65        	lda z80_d
0011DC  3  69 2C        	adc #>sprgfx
0011DE  3  85 65        	sta z80_d
0011E0  3               
0011E0  3  A5 rr        	lda dispx 		; y coordinate.
0011E2  3  29 06        	and #6 			; position within byte boundary.
0011E4  3  AA           	tax	 		; low byte of table displacement.
0011E5  3               
0011E5  3  0A           	asl a	  		; multiply by 32.
0011E6  3  0A           	asl a  			; already a multiple
0011E7  3  0A           	asl a  			; of 2, so just 4
0011E8  3               .if bflag
0011E8  3               	sta tmp1
0011E8  3               	asl a  			; shifts needed.
0011E8  3               	clc
0011E8  3               	adc tmp1
0011E8  3               .else
0011E8  3  0A           	asl a  			; shifts needed.
0011E9  3               .endif
0011E9  3  18           	clc 			; add to sprite address.
0011EA  3  65 64        	adc z80_e
0011EC  3  85 64        	sta z80_e
0011EE  3  90 02        	bcc :+
0011F0  3  E6 65        	inc z80_d
0011F2  3               :
0011F2  3  BD 15 12     	lda spmask,x		 ; pointer to mask table.
0011F5  3  85 62        	sta z80_c 		; left mask.
0011F7  3  BD 16 12     	lda spmask+1,x
0011FA  3  85 63        	sta z80_b 		; right mask.
0011FC  3               
0011FC  3               ;------------------------------------------------------------------
0011FC  3               ; Drop into screen address routine.
0011FC  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
0011FC  3               ;------------------------------------------------------------------
0011FC  3               
0011FC  3               scadd:
0011FC  3  A6 rr        	ldx dispy
0011FE  3  E0 C0        	cpx #192
001200  3  90 02        	bcc :+
001202  3  A2 C0        	ldx #192
001204  3               :
001204  3  A5 rr        	lda dispx
001206  3  4A           	lsr a
001207  3  4A           	lsr a
001208  3  4A           	lsr a
001209  3  18           	clc
00120A  3  7D 00 9B     	adc SCADTB_lb,x
00120D  3  85 rr        	sta scraddr
00120F  3  BD 00 9C     	lda SCADTB_hb,x
001212  3  85 rr        	sta scraddr+1
001214  3  60           	rts
001215  3               
001215  3  FF 00        spmask:	.byte $ff,$00
001217  3  3F C0        	.byte $3f,$c0
001219  3  0F F0        	.byte $0f,$f0
00121B  3  03 FC        	.byte $03,$fc
00121D  3               
00121D  3  00           tmp1:	.byte 0
00121E  3  00           tmp2:	.byte 0
00121F  3               
00121F  3               ;-----------------------------------------------------------------
00121F  3               ; These are the sprite routines.
00121F  3               ; sspria = single sprite, old (ix).
00121F  3               ; ssprib = single sprite, new (ix+5).
00121F  3               ; sspric = both sprites, old (ix) and new (ix+5).
00121F  3               ;-----------------------------------------------------------------
00121F  3               
00121F  3               sspria:
00121F  3  20 A9 11     	jsr gsprad		; get old sprite address.
001222  3               sspri2:
001222  3  A5 64        	lda z80_e
001224  3  8D 94 12     	sta dline1+1		; Set spritedata address
001227  3  8D A3 12     	sta dline2+1
00122A  3  A5 65        	lda z80_d
00122C  3  8D 95 12     	sta dline1+2
00122F  3  8D A4 12     	sta dline2+2
001232  3  86 rr        	stx xtmp
001234  3  A2 00        	ldx #0			; vertical lines.
001236  3               sspri0:
001236  3  20 90 12     	jsr dline		; draw a line.
001239  3  E0 10        	cpx #16			; detect block boundery
00123B  3  D0 02        	bne :+			; skip if not
00123D  3  E6 rr        	inc scraddr+1		; jump to next blockline
00123F  3               :
00123F  3  E0 20        	cpx #32			; check finished
001241  3               .if bflag
001241  3               	bne :+			; skip if not
001241  3               	inc scraddr+1		; jump to next blockline
001241  3               	inc z80_hlp+1		; jump to next blockline
001241  3               :
001241  3               	cpx #48			; check finished
001241  3               .endif
001241  3  D0 F3        	bne sspri0		; no, repeat
001243  3  A6 rr        	ldx xtmp
001245  3  60           	rts
001246  3               
001246  3               ;-----------------------------------------------------------------
001246  3               
001246  3               ssprib:
001246  3  20 8A 11     	jsr gspran 		; get new sprite address.
001249  3  4C 22 12     	jmp sspri2
00124C  3               
00124C  3               ;-----------------------------------------------------------------
00124C  3               
00124C  3               sspric:
00124C  3  20 A9 11     	jsr gsprad 		; get old sprite address.
00124F  3  A5 64        	lda z80_e
001251  3  8D B8 12     	sta ddline1+1		; Set spritedata address
001254  3  8D C7 12     	sta ddline2+1
001257  3  A5 65        	lda z80_d
001259  3  8D B9 12     	sta ddline1+2
00125C  3  8D C8 12     	sta ddline2+2
00125F  3  20 EE 7C     	jsr exx  		; store addresses.
001262  3               
001262  3  20 8A 11     	jsr gspran 		; get new sprite addresses.
001265  3  A5 64        	lda z80_e
001267  3  8D 94 12     	sta dline1+1		; Set spritedata address
00126A  3  8D A3 12     	sta dline2+1
00126D  3  A5 65        	lda z80_d
00126F  3  8D 95 12     	sta dline1+2
001272  3  8D A4 12     	sta dline2+2
001275  3               
001275  3  86 rr        	stx xtmp
001277  3  A2 00        	ldx #0			; vertical lines.
001279  3               lloop:
001279  3  20 90 12     	jsr dline 		; draw a line.
00127C  3  CA           	dex
00127D  3  CA           	dex
00127E  3  20 B4 12     	jsr ddline 		; delete a line.
001281  3  E0 10        	cpx #16			; detect block boundery
001283  3  D0 04        	bne :+			; skip if not
001285  3  E6 rr        	inc scraddr+1		; jump to next blockline
001287  3  E6 73        	inc z80_hlp+1		; jump to next blockline
001289  3               :
001289  3  E0 20        	cpx #32			; check finished
00128B  3               .if bflag
00128B  3               	bne :+			; skip if not
00128B  3               	inc scraddr+1		; jump to next blockline
00128B  3               	inc z80_hlp+1		; jump to next blockline
00128B  3               :
00128B  3               	cpx #48			; check finished
00128B  3               .endif
00128B  3  D0 EC        	bne lloop		; no, repeat
00128D  3  A6 rr        	ldx xtmp
00128F  3  60           	rts
001290  3               
001290  3               
001290  3               ;-----------------------------------------------------------------
001290  3               
001290  3               dline:
001290  3  BC D8 12     	ldy sprline,x		; point to screenleft
001293  3               dline1:
001293  3  BD A7 79     	lda objdta,x		; fetch spriteleft byte
001296  3  85 61        	sta z80_a		; save spriteright byte
001298  3               .if hflag
001298  3               	sty ytmp
001298  3               	lda scraddr
001298  3               	and #31
001298  3               	sta dispx
001298  3               	lda scraddr+1
001298  3               	and #31
001298  3               	sta dispy
001298  3               	jsr pradd
001298  3               	ldy #0
001298  3               	lda (bufaddr),y
001298  3               	cmp #CUSTOM
001298  3               	beq sline
001298  3               	ldy ytmp
001298  3               .endif
001298  3  A5 61        	lda z80_a
00129A  3  25 62        	and z80_c		; mask left
00129C  3  51 rr        	eor (scraddr),y		; merge with screenleft
00129E  3  91 rr        	sta (scraddr),y		; write screenleft
0012A0  3               sline:
0012A0  3               .if hflag
0012A0  3               	ldy ytmp
0012A0  3               .endif
0012A0  3  E8           	inx			; next spritebyte
0012A1  3  C8           	iny			; point to screenmiddle
0012A2  3               .if hflag
0012A2  3               	sty ytmp
0012A2  3               	ldy #1
0012A2  3               	lda (bufaddr),y
0012A2  3               	cmp #CUSTOM
0012A2  3               	beq sline2
0012A2  3               	ldy ytmp
0012A2  3               .endif
0012A2  3               dline2:
0012A2  3  BD A7 79     	lda objdta,x		; fetch spritemiddle byte
0012A5  3  51 rr        	eor (scraddr),y		; merge with screenmiddle
0012A7  3  91 rr        	sta (scraddr),y		; write screenmiddle
0012A9  3               sline2:
0012A9  3               .if hflag
0012A9  3               	ldy ytmp
0012A9  3               .endif
0012A9  3  C8           	iny			; point to screenright
0012AA  3               .if hflag
0012AA  3               	sty ytmp
0012AA  3               	ldy #2
0012AA  3               	lda (bufaddr),y
0012AA  3               	cmp #CUSTOM
0012AA  3               	beq sline3
0012AA  3               	ldy ytmp
0012AA  3               .endif
0012AA  3  A5 61        	lda z80_a		; fetch spriteright byte
0012AC  3  25 63        	and z80_b		; mask right
0012AE  3  51 rr        	eor (scraddr),y		; merge with screenright
0012B0  3  91 rr        	sta (scraddr),y		; write screenright
0012B2  3               sline3:
0012B2  3               .if hflag
0012B2  3               	ldy ytmp
0012B2  3               .endif
0012B2  3  E8           	inx			; next spritebyte
0012B3  3               
0012B3  3  60           	rts
0012B4  3               
0012B4  3               ;-----------------------------------------------------------------
0012B4  3               
0012B4  3               ddline:
0012B4  3  BC D8 12     	ldy sprline,x		; point to screenleft
0012B7  3               ddline1:
0012B7  3  BD A7 79     	lda objdta,x		; fetch spriteleft byte
0012BA  3  85 61        	sta z80_a		; save spriteright byte
0012BC  3               .if hflag
0012BC  3               	sty ytmp
0012BC  3               	lda z80_hlp
0012BC  3               	and #31
0012BC  3               	sta dispx
0012BC  3               	lda z80_hlp+1
0012BC  3               	and #31
0012BC  3               	sta dispy
0012BC  3               	jsr pradd
0012BC  3               	ldy #0
0012BC  3               	lda (bufaddr),y
0012BC  3               	cmp #CUSTOM
0012BC  3               	beq dsline
0012BC  3               	ldy ytmp
0012BC  3               .endif
0012BC  3  A5 61        	lda z80_a
0012BE  3  25 6E        	and z80_cp		; mask left
0012C0  3  51 72        	eor (z80_hlp),y		; merge with screenleft
0012C2  3  91 72        	sta (z80_hlp),y		; write screenleft
0012C4  3               dsline:
0012C4  3               .if hflag
0012C4  3               	ldy ytmp
0012C4  3               .endif
0012C4  3  E8           	inx			; next spritebyte
0012C5  3  C8           	iny			; point to screenmiddle
0012C6  3               .if hflag
0012C6  3               	sty ytmp
0012C6  3               	ldy #1
0012C6  3               	lda (bufaddr),y
0012C6  3               	cmp #CUSTOM
0012C6  3               	beq dsline2
0012C6  3               	ldy ytmp
0012C6  3               .endif
0012C6  3               ddline2:
0012C6  3  BD A7 79     	lda objdta,x		; fetch spritemiddle byte
0012C9  3  51 72        	eor (z80_hlp),y		; merge with screenmiddle
0012CB  3  91 72        	sta (z80_hlp),y		; write screenmiddle
0012CD  3               dsline2:
0012CD  3               .if hflag
0012CD  3               	ldy ytmp
0012CD  3               .endif
0012CD  3  C8           	iny			; point to screenright
0012CE  3               .if hflag
0012CE  3               	sty ytmp
0012CE  3               	ldy #2
0012CE  3               	lda (bufaddr),y
0012CE  3               	cmp #CUSTOM
0012CE  3               	beq dsline3
0012CE  3               	ldy ytmp
0012CE  3               .endif
0012CE  3  A5 61        	lda z80_a		; fetch spriteright byte
0012D0  3  25 6F        	and z80_bp		; mask right
0012D2  3  51 72        	eor (z80_hlp),y		; merge with screenright
0012D4  3  91 72        	sta (z80_hlp),y		; write screenright
0012D6  3               dsline3:
0012D6  3               .if hflag
0012D6  3               	ldy ytmp
0012D6  3               .endif
0012D6  3  E8           	inx			; next spritebyte
0012D7  3               
0012D7  3  60           	rts
0012D8  3               
0012D8  3               sprline:
0012D8  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
0012DC  3  40 41 60 61  
0012E0  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0012E4  3  C0 C1 E0 E1  
0012E8  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
0012EC  3  40 41 60 61  
0012F0  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0012F4  3  C0 C1 E0 E1  
0012F8  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
0012FC  3  40 41 60 61  
001300  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
001304  3  C0 C1 E0 E1  
001308  3               
001308  3               ;----------------------------------------------------------------------
001308  3               ; Line drawn, now work out next target address.
001308  3               ;----------------------------------------------------------------------
001308  3               
001308  3               nline:
001308  3  18           	clc
001309  3  A5 rr        	lda scraddr 		; get low byte of address.
00130B  3  69 20        	adc #$20
00130D  3  85 rr        	sta scraddr 		; new low byte of address.
00130F  3  90 02        	bcc :+
001311  3  E6 rr        	inc scraddr+1 		; new high byte of address.
001313  3               :
001313  3  60           	rts
001314  3               
001314  3               ;-------------------------------------------------------------
001314  3               ; Line drawn, now work out next target address.
001314  3               ;
001314  3               ; Input:
001314  3               ;  BP  = right mask
001314  3               ;  CP  = left mask
001314  3               ;  DEP = spriteaddress
001314  3               ;  z80_hlp = screen address
001314  3               ;-------------------------------------------------------------
001314  3               
001314  3               
001314  3               ;-----------------------------------------------------------
001314  3               ; Animates a sprite.
001314  3               ;
001314  3               ; Input:
001314  3               ;  IX = sprite address
001314  3               ;  HL = last sprite address
001314  3               ;-----------------------------------------------------------
001314  3               
001314  3               animsp:
001314  3  25 rr        	and frmno
001316  3  F0 01        	beq :+
001318  3  60           	rts
001319  3               :
001319  3  A0 06        	ldy #6
00131B  3  B1 68        	lda (z80_ix),y		; sprite image
00131D  3  20 78 15     	jsr gfrm		; get frame data.
001320  3               
001320  3  E6 66        	inc z80_l		; point to frames.
001322  3  D0 02        	bne :+
001324  3  E6 67        	inc z80_h
001326  3               :
001326  3  A0 07        	ldy #7
001328  3  B1 68        	lda (z80_ix),y		; sprite frame.
00132A  3  18           	clc
00132B  3  69 01        	adc #1			; next one along.
00132D  3  A0 00        	ldy #0
00132F  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
001331  3  90 02        	bcc anims0		; no, not yet.
001333  3  A9 00        	lda #0			; start at first frame.
001335  3               anims0:
001335  3  A0 07        	ldy #7
001337  3  91 68        	sta (z80_ix),y		; new frame.
001339  3  60           	rts
00133A  3               
00133A  3               ;--------------------------------------------------------------
00133A  3               ; Animate back
00133A  3               ;
00133A  3               ; Input:
00133A  3               ;  IX = sprite address
00133A  3               ;  HL = last sprite address
00133A  3               ;--------------------------------------------------------------
00133A  3               
00133A  3               animbk:
00133A  3  25 rr        	and frmno
00133C  3  F0 01        	beq :+
00133E  3  60           	rts
00133F  3               :
00133F  3  A0 06        	ldy #6
001341  3  B1 68        	lda (z80_ix),y		; sprite image.
001343  3  20 78 15     	jsr gfrm		; get frame data.
001346  3               
001346  3  E6 66        	inc z80_l 		; point to frames.
001348  3  D0 02        	bne :+
00134A  3  E6 67        	inc z80_h
00134C  3               :
00134C  3  A0 07        	ldy #7
00134E  3  B1 68        	lda (z80_ix),y 		; sprite frame.
001350  3  F0 03        	beq :+
001352  3  4C 59 13     	jmp rtanb0 		; yes, start at end.
001355  3               :
001355  3  A0 00        	ldy #0
001357  3  B1 66        	lda (z80_hl),y 		; last sprite.
001359  3               rtanb0:
001359  3  38           	sec
00135A  3  E9 01        	sbc #1			; next one along.
00135C  3  4C 35 13     	jmp anims0		; set new frame.
00135F  3               
00135F  3               ;--------------------------------------------------------------
00135F  3               ; Check for collision with other sprite, strict enforcement.
00135F  3               ;
00135F  3               ; Input:
00135F  3               ;  b		= sprite to test for
00135F  3               ;  ix		= current sprite pointer
00135F  3               ;
00135F  3               ; global:	b
00135F  3               ; local:	x,y,hl,de,skptr
00135F  3               ; calls:	-
00135F  3               ;--------------------------------------------------------------
00135F  3               
00135F  3               sktyp:
00135F  3  A9 56        	lda #<sprtab				; sprite table.
001361  3  85 66        	sta z80_l
001363  3  A9 17        	lda #>sprtab
001365  3  85 67        	sta z80_h
001367  3               numsp2:
001367  3  A9 0C        	lda #NUMSPR				; number of sprites.
001369  3  85 rr        	sta sktptr
00136B  3               sktyp0:
00136B  3  A5 66        	lda z80_l 				; store pointer to sprite.
00136D  3  85 rr        	sta skptr
00136F  3  A5 67        	lda z80_h
001371  3  85 rr        	sta skptr+1
001373  3               
001373  3  A0 00        	ldy #0
001375  3  B1 66        	lda (z80_hl),y 				; get sprite type.
001377  3  C5 63        	cmp z80_b				; is it the type we seek?
001379  3  F0 1D        	beq coltyp				; yes, we can use this one.
00137B  3               sktyp1:
00137B  3  18           	clc
00137C  3  A5 rr        	lda skptr				; retrieve sprite pointer.
00137E  3  69 11        	adc #TABSIZ				; size of each entry.
001380  3  85 66        	sta z80_l
001382  3  A5 rr        	lda skptr+1
001384  3  69 00        	adc #0
001386  3  85 67        	sta z80_h
001388  3  C6 rr        	dec sktptr					; one less iteration.
00138A  3  D0 DF        	bne sktyp0				; keep going until we find a slot.
00138C  3  A9 00        	lda #0					; default to ROM address - no sprite.
00138E  3  85 66        	sta z80_l
001390  3  85 67        	sta z80_h
001392  3  85 rr        	sta skptr				; store pointer to sprite.
001394  3  85 rr        	sta skptr+1
001396  3               
001396  3  18           	clc					; don't return with zero flag set.
001397  3  60           	rts 					; didn't find one.
001398  3               
001398  3               ;skptr:	.word 0					; search pointer.
001398  3               ;sktptr:	.byte 0
001398  3               
001398  3               coltyp:
001398  3  A0 00        	ldy #0
00139A  3  B1 68        	lda (z80_ix),y				; current sprite type.
00139C  3  C5 63        	cmp z80_b				; seeking sprite of same type?
00139E  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
0013A0  3               colty0:
0013A0  3  A0 09        	ldy #9					; distance to x position in table.
0013A2  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
0013A4  3  85 64        	sta z80_e
0013A6  3  88           	dey
0013A7  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
0013A9  3  85 65        	sta z80_d
0013AB  3               
0013AB  3               ; Drop into collision detection.
0013AB  3               
0013AB  3               colc16:
0013AB  3  A0 09        	ldy #9
0013AD  3  B1 68        	lda (z80_ix),y			 	; x coord.
0013AF  3  38           	sec					; subtract x.
0013B0  3  E5 64        	sbc z80_e
0013B2  3  B0 05        	bcs  colc1a 				; result is positive.
0013B4  3  49 FF        	eor #$ff				; make negative positive.
0013B6  3  18           	clc
0013B7  3  69 01        	adc #1
0013B9  3               colc1a:
0013B9  3  C9 10        	cmp #16 				; within x range?
0013BB  3  B0 BE        	bcs sktyp1				; no - they"ve missed.
0013BD  3  85 62        	sta z80_c				; store difference.
0013BF  3               
0013BF  3  A0 08        	ldy #8
0013C1  3  B1 68        	lda (z80_ix),y				; y coord.
0013C3  3  38           	sec
0013C4  3  E5 65        	sbc z80_d				; subtract y.
0013C6  3  B0 05        	bcs colc1b				; result is positive.
0013C8  3  49 FF        	eor #$ff				; make negative positive.
0013CA  3  18           	clc
0013CB  3  69 01        	adc #1
0013CD  3               colc1b:
0013CD  3  C9 10        	cmp #16					; within y range?
0013CF  3  B0 AA        	bcs sktyp1 				; no - they've missed.
0013D1  3  18           	clc					; add x difference.
0013D2  3  65 62        	adc z80_c
0013D4  3  C9 1A        	cmp #26					; only 5 corner pixels touching?
0013D6  3  B0 02        	bcs :+
0013D8  3  38           	sec
0013D9  3  60           	rts 					; carry set if there's a collision.
0013DA  3               :
0013DA  3  4C 7B 13     	jmp sktyp1				; try next sprite in table.
0013DD  3               colty1:
0013DD  3  A5 68        	lda z80_x  				; compare the two.
0013DF  3  C5 66        	cmp z80_l
0013E1  3  D0 09        	bne end_col
0013E3  3  A5 69        	lda z80_i
0013E5  3  C5 67        	cmp z80_h
0013E7  3  D0 03        	bne end_col
0013E9  3  4C 7B 13     	jmp sktyp1 				; addresses are identical.
0013EC  3               end_col:
0013EC  3  4C A0 13     	jmp colty0
0013EF  3               
0013EF  3               ;-----------------------------------------------------------
0013EF  3               ; Display number, left aligned
0013EF  3               ;
0013EF  3               ; Input:
0013EF  3               ;  a		= number
0013EF  3               ;
0013EF  3               ; global:	-
0013EF  3               ; local:	a,y,bc,hl,displ0
0013EF  3               ; calls:	num2ch,dmsg3
0013EF  3               ;-----------------------------------------------------------
0013EF  3               
0013EF  3               disply:
0013EF  3  85 61        	sta z80_a
0013F1  3  A9 17        	lda #<displ0				; display workspace.
0013F3  3  85 62        	sta z80_c
0013F5  3  A9 14        	lda #>displ0
0013F7  3  85 63        	sta z80_b
0013F9  3  A5 61        	lda z80_a
0013FB  3  20 94 05     	jsr num2ch				; convert accumulator to string.
0013FE  3               displ1:
0013FE  3  C6 62        	dec z80_c				; back one character.
001400  3  D0 02        	bne :+
001402  3  C6 63        	dec z80_b
001404  3               :
001404  3  A0 00        	ldy #0
001406  3  B1 62        	lda (z80_bc),y				; fetch digit.
001408  3  09 80        	ora #128				; insert end marker.
00140A  3  91 62        	sta (z80_bc),y				; new value.
00140C  3               
00140C  3  A9 17        	lda #<displ0				; display space.
00140E  3  85 66        	sta z80_l
001410  3  A9 14        	lda #>displ0
001412  3  85 67        	sta z80_h
001414  3  4C C5 0E     	jmp dmsg3				; display the string.
001417  3               
001417  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
00141B  3               
00141B  3               ;----------------------------------------------------------------
00141B  3               ; Initialise screen.
00141B  3               ;
00141B  3               ; global:	roomtb,scno
00141B  3               ; local:	-
00141B  3               ; calls:	tstcs
00141B  3               ;----------------------------------------------------------------
00141B  3               
00141B  3               initsc:
00141B  3  AD 33 18     	lda roomtb 			; whereabouts in the map are we?
00141E  3  20 28 14     	jsr tstsc 			; find displacement.
001421  3  C9 FF        	cmp #255 			; is it valid?
001423  3  F0 02        	beq init_end 			; no, it's rubbish.
001425  3  85 rr        	sta scno			; store new room number.
001427  3               init_end:
001427  3  60           	rts
001428  3               
001428  3               ;----------------------------------------------------------------
001428  3               ; Test screen.
001428  3               ;
001428  3               ; global:	-
001428  3               ; local:	x
001428  3               ; calls:	-
001428  3               ;----------------------------------------------------------------
001428  3               
001428  3               tstsc:
001428  3  85 rr        	sta tmproom
00142A  3  18           	clc
00142B  3  69 0A        	adc #MAPWID 			; add width in case we"re negative.
00142D  3  AA           	tax 				; add displacement to map data.
00142E  3  BD 5E 18     	lda mapdat-MAPWID,x 		; find room number there.
001431  3  60           	rts
001432  3               
001432  3               ;tmproom:	.byte 0
001432  3               
001432  3               ;--------------------------
001432  3               ; Screen left.
001432  3               ;--------------------------
001432  3               
001432  3               scrl:
001432  3  AD 33 18     	lda roomtb 			; present room table pointer.
001435  3  38           	sec
001436  3  E9 01        	sbc #1				; room left.
001438  3               scrl0:
001438  3  20 28 14     	jsr tstsc			; test screen.
00143B  3  C9 FF        	cmp #255			; is there a screen this way?
00143D  3  D0 01        	bne :+
00143F  3  60           	rts				; no, return to loop.
001440  3               :
001440  3  A5 rr        	lda tmproom			; restore room displacement.
001442  3  8D 33 18     	sta roomtb			; new room table position.
001445  3               scrl1:
001445  3  20 1B 14     	jsr initsc 			; set new screen.
001448  3  A9 02        	lda #2
00144A  3  85 rr        	sta restfl 			; set it.
00144C  3  60           	rts
00144D  3               scrr:
00144D  3  AD 33 18     	lda roomtb 			; room table pointer.
001450  3  18           	clc
001451  3  69 01        	adc #1				; room right.
001453  3  4C 38 14     	jmp scrl0
001456  3               scru:
001456  3  AD 33 18     	lda roomtb 			; room table pointer.
001459  3  38           	sec
00145A  3  E9 0A        	sbc #MAPWID 			; room up.
00145C  3  4C 38 14     	jmp scrl0
00145F  3               scrd:
00145F  3  AD 33 18     	lda roomtb 			; room table pointer.
001462  3  18           	clc
001463  3  69 0A        	adc #MAPWID 			; room down.
001465  3  4C 38 14     	jmp scrl0
001468  3               
001468  3               ;-----------------------------------------
001468  3               ; Jump to new screen.
001468  3               ;-----------------------------------------
001468  3               
001468  3               nwscr:
001468  3  A2 00        	ldx #0				; start of map data.
00146A  3               nwscr0:
00146A  3  DD 68 18     	cmp mapdat,x
00146D  3  F0 06        	beq nwscr1			; have we found a match for screen?
00146F  3  E8           	inx 				; next room.
001470  3  E0 50        	cpx #80				; zero room count, 80 to search.
001472  3  D0 F6        	bne nwscr0			; keep looking.
001474  3  60           	rts
001475  3               nwscr1:
001475  3  8E 33 18     	stx roomtb			; set the map position.
001478  3  4C 45 14     	jmp scrl1			; draw new room.
00147B  3               
00147B  3               
00147B  3               ;----------------------------------------------------------
00147B  3               ; Gravity processing.
00147B  3               ;----------------------------------------------------------
00147B  3               
00147B  3               grav:
00147B  3  A0 0D        	ldy #13
00147D  3  B1 68        	lda (z80_ix),y			; jump pointer low.
00147F  3  85 66        	sta z80_l
001481  3  A0 0E        	ldy #14
001483  3  B1 68        	lda (z80_ix),y			; jump pointer high.
001485  3  85 67        	sta z80_h
001487  3  05 66        	ora z80_l			; merge in low byte.
001489  3  D0 01        	bne :+
00148B  3  60           	rts				; if neither is set, we're not in the air.
00148C  3               :
00148C  3  A0 00        	ldy #0
00148E  3  B1 66        	lda (z80_hl),y			; pixels to move.
001490  3  85 61        	sta z80_a
001492  3  C9 63        	cmp #99				; reached the end?
001494  3  D0 0C        	bne grav0			; no, continue.
001496  3               grav2:
001496  3  C6 66        	dec z80_l			; go back to previous value.
001498  3  C9 FF        	cmp #$ff
00149A  3  D0 02        	bne :+
00149C  3  C6 67        	dec z80_h
00149E  3               :
00149E  3  B1 66        	lda (z80_hl),y			; fetch that from table.
0014A0  3  85 61        	sta z80_a
0014A2  3               grav0:
0014A2  3  E6 66        	inc z80_l			; point to next table entry.
0014A4  3  D0 02        	bne :+
0014A6  3  E6 67        	inc z80_h
0014A8  3               :
0014A8  3  A5 66        	lda z80_l
0014AA  3  A0 0D        	ldy #13
0014AC  3  91 68        	sta (z80_ix),y			; store new pointer low.
0014AE  3  A5 67        	lda z80_h
0014B0  3  A0 0E        	ldy #14
0014B2  3  91 68        	sta (z80_ix),y			; store new pointer high.
0014B4  3               grav1:
0014B4  3  A5 61        	lda z80_a
0014B6  3  D0 01        	bne :+				; any movement required?
0014B8  3  60           	rts				; no, not this time.
0014B9  3               :
0014B9  3  A5 61        	lda z80_a
0014BB  3  C9 80        	cmp #128			; is it up or down?
0014BD  3  B0 15        	bcs gravu			; it's up.
0014BF  3               gravd:
0014BF  3  85 63        	sta z80_b			; set pixels to move.
0014C1  3               gravd0:
0014C1  3  20 EB 0B     	jsr cangd			; can we go down?
0014C4  3  D0 28        	bne gravst			; can't move down, so stop.
0014C6  3  A0 08        	ldy #8
0014C8  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
0014CA  3  18           	clc
0014CB  3  69 01        	adc #1
0014CD  3  91 68        	sta (z80_ix),y
0014CF  3  C6 63        	dec z80_b
0014D1  3  D0 EE        	bne gravd0
0014D3  3  60           	rts
0014D4  3               gravu:
0014D4  3  49 FF        	eor #$ff			; flip the sign so it's positive.
0014D6  3  18           	clc
0014D7  3  69 01        	adc #1
0014D9  3  85 63        	sta z80_b			; set pixels to move.
0014DB  3               gravu0:
0014DB  3  20 B6 0B     	jsr cangu			; can we go up?
0014DE  3  D0 6E        	bne ifalls			; can't move up, go down next.
0014E0  3  A0 08        	ldy #8
0014E2  3  B1 68        	lda (z80_ix),y
0014E4  3  38           	sec
0014E5  3  E9 01        	sbc #1
0014E7  3  91 68        	sta (z80_ix),y			; adjust new x coord.
0014E9  3  C6 63        	dec z80_b
0014EB  3  D0 EE        	bne gravu0
0014ED  3  60           	rts
0014EE  3               gravst:
0014EE  3  A0 0D        	ldy #13
0014F0  3  B1 68        	lda (z80_ix),y			; jump pointer low.
0014F2  3  85 66        	sta z80_l
0014F4  3  A0 0E        	ldy #14
0014F6  3  B1 68        	lda (z80_ix),y			; jump pointer high.
0014F8  3  85 67        	sta z80_h
0014FA  3               
0014FA  3  A9 00        	lda #0				; null value in pointer.
0014FC  3  A0 0D        	ldy #13
0014FE  3  91 68        	sta (z80_ix),y			; store new pointer low.
001500  3  C8           	iny
001501  3  91 68        	sta (z80_ix),y			; store new pointer high.
001503  3               
001503  3  A0 00        	ldy #0
001505  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
001507  3  C9 63        	cmp #99				; is it the end marker?
001509  3               evftf:
001509  3  F0 01        	beq :+				; yes, fallen too far.
00150B  3  60           	rts
00150C  3               :
00150C  3  4C A9 26     	jmp evnt15			; EVENT FELLTOOFAR
00150F  3               
00150F  3               ;------------------------------------------------
00150F  3               ; Initiate fall check.
00150F  3               ;------------------------------------------------
00150F  3               
00150F  3               ifall:
00150F  3  A0 0D        	ldy #13
001511  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
001513  3  85 66        	sta z80_l
001515  3  A0 0E        	ldy #14
001517  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
001519  3  85 67        	sta z80_h			; high byte in accumulator.
00151B  3  05 66        	ora z80_l			; merge in low byte.
00151D  3  F0 01        	beq :+
00151F  3  60           	rts				; if either is set, we're already in the air.
001520  3               :
001520  3  A0 09        	ldy #9
001522  3  B1 68        	lda (z80_ix),y			; y coordinate.
001524  3  85 rr        	sta dispx
001526  3  A0 08        	ldy #8
001528  3  B1 68        	lda (z80_ix),y			; look x coordinate.
00152A  3  18           	clc
00152B  3               numsp7:
00152B  3  69 10        	adc #SPR_HGT			; add 16 pixels.
00152D  3  85 rr        	sta dispy			; set up test coordinates.
00152F  3  20 62 0D     	jsr tstbl			; get map address.
001532  3  20 7D 0C     	jsr plchk			; block, platform check.
001535  3  F0 01        	beq :+
001537  3  60           	rts				; it's solid, don't fall.
001538  3               :
001538  3  E6 rr        	inc bufaddr			; look right one cell.
00153A  3  20 7D 0C     	jsr plchk			; block, platform check.
00153D  3  F0 01        	beq :+
00153F  3  60           	rts				; it's solid, don't fall.
001540  3               :
001540  3  A5 rr        	lda dispx			; y coordinate.
001542  3  29 07        	and #7				; position straddling block cells.
001544  3  F0 08        	beq ifalls			; no more checks needed.
001546  3  E6 rr        	inc bufaddr			; look to third cell.
001548  3  20 7D 0C     	jsr plchk			; block, platform check.
00154B  3  F0 01        	beq :+
00154D  3  60           	rts				; it's solid, don't fall.
00154E  3               :
00154E  3               ifalls:
00154E  3  A9 CD        	lda #<jtab			; jump table start.
001550  3  85 66        	sta z80_l
001552  3  A9 7C        	lda #>jtab
001554  3  85 67        	sta z80_h
001556  3               ifal0:
001556  3  E6 66        	inc z80_l			; point to next value.
001558  3  D0 02        	bne :+
00155A  3  E6 67        	inc z80_h
00155C  3               :
00155C  3  A0 00        	ldy #0
00155E  3  B1 66        	lda (z80_hl),y			; fetch value.
001560  3  F0 F4        	beq ifal0			; no, get next value.
001562  3  C9 63        	cmp #99				; reached end of table?
001564  3  D0 01        	bne :+
001566  3  60           	rts				; yes, don't fall.
001567  3               :
001567  3  C9 80        	cmp #128			; is it going up?
001569  3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
00156B  3               
00156B  3  A0 0D        	ldy #13
00156D  3  A5 66        	lda z80_l
00156F  3  91 68        	sta (z80_ix),y 			; set jump low.
001571  3  A0 0E        	ldy #14
001573  3  A5 67        	lda z80_h
001575  3  91 68        	sta (z80_ix),y 			; set jump high.
001577  3  60           	rts
001578  3               
001578  3               
001578  3               ;----------------------------------------------------
001578  3               ; Get frame data for a particular sprite.
001578  3               ; Input:
001578  3               ;  a		= framenumer
001578  3               ; Output:
001578  3               ;  hl		= frame address
001578  3               ;
001578  3               ; global:	hl,frmptr
001578  3               ; local:	-
001578  3               ; calls:	-
001578  3               ;----------------------------------------------------
001578  3               
001578  3               gfrm:
001578  3  0A           	asl a	 		 	; multiple of 2.
001579  3  18           	clc
00157A  3  6D 1C 03     	adc frmptr 			; frames used by game.
00157D  3  85 66        	sta z80_l
00157F  3  AD 1D 03     	lda frmptr+1
001582  3  69 00        	adc #0
001584  3  85 67        	sta z80_h 			; point to frame start.
001586  3  60           	rts
001587  3               
001587  3               ;----------------------------------------------------
001587  3               ; Find sprite list for current room.
001587  3               ;
001587  3               ; global:	hl
001587  3               ; local:	x,y
001587  3               ; calls:	-
001587  3               ;----------------------------------------------------
001587  3               
001587  3               sprlst:
001587  3  A9 36        	lda #<nmedat 			; list of enemy sprites.
001589  3  85 66        	sta z80_l
00158B  3  A9 78        	lda #>nmedat
00158D  3  85 67        	sta z80_h
00158F  3  A6 rr        	ldx scno 			; screen number.
001591  3  D0 01        	bne sprls2 			; is it the first screen?
001593  3  60           	rts 				; yes, don't need to search data.
001594  3               sprls2:
001594  3  A0 00        	ldy #0
001596  3               sprls1:
001596  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
001598  3  C9 FF        	cmp #255			; is it an end marker?
00159A  3  F0 0E        	beq sprls0 			; yes, end of this room.
00159C  3               
00159C  3  18           	clc 				; point to next sprite in list.
00159D  3  A5 66        	lda z80_l
00159F  3  69 04        	adc #NMESIZ
0015A1  3  85 66        	sta z80_l
0015A3  3  90 02        	bcc :+
0015A5  3  E6 67        	inc z80_h
0015A7  3               :
0015A7  3  4C 96 15     	jmp sprls1 			; continue until end of room.
0015AA  3               sprls0:
0015AA  3  E6 66        	inc z80_l 			; point to start of next screen.s
0015AC  3  D0 02        	bne :+
0015AE  3  E6 67        	inc z80_h
0015B0  3               :
0015B0  3  CA           	dex
0015B1  3  D0 E3        	bne sprls1 			; continue until room found.
0015B3  3  60           	rts
0015B4  3               
0015B4  3               
0015B4  3               ;----------------------------------------------------
0015B4  3               ; Clear all but a single player sprite.
0015B4  3               ;
0015B4  3               ; global:	-
0015B4  3               ; local:	x,y,ix
0015B4  3               ; calls:	-
0015B4  3               ;----------------------------------------------------
0015B4  3               
0015B4  3               nspr:
0015B4  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0015B6  3  85 rr        	sta sprcnt
0015B8  3  A9 56        	lda #<sprtab 			; sprite table.
0015BA  3  85 68        	sta z80_x
0015BC  3  A9 17        	lda #>sprtab
0015BE  3  85 69        	sta z80_i
0015C0  3               nspr0:
0015C0  3  A0 00        	ldy #0 				; fetch sprite type.
0015C2  3  B1 68        	lda (z80_ix),y 			; is it a player?
0015C4  3  F0 1A        	beq nspr1 			; yes, keep this one.
0015C6  3               
0015C6  3  A9 FF        	lda #255
0015C8  3  A0 00        	ldy #0 				; fetch sprite type.
0015CA  3  91 68        	sta (z80_ix),y 			; delete sprite.
0015CC  3  A0 05        	ldy #5
0015CE  3  91 68        	sta (z80_ix),y 			; remove next type.
0015D0  3               
0015D0  3  18           	clc	 			; next sprite.
0015D1  3  A5 68        	lda z80_x
0015D3  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0015D5  3  85 68        	sta z80_x
0015D7  3  90 02        	bcc :+
0015D9  3  E6 69        	inc z80_i
0015DB  3               :
0015DB  3  C6 rr        	dec sprcnt	 			; one less space in the table.
0015DD  3  D0 E1        	bne nspr0
0015DF  3  60           	rts
0015E0  3               nspr1:
0015E0  3  A9 FF        	lda #255
0015E2  3  A0 00        	ldy #0
0015E4  3  91 68        	sta (z80_ix),y 			; delete sprite.
0015E6  3               
0015E6  3  18           	clc	 			; point to next sprite.
0015E7  3  A5 68        	lda z80_x
0015E9  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0015EB  3  85 68        	sta z80_x
0015ED  3  90 02        	bcc :+
0015EF  3  E6 69        	inc z80_i
0015F1  3               :
0015F1  3  C6 rr        	dec sprcnt	 			; one less to do.
0015F3  3  D0 01        	bne nspr2
0015F5  3  60           	rts
0015F6  3               nspr2:
0015F6  3  A9 FF        	lda #255
0015F8  3  A0 00        	ldy #0
0015FA  3  91 68        	sta (z80_ix),y 			; delete sprite.
0015FC  3  A0 05        	ldy #5
0015FE  3  91 68        	sta (z80_ix),y 			; remove next type.
001600  3               
001600  3  18           	clc	 			; next sprite.
001601  3  A5 68        	lda z80_x
001603  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
001605  3  85 68        	sta z80_x
001607  3  90 02        	bcc :+
001609  3  E6 69        	inc z80_i
00160B  3               :
00160B  3  C6 rr        	dec sprcnt	 			; one less space in table.
00160D  3  D0 E7        	bne nspr2
00160F  3  60           	rts
001610  3               
001610  3               ;----------------------------------------------------------
001610  3               ; Two initialisation routines.
001610  3               ; Initialise sprites - copy everything from list to table.
001610  3               ;
001610  3               ; global:	-
001610  3               ; local:	x,y,ix
001610  3               ; calls:	cpsp
001610  3               ;----------------------------------------------------------
001610  3               
001610  3               ispr:
001610  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
001612  3  85 rr        	sta sprcnt
001614  3  A9 56        	lda #<sprtab			; sprite table.
001616  3  85 68        	sta z80_x
001618  3  A9 17        	lda #>sprtab
00161A  3  85 69        	sta z80_i
00161C  3               ispr2:
00161C  3  A0 00        	ldy #0
00161E  3  B1 66        	lda (z80_hl),y 			; fetch byte.
001620  3  C9 FF        	cmp #255 			; is it an end marker?
001622  3  D0 01        	bne :+
001624  3  60           	rts 				; yes, no more to do.
001625  3               :
001625  3               ispr1:
001625  3  A0 00        	ldy #0
001627  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
001629  3  C9 FF        	cmp #255 			; is it enabled yet?
00162B  3  D0 08        	bne ispr4			; yes, try another slot.
00162D  3               
00162D  3  A0 05        	ldy #5
00162F  3  B1 68        	lda (z80_ix),y		 	; next type.
001631  3  C9 FF        	cmp #255 			; is it enabled yet?
001633  3  F0 10        	beq ispr3 			; no, process this one.
001635  3               ispr4:
001635  3  18           	clc 				; next sprite.
001636  3  A5 68        	lda z80_x
001638  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
00163A  3  85 68        	sta z80_x
00163C  3  90 02        	bcc :+
00163E  3  E6 69        	inc z80_i
001640  3               :
001640  3  C6 rr        	dec sprcnt
001642  3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
001644  3  60           	rts  				; no more room in table.
001645  3               ispr3:
001645  3  20 98 16     	jsr cpsp			; initialise a sprite.
001648  3  C6 rr        	dec sprcnt			; one less space in the table.
00164A  3  D0 D0        	bne ispr2
00164C  3  60           	rts
00164D  3               
00164D  3               
00164D  3               ;-----------------------------------------------------------------------
00164D  3               ; Initialise sprites - but not player, we're keeping the old one.
00164D  3               ;
00164D  3               ; global:	-
00164D  3               ; local:	x,y,ix
00164D  3               ; calls:	cpsp
00164D  3               ;-----------------------------------------------------------------------
00164D  3               
00164D  3               kspr:
00164D  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
00164F  3  A9 56        	lda #<sprtab 			; sprite table.
001651  3  85 68        	sta z80_x
001653  3  A9 17        	lda #>sprtab
001655  3  85 69        	sta z80_i
001657  3               kspr2:
001657  3  A0 00        	ldy #0
001659  3  B1 66        	lda (z80_hl),y 			; fetch byte.
00165B  3  C9 FF        	cmp #255 			; is it an end marker?
00165D  3  D0 01        	bne :+
00165F  3  60           	rts 				; yes, no more to do.
001660  3               :
001660  3  C9 00        	cmp #0
001662  3  D0 0E        	bne kspr1 			; no, add to table as normal.
001664  3               
001664  3  18           	clc 				; next sprite.
001665  3  A5 66        	lda z80_l
001667  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
001669  3  85 66        	sta z80_l
00166B  3  90 02        	bcc :+
00166D  3  E6 67        	inc z80_h
00166F  3               :
00166F  3  4C 57 16     	jmp kspr2
001672  3               kspr1:
001672  3  A0 00        	ldy #0 				; fetch sprite type.
001674  3  B1 68        	lda (z80_ix),y
001676  3  C9 FF        	cmp #255 			; is it enabled yet?
001678  3  D0 08        	bne kspr4 			; yes, try another slot.
00167A  3               
00167A  3  A0 05        	ldy #5 				; next type.
00167C  3  B1 68        	lda (z80_ix),y
00167E  3  C9 FF        	cmp #255 			; is it enabled yet?
001680  3  F0 0F        	beq kspr3 			; no, process this one.
001682  3               kspr4:
001682  3  18           	clc 				; next sprite.
001683  3  A5 68        	lda z80_x
001685  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
001687  3  85 68        	sta z80_x
001689  3  90 02        	bcc :+
00168B  3  E6 69        	inc z80_i
00168D  3               :
00168D  3  CA           	dex	 			; repeat for remaining sprites.
00168E  3  D0 E2        	bne kspr1
001690  3  60           	rts  				; no more room in table.
001691  3               kspr3:
001691  3  20 98 16     	jsr cpsp 			; copy sprite to table.
001694  3  CA           	dex	 			; one less space in the table.
001695  3  D0 C0        	bne kspr2
001697  3  60           	rts
001698  3               
001698  3               ;----------------------------------------------
001698  3               ; Copy sprite from list to table.
001698  3               ;
001698  3               ; global:	hl,ix
001698  3               ; local:	y
001698  3               ; calls:	evnt09
001698  3               ;----------------------------------------------
001698  3               
001698  3               cpsp:
001698  3  A0 00        	ldy #0				; fetch byte from table.
00169A  3  B1 66        	lda (z80_hl),y
00169C  3  91 68        	sta (z80_ix),y			; set up type.
00169E  3  A0 05        	ldy #PAM1ST
0016A0  3  91 68        	sta (z80_ix),y 			; set up type.
0016A2  3               
0016A2  3  E6 66        	inc z80_l 			; move to next byte.
0016A4  3  D0 02        	bne :+
0016A6  3  E6 67        	inc z80_h
0016A8  3               :
0016A8  3  A0 00        	ldy #0 				; fetch byte from table.
0016AA  3  B1 66        	lda (z80_hl),y
0016AC  3  A0 06        	ldy #6
0016AE  3  91 68        	sta (z80_ix),y			; set up image.
0016B0  3               
0016B0  3  E6 66        	inc z80_l 			; move to next byte.
0016B2  3  D0 02        	bne :+
0016B4  3  E6 67        	inc z80_h
0016B6  3               :
0016B6  3  A0 00        	ldy #0
0016B8  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
0016BA  3  A0 08        	ldy #8
0016BC  3  91 68        	sta (z80_ix),y 			; set up coordinate.
0016BE  3               
0016BE  3  A9 C8        	lda #200 			; set initial coordinate off screen.
0016C0  3  A0 03        	ldy #3
0016C2  3  91 68        	sta (z80_ix),y
0016C4  3               
0016C4  3  E6 66        	inc z80_l 			; move to next byte.
0016C6  3  D0 02        	bne :+
0016C8  3  E6 67        	inc z80_h
0016CA  3               :
0016CA  3  A0 00        	ldy #0 				; fetch byte from table.
0016CC  3  B1 66        	lda (z80_hl),y
0016CE  3  A0 09        	ldy #9
0016D0  3  91 68        	sta (z80_ix),y 			; set up coordinate.
0016D2  3               
0016D2  3  E6 66        	inc z80_l 			; move to next byte.
0016D4  3  D0 02        	bne :+
0016D6  3  E6 67        	inc z80_h
0016D8  3               :
0016D8  3  A9 00        	lda #0				; zeroes in accumulator.
0016DA  3  A0 07        	ldy #7 				; reset frame number.
0016DC  3  91 68        	sta (z80_ix),y
0016DE  3  A0 0A        	ldy #10 			; reset direction.
0016E0  3  91 68        	sta (z80_ix),y
0016E2  3  A0 0D        	ldy #13				; reset jump pointer low.
0016E4  3  91 68        	sta (z80_ix),y
0016E6  3  A0 0E        	ldy #14	 			; reset jump pointer high.
0016E8  3  91 68        	sta (z80_ix),y
0016EA  3               
0016EA  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
0016EC  3  A0 10        	ldy #16
0016EE  3  91 68        	sta (z80_ix),y
0016F0  3               evis0:
0016F0  3  A5 69        	lda z80_i
0016F2  3  48           	pha
0016F3  3  A5 68        	lda z80_x
0016F5  3  48           	pha
0016F6  3  A5 67        	lda z80_h
0016F8  3  48           	pha
0016F9  3  A5 66        	lda z80_l
0016FB  3  48           	pha
0016FC  3               
0016FC  3  20 F9 25     	jsr evnt09 			; perform event.
0016FF  3               
0016FF  3  68           	pla
001700  3  85 66        	sta z80_l
001702  3  68           	pla
001703  3  85 67        	sta z80_h
001705  3  68           	pla
001706  3  85 68        	sta z80_x
001708  3  68           	pla
001709  3  85 69        	sta z80_i
00170B  3               
00170B  3  18           	clc
00170C  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
00170E  3  69 11        	adc #TABSIZ		 	; next sprite.
001710  3  85 68        	sta z80_x
001712  3  90 02        	bcc :+
001714  3  E6 69        	inc z80_i
001716  3               :
001716  3  60           	rts
001717  3               
001717  3               
001717  3               ;-------------------------------------
001717  3               ; Clear the play area window.
001717  3               ;-------------------------------------
001717  3               
001717  3               clw:
001717  3  AD 28 03     	lda wintop			; get coordinates of window.
00171A  3  85 rr        	sta dispy			; put into dispx for calculation.
00171C  3  AD 29 03     	lda winlft
00171F  3  85 rr        	sta dispx
001721  3               
001721  3  AD 2A 03     	lda winhgt			; height of window.
001724  3  85 rr        	sta rrow			; copy to b register.
001726  3               clw3:
001726  3  AD 2B 03     	lda winwid 			; width of window.
001729  3  85 rr        	sta rcol
00172B  3               clw2:
00172B  3  20 4C 09     	jsr gprad 			; get print address.
00172E  3  A9 00        	lda #0				; zero byte to write.
001730  3  A2 07        	ldx #7				; pixel height of each cell.
001732  3               clw1:
001732  3  BC D2 09     	ldy scrtab,x
001735  3  91 rr        	sta (scraddr),y 			; copy to screen.
001737  3  CA           	dex				; next screen row down.
001738  3  10 F8        	bpl clw1
00173A  3               
00173A  3  E6 rr        	inc dispx			; next column.
00173C  3  C6 rr        	dec rcol			; one less to do.
00173E  3  D0 EB        	bne clw2			; repeat for remaining columns.
001740  3               
001740  3  AD 29 03     	lda winlft			; get left edge.
001743  3  85 rr        	sta dispx 			; reset x.
001745  3  E6 rr        	inc dispy 			; next line down.
001747  3               
001747  3  C6 rr        	dec rrow
001749  3  D0 DB        	bne clw3			; repeat down the screen.
00174B  3               
00174B  3  AD 28 03     	lda wintop			; get coordinates of window.
00174E  3  85 rr        	sta chary			; put into display position.
001750  3  AD 29 03     	lda winlft
001753  3  85 rr        	sta charx
001755  3  60           	rts
001756  3               
001756  3               
001756  3               ;----------------------------------------------------------
001756  3               ; Effects code.
001756  3               ; Ticker routine is called 25 times per second.
001756  3               ;
001756  3               ; HL = txtscr = left text screen address
001756  3               ; DE = txtscr+txtwid-1 = right text screen address
001756  3               ; BC = txtpos = text scroller position
001756  3               ;
001756  3               ;----------------------------------------------------------
001756  3               
001756  3               .if sflag
001756  3               scrly:
001756  3               	rts
001756  3               	.word txtscr         	; get left screen address.
001756  3               	sta scr_l
001756  3               	lda txtscr+1
001756  3               	sta scr_l+1
001756  3               	sta scr_r+1
001756  3               
001756  3               	stx xtmp
001756  3               
001756  3               	clc         		; get right screen address.
001756  3               	lda scr_l
001756  3               	adc txtwid
001756  3               	sta scr_r
001756  3               	dec scr_r
001756  3               scrly1:
001756  3               	ldy txtwid		; set txtwide
001756  3               	dey
001756  3               	clc
001756  3               scrly0:
001756  3               	lda (scr_l),y		; scroll 1 line
001756  3               	rol a
001756  3               	sta (scr_l),y
001756  3               	dey
001756  3               	bpl scrly0
001756  3               
001756  3               	clc			; point to next line
001756  3               	lda scr_l
001756  3               	adc #32
001756  3               	sta scr_l
001756  3               	bcc scrly1		; repeat 8 times
001756  3               
001756  3               	lda txtpos 		; get text pointer.
001756  3               	sta scr_txt
001756  3               	lda txtpos+1
001756  3               	sta scr_txt+1
001756  3               
001756  3               	ldy #0
001756  3               	lda (scr_txt),y 		; find character we're displaying.
001756  3               	and #127 		; remove end marker bit if applicable.
001756  3               	cmp #13			; is it newline?
001756  3               	bne scrly5 		; no, it's okay.
001756  3               	lda #32			; convert to a space instead.
001756  3               scrly5:
001756  3               	sta fntaddr		; calculate char address
001756  3               	lda #0
001756  3               	sta fntaddr+1
001756  3               	asl fntaddr  		; multiply char by 8.
001756  3               	rol fntaddr+1
001756  3               	asl fntaddr
001756  3               	rol fntaddr+1
001756  3               	asl fntaddr
001756  3               	rol fntaddr+1
001756  3               	lda fntaddr
001756  3               	clc
001756  3               	adc #<(FONT-256)
001756  3               	sta scrly3+1		; that's the low byte.
001756  3               	lda fntaddr+1
001756  3               	adc #>(FONT-256)
001756  3               	sta scrly3+2		; add displacement.
001756  3               
001756  3               	ldx #0
001756  3               scrly3:
001756  3               	lda $3333,x		; get image of char line.
001756  3               	and txtbit
001756  3               	beq scrly2		; don't plot pixel
001756  3               	ldy scrline,x
001756  3               	lda (scr_r),y
001756  3               	clc
001756  3               	ora #1
001756  3               	sta (scr_r),y		; plot pixel
001756  3               scrly2:
001756  3               	inx			; next line of char.
001756  3               	cpx #8
001756  3               	bne scrly3
001756  3               
001756  3               	lsr txtbit		; bit of text to display.
001756  3               	bcs :+
001756  3               	rts
001756  3               :
001756  3               	ldy #0
001756  3               	lda (scr_txt),y 	; what was the character?
001756  3               	asl a	  		; end of message?
001756  3               	bcs scrly4
001756  3               	inc txtpos
001756  3               	bne :+
001756  3               	inc txtpos+1
001756  3               :
001756  3               	jmp scrly6 		; not yet - continue.
001756  3               scrly4:
001756  3               	lda txtini 		; start of scrolling message.
001756  3               	sta txtpos
001756  3               	lda txtini+1
001756  3               	sta txtpos+1
001756  3               scrly6:
001756  3               	lda #128
001756  3               	sta txtbit
001756  3               	ldx xtmp
001756  3               	rts
001756  3               
001756  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
001756  3               
001756  3               ;-------------------------------------------------------
001756  3               ; Entry TICKER command
001756  3               ;
001756  3               ; Entry:
001756  3               ;  z80_b = message nr
001756  3               ;  z80_c = width
001756  3               ;-------------------------------------------------------
001756  3               
001756  3               iscrly:
001756  3               	jsr prescr 		; set up display position.
001756  3               
001756  3               	lda #<msgdat 		; text messages.
001756  3               	sta z80_l
001756  3               	lda #>msgdat
001756  3               	sta z80_h
001756  3               
001756  3               	lda z80_c 		; width.
001756  3               	sec
001756  3               	sbc #1			; subtract one.
001756  3               	cmp #32 		; is it between 1 and 32?
001756  3               	bcc :+
001756  3               	lda #$60
001756  3               	jmp iscrl0		; no, disable messages.
001756  3               :
001756  3               	ldx z80_b		; message number.
001756  3               	jsr getwrd 		; find message start.
001756  3               
001756  3               	lda z80_l		; set initial text position.
001756  3               	sta txtini
001756  3               	lda z80_h
001756  3               	sta txtini+1
001756  3               
001756  3               	lda #$ad		; code for lda adrr
001756  3               iscrl0:
001756  3               	sta scrly		; enable/disable scrolling routine.
001756  3               
001756  3               	jsr prescr 		; set up display position.
001756  3               	jsr gprad 		; get print address.
001756  3               
001756  3               	lda scraddr 		; set text screen address.
001756  3               	sta txtscr
001756  3               	lda scraddr+1
001756  3               	sta txtscr+1
001756  3               
001756  3               	lda z80_c		; width.
001756  3               	sta txtwid		; set width in working storage.
001756  3               
001756  3               	lda #128 		; start with leftmost bit.
001756  3               	sta txtbit
001756  3               
001756  3               	jmp scrly4
001756  3               .endif
001756  3               
001756  3               ;------------------------------------------------------------------
001756  3               ; Dig routine, conditional assembly depending on dflag
001756  3               ;------------------------------------------------------------------
001756  3               .if dflag
001756  3               dig:
001756  3               	and #3
001756  3               	beq digr		; dig right
001756  3               	cmp #1
001756  3               	beq digl		; dig left
001756  3               	cmp #2
001756  3               	beq digd		; dig down
001756  3               
001756  3               ; Dig up.
001756  3               
001756  3               digu:				; dig up
001756  3               	ldy #8
001756  3               	lda (z80_ix),y
001756  3               	sec
001756  3               	sbc #2
001756  3               	sta dispy		; set y
001756  3               
001756  3               	iny
001756  3               	lda (z80_ix),y
001756  3               	sta dispx		; set x
001756  3               	jmp digv
001756  3               
001756  3               ; Dig down.
001756  3               
001756  3               digd:
001756  3               	ldy #9
001756  3               	lda (z80_ix),y
001756  3               	sta dispx		; set y
001756  3               
001756  3               	dey
001756  3               	clc
001756  3               	lda (z80_ix),y
001756  3               	adc #16
001756  3               	sta dispy		; set y
001756  3               	jmp digv
001756  3               
001756  3               ; Dig left.
001756  3               
001756  3               digl:
001756  3               	ldy #8
001756  3               	lda (z80_ix),y
001756  3               	sta dispy		; set y
001756  3               
001756  3               	iny
001756  3               	lda (z80_ix),y
001756  3               	sec
001756  3               	sbc #2			; x=x-2
001756  3               	sta dispx		; set x
001756  3               	jmp digh
001756  3               
001756  3               ; Dig right.
001756  3               
001756  3               digr:
001756  3               	ldy #8
001756  3               	lda (z80_ix),y
001756  3               	sta dispy		; set y
001756  3               
001756  3               	iny
001756  3               	lda (z80_ix),y
001756  3               	clc
001756  3               	adc #16
001756  3               	sta dispx		; set x+16
001756  3               	jmp digh
001756  3               
001756  3               ; Vertical digging
001756  3               
001756  3               digv:
001756  3               	jsr tstbl		; check blocktype in MAP
001756  3               	jsr fdchk		; test if FODDER
001756  3               
001756  3               	clc
001756  3               	lda dispx		; look 1 cell down
001756  3               	adc #8
001756  3               	sta dispx
001756  3               	jsr tstbl		; check blocktype in MAP
001756  3               	jsr fdchk
001756  3               	lda dispx
001756  3               	and #7
001756  3               	bne :+
001756  3               	rts
001756  3               :
001756  3               	clc
001756  3               	lda dispx		; look 1 cell down
001756  3               	adc #8
001756  3               	sta dispx
001756  3               	jsr tstbl		; check blocktype in MAP
001756  3               	jmp fdchk
001756  3               
001756  3               ; Horizontal digging
001756  3               
001756  3               digh:
001756  3               	jsr tstbl		; check blocktype in MAP
001756  3               	jsr fdchk		; test if FODDER
001756  3               
001756  3               	clc
001756  3               	lda dispy		; look 1 cell down
001756  3               	adc #8
001756  3               	sta dispy
001756  3               	jsr tstbl		; check blocktype in MAP
001756  3               	jsr fdchk
001756  3               	lda dispy
001756  3               	and #7
001756  3               	bne :+
001756  3               	rts
001756  3               :
001756  3               	clc
001756  3               	lda dispy		; look 1 cell down
001756  3               	adc #8
001756  3               	sta dispy
001756  3               	jsr tstbl		; check blocktype in MAP
001756  3               	jmp fdchk
001756  3               
001756  3               digcnt:	.byte 0
001756  3               
001756  3               .endif
001756  3               
001756  3               ;------------------------------------------------------------------
001756  3               ; Sprite table
001756  3               ;------------------------------------------------------------------
001756  3               
001756  3               
001756  3               ; ix+0  = type.
001756  3               ; ix+1  = sprite image number.
001756  3               ; ix+2  = frame.
001756  3               ; ix+3  = y coord.
001756  3               ; ix+4  = x coord.
001756  3               
001756  3               ; ix+5  = new type.
001756  3               ; ix+6  = new image number.
001756  3               ; ix+7  = new frame.
001756  3               ; ix+8  = new y coord.
001756  3               ; ix+9  = new x coord.
001756  3               
001756  3               ; ix+10 = direction.
001756  3               ; ix+11 = parameter 1.
001756  3               ; ix+12 = parameter 2.
001756  3               ; ix+13 = jump pointer low.
001756  3               ; ix+14 = jump pointer high.
001756  3               ; ix+15 = data pointer low.
001756  3               ; ix+16 = data pointer high.
001756  3               
001756  3               ; block NUMSPR * TABSIZ,255
001756  3               
001756  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
00175A  3  FF FF FF FF  
00175E  3  FF FF FF FF  
001822  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
001826  3  FF FF FF 00  
00182A  3  C0 78 00 00  
001833  3  07           roomtb:	.byte 7                      ; start room map offset.
001834  3               
001834  3               ; User routine.  Put your own code in here to be called with USER instruction.
001834  3               ; if USER has an argument it will be passed in the accumulator.
001834  3               
001834  3               user:
001834  3  60           	rts
001835  3               
001835  3               ;----------------------------------------------------
001835  3               ; Missing vars
001835  3               ;----------------------------------------------------
001835  3               
001835  3               MAP 		= $9800			; properties map buffer (3x256 bytes)
001835  3               SCADTB_lb 	= MAP+3*256		; screen address table lo-byte (256 bytes)
001835  3               SCADTB_hb 	= SCADTB_lb+256		; screen address table hi-byte (256 bytes)
001835  3               SHRAPN 		= SCADTB_hb+256		; shrapnel table (55x6 bytes)
001835  3               
001835  3               ;Fontpointer:	.byte 0,0
001835  3               ;TmpAddr:	.byte 0,0
001835  3               
001835  3               ;loopa:		.byte 0
001835  3               ;loopb:		.byte 0
001835  3               ;loopc:		.byte 0
001835  3               
001835  3               setfgcol:
001835  3  29 03        	and #3
001837  3  A8           	tay
001838  3  B9 5A 18     	lda codcol,y
00183B  3  4C 51 18     	jmp calfgc
00183E  3               
00183E  3               setbgcol:
00183E  3  29 03        	and #3
001840  3               calbgc:
001840  3  A8           	tay
001841  3  B9 5A 18     	lda codcol,y
001844  3  48           	pha
001845  3  AD 58 18     	lda andeor
001848  3  4D 59 18     	eor andeor+1
00184B  3  AA           	tax
00184C  3  68           	pla
00184D  3  8D 59 18     	sta andeor+1
001850  3  8A           	txa
001851  3               calfgc:
001851  3  4D 59 18     	eor andeor+1
001854  3  8D 58 18     	sta andeor
001857  3               calex1:
001857  3  60           	rts
001858  3               
001858  3  00 00        andeor:	.byte 0,0
00185A  3  00 55 AA FF  codcol:	.byte $00,$55,$aa,$ff
00185E  3               
00185E  3               ; Everything below here will be generated by the editors.
00185E  3               
00185E  3               WINDOWTOP = 1
00185E  3               WINDOWLFT = 0
00185E  3               WINDOWHGT = 23
00185E  3               WINDOWWID = 32 ;"
00185E  3               MAPWID = 10
00185E  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255
001862  3  FF FF FF FF  
001866  3  FF FF        
001868  3               mapdat:
001868  3  00 FF FF FF          .byte 0,255,255,255,11,9,8,4,3,255,1,255,255,255,10,7,6,5,255,255,2,255,255,16,12,15,13,14,255,255,255,255,255,17,28,19,255,20,255,255,255,255,255,18,255,255,255,21,255,255,255,255,255,255,255,23,22,24,255,255,255,255,255,255,255,26,255,25,255,27
00186C  3  0B 09 08 04  
001870  3  03 FF 01 FF  
0018AE  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255
0018B2  3  FF FF FF FF  
0018B6  3  FF FF        
0018B8  3  00           stmap:  .byte 0
0018B9  3               
0018B9  3               evnt00:
0018B9  3  A9 00                lda #0
0018BB  3  85 rr                sta chary
0018BD  3  A9 0B                lda #11
0018BF  3  85 rr                sta charx
0018C1  3  A9 03                lda #3  	; MESSAGE
0018C3  3  20 B9 0E             jsr dmsg
0018C6  3  A9 00                lda #0
0018C8  3  85 rr                sta chary
0018CA  3  A9 09                lda #9
0018CC  3  85 rr                sta charx
0018CE  3  A5 rr                lda vare	; DISPLAY
0018D0  3  20 EF 13             jsr disply
0018D3  3  A9 00                lda #0
0018D5  3  85 rr                sta chary
0018D7  3  A9 1E                lda #30
0018D9  3  85 rr                sta charx
0018DB  3  A9 05                lda #5  	; MESSAGE
0018DD  3  20 B9 0E             jsr dmsg
0018E0  3  A9 00                lda #0
0018E2  3  85 rr                sta chary
0018E4  3  A9 06                lda #6
0018E6  3  85 rr                sta charx
0018E8  3  A9 5A                lda #90
0018EA  3  C5 rr                cmp vare
0018EC  3  D0 03                bne *+5
0018EE  3  4C F4 18             jmp a00123
0018F1  3  4C F4 18             jmp a00123
0018F4  3  A9 04        a00123: lda #4  	; MESSAGE
0018F6  3  20 B9 0E             jsr dmsg
0018F9  3  A9 00                lda #0
0018FB  3  85 rr                sta chary
0018FD  3  A9 00                lda #0
0018FF  3  85 rr                sta charx
001901  3  A9 03                lda #3  	; MESSAGE
001903  3  20 B9 0E             jsr dmsg
001906  3  A9 00                lda #0
001908  3  85 rr                sta chary
00190A  3  A9 03                lda #3
00190C  3  85 rr                sta charx
00190E  3  A5 rr                lda numlif	; DISPLAY
001910  3  20 EF 13             jsr disply
001913  3  A9 FB                lda #251
001915  3  C5 rr                cmp varh
001917  3  F0 03                beq *+5
001919  3  4C 34 19             jmp a00264
00191C  3  A9 00                lda #0
00191E  3  85 rr                sta chary
001920  3  A9 0D                lda #13
001922  3  85 rr                sta charx
001924  3  A9 01                lda #1		; PRINTMODE
001926  3  85 rr                sta prtmod
001928  3  A9 02                lda #2  	; MESSAGE
00192A  3  20 B9 0E             jsr dmsg
00192D  3  A9 00                lda #0		; PRINTMODE
00192F  3  85 rr                sta prtmod
001931  3  4C 4E 19             jmp a00319
001934  3  A9 01        a00264: lda #1
001936  3  85 rr                sta chary
001938  3  A9 0D                lda #13
00193A  3  85 rr                sta charx
00193C  3  A9 02                lda #2  	; MESSAGE
00193E  3  20 B9 0E             jsr dmsg
001941  3  A9 00                lda #0
001943  3  85 rr                sta chary
001945  3  A9 0D                lda #13
001947  3  85 rr                sta charx
001949  3  A9 02                lda #2  	; MESSAGE
00194B  3  20 B9 0E             jsr dmsg
00194E  3  A9 FA        a00319: lda #250
001950  3  C5 rr                cmp varh
001952  3  B0 03                bcs *+5
001954  3  4C 5E 19             jmp a00352
001957  3  A5 rr                lda varh
001959  3  18                   clc
00195A  3  69 01                adc #1
00195C  3  85 rr                sta varh
00195E  3  A9 FA        a00352: lda #250
001960  3  C5 rr                cmp varh
001962  3  F0 03                beq *+5
001964  3  4C 97 19             jmp a00471
001967  3  A9 50                lda #80		; BEEP
001969  3  0A                   asl a
00196A  3  8D D7 03             sta sndtyp
00196D  3  A9 FB                lda #251
00196F  3  85 rr                sta varh
001971  3  A9 00                lda #0
001973  3  A0 06                ldy #6
001975  3  D1 68                cmp (z80_ix),y
001977  3  F0 03                beq *+5
001979  3  4C 8B 19             jmp a00445
00197C  3  A9 04                lda #4
00197E  3  A0 06                ldy #6
001980  3  91 68                sta (z80_ix),y
001982  3  A9 00                lda #0
001984  3  A0 07                ldy #7
001986  3  91 68                sta (z80_ix),y
001988  3  4C 97 19             jmp a00471
00198B  3  A9 05        a00445: lda #5
00198D  3  A0 06                ldy #6
00198F  3  91 68                sta (z80_ix),y
001991  3  A9 00                lda #0
001993  3  A0 07                ldy #7
001995  3  91 68                sta (z80_ix),y
001997  3  A9 A7        a00471: lda #167
001999  3  A0 08                ldy #8
00199B  3  D1 68                cmp (z80_ix),y
00199D  3  90 03                bcc *+5
00199F  3  4C AC 19             jmp a00520
0019A2  3  20 5F 14             jsr scrd	; SCREENDOWN
0019A5  3  A9 22                lda #34
0019A7  3  A0 08                ldy #8
0019A9  3  91 68                sta (z80_ix),y
0019AB  3  60                   rts		; EXIT
0019AC  3  A9 21        a00520: lda #33
0019AE  3  A0 08                ldy #8
0019B0  3  D1 68                cmp (z80_ix),y
0019B2  3  B0 03                bcs *+5
0019B4  3  4C C1 19             jmp a00568
0019B7  3  20 56 14             jsr scru	; SCREENUP
0019BA  3  A9 A1                lda #161
0019BC  3  A0 08                ldy #8
0019BE  3  91 68                sta (z80_ix),y
0019C0  3  60                   rts		; EXIT
0019C1  3  A9 E7        a00568: lda #231
0019C3  3  A0 09                ldy #9
0019C5  3  D1 68                cmp (z80_ix),y
0019C7  3  90 03                bcc *+5
0019C9  3  4C E0 19             jmp a00637
0019CC  3  20 4D 14             jsr scrr	; SCREENRIGHT
0019CF  3  A9 0A                lda #10
0019D1  3  A0 09                ldy #9
0019D3  3  91 68                sta (z80_ix),y
0019D5  3  A0 08                ldy #8
0019D7  3  B1 68                lda (z80_ix),y
0019D9  3  38                   sec
0019DA  3  E9 01                sbc #1
0019DC  3  A0 08                ldy #8
0019DE  3  91 68                sta (z80_ix),y
0019E0  3  A9 08        a00637: lda #8
0019E2  3  A0 09                ldy #9
0019E4  3  D1 68                cmp (z80_ix),y
0019E6  3  B0 03                bcs *+5
0019E8  3  4C FF 19             jmp a00706
0019EB  3  20 32 14             jsr scrl	; SCREENLEFT
0019EE  3  A9 E4                lda #228
0019F0  3  A0 09                ldy #9
0019F2  3  91 68                sta (z80_ix),y
0019F4  3  A0 08                ldy #8
0019F6  3  B1 68                lda (z80_ix),y
0019F8  3  38                   sec
0019F9  3  E9 01                sbc #1
0019FB  3  A0 08                ldy #8
0019FD  3  91 68                sta (z80_ix),y
0019FF  3  A5 rr        a00706: lda joyval	; KEY
001A01  3  29 01                and #1
001A03  3  F0 03                beq :+
001A05  3  4C 9D 1A             jmp a01047
001A08  3               :
001A08  3  A9 00                lda #0
001A0A  3  85 rr                sta varh
001A0C  3  A9 00                lda #0
001A0E  3  85 rr                sta vara
001A10  3  A9 00                lda #0
001A12  3  A0 06                ldy #6
001A14  3  91 68                sta (z80_ix),y
001A16  3  A9 06                lda #CUSTOM	; CUSTOM
001A18  3  85 63                sta z80_b
001A1A  3  20 A7 0C             jsr tded
001A1D  3  C5 63                cmp z80_b
001A1F  3  F0 03                beq :+
001A21  3  4C 44 1A             jmp a00855
001A24  3               :
001A24  3  A9 02                lda #2
001A26  3  85 62                sta z80_c
001A28  3  A0 08                ldy #8
001A2A  3  B1 68                lda (z80_ix),y
001A2C  3  38                   sec
001A2D  3  E5 62                sbc z80_c
001A2F  3  A0 08                ldy #8
001A31  3  91 68                sta (z80_ix),y
001A33  3  A9 02                lda #2
001A35  3  A0 07                ldy #7
001A37  3  D1 68                cmp (z80_ix),y
001A39  3  F0 03                beq *+5
001A3B  3  4C 44 1A             jmp a00855
001A3E  3  A9 0F                lda #15		; BEEP
001A40  3  0A                   asl a
001A41  3  8D D7 03             sta sndtyp
001A44  3  20 32 0C     a00855: jsr cangr	; CANGORIGHT
001A47  3  F0 03                beq :+
001A49  3  4C 9D 1A             jmp a01047
001A4C  3               :
001A4C  3  A9 00                lda #0
001A4E  3  A0 06                ldy #6
001A50  3  91 68                sta (z80_ix),y
001A52  3  A0 09                ldy #9 		; SPRITERIGHT
001A54  3  B1 68                lda (z80_ix),y
001A56  3  18                   clc
001A57  3  69 02                adc #2
001A59  3  91 68                sta (z80_ix),y
001A5B  3  A9 05                lda #5
001A5D  3  A0 07                ldy #7
001A5F  3  D1 68                cmp (z80_ix),y
001A61  3  F0 03                beq *+5
001A63  3  4C 6F 1A             jmp a00952
001A66  3  A9 03                lda #3		; BEEP
001A68  3  0A                   asl a
001A69  3  8D D7 03             sta sndtyp
001A6C  3  4C 80 1A             jmp a00988
001A6F  3  A9 01        a00952: lda #1
001A71  3  A0 07                ldy #7
001A73  3  D1 68                cmp (z80_ix),y
001A75  3  F0 03                beq *+5
001A77  3  4C 80 1A             jmp a00988
001A7A  3  A9 07                lda #7		; BEEP
001A7C  3  0A                   asl a
001A7D  3  8D D7 03             sta sndtyp
001A80  3  A9 01        a00988: lda #1
001A82  3  C5 rr                cmp varj
001A84  3  F0 03                beq *+5
001A86  3  4C 98 1A             jmp a01036
001A89  3  A9 02                lda #2
001A8B  3  A0 06                ldy #6
001A8D  3  91 68                sta (z80_ix),y
001A8F  3  A9 00                lda #0
001A91  3  A0 07                ldy #7
001A93  3  91 68                sta (z80_ix),y
001A95  3  4C 9D 1A             jmp a01047
001A98  3  A9 00        a01036: lda #0		; ANIMATE
001A9A  3  20 14 13             jsr animsp
001A9D  3  A5 rr        a01047: lda joyval	; KEY
001A9F  3  29 02                and #2
001AA1  3  F0 03                beq :+
001AA3  3  4C 3B 1B             jmp a01387
001AA6  3               :
001AA6  3  A9 00                lda #0
001AA8  3  85 rr                sta varh
001AAA  3  A9 00                lda #0
001AAC  3  85 rr                sta vara
001AAE  3  A9 01                lda #1
001AB0  3  A0 06                ldy #6
001AB2  3  91 68                sta (z80_ix),y
001AB4  3  A9 06                lda #CUSTOM	; CUSTOM
001AB6  3  85 63                sta z80_b
001AB8  3  20 A7 0C             jsr tded
001ABB  3  C5 63                cmp z80_b
001ABD  3  F0 03                beq :+
001ABF  3  4C E2 1A             jmp a01196
001AC2  3               :
001AC2  3  A9 02                lda #2
001AC4  3  85 62                sta z80_c
001AC6  3  A0 08                ldy #8
001AC8  3  B1 68                lda (z80_ix),y
001ACA  3  38                   sec
001ACB  3  E5 62                sbc z80_c
001ACD  3  A0 08                ldy #8
001ACF  3  91 68                sta (z80_ix),y
001AD1  3  A9 02                lda #2
001AD3  3  A0 07                ldy #7
001AD5  3  D1 68                cmp (z80_ix),y
001AD7  3  F0 03                beq *+5
001AD9  3  4C E2 1A             jmp a01196
001ADC  3  A9 0F                lda #15		; BEEP
001ADE  3  0A                   asl a
001ADF  3  8D D7 03             sta sndtyp
001AE2  3  20 20 0C     a01196: jsr cangl	; CANGOLEFT
001AE5  3  F0 03                beq :+
001AE7  3  4C 3B 1B             jmp a01387
001AEA  3               :
001AEA  3  A9 01                lda #1
001AEC  3  A0 06                ldy #6
001AEE  3  91 68                sta (z80_ix),y
001AF0  3  A0 09                ldy #9 		; SPRITELEFT
001AF2  3  B1 68                lda (z80_ix),y
001AF4  3  38                   sec
001AF5  3  E9 02                sbc #2
001AF7  3  91 68                sta (z80_ix),y
001AF9  3  A9 05                lda #5
001AFB  3  A0 07                ldy #7
001AFD  3  D1 68                cmp (z80_ix),y
001AFF  3  F0 03                beq *+5
001B01  3  4C 0D 1B             jmp a01292
001B04  3  A9 07                lda #7		; BEEP
001B06  3  0A                   asl a
001B07  3  8D D7 03             sta sndtyp
001B0A  3  4C 1E 1B             jmp a01328
001B0D  3  A9 01        a01292: lda #1
001B0F  3  A0 07                ldy #7
001B11  3  D1 68                cmp (z80_ix),y
001B13  3  F0 03                beq *+5
001B15  3  4C 1E 1B             jmp a01328
001B18  3  A9 03                lda #3		; BEEP
001B1A  3  0A                   asl a
001B1B  3  8D D7 03             sta sndtyp
001B1E  3  A9 01        a01328: lda #1
001B20  3  C5 rr                cmp varj
001B22  3  F0 03                beq *+5
001B24  3  4C 36 1B             jmp a01376
001B27  3  A9 03                lda #3
001B29  3  A0 06                ldy #6
001B2B  3  91 68                sta (z80_ix),y
001B2D  3  A9 00                lda #0
001B2F  3  A0 07                ldy #7
001B31  3  91 68                sta (z80_ix),y
001B33  3  4C 3B 1B             jmp a01387
001B36  3  A9 00        a01376: lda #0		; ANIMATE
001B38  3  20 14 13             jsr animsp
001B3B  3  A5 rr        a01387: lda joyval	; KEY
001B3D  3  29 10                and #16
001B3F  3  F0 03                beq :+
001B41  3  4C 5A 1B             jmp a01453
001B44  3               :
001B44  3  A9 00                lda #0
001B46  3  C5 rr                cmp varj
001B48  3  F0 03                beq *+5
001B4A  3  4C 53 1B             jmp a01438
001B4D  3  A9 12                lda #18		; BEEP
001B4F  3  0A                   asl a
001B50  3  8D D7 03             sta sndtyp
001B53  3  20 9C 0D     a01438: jsr jump	; TABLEJUMP
001B56  3  A9 01                lda #1
001B58  3  85 rr                sta varj
001B5A  3  20 EB 0B     a01453: jsr cangd	; CANGODOWN
001B5D  3  F0 03                beq :+
001B5F  3  4C 73 1B             jmp a01503
001B62  3               :
001B62  3  20 67 0B             jsr laddd	; LADDERBELOW
001B65  3  F0 03                beq :+
001B67  3  4C 6D 1B             jmp a01491
001B6A  3               :
001B6A  3  4C 70 1B             jmp a01499
001B6D  3  20 0F 15     a01491: jsr ifall	; TABLEFALL
001B70  3  4C 77 1B     a01499: jmp a01511
001B73  3  A9 00        a01503: lda #0
001B75  3  85 rr                sta varj
001B77  3  A5 rr        a01511: lda joyval	; KEY
001B79  3  29 08                and #8
001B7B  3  F0 03                beq :+
001B7D  3  4C B1 1B             jmp a01640
001B80  3               :
001B80  3  A9 00                lda #0
001B82  3  85 rr                sta varh
001B84  3  20 7D 0B             jsr laddu	; CANGOUP
001B87  3  F0 03                beq :+
001B89  3  4C B1 1B             jmp a01640
001B8C  3               :
001B8C  3  A9 07                lda #7
001B8E  3  A0 06                ldy #6
001B90  3  91 68                sta (z80_ix),y
001B92  3  A9 00                lda #0		; ANIMATE
001B94  3  20 14 13             jsr animsp
001B97  3  A9 00                lda #0
001B99  3  A0 07                ldy #7
001B9B  3  D1 68                cmp (z80_ix),y
001B9D  3  F0 03                beq *+5
001B9F  3  4C A8 1B             jmp a01615
001BA2  3  A9 03                lda #3		; BEEP
001BA4  3  0A                   asl a
001BA5  3  8D D7 03             sta sndtyp
001BA8  3  A0 08        a01615: ldy #8 		; SPRITEUP
001BAA  3  B1 68                lda (z80_ix),y
001BAC  3  38                   sec
001BAD  3  E9 02                sbc #2
001BAF  3  91 68                sta (z80_ix),y
001BB1  3  A5 rr        a01640: lda joyval	; KEY
001BB3  3  29 04                and #4
001BB5  3  F0 03                beq :+
001BB7  3  4C EB 1B             jmp a01770
001BBA  3               :
001BBA  3  A9 00                lda #0
001BBC  3  85 rr                sta varh
001BBE  3  20 67 0B             jsr laddd	; LADDERBELOW
001BC1  3  F0 03                beq :+
001BC3  3  4C EB 1B             jmp a01770
001BC6  3               :
001BC6  3  A9 07                lda #7
001BC8  3  A0 06                ldy #6
001BCA  3  91 68                sta (z80_ix),y
001BCC  3  A9 00                lda #0		; ANIMATE
001BCE  3  20 14 13             jsr animsp
001BD1  3  A9 00                lda #0
001BD3  3  A0 07                ldy #7
001BD5  3  D1 68                cmp (z80_ix),y
001BD7  3  F0 03                beq *+5
001BD9  3  4C E2 1B             jmp a01745
001BDC  3  A9 03                lda #3		; BEEP
001BDE  3  0A                   asl a
001BDF  3  8D D7 03             sta sndtyp
001BE2  3  A0 08        a01745: ldy #8 		; SPRITEDOWN
001BE4  3  B1 68                lda (z80_ix),y
001BE6  3  18                   clc
001BE7  3  69 02                adc #2
001BE9  3  91 68                sta (z80_ix),y
001BEB  3  A9 00        a01770: lda #0
001BED  3  C5 rr                cmp vare
001BEF  3  B0 03                bcs *+5
001BF1  3  4C 3D 1C             jmp a01955
001BF4  3  A5 rr                lda numlif
001BF6  3  38                   sec
001BF7  3  E9 01                sbc #1
001BF9  3  85 rr                sta numlif
001BFB  3  A9 00                lda #0
001BFD  3  C5 rr                cmp numlif
001BFF  3  F0 03                beq *+5
001C01  3  4C 11 1C             jmp a01851
001C04  3  A9 0F                lda #15		; BEEP
001C06  3  0A                   asl a
001C07  3  8D D7 03             sta sndtyp
001C0A  3  A9 01                lda #1	; RESTART
001C0C  3  85 rr                sta restfl
001C0E  3  4C 3D 1C             jmp a01955
001C11  3  A9 09        a01851: lda #9
001C13  3  85 rr                sta chary
001C15  3  A9 0C                lda #12
001C17  3  85 rr                sta charx
001C19  3  A9 01                lda #1		; PRINTMODE
001C1B  3  85 rr                sta prtmod
001C1D  3  A9 01                lda #1  	; MESSAGE
001C1F  3  20 B9 0E             jsr dmsg
001C22  3  A9 00                lda #0		; PRINTMODE
001C24  3  85 rr                sta prtmod
001C26  3  A9 6E                lda #110 	; DELAY
001C28  3  20 43 03             jsr delay
001C2B  3  A9 01                lda #1	; RESTART
001C2D  3  85 rr                sta restfl
001C2F  3  A9 5A                lda #90
001C31  3  85 rr                sta vare
001C33  3  A9 63                lda #99
001C35  3  85 rr                sta vari
001C37  3  A9 23                lda #35		; BEEP
001C39  3  0A                   asl a
001C3A  3  8D D7 03             sta sndtyp
001C3D  3  A9 5A        a01955: lda #90
001C3F  3  C5 rr                cmp vare
001C41  3  90 03                bcc *+5
001C43  3  4C 4E 1C             jmp a01988
001C46  3  A9 5A                lda #90
001C48  3  85 rr                sta vare
001C4A  3  A9 63                lda #99
001C4C  3  85 rr                sta vari
001C4E  3  A5 rr        a01988: lda joyval	; KEY
001C50  3  29 40                and #64
001C52  3  F0 03                beq :+
001C54  3  4C 77 1C             jmp a02084
001C57  3               :
001C57  3  A9 09                lda #9
001C59  3  85 rr                sta chary
001C5B  3  A9 0E                lda #14
001C5D  3  85 rr                sta charx
001C5F  3  A9 01                lda #1		; PRINTMODE
001C61  3  85 rr                sta prtmod
001C63  3  A9 0B                lda #11  	; MESSAGE
001C65  3  20 B9 0E             jsr dmsg
001C68  3  A9 00                lda #0		; PRINTMODE
001C6A  3  85 rr                sta prtmod
001C6C  3  A9 14                lda #20 	; DELAY
001C6E  3  20 43 03             jsr delay
001C71  3  20 31 03             jsr prskey	; WAITKEY
001C74  3  20 D8 03             jsr redraw	; REDRAW
001C77  3  A9 0A        a02084: lda #10
001C79  3  C5 rr                cmp scno
001C7B  3  F0 03                beq *+5
001C7D  3  4C 96 1C             jmp a02148
001C80  3  A9 07                lda #7 	; COLLISION
001C82  3  85 63                sta z80_b
001C84  3  20 5F 13             jsr sktyp
001C87  3  B0 03                bcs :+
001C89  3  4C 96 1C             jmp a02148
001C8C  3               :
001C8C  3  A9 98                lda #152
001C8E  3  A0 08                ldy #8
001C90  3  91 68                sta (z80_ix),y
001C92  3  A9 00                lda #0
001C94  3  85 rr                sta varj
001C96  3  A9 46        a02148: lda #70
001C98  3  C5 rr                cmp vara
001C9A  3  90 03                bcc *+5
001C9C  3  4C A5 1C             jmp a02181
001C9F  3  A9 FF                lda #255	; REMOVE
001CA1  3  A0 05                ldy #5
001CA3  3  91 68                sta (z80_ix),y
001CA5  3  A9 01        a02181: lda #1
001CA7  3  C5 rr                cmp vark
001CA9  3  F0 03                beq *+5
001CAB  3  4C BE 1C             jmp a02230
001CAE  3  A9 00                lda #0
001CB0  3  85 rr                sta chary
001CB2  3  A9 1A                lda #26
001CB4  3  85 rr                sta charx
001CB6  3  A9 11                lda #17  	; MESSAGE
001CB8  3  20 B9 0E             jsr dmsg
001CBB  3  4C CB 1C             jmp a02258
001CBE  3  A9 00        a02230: lda #0
001CC0  3  85 rr                sta chary
001CC2  3  A9 1A                lda #26
001CC4  3  85 rr                sta charx
001CC6  3  A9 11                lda #17  	; MESSAGE
001CC8  3  20 B9 0E             jsr dmsg
001CCB  3  A9 03        a02258: lda #3 	; COLLISION
001CCD  3  85 63                sta z80_b
001CCF  3  20 5F 13             jsr sktyp
001CD2  3  B0 03                bcs :+
001CD4  3  4C EC 1C             jmp a02333
001CD7  3               :
001CD7  3  A9 12                lda #18
001CD9  3  85 62                sta z80_c
001CDB  3  A0 08                ldy #8
001CDD  3  B1 68                lda (z80_ix),y
001CDF  3  18                   clc
001CE0  3  65 62                adc z80_c
001CE2  3  A0 08                ldy #8
001CE4  3  91 68                sta (z80_ix),y
001CE6  3  A9 64                lda #100		; BEEP
001CE8  3  0A                   asl a
001CE9  3  8D D7 03             sta sndtyp
001CEC  3  A9 05        a02333: lda #5 	; COLLISION
001CEE  3  85 63                sta z80_b
001CF0  3  20 5F 13             jsr sktyp
001CF3  3  B0 03                bcs :+
001CF5  3  4C 46 1D             jmp a02521
001CF8  3               :
001CF8  3  A9 10                lda #16
001CFA  3  C5 rr                cmp scno
001CFC  3  F0 03                beq *+5
001CFE  3  4C 1F 1D             jmp a02439
001D01  3  A9 00                lda #0
001D03  3  C5 rr                cmp varo
001D05  3  F0 03                beq *+5
001D07  3  4C 1F 1D             jmp a02439
001D0A  3  A9 00                lda #0
001D0C  3  A0 07                ldy #7
001D0E  3  91 68                sta (z80_ix),y
001D10  3  A9 02                lda #2
001D12  3  85 62                sta z80_c
001D14  3  A0 09                ldy #9
001D16  3  B1 68                lda (z80_ix),y
001D18  3  38                   sec
001D19  3  E5 62                sbc z80_c
001D1B  3  A0 09                ldy #9
001D1D  3  91 68                sta (z80_ix),y
001D1F  3  A9 13        a02439: lda #19
001D21  3  C5 rr                cmp scno
001D23  3  F0 03                beq *+5
001D25  3  4C 46 1D             jmp a02521
001D28  3  A9 00                lda #0
001D2A  3  C5 rr                cmp varp
001D2C  3  F0 03                beq *+5
001D2E  3  4C 46 1D             jmp a02521
001D31  3  A9 00                lda #0
001D33  3  A0 07                ldy #7
001D35  3  91 68                sta (z80_ix),y
001D37  3  A9 02                lda #2
001D39  3  85 62                sta z80_c
001D3B  3  A0 09                ldy #9
001D3D  3  B1 68                lda (z80_ix),y
001D3F  3  38                   sec
001D40  3  E5 62                sbc z80_c
001D42  3  A0 09                ldy #9
001D44  3  91 68                sta (z80_ix),y
001D46  3  A9 0B        a02521: lda #11
001D48  3  C5 rr                cmp scno
001D4A  3  90 03                bcc *+5
001D4C  3  4C 7B 1D             jmp a02628
001D4F  3  A9 00                lda #0
001D51  3  C5 rr                cmp varo
001D53  3  90 03                bcc *+5
001D55  3  4C 65 1D             jmp a02583
001D58  3  A9 00                lda #0
001D5A  3  85 rr                sta chary
001D5C  3  A9 16                lda #22
001D5E  3  85 rr                sta charx
001D60  3  A9 14                lda #20  	; MESSAGE
001D62  3  20 B9 0E             jsr dmsg
001D65  3  A9 00        a02583: lda #0
001D67  3  C5 rr                cmp varp
001D69  3  90 03                bcc *+5
001D6B  3  4C 7B 1D             jmp a02628
001D6E  3  A9 00                lda #0
001D70  3  85 rr                sta chary
001D72  3  A9 1A                lda #26
001D74  3  85 rr                sta charx
001D76  3  A9 14                lda #20  	; MESSAGE
001D78  3  20 B9 0E             jsr dmsg
001D7B  3  A9 1B        a02628: lda #27
001D7D  3  C5 rr                cmp scno
001D7F  3  F0 03                beq *+5
001D81  3  4C D2 1D             jmp a02822
001D84  3  A0 09                ldy #9 		; SPRITERIGHT
001D86  3  B1 68                lda (z80_ix),y
001D88  3  18                   clc
001D89  3  69 02                adc #2
001D8B  3  91 68                sta (z80_ix),y
001D8D  3  A9 05                lda #5
001D8F  3  A0 07                ldy #7
001D91  3  D1 68                cmp (z80_ix),y
001D93  3  F0 03                beq *+5
001D95  3  4C 9E 1D             jmp a02707
001D98  3  A9 02                lda #2		; BEEP
001D9A  3  0A                   asl a
001D9B  3  8D D7 03             sta sndtyp
001D9E  3  A9 01        a02707: lda #1
001DA0  3  A0 07                ldy #7
001DA2  3  D1 68                cmp (z80_ix),y
001DA4  3  F0 03                beq *+5
001DA6  3  4C AF 1D             jmp a02743
001DA9  3  A9 04                lda #4		; BEEP
001DAB  3  0A                   asl a
001DAC  3  8D D7 03             sta sndtyp
001DAF  3  A9 00        a02743: lda #0
001DB1  3  A0 06                ldy #6
001DB3  3  91 68                sta (z80_ix),y
001DB5  3  A9 00                lda #0		; ANIMATE
001DB7  3  20 14 13             jsr animsp
001DBA  3  A9 05                lda #DEADLY	; DEADLY
001DBC  3  85 63                sta z80_b
001DBE  3  20 A7 0C             jsr tded
001DC1  3  C5 63                cmp z80_b
001DC3  3  F0 03                beq :+
001DC5  3  4C D2 1D             jmp a02822
001DC8  3               :
001DC8  3  A9 46                lda #70		; BEEP
001DCA  3  0A                   asl a
001DCB  3  8D D7 03             sta sndtyp
001DCE  3  A9 01                lda #1		; ENDGAME
001DD0  3  85 rr                sta gamwon
001DD2  3  A9 05        a02822: lda #DEADLY	; DEADLY
001DD4  3  85 63                sta z80_b
001DD6  3  20 A7 0C             jsr tded
001DD9  3  C5 63                cmp z80_b
001DDB  3  F0 03                beq :+
001DDD  3  4C EE 1D             jmp a02885
001DE0  3               :
001DE0  3  A9 64                lda #100		; BEEP
001DE2  3  0A                   asl a
001DE3  3  8D D7 03             sta sndtyp
001DE6  3  A9 00                lda #0
001DE8  3  85 rr                sta vare
001DEA  3  A9 01                lda #1	; RESTART
001DEC  3  85 rr                sta restfl
001DEE  3  4C 7B 14     a02885: jmp grav
001DF1  3               evnt01:
001DF1  3  20 0F 15             jsr ifall	; TABLEFALL
001DF4  3  A9 00                lda #0
001DF6  3  A0 0B                ldy #11
001DF8  3  D1 68                cmp (z80_ix),y
001DFA  3  F0 03                beq *+5
001DFC  3  4C 7C 1E             jmp b00303
001DFF  3  20 20 0C             jsr cangl	; CANGOLEFT
001E02  3  F0 03                beq :+
001E04  3  4C 50 1E             jmp b00207
001E07  3               :
001E07  3  A0 09                ldy #9 		; SPRITELEFT
001E09  3  B1 68                lda (z80_ix),y
001E0B  3  38                   sec
001E0C  3  E9 02                sbc #2
001E0E  3  91 68                sta (z80_ix),y
001E10  3  A9 06                lda #6
001E12  3  C5 rr                cmp scno
001E14  3  F0 03                beq *+5
001E16  3  4C 2A 1E             jmp b00130
001E19  3  A0 09                ldy #9
001E1B  3  B1 68                lda (z80_ix),y
001E1D  3  18                   clc
001E1E  3  69 01                adc #1
001E20  3  A0 09                ldy #9
001E22  3  91 68                sta (z80_ix),y
001E24  3  A9 13                lda #19
001E26  3  A0 06                ldy #6
001E28  3  91 68                sta (z80_ix),y
001E2A  3  A9 07        b00130: lda #7
001E2C  3  C5 rr                cmp scno
001E2E  3  F0 03                beq *+5
001E30  3  4C 39 1E             jmp b00160
001E33  3  A9 13                lda #19
001E35  3  A0 06                ldy #6
001E37  3  91 68                sta (z80_ix),y
001E39  3  A9 0B        b00160: lda #11
001E3B  3  C5 rr                cmp scno
001E3D  3  90 03                bcc *+5
001E3F  3  4C 4D 1E             jmp b00203
001E42  3  A0 09                ldy #9
001E44  3  B1 68                lda (z80_ix),y
001E46  3  18                   clc
001E47  3  69 01                adc #1
001E49  3  A0 09                ldy #9
001E4B  3  91 68                sta (z80_ix),y
001E4D  3  4C 56 1E     b00203: jmp b00221
001E50  3  A9 01        b00207: lda #1
001E52  3  A0 0B                ldy #11
001E54  3  91 68                sta (z80_ix),y
001E56  3  A9 06        b00221: lda #CUSTOM	; CUSTOM
001E58  3  85 63                sta z80_b
001E5A  3  20 A7 0C             jsr tded
001E5D  3  C5 63                cmp z80_b
001E5F  3  F0 03                beq :+
001E61  3  4C 79 1E             jmp b00299
001E64  3               :
001E64  3  A9 03                lda #3
001E66  3  85 62                sta z80_c
001E68  3  A0 08                ldy #8
001E6A  3  B1 68                lda (z80_ix),y
001E6C  3  38                   sec
001E6D  3  E5 62                sbc z80_c
001E6F  3  A0 08                ldy #8
001E71  3  91 68                sta (z80_ix),y
001E73  3  A9 00                lda #0
001E75  3  A0 0B                ldy #11
001E77  3  91 68                sta (z80_ix),y
001E79  3  4C 0A 1F     b00299: jmp b00615
001E7C  3  20 32 0C     b00303: jsr cangr	; CANGORIGHT
001E7F  3  F0 03                beq :+
001E81  3  4C E1 1E             jmp b00524
001E84  3               :
001E84  3  A0 09                ldy #9 		; SPRITERIGHT
001E86  3  B1 68                lda (z80_ix),y
001E88  3  18                   clc
001E89  3  69 02                adc #2
001E8B  3  91 68                sta (z80_ix),y
001E8D  3  A9 06                lda #6
001E8F  3  C5 rr                cmp scno
001E91  3  F0 03                beq *+5
001E93  3  4C 9C 1E             jmp b00376
001E96  3  A9 12                lda #18
001E98  3  A0 06                ldy #6
001E9A  3  91 68                sta (z80_ix),y
001E9C  3  A9 07        b00376: lda #7
001E9E  3  C5 rr                cmp scno
001EA0  3  F0 03                beq *+5
001EA2  3  4C B6 1E             jmp b00432
001EA5  3  A0 09                ldy #9
001EA7  3  B1 68                lda (z80_ix),y
001EA9  3  38                   sec
001EAA  3  E9 01                sbc #1
001EAC  3  A0 09                ldy #9
001EAE  3  91 68                sta (z80_ix),y
001EB0  3  A9 12                lda #18
001EB2  3  A0 06                ldy #6
001EB4  3  91 68                sta (z80_ix),y
001EB6  3  A9 0B        b00432: lda #11
001EB8  3  C5 rr                cmp scno
001EBA  3  90 03                bcc *+5
001EBC  3  4C DE 1E             jmp b00519
001EBF  3  A5 rr                lda varrnd
001EC1  3  85 62                sta z80_c
001EC3  3  A0 09                ldy #9
001EC5  3  B1 68                lda (z80_ix),y
001EC7  3  18                   clc
001EC8  3  65 62                adc z80_c
001ECA  3  A0 09                ldy #9
001ECC  3  91 68                sta (z80_ix),y
001ECE  3  A9 02                lda #2
001ED0  3  85 65                sta z80_d	; GETRANDOM
001ED2  3  20 B4 0D             jsr random
001ED5  3  85 67                sta z80_h
001ED7  3  20 F4 05             jsr imul
001EDA  3  A5 67                lda z80_h
001EDC  3  85 rr                sta varrnd
001EDE  3  4C E7 1E     b00519: jmp b00537
001EE1  3  A9 00        b00524: lda #0
001EE3  3  A0 0B                ldy #11
001EE5  3  91 68                sta (z80_ix),y
001EE7  3  A9 06        b00537: lda #CUSTOM	; CUSTOM
001EE9  3  85 63                sta z80_b
001EEB  3  20 A7 0C             jsr tded
001EEE  3  C5 63                cmp z80_b
001EF0  3  F0 03                beq :+
001EF2  3  4C 0A 1F             jmp b00615
001EF5  3               :
001EF5  3  A9 03                lda #3
001EF7  3  85 62                sta z80_c
001EF9  3  A0 08                ldy #8
001EFB  3  B1 68                lda (z80_ix),y
001EFD  3  38                   sec
001EFE  3  E5 62                sbc z80_c
001F00  3  A0 08                ldy #8
001F02  3  91 68                sta (z80_ix),y
001F04  3  A9 01                lda #1
001F06  3  A0 0B                ldy #11
001F08  3  91 68                sta (z80_ix),y
001F0A  3  A9 00        b00615: lda #0 	; COLLISION
001F0C  3  85 63                sta z80_b
001F0E  3  20 5F 13             jsr sktyp
001F11  3  B0 03                bcs :+
001F13  3  4C 27 1F             jmp b00679
001F16  3               :
001F16  3  A9 0A                lda #10
001F18  3  85 62                sta z80_c
001F1A  3  A5 rr                lda vare
001F1C  3  38                   sec
001F1D  3  E5 62                sbc z80_c
001F1F  3  85 rr                sta vare
001F21  3  A9 32                lda #50		; BEEP
001F23  3  0A                   asl a
001F24  3  8D D7 03             sta sndtyp
001F27  3  A0 0C        b00679: ldy #12
001F29  3  B1 68                lda (z80_ix),y
001F2B  3  18                   clc
001F2C  3  69 01                adc #1
001F2E  3  A0 0C                ldy #12
001F30  3  91 68                sta (z80_ix),y
001F32  3  A9 02                lda #2
001F34  3  A0 0C                ldy #12
001F36  3  D1 68                cmp (z80_ix),y
001F38  3  90 03                bcc *+5
001F3A  3  4C 48 1F             jmp b00752
001F3D  3  A9 00                lda #0		; ANIMATE
001F3F  3  20 14 13             jsr animsp
001F42  3  A9 00                lda #0
001F44  3  A0 0C                ldy #12
001F46  3  91 68                sta (z80_ix),y
001F48  3  4C 7B 14     b00752: jmp grav
001F4B  3               evnt02:
001F4B  3  A9 00                lda #0
001F4D  3  A0 0B                ldy #11
001F4F  3  D1 68                cmp (z80_ix),y
001F51  3  F0 03                beq *+5
001F53  3  4C 82 1F             jmp c00125
001F56  3  20 20 0C             jsr cangl	; CANGOLEFT
001F59  3  F0 03                beq :+
001F5B  3  4C 79 1F             jmp c00107
001F5E  3               :
001F5E  3  A0 09                ldy #9 		; SPRITELEFT
001F60  3  B1 68                lda (z80_ix),y
001F62  3  38                   sec
001F63  3  E9 02                sbc #2
001F65  3  91 68                sta (z80_ix),y
001F67  3  A5 rr                lda varrnd
001F69  3  85 62                sta z80_c
001F6B  3  A0 09                ldy #9
001F6D  3  B1 68                lda (z80_ix),y
001F6F  3  38                   sec
001F70  3  E5 62                sbc z80_c
001F72  3  A0 09                ldy #9
001F74  3  91 68                sta (z80_ix),y
001F76  3  4C 7F 1F             jmp c00120
001F79  3  A9 01        c00107: lda #1
001F7B  3  A0 0B                ldy #11
001F7D  3  91 68                sta (z80_ix),y
001F7F  3  4C A7 1F     c00120: jmp c00212
001F82  3  20 32 0C     c00125: jsr cangr	; CANGORIGHT
001F85  3  F0 03                beq :+
001F87  3  4C A1 1F             jmp c00198
001F8A  3               :
001F8A  3  A0 09                ldy #9 		; SPRITERIGHT
001F8C  3  B1 68                lda (z80_ix),y
001F8E  3  18                   clc
001F8F  3  69 02                adc #2
001F91  3  91 68                sta (z80_ix),y
001F93  3  A0 09                ldy #9
001F95  3  B1 68                lda (z80_ix),y
001F97  3  38                   sec
001F98  3  E9 01                sbc #1
001F9A  3  A0 09                ldy #9
001F9C  3  91 68                sta (z80_ix),y
001F9E  3  4C A7 1F             jmp c00212
001FA1  3  A9 00        c00198: lda #0
001FA3  3  A0 0B                ldy #11
001FA5  3  91 68                sta (z80_ix),y
001FA7  3  A9 00        c00212: lda #0
001FA9  3  A0 0A                ldy #10
001FAB  3  D1 68                cmp (z80_ix),y
001FAD  3  F0 03                beq *+5
001FAF  3  4C DE 1F             jmp c00334
001FB2  3  20 B6 0B             jsr cangu	; CANGOUP
001FB5  3  F0 03                beq :+
001FB7  3  4C D5 1F             jmp c00316
001FBA  3               :
001FBA  3  A0 08                ldy #8 		; SPRITEUP
001FBC  3  B1 68                lda (z80_ix),y
001FBE  3  38                   sec
001FBF  3  E9 02                sbc #2
001FC1  3  91 68                sta (z80_ix),y
001FC3  3  A5 rr                lda varrnd
001FC5  3  85 62                sta z80_c
001FC7  3  A0 08                ldy #8
001FC9  3  B1 68                lda (z80_ix),y
001FCB  3  18                   clc
001FCC  3  65 62                adc z80_c
001FCE  3  A0 08                ldy #8
001FD0  3  91 68                sta (z80_ix),y
001FD2  3  4C DB 1F             jmp c00329
001FD5  3  A9 01        c00316: lda #1
001FD7  3  A0 0A                ldy #10
001FD9  3  91 68                sta (z80_ix),y
001FDB  3  4C F8 1F     c00329: jmp c00394
001FDE  3  20 EB 0B     c00334: jsr cangd	; CANGODOWN
001FE1  3  F0 03                beq :+
001FE3  3  4C F2 1F             jmp c00381
001FE6  3               :
001FE6  3  A0 08                ldy #8 		; SPRITEDOWN
001FE8  3  B1 68                lda (z80_ix),y
001FEA  3  18                   clc
001FEB  3  69 02                adc #2
001FED  3  91 68                sta (z80_ix),y
001FEF  3  4C F8 1F             jmp c00394
001FF2  3  A9 00        c00381: lda #0
001FF4  3  A0 0A                ldy #10
001FF6  3  91 68                sta (z80_ix),y
001FF8  3  A0 0C        c00394: ldy #12
001FFA  3  B1 68                lda (z80_ix),y
001FFC  3  18                   clc
001FFD  3  69 01                adc #1
001FFF  3  A0 0C                ldy #12
002001  3  91 68                sta (z80_ix),y
002003  3  A9 04                lda #4
002005  3  A0 0C                ldy #12
002007  3  D1 68                cmp (z80_ix),y
002009  3  90 03                bcc *+5
00200B  3  4C 19 20             jmp c00468
00200E  3  A9 00                lda #0		; ANIMATE
002010  3  20 14 13             jsr animsp
002013  3  A9 00                lda #0
002015  3  A0 0C                ldy #12
002017  3  91 68                sta (z80_ix),y
002019  3  A9 00        c00468: lda #0 	; COLLISION
00201B  3  85 63                sta z80_b
00201D  3  20 5F 13             jsr sktyp
002020  3  B0 03                bcs :+
002022  3  4C 36 20             jmp c00531
002025  3               :
002025  3  A9 32                lda #50		; BEEP
002027  3  0A                   asl a
002028  3  8D D7 03             sta sndtyp
00202B  3  A9 0A                lda #10
00202D  3  85 62                sta z80_c
00202F  3  A5 rr                lda vare
002031  3  38                   sec
002032  3  E5 62                sbc z80_c
002034  3  85 rr                sta vare
002036  3  60           c00531: rts
002037  3               evnt03:
002037  3  A9 00                lda #0
002039  3  A0 0B                ldy #11
00203B  3  D1 68                cmp (z80_ix),y
00203D  3  F0 03                beq *+5
00203F  3  4C 82 20             jmp d00162
002042  3  20 20 0C             jsr cangl	; CANGOLEFT
002045  3  F0 03                beq :+
002047  3  4C 79 20             jmp d00144
00204A  3               :
00204A  3  A0 09                ldy #9 		; SPRITELEFT
00204C  3  B1 68                lda (z80_ix),y
00204E  3  38                   sec
00204F  3  E9 02                sbc #2
002051  3  91 68                sta (z80_ix),y
002053  3  A9 0B                lda #11
002055  3  C5 rr                cmp scno
002057  3  F0 03                beq *+5
002059  3  4C 67 20             jmp d00109
00205C  3  A0 09                ldy #9
00205E  3  B1 68                lda (z80_ix),y
002060  3  18                   clc
002061  3  69 01                adc #1
002063  3  A0 09                ldy #9
002065  3  91 68                sta (z80_ix),y
002067  3  A9 0B        d00109: lda #11
002069  3  C5 rr                cmp scno
00206B  3  B0 03                bcs *+5
00206D  3  4C 76 20             jmp d00139
002070  3  A9 01                lda #1
002072  3  A0 07                ldy #7
002074  3  91 68                sta (z80_ix),y
002076  3  4C 7F 20     d00139: jmp d00157
002079  3  A9 01        d00144: lda #1
00207B  3  A0 0B                ldy #11
00207D  3  91 68                sta (z80_ix),y
00207F  3  4C BF 20     d00157: jmp d00296
002082  3  20 32 0C     d00162: jsr cangr	; CANGORIGHT
002085  3  F0 03                beq :+
002087  3  4C B9 20             jmp d00283
00208A  3               :
00208A  3  A0 09                ldy #9 		; SPRITERIGHT
00208C  3  B1 68                lda (z80_ix),y
00208E  3  18                   clc
00208F  3  69 02                adc #2
002091  3  91 68                sta (z80_ix),y
002093  3  A9 0B                lda #11
002095  3  C5 rr                cmp scno
002097  3  F0 03                beq *+5
002099  3  4C A7 20             jmp d00248
00209C  3  A0 09                ldy #9
00209E  3  B1 68                lda (z80_ix),y
0020A0  3  38                   sec
0020A1  3  E9 01                sbc #1
0020A3  3  A0 09                ldy #9
0020A5  3  91 68                sta (z80_ix),y
0020A7  3  A9 0B        d00248: lda #11
0020A9  3  C5 rr                cmp scno
0020AB  3  B0 03                bcs *+5
0020AD  3  4C B6 20             jmp d00278
0020B0  3  A9 00                lda #0
0020B2  3  A0 07                ldy #7
0020B4  3  91 68                sta (z80_ix),y
0020B6  3  4C BF 20     d00278: jmp d00296
0020B9  3  A9 00        d00283: lda #0
0020BB  3  A0 0B                ldy #11
0020BD  3  91 68                sta (z80_ix),y
0020BF  3  A9 00        d00296: lda #0
0020C1  3  A0 0A                ldy #10
0020C3  3  D1 68                cmp (z80_ix),y
0020C5  3  F0 03                beq *+5
0020C7  3  4C E7 20             jmp d00383
0020CA  3  20 B6 0B             jsr cangu	; CANGOUP
0020CD  3  F0 03                beq :+
0020CF  3  4C DE 20             jmp d00364
0020D2  3               :
0020D2  3  A0 08                ldy #8 		; SPRITEUP
0020D4  3  B1 68                lda (z80_ix),y
0020D6  3  38                   sec
0020D7  3  E9 02                sbc #2
0020D9  3  91 68                sta (z80_ix),y
0020DB  3  4C E4 20             jmp d00378
0020DE  3  A9 01        d00364: lda #1
0020E0  3  A0 0A                ldy #10
0020E2  3  91 68                sta (z80_ix),y
0020E4  3  4C 01 21     d00378: jmp d00443
0020E7  3  20 EB 0B     d00383: jsr cangd	; CANGODOWN
0020EA  3  F0 03                beq :+
0020EC  3  4C FB 20             jmp d00430
0020EF  3               :
0020EF  3  A0 08                ldy #8 		; SPRITEDOWN
0020F1  3  B1 68                lda (z80_ix),y
0020F3  3  18                   clc
0020F4  3  69 02                adc #2
0020F6  3  91 68                sta (z80_ix),y
0020F8  3  4C 01 21             jmp d00443
0020FB  3  A9 00        d00430: lda #0
0020FD  3  A0 0A                ldy #10
0020FF  3  91 68                sta (z80_ix),y
002101  3  A9 00        d00443: lda #0 	; COLLISION
002103  3  85 63                sta z80_b
002105  3  20 5F 13             jsr sktyp
002108  3  B0 03                bcs :+
00210A  3  4C 18 21             jmp d00493
00210D  3               :
00210D  3  A9 0A                lda #10
00210F  3  85 62                sta z80_c
002111  3  A5 rr                lda vare
002113  3  38                   sec
002114  3  E5 62                sbc z80_c
002116  3  85 rr                sta vare
002118  3  A9 00        d00493: lda #0		; ANIMATE
00211A  3  20 14 13             jsr animsp
00211D  3  60                   rts
00211E  3               evnt04:
00211E  3  A9 00                lda #0
002120  3  A0 0B                ldy #11
002122  3  D1 68                cmp (z80_ix),y
002124  3  F0 03                beq *+5
002126  3  4C 51 21             jmp e00115
002129  3  20 20 0C             jsr cangl	; CANGOLEFT
00212C  3  F0 03                beq :+
00212E  3  4C 48 21             jmp e00097
002131  3               :
002131  3  A0 09                ldy #9 		; SPRITELEFT
002133  3  B1 68                lda (z80_ix),y
002135  3  38                   sec
002136  3  E9 02                sbc #2
002138  3  91 68                sta (z80_ix),y
00213A  3  A0 09                ldy #9
00213C  3  B1 68                lda (z80_ix),y
00213E  3  18                   clc
00213F  3  69 01                adc #1
002141  3  A0 09                ldy #9
002143  3  91 68                sta (z80_ix),y
002145  3  4C 4E 21             jmp e00110
002148  3  A9 01        e00097: lda #1
00214A  3  A0 0B                ldy #11
00214C  3  91 68                sta (z80_ix),y
00214E  3  4C 76 21     e00110: jmp e00202
002151  3  20 32 0C     e00115: jsr cangr	; CANGORIGHT
002154  3  F0 03                beq :+
002156  3  4C 70 21             jmp e00188
002159  3               :
002159  3  A0 09                ldy #9 		; SPRITERIGHT
00215B  3  B1 68                lda (z80_ix),y
00215D  3  18                   clc
00215E  3  69 02                adc #2
002160  3  91 68                sta (z80_ix),y
002162  3  A0 09                ldy #9
002164  3  B1 68                lda (z80_ix),y
002166  3  38                   sec
002167  3  E9 01                sbc #1
002169  3  A0 09                ldy #9
00216B  3  91 68                sta (z80_ix),y
00216D  3  4C 76 21             jmp e00202
002170  3  A9 00        e00188: lda #0
002172  3  A0 0B                ldy #11
002174  3  91 68                sta (z80_ix),y
002176  3  A9 00        e00202: lda #0
002178  3  A0 0A                ldy #10
00217A  3  D1 68                cmp (z80_ix),y
00217C  3  F0 03                beq *+5
00217E  3  4C 9E 21             jmp e00288
002181  3  20 B6 0B             jsr cangu	; CANGOUP
002184  3  F0 03                beq :+
002186  3  4C 95 21             jmp e00270
002189  3               :
002189  3  A0 08                ldy #8 		; SPRITEUP
00218B  3  B1 68                lda (z80_ix),y
00218D  3  38                   sec
00218E  3  E9 02                sbc #2
002190  3  91 68                sta (z80_ix),y
002192  3  4C 9B 21             jmp e00283
002195  3  A9 01        e00270: lda #1
002197  3  A0 0A                ldy #10
002199  3  91 68                sta (z80_ix),y
00219B  3  4C B8 21     e00283: jmp e00349
00219E  3  20 EB 0B     e00288: jsr cangd	; CANGODOWN
0021A1  3  F0 03                beq :+
0021A3  3  4C B2 21             jmp e00335
0021A6  3               :
0021A6  3  A0 08                ldy #8 		; SPRITEDOWN
0021A8  3  B1 68                lda (z80_ix),y
0021AA  3  18                   clc
0021AB  3  69 02                adc #2
0021AD  3  91 68                sta (z80_ix),y
0021AF  3  4C B8 21             jmp e00349
0021B2  3  A9 00        e00335: lda #0
0021B4  3  A0 0A                ldy #10
0021B6  3  91 68                sta (z80_ix),y
0021B8  3  A0 0C        e00349: ldy #12
0021BA  3  B1 68                lda (z80_ix),y
0021BC  3  18                   clc
0021BD  3  69 01                adc #1
0021BF  3  A0 0C                ldy #12
0021C1  3  91 68                sta (z80_ix),y
0021C3  3  A9 02                lda #2
0021C5  3  A0 0C                ldy #12
0021C7  3  D1 68                cmp (z80_ix),y
0021C9  3  90 03                bcc *+5
0021CB  3  4C D9 21             jmp e00422
0021CE  3  A9 00                lda #0		; ANIMATE
0021D0  3  20 14 13             jsr animsp
0021D3  3  A9 00                lda #0
0021D5  3  A0 0C                ldy #12
0021D7  3  91 68                sta (z80_ix),y
0021D9  3  A9 00        e00422: lda #0 	; COLLISION
0021DB  3  85 63                sta z80_b
0021DD  3  20 5F 13             jsr sktyp
0021E0  3  B0 03                bcs :+
0021E2  3  4C F6 21             jmp e00486
0021E5  3               :
0021E5  3  A9 0A                lda #10
0021E7  3  85 62                sta z80_c
0021E9  3  A5 rr                lda vare
0021EB  3  38                   sec
0021EC  3  E5 62                sbc z80_c
0021EE  3  85 rr                sta vare
0021F0  3  A9 32                lda #50		; BEEP
0021F2  3  0A                   asl a
0021F3  3  8D D7 03             sta sndtyp
0021F6  3  60           e00486: rts
0021F7  3               evnt05:
0021F7  3  A9 00                lda #0 	; COLLISION
0021F9  3  85 63                sta z80_b
0021FB  3  20 5F 13             jsr sktyp
0021FE  3  B0 03                bcs :+
002200  3  4C 47 22             jmp f00176
002203  3               :
002203  3  A9 14                lda #20
002205  3  C5 rr                cmp scno
002207  3  F0 03                beq *+5
002209  3  4C 25 22             jmp f00101
00220C  3  A5 rr                lda joyval	; KEY
00220E  3  29 20                and #32
002210  3  F0 03                beq :+
002212  3  4C 25 22             jmp f00101
002215  3               :
002215  3  A9 01                lda #1
002217  3  85 rr                sta varo
002219  3  A9 5A                lda #90		; BEEP
00221B  3  0A                   asl a
00221C  3  8D D7 03             sta sndtyp
00221F  3  A9 FF                lda #255	; REMOVE
002221  3  A0 05                ldy #5
002223  3  91 68                sta (z80_ix),y
002225  3  A9 19        f00101: lda #25
002227  3  C5 rr                cmp scno
002229  3  F0 03                beq *+5
00222B  3  4C 47 22             jmp f00176
00222E  3  A5 rr                lda joyval	; KEY
002230  3  29 20                and #32
002232  3  F0 03                beq :+
002234  3  4C 47 22             jmp f00176
002237  3               :
002237  3  A9 01                lda #1
002239  3  85 rr                sta varp
00223B  3  A9 5A                lda #90		; BEEP
00223D  3  0A                   asl a
00223E  3  8D D7 03             sta sndtyp
002241  3  A9 FF                lda #255	; REMOVE
002243  3  A0 05                ldy #5
002245  3  91 68                sta (z80_ix),y
002247  3  A9 14        f00176: lda #20
002249  3  C5 rr                cmp scno
00224B  3  F0 03                beq *+5
00224D  3  4C 5F 22             jmp f00225
002250  3  A9 00                lda #0
002252  3  C5 rr                cmp varo
002254  3  D0 03                bne *+5
002256  3  4C 5F 22             jmp f00225
002259  3  A9 FF                lda #255	; REMOVE
00225B  3  A0 05                ldy #5
00225D  3  91 68                sta (z80_ix),y
00225F  3  A9 19        f00225: lda #25
002261  3  C5 rr                cmp scno
002263  3  F0 03                beq *+5
002265  3  4C 77 22             jmp f00275
002268  3  A9 00                lda #0
00226A  3  C5 rr                cmp varp
00226C  3  D0 03                bne *+5
00226E  3  4C 77 22             jmp f00275
002271  3  A9 FF                lda #255	; REMOVE
002273  3  A0 05                ldy #5
002275  3  91 68                sta (z80_ix),y
002277  3  A9 10        f00275: lda #16
002279  3  C5 rr                cmp scno
00227B  3  F0 03                beq *+5
00227D  3  4C 80 22             jmp f00292
002280  3  A9 13        f00292: lda #19
002282  3  C5 rr                cmp scno
002284  3  F0 03                beq *+5
002286  3  4C 89 22             jmp f00309
002289  3  A9 00        f00309: lda #0 	; COLLISION
00228B  3  85 63                sta z80_b
00228D  3  20 5F 13             jsr sktyp
002290  3  B0 03                bcs :+
002292  3  4C D1 22             jmp f00463
002295  3               :
002295  3  A9 10                lda #16
002297  3  C5 rr                cmp scno
002299  3  F0 03                beq *+5
00229B  3  4C B3 22             jmp f00398
00229E  3  A9 00                lda #0
0022A0  3  C5 rr                cmp varo
0022A2  3  90 03                bcc *+5
0022A4  3  4C B3 22             jmp f00398
0022A7  3  A9 96                lda #150		; BEEP
0022A9  3  0A                   asl a
0022AA  3  8D D7 03             sta sndtyp
0022AD  3  A9 FF                lda #255	; REMOVE
0022AF  3  A0 05                ldy #5
0022B1  3  91 68                sta (z80_ix),y
0022B3  3  A9 13        f00398: lda #19
0022B5  3  C5 rr                cmp scno
0022B7  3  F0 03                beq *+5
0022B9  3  4C D1 22             jmp f00463
0022BC  3  A9 00                lda #0
0022BE  3  C5 rr                cmp varp
0022C0  3  90 03                bcc *+5
0022C2  3  4C D1 22             jmp f00463
0022C5  3  A9 96                lda #150		; BEEP
0022C7  3  0A                   asl a
0022C8  3  8D D7 03             sta sndtyp
0022CB  3  A9 FF                lda #255	; REMOVE
0022CD  3  A0 05                ldy #5
0022CF  3  91 68                sta (z80_ix),y
0022D1  3  60           f00463: rts
0022D2  3               evnt06:
0022D2  3  A9 00                lda #0 	; COLLISION
0022D4  3  85 63                sta z80_b
0022D6  3  20 5F 13             jsr sktyp
0022D9  3  B0 03                bcs :+
0022DB  3  4C 1C 23             jmp g00160
0022DE  3               :
0022DE  3  A5 rr                lda vara
0022E0  3  18                   clc
0022E1  3  69 01                adc #1
0022E3  3  85 rr                sta vara
0022E5  3  A9 14                lda #20
0022E7  3  C5 rr                cmp vara
0022E9  3  90 03                bcc *+5
0022EB  3  4C 19 23             jmp g00156
0022EE  3  A9 02                lda #2
0022F0  3  85 62                sta z80_c
0022F2  3  A0 0B                ldy #11
0022F4  3  B1 68                lda (z80_ix),y
0022F6  3  18                   clc
0022F7  3  65 62                adc z80_c
0022F9  3  A0 0B                ldy #11
0022FB  3  91 68                sta (z80_ix),y
0022FD  3  A9 06                lda #6
0022FF  3  A0 0B                ldy #11
002301  3  D1 68                cmp (z80_ix),y
002303  3  90 03                bcc *+5
002305  3  4C 19 23             jmp g00156
002308  3  A9 64                lda #100		; BEEP
00230A  3  0A                   asl a
00230B  3  8D D7 03             sta sndtyp
00230E  3  A9 00                lda #0		; ANIMATE
002310  3  20 14 13             jsr animsp
002313  3  A9 00                lda #0
002315  3  A0 0B                ldy #11
002317  3  91 68                sta (z80_ix),y
002319  3  4C 22 23     g00156: jmp g00174
00231C  3  A9 00        g00160: lda #0
00231E  3  A0 07                ldy #7
002320  3  91 68                sta (z80_ix),y
002322  3  A9 0C        g00174: lda #12
002324  3  C5 rr                cmp scno
002326  3  F0 03                beq *+5
002328  3  4C 49 23             jmp g00254
00232B  3  A9 46                lda #70
00232D  3  C5 rr                cmp vara
00232F  3  90 03                bcc *+5
002331  3  4C 49 23             jmp g00254
002334  3  A9 96                lda #150		; BEEP
002336  3  0A                   asl a
002337  3  8D D7 03             sta sndtyp
00233A  3  A9 0D                lda #13
00233C  3  85 rr                sta scno
00233E  3  20 68 14             jsr nwscr
002341  3  A9 01                lda #1	; RESTART
002343  3  85 rr                sta restfl
002345  3  A9 00                lda #0
002347  3  85 rr                sta vara
002349  3  A9 0D        g00254: lda #13
00234B  3  C5 rr                cmp scno
00234D  3  F0 03                beq *+5
00234F  3  4C 70 23             jmp g00334
002352  3  A9 46                lda #70
002354  3  C5 rr                cmp vara
002356  3  90 03                bcc *+5
002358  3  4C 70 23             jmp g00334
00235B  3  A9 96                lda #150		; BEEP
00235D  3  0A                   asl a
00235E  3  8D D7 03             sta sndtyp
002361  3  A9 0C                lda #12
002363  3  85 rr                sta scno
002365  3  20 68 14             jsr nwscr
002368  3  A9 01                lda #1	; RESTART
00236A  3  85 rr                sta restfl
00236C  3  A9 00                lda #0
00236E  3  85 rr                sta vara
002370  3  A9 0F        g00334: lda #15
002372  3  C5 rr                cmp scno
002374  3  F0 03                beq *+5
002376  3  4C 97 23             jmp g00414
002379  3  A9 46                lda #70
00237B  3  C5 rr                cmp vara
00237D  3  90 03                bcc *+5
00237F  3  4C 97 23             jmp g00414
002382  3  A9 96                lda #150		; BEEP
002384  3  0A                   asl a
002385  3  8D D7 03             sta sndtyp
002388  3  A9 03                lda #3
00238A  3  85 rr                sta scno
00238C  3  20 68 14             jsr nwscr
00238F  3  A9 01                lda #1	; RESTART
002391  3  85 rr                sta restfl
002393  3  A9 00                lda #0
002395  3  85 rr                sta vara
002397  3  A9 11        g00414: lda #17
002399  3  C5 rr                cmp scno
00239B  3  F0 03                beq *+5
00239D  3  4C BE 23             jmp g00494
0023A0  3  A9 46                lda #70
0023A2  3  C5 rr                cmp vara
0023A4  3  90 03                bcc *+5
0023A6  3  4C BE 23             jmp g00494
0023A9  3  A9 96                lda #150		; BEEP
0023AB  3  0A                   asl a
0023AC  3  8D D7 03             sta sndtyp
0023AF  3  A9 08                lda #8
0023B1  3  85 rr                sta scno
0023B3  3  20 68 14             jsr nwscr
0023B6  3  A9 01                lda #1	; RESTART
0023B8  3  85 rr                sta restfl
0023BA  3  A9 00                lda #0
0023BC  3  85 rr                sta vara
0023BE  3  A9 10        g00494: lda #16
0023C0  3  C5 rr                cmp scno
0023C2  3  F0 03                beq *+5
0023C4  3  4C E5 23             jmp g00574
0023C7  3  A9 46                lda #70
0023C9  3  C5 rr                cmp vara
0023CB  3  90 03                bcc *+5
0023CD  3  4C E5 23             jmp g00574
0023D0  3  A9 96                lda #150		; BEEP
0023D2  3  0A                   asl a
0023D3  3  8D D7 03             sta sndtyp
0023D6  3  A9 16                lda #22
0023D8  3  85 rr                sta scno
0023DA  3  20 68 14             jsr nwscr
0023DD  3  A9 01                lda #1	; RESTART
0023DF  3  85 rr                sta restfl
0023E1  3  A9 00                lda #0
0023E3  3  85 rr                sta vara
0023E5  3  A9 16        g00574: lda #22
0023E7  3  C5 rr                cmp scno
0023E9  3  F0 03                beq *+5
0023EB  3  4C 0C 24             jmp g00655
0023EE  3  A9 46                lda #70
0023F0  3  C5 rr                cmp vara
0023F2  3  90 03                bcc *+5
0023F4  3  4C 0C 24             jmp g00655
0023F7  3  A9 96                lda #150		; BEEP
0023F9  3  0A                   asl a
0023FA  3  8D D7 03             sta sndtyp
0023FD  3  A9 10                lda #16
0023FF  3  85 rr                sta scno
002401  3  20 68 14             jsr nwscr
002404  3  A9 01                lda #1	; RESTART
002406  3  85 rr                sta restfl
002408  3  A9 00                lda #0
00240A  3  85 rr                sta vara
00240C  3  A9 15        g00655: lda #21
00240E  3  C5 rr                cmp scno
002410  3  F0 03                beq *+5
002412  3  4C 33 24             jmp g00735
002415  3  A9 46                lda #70
002417  3  C5 rr                cmp vara
002419  3  90 03                bcc *+5
00241B  3  4C 33 24             jmp g00735
00241E  3  A9 96                lda #150		; BEEP
002420  3  0A                   asl a
002421  3  8D D7 03             sta sndtyp
002424  3  A9 12                lda #18
002426  3  85 rr                sta scno
002428  3  20 68 14             jsr nwscr
00242B  3  A9 01                lda #1	; RESTART
00242D  3  85 rr                sta restfl
00242F  3  A9 00                lda #0
002431  3  85 rr                sta vara
002433  3  A9 13        g00735: lda #19
002435  3  C5 rr                cmp scno
002437  3  F0 03                beq *+5
002439  3  4C 5F 24             jmp g00826
00243C  3  A9 46                lda #70
00243E  3  C5 rr                cmp vara
002440  3  90 03                bcc *+5
002442  3  4C 5F 24             jmp g00826
002445  3  A9 96                lda #150		; BEEP
002447  3  0A                   asl a
002448  3  8D D7 03             sta sndtyp
00244B  3  A9 64                lda #100 	; DELAY
00244D  3  20 43 03             jsr delay
002450  3  A9 1B                lda #27
002452  3  85 rr                sta scno
002454  3  20 68 14             jsr nwscr
002457  3  A9 01                lda #1	; RESTART
002459  3  85 rr                sta restfl
00245B  3  A9 00                lda #0
00245D  3  85 rr                sta vara
00245F  3  A9 17        g00826: lda #23
002461  3  C5 rr                cmp scno
002463  3  F0 03                beq *+5
002465  3  4C 86 24             jmp g00906
002468  3  A9 46                lda #70
00246A  3  C5 rr                cmp vara
00246C  3  90 03                bcc *+5
00246E  3  4C 86 24             jmp g00906
002471  3  A9 96                lda #150		; BEEP
002473  3  0A                   asl a
002474  3  8D D7 03             sta sndtyp
002477  3  A9 0E                lda #14
002479  3  85 rr                sta scno
00247B  3  20 68 14             jsr nwscr
00247E  3  A9 01                lda #1	; RESTART
002480  3  85 rr                sta restfl
002482  3  A9 00                lda #0
002484  3  85 rr                sta vara
002486  3  60           g00906: rts
002487  3               evnt07:
002487  3  A9 09                lda #9
002489  3  C5 rr                cmp scno
00248B  3  F0 03                beq *+5
00248D  3  4C AC 24             jmp h00082
002490  3  A9 00                lda #0 	; COLLISION
002492  3  85 63                sta z80_b
002494  3  20 5F 13             jsr sktyp
002497  3  B0 03                bcs :+
002499  3  4C AC 24             jmp h00082
00249C  3               :
00249C  3  A9 96                lda #150		; BEEP
00249E  3  0A                   asl a
00249F  3  8D D7 03             sta sndtyp
0024A2  3  A9 FF                lda #255	; REMOVE
0024A4  3  A0 05                ldy #5
0024A6  3  91 68                sta (z80_ix),y
0024A8  3  A9 01                lda #1
0024AA  3  85 rr                sta vark
0024AC  3  A9 0A        h00082: lda #10
0024AE  3  C5 rr                cmp scno
0024B0  3  F0 03                beq *+5
0024B2  3  4C DD 24             jmp h00182
0024B5  3  A5 rr                lda joyval	; KEY
0024B7  3  29 20                and #32
0024B9  3  F0 03                beq :+
0024BB  3  4C DD 24             jmp h00182
0024BE  3               :
0024BE  3  A9 01                lda #1
0024C0  3  C5 rr                cmp vark
0024C2  3  F0 03                beq *+5
0024C4  3  4C DD 24             jmp h00182
0024C7  3  A9 00                lda #0 	; COLLISION
0024C9  3  85 63                sta z80_b
0024CB  3  20 5F 13             jsr sktyp
0024CE  3  B0 03                bcs :+
0024D0  3  4C DD 24             jmp h00182
0024D3  3               :
0024D3  3  A9 B4                lda #180		; BEEP
0024D5  3  0A                   asl a
0024D6  3  8D D7 03             sta sndtyp
0024D9  3  A9 02                lda #2
0024DB  3  85 rr                sta vark
0024DD  3  A9 01        h00182: lda #1
0024DF  3  C5 rr                cmp vark
0024E1  3  90 03                bcc *+5
0024E3  3  4C EC 24             jmp h00215
0024E6  3  A9 FF                lda #255	; REMOVE
0024E8  3  A0 05                ldy #5
0024EA  3  91 68                sta (z80_ix),y
0024EC  3  60           h00215: rts
0024ED  3               evnt08:
0024ED  3  A9 00                lda #0
0024EF  3  C5 rr                cmp scno
0024F1  3  F0 03                beq *+5
0024F3  3  4C 0A 25             jmp i00070
0024F6  3  A9 01                lda #1	; RESTART
0024F8  3  85 rr                sta restfl
0024FA  3  A0 08                ldy #8 		; SPRITEDOWN
0024FC  3  B1 68                lda (z80_ix),y
0024FE  3  18                   clc
0024FF  3  69 02                adc #2
002501  3  91 68                sta (z80_ix),y
002503  3  A5 rr                lda varb
002505  3  18                   clc
002506  3  69 01                adc #1
002508  3  85 rr                sta varb
00250A  3  A9 05        i00070: lda #5
00250C  3  C5 rr                cmp varb
00250E  3  F0 03                beq *+5
002510  3  4C 50 25             jmp i00226
002513  3  A9 FA                lda #250		; BEEP
002515  3  0A                   asl a
002516  3  8D D7 03             sta sndtyp
002519  3  A9 05                lda #5
00251B  3  85 rr                sta varb
00251D  3  A9 1E                lda #30 	; DELAY
00251F  3  20 43 03             jsr delay
002522  3  20 19 04             jsr cls		; CLS
002525  3  A9 09                lda #9
002527  3  85 rr                sta chary
002529  3  A9 0D                lda #13
00252B  3  85 rr                sta charx
00252D  3  A9 01                lda #1		; PRINTMODE
00252F  3  85 rr                sta prtmod
002531  3  A9 0D                lda #13  	; MESSAGE
002533  3  20 B9 0E             jsr dmsg
002536  3  A9 00                lda #0		; PRINTMODE
002538  3  85 rr                sta prtmod
00253A  3  A9 78                lda #120 	; DELAY
00253C  3  20 43 03             jsr delay
00253F  3  A9 32                lda #50		; BEEP
002541  3  0A                   asl a
002542  3  8D D7 03             sta sndtyp
002545  3  A9 03                lda #3
002547  3  85 rr                sta scno
002549  3  20 68 14             jsr nwscr
00254C  3  A9 01                lda #1	; RESTART
00254E  3  85 rr                sta restfl
002550  3  A9 13        i00226: lda #19
002552  3  C5 rr                cmp vard
002554  3  F0 03                beq *+5
002556  3  4C 6F 25             jmp i00293
002559  3  A9 1E                lda #30		; BEEP
00255B  3  0A                   asl a
00255C  3  8D D7 03             sta sndtyp
00255F  3  A9 00                lda #0
002561  3  85 rr                sta varb
002563  3  A9 05                lda #5
002565  3  85 rr                sta varc
002567  3  A9 0E                lda #14
002569  3  85 rr                sta vard
00256B  3  A9 01                lda #1	; RESTART
00256D  3  85 rr                sta restfl
00256F  3  A0 0B        i00293: ldy #11
002571  3  B1 68                lda (z80_ix),y
002573  3  18                   clc
002574  3  69 01                adc #1
002576  3  A0 0B                ldy #11
002578  3  91 68                sta (z80_ix),y
00257A  3  A9 04                lda #4
00257C  3  A0 0B                ldy #11
00257E  3  D1 68                cmp (z80_ix),y
002580  3  90 03                bcc *+5
002582  3  4C 90 25             jmp i00366
002585  3  A9 00                lda #0		; ANIMATE
002587  3  20 14 13             jsr animsp
00258A  3  A9 00                lda #0
00258C  3  A0 0B                ldy #11
00258E  3  91 68                sta (z80_ix),y
002590  3  A9 02        i00366: lda #2
002592  3  C5 rr                cmp scno
002594  3  F0 03                beq *+5
002596  3  4C F8 25             jmp i00590
002599  3  A9 64                lda #100		; BEEP
00259B  3  0A                   asl a
00259C  3  8D D7 03             sta sndtyp
00259F  3  A9 04                lda #4
0025A1  3  85 rr                sta chary
0025A3  3  A9 0D                lda #13
0025A5  3  85 rr                sta charx
0025A7  3  A9 06                lda #6  	; MESSAGE
0025A9  3  20 B9 0E             jsr dmsg
0025AC  3  A9 12                lda #18
0025AE  3  85 rr                sta chary
0025B0  3  A9 11                lda #17
0025B2  3  85 rr                sta charx
0025B4  3  A9 01                lda #1		; PRINTMODE
0025B6  3  85 rr                sta prtmod
0025B8  3  A9 00                lda #0  	; MESSAGE
0025BA  3  20 B9 0E             jsr dmsg
0025BD  3  A9 00                lda #0		; PRINTMODE
0025BF  3  85 rr                sta prtmod
0025C1  3  A9 FA                lda #250 	; DELAY
0025C3  3  20 43 03             jsr delay
0025C6  3  20 19 04             jsr cls		; CLS
0025C9  3  A9 00                lda #0
0025CB  3  85 rr                sta vara
0025CD  3  A9 05                lda #5
0025CF  3  85 rr                sta varb
0025D1  3  A9 05                lda #5
0025D3  3  85 rr                sta varc
0025D5  3  A9 0E                lda #14
0025D7  3  85 rr                sta vard
0025D9  3  A9 5A                lda #90
0025DB  3  85 rr                sta vare
0025DD  3  A9 63                lda #99
0025DF  3  85 rr                sta vari
0025E1  3  A9 00                lda #0
0025E3  3  85 rr                sta varh
0025E5  3  A9 00                lda #0
0025E7  3  85 rr                sta varj
0025E9  3  A9 00                lda #0
0025EB  3  85 rr                sta vark
0025ED  3  A9 00                lda #0
0025EF  3  85 rr                sta scno
0025F1  3  20 68 14             jsr nwscr
0025F4  3  A9 01                lda #1	; RESTART
0025F6  3  85 rr                sta restfl
0025F8  3  60           i00590: rts
0025F9  3               evnt09:
0025F9  3  60                   rts
0025FA  3               evnt10:
0025FA  3  A5 rr                lda vari
0025FC  3  18                   clc
0025FD  3  69 01                adc #1
0025FF  3  85 rr                sta vari
002601  3  A9 64                lda #100
002603  3  C5 rr                cmp vari
002605  3  90 03                bcc *+5
002607  3  4C 1F 26             jmp k00081
00260A  3  A9 14                lda #20		; BEEP
00260C  3  0A                   asl a
00260D  3  8D D7 03             sta sndtyp
002610  3  A9 0A                lda #10
002612  3  85 62                sta z80_c
002614  3  A5 rr                lda vare
002616  3  18                   clc
002617  3  65 62                adc z80_c
002619  3  85 rr                sta vare
00261B  3  A9 00                lda #0
00261D  3  85 rr                sta vari
00261F  3  A9 5A        k00081: lda #90
002621  3  C5 rr                cmp vare
002623  3  F0 03                beq *+5
002625  3  4C 2C 26             jmp k00106
002628  3  A9 00                lda #0
00262A  3  85 rr                sta vari
00262C  3  60           k00106: rts
00262D  3               evnt11:
00262D  3  60                   rts
00262E  3               evnt12:
00262E  3  60                   rts
00262F  3               evnt13:
00262F  3  20 19 04             jsr cls		; CLS
002632  3  A9 05                lda #5
002634  3  85 rr                sta numlif
002636  3  A9 C3                lda #195
002638  3  85 rr                sta vara
00263A  3  A0 09                ldy #9
00263C  3  B1 68                lda (z80_ix),y	; PUT
00263E  3  85 rr                sta dispx
002640  3  A0 08                ldy #8
002642  3  B1 68                lda (z80_ix),y
002644  3  85 rr                sta dispy
002646  3  A9 00                lda #0
002648  3  20 E6 06             jsr drpob
00264B  3  A9 05                lda #5
00264D  3  85 rr                sta varc
00264F  3  A9 0E                lda #14
002651  3  85 rr                sta vard
002653  3  A9 5A                lda #90
002655  3  85 rr                sta vare
002657  3  A9 63                lda #99
002659  3  85 rr                sta vari
00265B  3  A9 00                lda #0
00265D  3  85 rr                sta varh
00265F  3  A9 00                lda #0
002661  3  85 rr                sta varj
002663  3  A9 00                lda #0
002665  3  85 rr                sta vark
002667  3  A9 00                lda #0
002669  3  85 rr                sta varo
00266B  3  A9 00                lda #0
00266D  3  85 rr                sta varp
00266F  3  60                   rts
002670  3               evnt14:
002670  3  A9 00                lda #0
002672  3  85 rr                sta vara
002674  3  A9 05                lda #5
002676  3  85 rr                sta varc
002678  3  A9 0E                lda #14
00267A  3  85 rr                sta vard
00267C  3  A9 00                lda #0
00267E  3  C5 rr                cmp numlif
002680  3  F0 03                beq *+5
002682  3  4C A8 26             jmp o00116
002685  3  A9 00                lda #0
002687  3  85 rr                sta varo
002689  3  A9 00                lda #0
00268B  3  85 rr                sta varp
00268D  3  A9 00                lda #0
00268F  3  85 rr                sta vark
002691  3  A9 05                lda #5
002693  3  85 rr                sta numlif
002695  3  20 19 04             jsr cls		; CLS
002698  3  A9 50                lda #80 	; DELAY
00269A  3  20 43 03             jsr delay
00269D  3  A9 02                lda #2
00269F  3  85 rr                sta scno
0026A1  3  20 68 14             jsr nwscr
0026A4  3  A9 01                lda #1	; RESTART
0026A6  3  85 rr                sta restfl
0026A8  3  60           o00116: rts
0026A9  3               evnt15:
0026A9  3  60                   rts
0026AA  3               evnt16:
0026AA  3  60                   rts
0026AB  3               evnt17:
0026AB  3  60                   rts
0026AC  3               evnt18:
0026AC  3  20 19 04             jsr cls		; CLS
0026AF  3  A9 32                lda #50 	; DELAY
0026B1  3  20 43 03             jsr delay
0026B4  3  A9 08                lda #8
0026B6  3  85 rr                sta chary
0026B8  3  A9 02                lda #2
0026BA  3  85 rr                sta charx
0026BC  3  A9 01                lda #1		; PRINTMODE
0026BE  3  85 rr                sta prtmod
0026C0  3  A9 10                lda #16  	; MESSAGE
0026C2  3  20 B9 0E             jsr dmsg
0026C5  3  A9 00                lda #0		; PRINTMODE
0026C7  3  85 rr                sta prtmod
0026C9  3  A9 0B                lda #11
0026CB  3  85 rr                sta chary
0026CD  3  A9 0B                lda #11
0026CF  3  85 rr                sta charx
0026D1  3  A9 01                lda #1		; PRINTMODE
0026D3  3  85 rr                sta prtmod
0026D5  3  A9 12                lda #18  	; MESSAGE
0026D7  3  20 B9 0E             jsr dmsg
0026DA  3  A9 00                lda #0		; PRINTMODE
0026DC  3  85 rr                sta prtmod
0026DE  3  A9 16                lda #22
0026E0  3  85 rr                sta chary
0026E2  3  A9 0A                lda #10
0026E4  3  85 rr                sta charx
0026E6  3  A9 13                lda #19  	; MESSAGE
0026E8  3  20 B9 0E             jsr dmsg
0026EB  3  20 31 03             jsr prskey	; WAITKEY
0026EE  3  60                   rts
0026EF  3               evnt19:
0026EF  3  60                   rts
0026F0  3               evnt20:
0026F0  3  60                   rts
0026F1  3  60           ptcusr: rts
0026F2  3               msgdat:
0026F2  3  47 41 4D 45          .byte "GAME OVER",141
0026F6  3  20 4F 56 45  
0026FA  3  52 8D        
0026FC  3  47 45 54 20          .byte "GET READY",141
002700  3  52 45 41 44  
002704  3  59 8D        
002706  3  4D 59 53 54          .byte "MYSTERY",141
00270A  3  45 52 59 8D  
00270E  3  2C 2D 8D             .byte ",-",141
002711  3  24 25 8D             .byte "$%",141
002714  3  26 27                .byte "&",39
002716  3  8D                   .byte 141
002717  3  47 4F 4E 45          .byte "GONE MISSING",141
00271B  3  20 4D 49 53  
00271F  3  53 49 4E 47  
002724  3  31 20 4B 45          .byte "1 KEYBOARD",141
002728  3  59 42 4F 41  
00272C  3  52 44 8D     
00272F  3  32 20 4B 45          .byte "2 KEMPSTON",141
002733  3  4D 50 53 54  
002737  3  4F 4E 8D     
00273A  3  33 20 53 49          .byte "3 SINCLAIR",141
00273E  3  4E 43 4C 41  
002742  3  49 52 8D     
002745  3  4F 3B 50 3B          .byte "O;P;Q;A;SPACE;E;T",141
002749  3  51 3B 41 3B  
00274D  3  53 50 41 43  
002757  3  50 41 55 53          .byte "PAUSE",141
00275B  3  45 8D        
00275D  3  43 4F 4E 54          .byte "CONTROL MENU",141
002761  3  52 4F 4C 20  
002765  3  4D 45 4E 55  
00276A  3  53 54 41 47          .byte "STAGE II",141
00276E  3  45 20 49 49  
002772  3  8D           
002773  3  31 20 32 20          .byte "1 2 3 4 5 6 7 8 9",141
002777  3  33 20 34 20  
00277B  3  35 20 36 20  
002785  3  45 4E 54 45          .byte "ENTER THE CODE:",141
002789  3  52 20 54 48  
00278D  3  45 20 43 4F  
002795  3  54 48 45 20          .byte "THE SECOND STAGE IS COMPLETED!",141
002799  3  53 45 43 4F  
00279D  3  4E 44 20 53  
0027B4  3  28 29 8D             .byte "()",141
0027B7  3  43 4F 44 45          .byte "CODE: 88888",141
0027BB  3  3A 20 38 38  
0027BF  3  38 38 38 8D  
0027C3  3  50 52 45 53          .byte "PRESS ANY KEY",141
0027C7  3  53 20 41 4E  
0027CB  3  59 20 4B 45  
0027D1  3  2A 2B 8D             .byte "*+",141
0027D4  3               nummsg:
0027D4  3  15                   .byte 21
0027D5  3               chgfx:
0027D5  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0027D9  3  00 00 00 00  
0027DD  3  02 55 A2 22          .byte 2,85,162,34,68,65,162,76
0027E1  3  44 41 A2 4C  
0027E5  3  00 00 BF 03          .byte 0,0,191,3,0,0,0,0
0027E9  3  00 00 00 00  
0027ED  3  00 00 00 F4          .byte 0,0,0,244,0,0,0,0
0027F1  3  00 00 00 00  
0027F5  3  00 00 00 00          .byte 0,0,0,0,3,7,62,252
0027F9  3  03 07 3E FC  
0027FD  3  00 00 00 00          .byte 0,0,0,0,128,240,252,255
002801  3  80 F0 FC FF  
002805  3  02 75 FC F9          .byte 2,117,252,249,252,233,193,0
002809  3  FC E9 C1 00  
00280D  3  C0 B0 BF 9F          .byte 192,176,191,159,62,158,12,158
002811  3  3E 9E 0C 9E  
002815  3  06 3F FF FF          .byte 6,63,255,255,255,190,56,144
002819  3  FF BE 38 90  
00281D  3  00 2B 5F 7B          .byte 0,43,95,123,251,241,153,19
002821  3  FB F1 99 13  
002825  3  C2 FC FF FB          .byte 194,252,255,251,251,113,56,0
002829  3  FB 71 38 00  
00282D  3  00 88 22 55          .byte 0,136,34,85,251,255,255,255
002831  3  FB FF FF FF  
002835  3  00 00 00 00          .byte 0,0,0,0,0,0,136,33
002839  3  00 00 88 21  
00283D  3  00 00 00 00          .byte 0,0,0,0,0,0,16,68
002841  3  00 00 10 44  
002845  3  24 4A A5 40          .byte 36,74,165,64,2,165,82,36
002849  3  02 A5 52 24  
00284D  3  02 02 43 46          .byte 2,2,67,70,103,206,118,255
002851  3  67 CE 76 FF  
002855  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002859  3  00 00 00 00  
00285D  3  43 15 62 F1          .byte 67,21,98,241,186,88,51,7
002861  3  BA 58 33 07  
002865  3  44 A1 66 CB          .byte 68,161,102,203,85,27,206,224
002869  3  55 1B CE E0  
00286D  3  60 94 F1 60          .byte 96,148,241,96,14,181,42,20
002871  3  0E B5 2A 14  
002875  3  08 9A D6 65          .byte 8,154,214,101,99,150,200,117
002879  3  63 96 C8 75  
00287D  3  22 A6 D5 6B          .byte 34,166,213,107,18,76,106,171
002881  3  12 4C 6A AB  
002885  3  07 1F 3F FF          .byte 7,31,63,255,95,243,111,63
002889  3  5F F3 6F 3F  
00288D  3  F0 FC FE DF          .byte 240,252,254,223,245,255,239,252
002891  3  F5 FF EF FC  
002895  3  00 00 00 09          .byte 0,0,0,9,147,86,109,166
002899  3  93 56 6D A6  
00289D  3  00 00 00 04          .byte 0,0,0,4,137,74,82,172
0028A1  3  89 4A 52 AC  
0028A5  3  F7 F3 E7 F3          .byte 247,243,231,243,161,65,0,0
0028A9  3  A1 41 00 00  
0028AD  3  DF DE CE CC          .byte 223,222,206,204,134,34,0,0
0028B1  3  86 22 00 00  
0028B5  3  FD BC 99 1C          .byte 253,188,153,28,8,0,0,0
0028B9  3  08 00 00 00  
0028BD  3  DF DF CF 8F          .byte 223,223,207,143,134,4,0,0
0028C1  3  86 04 00 00  
0028C5  3  F8 F0 C0 80          .byte 248,240,192,128,128,0,0,0
0028C9  3  80 00 00 00  
0028CD  3  FF FF 0F 01          .byte 255,255,15,1,0,0,0,0
0028D1  3  00 00 00 00  
0028D5  3  F7 F3 E7 F3          .byte 247,243,231,243,225,131,225,194
0028D9  3  E1 83 E1 C2  
0028DD  3  00 00 FF 00          .byte 0,0,255,0,0,0,0,0
0028E1  3  00 00 00 00  
0028E5  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0028E9  3  00 00 00 00  
0028ED  3  60 18 B5 81          .byte 96,24,181,129,200,68,70,34
0028F1  3  C8 44 46 22  
0028F5  3  01 00 00 01          .byte 1,0,0,1,1,130,198,68
0028F9  3  01 82 C6 44  
0028FD  3  FF 3D 0A 2E          .byte 255,61,10,46,7,5,1,1
002901  3  07 05 01 01  
002905  3  00 01 02 02          .byte 0,1,2,2,4,12,61,226
002909  3  04 0C 3D E2  
00290D  3  00 00 80 80          .byte 0,0,128,128,192,96,56,207
002911  3  C0 60 38 CF  
002915  3  98 E7 C0 FC          .byte 152,231,192,252,119,187,185,221
002919  3  77 BB B9 DD  
00291D  3  E1 1C F8 C1          .byte 225,28,248,193,1,130,198,68
002921  3  01 82 C6 44  
002925  3  00 00 00 FF          .byte 0,0,0,255,255,0,0,0
002929  3  FF 00 00 00  
00292D  3  FE FC F8 F3          .byte 254,252,248,243,247,248,252,254
002931  3  F7 F8 FC FE  
002935  3  69 80 00 00          .byte 105,128,0,0,0,68,82,181
002939  3  00 44 52 B5  
00293D  3  FF 0F C3 05          .byte 255,15,195,5,3,9,4,142
002941  3  03 09 04 8E  
002945  3  FC E0 8C 61          .byte 252,224,140,97,196,130,34,65
002949  3  C4 82 22 41  
00294D  3  00 01 00 03          .byte 0,1,0,3,10,161,0,1
002951  3  0A A1 00 01  
002955  3  4F 3F 1E FB          .byte 79,63,30,251,108,46,4,0
002959  3  6C 2E 04 00  
00295D  3  F2 FC 78 DF          .byte 242,252,120,223,54,244,100,32
002961  3  36 F4 64 20  
002965  3  00 10 5A DB          .byte 0,16,90,219,38,111,56,222
002969  3  26 6F 38 DE  
00296D  3  3C 18 56 ED          .byte 60,24,86,237,117,46,204,72
002971  3  75 2E CC 48  
002975  3  00 00 F0 7F          .byte 0,0,240,127,63,255,31,7
002979  3  3F FF 1F 07  
00297D  3  00 30 BF 7F          .byte 0,48,191,127,15,1,0,0
002981  3  0F 01 00 00  
002985  3  00 01 06 9E          .byte 0,1,6,158,254,252,240,224
002989  3  FE FC F0 E0  
00298D  3  00 00 88 98          .byte 0,0,136,152,210,126,61,254
002991  3  D2 7E 3D FE  
002995  3  00 80 80 C0          .byte 0,128,128,192,192,224,56,207
002999  3  C0 E0 38 CF  
00299D  3  00 01 02 02          .byte 0,1,2,2,6,12,61,230
0029A1  3  06 0C 3D E6  
0029A5  3  00 80 00 C0          .byte 0,128,0,192,80,133,0,128
0029A9  3  50 85 00 80  
0029AD  3  00 00 C0 F0          .byte 0,0,192,240,248,248,252,252
0029B1  3  F8 F8 FC FC  
0029B5  3  00 00 07 1F          .byte 0,0,7,31,31,31,63,63
0029B9  3  1F 1F 3F 3F  
0029BD  3  00 00 00 00          .byte 0,0,0,0,0,124,255,255
0029C1  3  00 7C FF FF  
0029C5  3  00 00 00 00          .byte 0,0,0,0,124,254,255,255
0029C9  3  7C FE FF FF  
0029CD  3  00 55 00 55          .byte 0,85,0,85,0,85,0,85
0029D1  3  00 55 00 55  
0029D5  3  00 01 00 03          .byte 0,1,0,3,10,161,0,1
0029D9  3  0A A1 00 01  
0029DD  3  B0 90 A0 B0          .byte 176,144,160,176,144,160,176,176
0029E1  3  90 A0 B0 B0  
0029E5  3  07 FF 00 FB          .byte 7,255,0,251,247,23,1,1
0029E9  3  F7 17 01 01  
0029ED  3  00 7F 80 5F          .byte 0,127,128,95,239,232,128,128
0029F1  3  EF E8 80 80  
0029F5  3  00 95 C0 E5          .byte 0,149,192,229,240,249,252,254
0029F9  3  F0 F9 FC FE  
0029FD  3  FF FE FC F9          .byte 255,254,252,249,242,228,200,144
002A01  3  F2 E4 C8 90  
002A05  3  60 94 F1 60          .byte 96,148,241,96,14,181,42,20
002A09  3  0E B5 2A 14  
002A0D  3  43 15 62 F1          .byte 67,21,98,241,186,88,51,7
002A11  3  BA 58 33 07  
002A15  3  44 A1 66 CB          .byte 68,161,102,203,85,27,206,224
002A19  3  55 1B CE E0  
002A1D  3  02 55 A2 22          .byte 2,85,162,34,68,65,162,76
002A21  3  44 41 A2 4C  
002A25  3  24 4A A5 40          .byte 36,74,165,64,2,165,82,36
002A29  3  02 A5 52 24  
002A2D  3  69 80 00 00          .byte 105,128,0,0,0,68,82,181
002A31  3  00 44 52 B5  
002A35  3  FF 0F C3 05          .byte 255,15,195,5,3,9,4,142
002A39  3  03 09 04 8E  
002A3D  3  FC E0 8C 61          .byte 252,224,140,97,196,130,34,65
002A41  3  C4 82 22 41  
002A45  3  45 50 02 10          .byte 69,80,2,16,0,0,0,0
002A49  3  00 00 00 00  
002A4D  3  D2 B6 25 51          .byte 210,182,37,81,2,16,2,0
002A51  3  02 10 02 00  
002A55  3  96 AA 88 22          .byte 150,170,136,34,128,0,0,0
002A59  3  80 00 00 00  
002A5D  3  2A 90 02 10          .byte 42,144,2,16,0,0,0,0
002A61  3  00 00 00 00  
002A65  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002A69  3  00 00 00 00  
002A6D  3  00 11 94 75          .byte 0,17,148,117,191,174,37,5
002A71  3  BF AE 25 05  
002A75  3  80 50 75 3E          .byte 128,80,117,62,45,10,10,0
002A79  3  2D 0A 0A 00  
002A7D  3  00 10 94 65          .byte 0,16,148,101,255,191,45,5
002A81  3  FF BF 2D 05  
002A85  3  00 00 64 31          .byte 0,0,100,49,45,7,1,4
002A89  3  2D 07 01 04  
002A8D  3  10 00 10 6C          .byte 16,0,16,108,16,16,166,16
002A91  3  10 10 A6 10  
002A95  3  00 00 40 34          .byte 0,0,64,52,24,47,11,9
002A99  3  18 2F 0B 09  
002A9D  3  00 00 04 98          .byte 0,0,4,152,232,104,160,0
002AA1  3  E8 68 A0 00  
002AA5  3  4D 00 D6 00          .byte 77,0,214,0,173,0,186,0
002AA9  3  AD 00 BA 00  
002AAD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002AB1  3  00 00 00 00  
002AB5  3  E7 00 7B 00          .byte 231,0,123,0,183,0,220,0
002AB9  3  B7 00 DC 00  
002ABD  3  80 00 80 00          .byte 128,0,128,0,128,0,128,0
002AC1  3  80 00 80 00  
002AC5  3  15 00 1D 00          .byte 21,0,29,0,166,0,218,0
002AC9  3  A6 00 DA 00  
002ACD  3  00 09 2A 3F          .byte 0,9,42,63,245,196,161,4
002AD1  3  F5 C4 A1 04  
002AD5  3  04 23 1E FA          .byte 4,35,30,250,104,202,0,64
002AD9  3  68 CA 00 40  
002ADD  3  22 28 59 E7          .byte 34,40,89,231,154,94,66,40
002AE1  3  9A 5E 42 28  
002AE5  3  D2 B6 25 51          .byte 210,182,37,81,2,16,2,0
002AE9  3  02 10 02 00  
002AED  3  96 AA 88 22          .byte 150,170,136,34,128,0,0,0
002AF1  3  80 00 00 00  
002AF5  3  81 81 81 81          .byte 129,129,129,129,129,129,129,129
002AF9  3  81 81 81 81  
002AFD  3  00 00 00 00          .byte 0,0,0,0,0,0,3,5
002B01  3  00 00 03 05  
002B05  3  00 00 00 00          .byte 0,0,0,0,0,0,192,96
002B09  3  00 00 C0 60  
002B0D  3  03 00 67 80          .byte 3,0,103,128,255,255,128,255
002B11  3  FF FF 80 FF  
002B15  3  C0 00 E6 01          .byte 192,0,230,1,255,255,1,255
002B19  3  FF FF 01 FF  
002B1D  3  C0 20 C0 80          .byte 192,32,192,128,128,128,128,192
002B21  3  80 80 80 C0  
002B25  3  03 04 03 01          .byte 3,4,3,1,1,1,1,3
002B29  3  01 01 01 03  
002B2D  3  00 00 00 00          .byte 0,0,0,0,41,42,51,42
002B31  3  29 2A 33 2A  
002B35  3  00 00 00 00          .byte 0,0,0,0,56,176,136,184
002B39  3  38 B0 88 B8  
002B3D  3  00 00 00 00          .byte 0,0,0,0,238,42,194,238
002B41  3  EE 2A C2 EE  
002B45  3  00 00 00 80          .byte 0,0,0,128,138,234,130,238
002B49  3  8A EA 82 EE  
002B4D  3  00 00 00 EE          .byte 0,0,0,238,42,234,138,238
002B51  3  2A EA 8A EE  
002B55  3  00 00 00 A8          .byte 0,0,0,168,168,184,136,136
002B59  3  A8 B8 88 88  
002B5D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002B61  3  00 00 00 00  
002B65  3  00 00 00 FF          .byte 0,0,0,255,0,0,170,0
002B69  3  00 00 AA 00  
002B6D  3  00 00 00 00          .byte 0,0,0,0,0,0,85,0
002B71  3  00 00 55 00  
002B75  3  00 80 C0 E0          .byte 0,128,192,224,240,248,252,254
002B79  3  F0 F8 FC FE  
002B7D  3  1F FC 00 00          .byte 31,252,0,0,0,0,0,0
002B81  3  00 00 00 00  
002B85  3  FF FF FF F0          .byte 255,255,255,240,239,216,160,127
002B89  3  EF D8 A0 7F  
002B8D  3  FF FF 55 FF          .byte 255,255,85,255,0,0,0,255
002B91  3  00 00 00 FF  
002B95  3               bprop:
002B95  3  00                   .byte 0
002B96  3  02                   .byte 2
002B97  3  02                   .byte 2
002B98  3  00                   .byte 0
002B99  3  06                   .byte 6
002B9A  3  06                   .byte 6
002B9B  3  00                   .byte 0
002B9C  3  00                   .byte 0
002B9D  3  00                   .byte 0
002B9E  3  00                   .byte 0
002B9F  3  00                   .byte 0
002BA0  3  00                   .byte 0
002BA1  3  00                   .byte 0
002BA2  3  00                   .byte 0
002BA3  3  02                   .byte 2
002BA4  3  00                   .byte 0
002BA5  3  00                   .byte 0
002BA6  3  02                   .byte 2
002BA7  3  02                   .byte 2
002BA8  3  02                   .byte 2
002BA9  3  00                   .byte 0
002BAA  3  00                   .byte 0
002BAB  3  02                   .byte 2
002BAC  3  02                   .byte 2
002BAD  3  06                   .byte 6
002BAE  3  00                   .byte 0
002BAF  3  00                   .byte 0
002BB0  3  00                   .byte 0
002BB1  3  00                   .byte 0
002BB2  3  00                   .byte 0
002BB3  3  00                   .byte 0
002BB4  3  00                   .byte 0
002BB5  3  00                   .byte 0
002BB6  3  02                   .byte 2
002BB7  3  00                   .byte 0
002BB8  3  00                   .byte 0
002BB9  3  00                   .byte 0
002BBA  3  02                   .byte 2
002BBB  3  06                   .byte 6
002BBC  3  06                   .byte 6
002BBD  3  02                   .byte 2
002BBE  3  02                   .byte 2
002BBF  3  00                   .byte 0
002BC0  3  06                   .byte 6
002BC1  3  02                   .byte 2
002BC2  3  02                   .byte 2
002BC3  3  02                   .byte 2
002BC4  3  02                   .byte 2
002BC5  3  00                   .byte 0
002BC6  3  00                   .byte 0
002BC7  3  00                   .byte 0
002BC8  3  00                   .byte 0
002BC9  3  01                   .byte 1
002BCA  3  01                   .byte 1
002BCB  3  01                   .byte 1
002BCC  3  00                   .byte 0
002BCD  3  00                   .byte 0
002BCE  3  00                   .byte 0
002BCF  3  03                   .byte 3
002BD0  3  00                   .byte 0
002BD1  3  00                   .byte 0
002BD2  3  00                   .byte 0
002BD3  3  00                   .byte 0
002BD4  3  00                   .byte 0
002BD5  3  03                   .byte 3
002BD6  3  02                   .byte 2
002BD7  3  02                   .byte 2
002BD8  3  02                   .byte 2
002BD9  3  00                   .byte 0
002BDA  3  00                   .byte 0
002BDB  3  02                   .byte 2
002BDC  3  02                   .byte 2
002BDD  3  02                   .byte 2
002BDE  3  02                   .byte 2
002BDF  3  02                   .byte 2
002BE0  3  02                   .byte 2
002BE1  3  02                   .byte 2
002BE2  3  02                   .byte 2
002BE3  3  00                   .byte 0
002BE4  3  01                   .byte 1
002BE5  3  01                   .byte 1
002BE6  3  00                   .byte 0
002BE7  3  05                   .byte 5
002BE8  3  00                   .byte 0
002BE9  3  00                   .byte 0
002BEA  3  00                   .byte 0
002BEB  3  00                   .byte 0
002BEC  3  00                   .byte 0
002BED  3  00                   .byte 0
002BEE  3  00                   .byte 0
002BEF  3  00                   .byte 0
002BF0  3  00                   .byte 0
002BF1  3  00                   .byte 0
002BF2  3  00                   .byte 0
002BF3  3  00                   .byte 0
002BF4  3  00                   .byte 0
002BF5  3  00                   .byte 0
002BF6  3  00                   .byte 0
002BF7  3  00                   .byte 0
002BF8  3  00                   .byte 0
002BF9  3  00                   .byte 0
002BFA  3  00                   .byte 0
002BFB  3  00                   .byte 0
002BFC  3  00                   .byte 0
002BFD  3  00                   .byte 0
002BFE  3  00                   .byte 0
002BFF  3  00                   .byte 0
002C00  3  00                   .byte 0
002C01  3  00                   .byte 0
002C02  3  00                   .byte 0
002C03  3  00                   .byte 0
002C04  3  00                   .byte 0
002C05  3  00                   .byte 0
002C06  3  02                   .byte 2
002C07  3  00                   .byte 0
002C08  3  00                   .byte 0
002C09  3  05                   .byte 5
002C0A  3  00                   .byte 0
002C0B  3  05                   .byte 5
002C0C  3  05                   .byte 5
002C0D  3               sprgfx:
002C0D  3  00 F8 03 8C          .byte 0,248,3,140,7,228,6,248,6,208,3,240,13,248,61,208,116,96,111,24,107,248,123,128,60,192,3,96,8,96,14,124
002C11  3  07 E4 06 F8  
002C15  3  06 D0 03 F0  
002C2D  3  00 3E 00 E3          .byte 0,62,0,227,1,249,1,190,1,180,0,252,3,126,15,116,29,24,27,198,26,254,30,224,15,48,0,216,2,24,3,159
002C31  3  01 F9 01 BE  
002C35  3  01 B4 00 FC  
002C4D  3  80 0F C0 38          .byte 128,15,192,56,64,126,128,111,0,109,0,63,128,223,3,221,7,70,134,241,134,191,7,184,3,204,0,54,0,134,192,231
002C51  3  40 7E 80 6F  
002C55  3  00 6D 00 3F  
002C6D  3  E0 03 30 0E          .byte 224,3,48,14,144,31,224,27,64,27,192,15,224,55,64,247,129,209,97,188,225,175,1,238,0,243,128,13,128,33,240,57
002C71  3  90 1F E0 1B  
002C75  3  40 1B C0 0F  
002C8D  3  00 F8 03 8C          .byte 0,248,3,140,7,228,6,248,6,208,3,240,13,248,61,208,116,96,111,24,107,240,123,192,60,192,6,192,5,192,1,240
002C91  3  07 E4 06 F8  
002C95  3  06 D0 03 F0  
002CAD  3  00 3E 00 E3          .byte 0,62,0,227,1,249,1,190,1,180,0,252,3,126,15,116,29,24,27,198,26,252,30,240,15,48,1,176,1,112,0,124
002CB1  3  01 F9 01 BE  
002CB5  3  01 B4 00 FC  
002CCD  3  80 0F C0 38          .byte 128,15,192,56,64,126,128,111,0,109,0,63,128,223,3,221,7,70,134,241,6,191,7,188,3,204,0,108,0,92,0,31
002CD1  3  40 7E 80 6F  
002CD5  3  00 6D 00 3F  
002CED  3  E0 03 30 0E          .byte 224,3,48,14,144,31,224,27,64,27,192,15,224,55,64,247,129,209,97,188,193,175,1,239,0,243,0,27,0,23,192,7
002CF1  3  90 1F E0 1B  
002CF5  3  40 1B C0 0F  
002D0D  3  00 F8 03 8C          .byte 0,248,3,140,7,228,6,248,6,208,3,240,13,248,61,208,116,96,111,24,107,248,123,192,63,16,1,176,3,0,7,224
002D11  3  07 E4 06 F8  
002D15  3  06 D0 03 F0  
002D2D  3  00 3E 00 E3          .byte 0,62,0,227,1,249,1,190,1,180,0,252,3,126,15,116,29,24,27,198,26,254,30,240,15,196,0,108,0,192,1,248
002D31  3  01 F9 01 BE  
002D35  3  01 B4 00 FC  
002D4D  3  80 0F C0 38          .byte 128,15,192,56,64,126,128,111,0,109,0,63,128,223,3,221,7,70,134,241,134,191,7,188,3,241,0,27,0,48,0,126
002D51  3  40 7E 80 6F  
002D55  3  00 6D 00 3F  
002D6D  3  E0 03 30 0E          .byte 224,3,48,14,144,31,224,27,64,27,192,15,224,55,64,247,129,209,97,188,225,175,1,239,64,252,192,6,0,12,128,31
002D71  3  90 1F E0 1B  
002D75  3  40 1B C0 0F  
002D8D  3  00 F8 03 8C          .byte 0,248,3,140,7,228,6,248,6,208,15,240,61,248,117,208,108,96,107,24,123,248,63,192,5,174,7,60,12,24,31,128
002D91  3  07 E4 06 F8  
002D95  3  06 D0 0F F0  
002DAD  3  00 3E 00 E3          .byte 0,62,0,227,1,249,1,190,1,180,3,252,15,126,29,116,27,24,26,198,30,254,15,240,129,107,1,207,3,6,7,224
002DB1  3  01 F9 01 BE  
002DB5  3  01 B4 03 FC  
002DCD  3  80 0F C0 38          .byte 128,15,192,56,64,126,128,111,0,109,0,255,131,223,7,93,6,198,134,177,135,191,3,252,224,90,192,115,128,193,1,248
002DD1  3  40 7E 80 6F  
002DD5  3  00 6D 00 FF  
002DED  3  E0 03 30 0E          .byte 224,3,48,14,144,31,224,27,64,27,192,63,224,247,65,215,129,177,97,172,225,239,0,255,184,22,240,28,96,48,0,126
002DF1  3  90 1F E0 1B  
002DF5  3  40 1B C0 3F  
002E0D  3  00 F8 03 8C          .byte 0,248,3,140,7,228,6,248,6,208,15,240,61,248,117,208,108,96,107,24,123,248,63,192,1,224,15,200,15,24,7,188
002E11  3  07 E4 06 F8  
002E15  3  06 D0 0F F0  
002E2D  3  00 3E 00 E3          .byte 0,62,0,227,1,249,1,190,1,180,3,252,15,126,29,116,27,24,26,198,30,254,15,240,0,120,3,242,3,198,1,239
002E31  3  01 F9 01 BE  
002E35  3  01 B4 03 FC  
002E4D  3  80 0F C0 38          .byte 128,15,192,56,64,126,128,111,0,109,0,255,131,223,7,93,6,198,134,177,135,191,3,252,0,30,128,252,128,241,192,123
002E51  3  40 7E 80 6F  
002E55  3  00 6D 00 FF  
002E6D  3  E0 03 30 0E          .byte 224,3,48,14,144,31,224,27,64,27,192,63,224,247,65,215,129,177,97,172,225,239,0,255,128,7,32,63,96,60,240,30
002E71  3  90 1F E0 1B  
002E75  3  40 1B C0 3F  
002E8D  3  00 F8 03 8C          .byte 0,248,3,140,7,228,6,248,6,208,15,240,61,248,117,208,108,96,107,24,123,248,63,192,1,160,7,32,7,128,0,96
002E91  3  07 E4 06 F8  
002E95  3  06 D0 0F F0  
002EAD  3  00 3E 00 E3          .byte 0,62,0,227,1,249,1,190,1,180,3,252,15,126,29,116,27,24,26,198,30,254,15,240,0,104,1,200,1,224,0,24
002EB1  3  01 F9 01 BE  
002EB5  3  01 B4 03 FC  
002ECD  3  80 0F C0 38          .byte 128,15,192,56,64,126,128,111,0,109,0,255,131,223,7,93,6,198,134,177,135,191,3,252,0,26,0,114,0,120,0,6
002ED1  3  40 7E 80 6F  
002ED5  3  00 6D 00 FF  
002EED  3  E0 03 30 0E          .byte 224,3,48,14,144,31,224,27,64,27,192,63,224,247,65,215,129,177,97,172,225,239,0,255,128,6,128,28,0,30,128,1
002EF1  3  90 1F E0 1B  
002EF5  3  40 1B C0 3F  
002F0D  3  00 F8 03 8C          .byte 0,248,3,140,7,228,6,248,6,208,15,240,61,248,117,208,108,96,107,24,123,248,63,192,3,240,0,224,2,0,7,192
002F11  3  07 E4 06 F8  
002F15  3  06 D0 0F F0  
002F2D  3  00 3E 00 E3          .byte 0,62,0,227,1,249,1,190,1,180,3,252,15,126,29,116,27,24,26,198,30,254,15,240,0,252,0,56,0,128,1,240
002F31  3  01 F9 01 BE  
002F35  3  01 B4 03 FC  
002F4D  3  80 0F C0 38          .byte 128,15,192,56,64,126,128,111,0,109,0,255,131,223,7,93,6,198,134,177,135,191,3,252,0,63,0,14,0,32,0,124
002F51  3  40 7E 80 6F  
002F55  3  00 6D 00 FF  
002F6D  3  E0 03 30 0E          .byte 224,3,48,14,144,31,224,27,64,27,192,63,224,247,65,215,129,177,97,172,225,239,0,255,192,15,128,3,0,8,0,31
002F71  3  90 1F E0 1B  
002F75  3  40 1B C0 3F  
002F8D  3  00 F8 03 8C          .byte 0,248,3,140,7,228,6,248,6,208,15,240,61,248,117,208,108,96,107,24,123,248,63,192,3,236,6,248,12,48,31,0
002F91  3  07 E4 06 F8  
002F95  3  06 D0 0F F0  
002FAD  3  00 3E 00 E3          .byte 0,62,0,227,1,249,1,190,1,180,3,252,15,126,29,116,27,24,26,198,30,254,15,240,0,251,1,190,3,12,7,192
002FB1  3  01 F9 01 BE  
002FB5  3  01 B4 03 FC  
002FCD  3  80 0F C0 38          .byte 128,15,192,56,64,126,128,111,0,109,0,255,131,223,7,93,6,198,134,177,135,191,3,252,192,62,128,111,0,195,1,240
002FD1  3  40 7E 80 6F  
002FD5  3  00 6D 00 FF  
002FED  3  E0 03 30 0E          .byte 224,3,48,14,144,31,224,27,64,27,192,63,224,247,65,215,129,177,97,172,225,239,0,255,176,15,224,27,192,48,0,124
002FF1  3  90 1F E0 1B  
002FF5  3  40 1B C0 3F  
00300D  3  1F 00 31 C0          .byte 31,0,49,192,39,224,31,96,11,96,15,192,31,176,11,188,6,46,24,246,31,214,1,222,3,60,6,192,6,16,62,112
003011  3  27 E0 1F 60  
003015  3  0B 60 0F C0  
00302D  3  07 C0 0C 70          .byte 7,192,12,112,9,248,7,216,2,216,3,240,7,236,2,239,129,139,134,61,135,245,128,119,0,207,1,176,1,132,15,156
003031  3  09 F8 07 D8  
003035  3  02 D8 03 F0  
00304D  3  01 F0 03 1C          .byte 1,240,3,28,2,126,1,246,0,182,0,252,1,251,192,187,224,98,97,143,97,253,224,29,192,51,0,108,0,97,3,231
003051  3  02 7E 01 F6  
003055  3  00 B6 00 FC  
00306D  3  00 7C 00 C7          .byte 0,124,0,199,128,159,128,125,128,45,0,63,192,126,240,46,184,24,216,99,88,127,120,7,240,12,0,27,64,24,192,249
003071  3  80 9F 80 7D  
003075  3  80 2D 00 3F  
00308D  3  1F 00 31 C0          .byte 31,0,49,192,39,224,31,96,11,96,15,192,31,176,11,188,6,46,24,246,15,214,3,222,3,60,3,96,3,160,15,128
003091  3  27 E0 1F 60  
003095  3  0B 60 0F C0  
0030AD  3  07 C0 0C 70          .byte 7,192,12,112,9,248,7,216,2,216,3,240,7,236,2,239,129,139,134,61,131,245,128,247,0,207,0,216,0,232,3,224
0030B1  3  09 F8 07 D8  
0030B5  3  02 D8 03 F0  
0030CD  3  01 F0 03 1C          .byte 1,240,3,28,2,126,1,246,0,182,0,252,1,251,192,187,224,98,97,143,96,253,224,61,192,51,0,54,0,58,0,248
0030D1  3  02 7E 01 F6  
0030D5  3  00 B6 00 FC  
0030ED  3  00 7C 00 C7          .byte 0,124,0,199,128,159,128,125,128,45,0,63,192,126,240,46,184,24,216,99,88,63,120,15,240,12,128,13,128,14,0,62
0030F1  3  80 9F 80 7D  
0030F5  3  80 2D 00 3F  
00310D  3  1F 00 31 C0          .byte 31,0,49,192,39,224,31,96,11,96,15,192,31,176,11,188,6,46,24,246,31,214,3,222,8,252,13,128,0,192,7,224
003111  3  27 E0 1F 60  
003115  3  0B 60 0F C0  
00312D  3  07 C0 0C 70          .byte 7,192,12,112,9,248,7,216,2,216,3,240,7,236,2,239,129,139,134,61,135,245,128,247,2,63,3,96,0,48,1,248
003131  3  09 F8 07 D8  
003135  3  02 D8 03 F0  
00314D  3  01 F0 03 1C          .byte 1,240,3,28,2,126,1,246,0,182,0,252,1,251,192,187,224,98,97,143,97,253,224,61,192,143,0,216,0,12,0,126
003151  3  02 7E 01 F6  
003155  3  00 B6 00 FC  
00316D  3  00 7C 00 C7          .byte 0,124,0,199,128,159,128,125,128,45,0,63,192,126,240,46,184,24,216,99,88,127,120,15,240,35,0,54,0,3,128,31
003171  3  80 9F 80 7D  
003175  3  80 2D 00 3F  
00318D  3  1F 00 31 C0          .byte 31,0,49,192,39,224,31,96,11,96,15,240,31,188,11,174,6,54,24,214,31,222,3,252,117,160,60,224,24,48,1,248
003191  3  27 E0 1F 60  
003195  3  0B 60 0F F0  
0031AD  3  07 C0 0C 70          .byte 7,192,12,112,9,248,7,216,2,216,3,252,7,239,130,235,129,141,134,53,135,247,0,255,29,104,15,56,6,12,0,126
0031B1  3  09 F8 07 D8  
0031B5  3  02 D8 03 FC  
0031CD  3  01 F0 03 1C          .byte 1,240,3,28,2,126,1,246,0,182,0,255,193,251,224,186,96,99,97,141,225,253,192,63,7,90,3,206,1,131,128,31
0031D1  3  02 7E 01 F6  
0031D5  3  00 B6 00 FF  
0031ED  3  00 7C 00 C7          .byte 0,124,0,199,128,159,128,125,128,45,192,63,240,126,184,46,216,24,88,99,120,127,240,15,129,214,128,243,192,96,224,7
0031F1  3  80 9F 80 7D  
0031F5  3  80 2D C0 3F  
00320D  3  1F 00 31 C0          .byte 31,0,49,192,39,224,31,96,11,96,15,240,31,188,11,174,6,54,24,214,31,222,3,252,7,128,19,240,24,240,61,224
003211  3  27 E0 1F 60  
003215  3  0B 60 0F F0  
00322D  3  07 C0 0C 70          .byte 7,192,12,112,9,248,7,216,2,216,3,252,7,239,130,235,129,141,134,53,135,247,0,255,1,224,4,252,6,60,15,120
003231  3  09 F8 07 D8  
003235  3  02 D8 03 FC  
00324D  3  01 F0 03 1C          .byte 1,240,3,28,2,126,1,246,0,182,0,255,193,251,224,186,96,99,97,141,225,253,192,63,0,120,1,63,1,143,3,222
003251  3  02 7E 01 F6  
003255  3  00 B6 00 FF  
00326D  3  00 7C 00 C7          .byte 0,124,0,199,128,159,128,125,128,45,192,63,240,126,184,46,216,24,88,99,120,127,240,15,0,30,192,79,192,99,128,247
003271  3  80 9F 80 7D  
003275  3  80 2D C0 3F  
00328D  3  1F 00 31 C0          .byte 31,0,49,192,39,224,31,96,11,96,15,240,31,188,11,174,6,54,24,214,31,222,3,252,5,128,4,224,1,224,6,0
003291  3  27 E0 1F 60  
003295  3  0B 60 0F F0  
0032AD  3  07 C0 0C 70          .byte 7,192,12,112,9,248,7,216,2,216,3,252,7,239,130,235,129,141,134,53,135,247,0,255,1,96,1,56,0,120,1,128
0032B1  3  09 F8 07 D8  
0032B5  3  02 D8 03 FC  
0032CD  3  01 F0 03 1C          .byte 1,240,3,28,2,126,1,246,0,182,0,255,193,251,224,186,96,99,97,141,225,253,192,63,0,88,0,78,0,30,0,96
0032D1  3  02 7E 01 F6  
0032D5  3  00 B6 00 FF  
0032ED  3  00 7C 00 C7          .byte 0,124,0,199,128,159,128,125,128,45,192,63,240,126,184,46,216,24,88,99,120,127,240,15,0,22,128,19,128,7,0,24
0032F1  3  80 9F 80 7D  
0032F5  3  80 2D C0 3F  
00330D  3  1F 00 31 C0          .byte 31,0,49,192,39,224,31,96,11,96,15,240,31,188,11,174,6,54,24,214,31,222,3,252,15,192,7,0,0,64,3,224
003311  3  27 E0 1F 60  
003315  3  0B 60 0F F0  
00332D  3  07 C0 0C 70          .byte 7,192,12,112,9,248,7,216,2,216,3,252,7,239,130,235,129,141,134,53,135,247,0,255,3,240,1,192,0,16,0,248
003331  3  09 F8 07 D8  
003335  3  02 D8 03 FC  
00334D  3  01 F0 03 1C          .byte 1,240,3,28,2,126,1,246,0,182,0,255,193,251,224,186,96,99,97,141,225,253,192,63,0,252,0,112,0,4,0,62
003351  3  02 7E 01 F6  
003355  3  00 B6 00 FF  
00336D  3  00 7C 00 C7          .byte 0,124,0,199,128,159,128,125,128,45,192,63,240,126,184,46,216,24,88,99,120,127,240,15,0,63,0,28,0,1,128,15
003371  3  80 9F 80 7D  
003375  3  80 2D C0 3F  
00338D  3  1F 00 31 C0          .byte 31,0,49,192,39,224,31,96,11,96,15,240,31,188,11,174,6,54,24,214,31,222,3,252,55,192,31,96,12,48,0,248
003391  3  27 E0 1F 60  
003395  3  0B 60 0F F0  
0033AD  3  07 C0 0C 70          .byte 7,192,12,112,9,248,7,216,2,216,3,252,7,239,130,235,129,141,134,53,135,247,0,255,13,240,7,216,3,12,0,62
0033B1  3  09 F8 07 D8  
0033B5  3  02 D8 03 FC  
0033CD  3  01 F0 03 1C          .byte 1,240,3,28,2,126,1,246,0,182,0,255,193,251,224,186,96,99,97,141,225,253,192,63,3,124,1,246,0,195,128,15
0033D1  3  02 7E 01 F6  
0033D5  3  00 B6 00 FF  
0033ED  3  00 7C 00 C7          .byte 0,124,0,199,128,159,128,125,128,45,192,63,240,126,184,46,216,24,88,99,120,127,240,15,0,223,128,125,192,48,224,3
0033F1  3  80 9F 80 7D  
0033F5  3  80 2D C0 3F  
00340D  3  00 F8 03 8C          .byte 0,248,3,140,7,228,6,248,6,208,15,240,61,248,117,208,108,96,107,24,123,248,63,192,5,174,7,60,12,24,31,128
003411  3  07 E4 06 F8  
003415  3  06 D0 0F F0  
00342D  3  00 3E 00 E3          .byte 0,62,0,227,1,249,1,190,1,180,3,252,15,126,29,116,27,24,26,198,30,254,15,240,129,107,1,207,3,6,7,224
003431  3  01 F9 01 BE  
003435  3  01 B4 03 FC  
00344D  3  80 0F C0 38          .byte 128,15,192,56,64,126,128,111,0,109,0,255,131,223,7,93,6,198,134,177,135,191,3,252,224,90,192,115,128,193,1,248
003451  3  40 7E 80 6F  
003455  3  00 6D 00 FF  
00346D  3  E0 03 30 0E          .byte 224,3,48,14,144,31,224,27,64,27,192,63,224,247,65,215,129,177,97,172,225,239,0,255,184,22,240,28,96,48,0,126
003471  3  90 1F E0 1B  
003475  3  40 1B C0 3F  
00348D  3  1F 00 31 C0          .byte 31,0,49,192,39,224,31,96,11,96,15,240,31,188,11,174,6,54,24,214,31,222,3,252,117,160,60,224,24,48,1,248
003491  3  27 E0 1F 60  
003495  3  0B 60 0F F0  
0034AD  3  07 C0 0C 70          .byte 7,192,12,112,9,248,7,216,2,216,3,252,7,239,130,235,129,141,134,53,135,247,0,255,29,104,15,56,6,12,0,126
0034B1  3  09 F8 07 D8  
0034B5  3  02 D8 03 FC  
0034CD  3  01 F0 03 1C          .byte 1,240,3,28,2,126,1,246,0,182,0,255,193,251,224,186,96,99,97,141,225,253,192,63,7,90,3,206,1,131,128,31
0034D1  3  02 7E 01 F6  
0034D5  3  00 B6 00 FF  
0034ED  3  00 7C 00 C7          .byte 0,124,0,199,128,159,128,125,128,45,192,63,240,126,184,46,216,24,88,99,120,127,240,15,129,214,128,243,192,96,224,7
0034F1  3  80 9F 80 7D  
0034F5  3  80 2D C0 3F  
00350D  3  41 F8 A2 0C          .byte 65,248,162,12,35,228,69,252,5,104,67,248,11,248,61,181,116,224,111,48,107,240,123,128,60,192,3,96,8,96,14,120
003511  3  23 E4 45 FC  
003515  3  05 68 43 F8  
00352D  3  10 7E 28 83          .byte 16,126,40,131,8,249,17,127,1,90,16,254,2,254,79,109,29,56,27,204,26,252,30,224,15,48,0,216,2,24,3,158
003531  3  08 F9 11 7F  
003535  3  01 5A 10 FE  
00354D  3  84 1F CA 20          .byte 132,31,202,32,66,62,196,95,128,86,132,63,128,191,83,219,7,78,6,243,6,191,7,184,3,204,0,54,0,134,128,231
003551  3  42 3E C4 5F  
003555  3  80 56 84 3F  
00356D  3  E1 07 32 88          .byte 225,7,50,136,144,143,241,23,160,21,225,15,224,47,212,246,129,211,193,188,193,175,1,238,0,243,128,13,128,33,224,57
003571  3  90 8F F1 17  
003575  3  A0 15 E1 0F  
00358D  3  1F 82 30 45          .byte 31,130,48,69,39,193,63,162,22,160,31,194,95,208,173,188,39,46,76,246,15,214,65,222,3,60,6,192,6,16,30,112
003591  3  27 C1 3F A2  
003595  3  16 A0 1F C2  
0035AD  3  87 E0 4C 11          .byte 135,224,76,17,73,240,143,232,5,168,135,240,23,244,43,111,137,203,147,61,131,245,144,119,0,207,1,176,1,132,7,156
0035B1  3  49 F0 8F E8  
0035B5  3  05 A8 87 F0  
0035CD  3  21 F8 53 04          .byte 33,248,83,4,18,124,35,250,1,106,33,252,5,253,202,219,226,114,100,207,96,253,228,29,192,51,0,108,0,97,1,231
0035D1  3  12 7C 23 FA  
0035D5  3  01 6A 21 FC  
0035ED  3  08 7E 14 C1          .byte 8,126,20,193,4,159,136,254,128,90,8,127,65,127,242,182,184,156,217,51,88,63,121,7,240,12,0,27,64,24,192,121
0035F1  3  04 9F 88 FE  
0035F5  3  80 5A 08 7F  
00360D  3  0F F8 38 06          .byte 15,248,56,6,32,250,63,250,17,138,27,218,31,252,15,120,15,216,6,48,7,240,1,192,12,24,60,158,61,94,61,222
003611  3  20 FA 3F FA  
003615  3  11 8A 1B DA  
00362D  3  03 FE 8E 01          .byte 3,254,142,1,136,62,143,254,132,98,134,246,7,255,3,222,3,246,1,140,1,252,0,112,3,6,143,39,143,87,143,119
003631  3  88 3E 8F FE  
003635  3  84 62 86 F6  
00364D  3  80 FF 63 80          .byte 128,255,99,128,162,15,163,255,161,24,161,189,193,255,128,247,128,253,0,99,0,127,0,28,128,193,227,201,227,213,227,221
003651  3  A2 0F A3 FF  
003655  3  A1 18 A1 BD  
00366D  3  E0 3F 18 E0          .byte 224,63,24,224,232,131,232,255,40,70,104,111,240,127,224,61,96,63,192,24,192,31,0,7,96,48,120,242,120,245,120,247
003671  3  E8 83 E8 FF  
003675  3  28 46 68 6F  
00368D  3  07 E0 0F F0          .byte 7,224,15,240,15,240,9,144,10,86,100,46,107,220,119,232,55,232,27,208,8,16,15,112,14,96,6,96,6,112,14,0
003691  3  0F F0 09 90  
003695  3  0A 56 64 2E  
0036AD  3  01 F8 03 FC          .byte 1,248,3,252,3,252,2,100,130,149,153,11,26,247,29,250,13,250,6,244,2,4,3,220,3,152,1,152,1,156,3,128
0036B1  3  03 FC 02 64  
0036B5  3  82 95 99 0B  
0036CD  3  00 7E 00 FF          .byte 0,126,0,255,0,255,0,153,96,165,230,66,198,189,135,126,131,126,1,189,0,129,0,247,0,230,0,102,0,103,0,224
0036D1  3  00 FF 00 99  
0036D5  3  60 A5 E6 42  
0036ED  3  80 1F C0 3F          .byte 128,31,192,63,192,63,64,38,88,41,185,144,113,175,161,223,160,223,64,111,64,32,192,61,128,57,128,25,192,25,0,56
0036F1  3  C0 3F 40 26  
0036F5  3  58 29 B9 90  
00370D  3  07 E0 0F F0          .byte 7,224,15,240,15,240,9,150,10,94,4,44,107,220,95,208,127,208,23,16,24,224,14,0,14,96,6,112,6,0,14,0
003711  3  0F F0 09 96  
003715  3  0A 5E 04 2C  
00372D  3  01 F8 03 FC          .byte 1,248,3,252,3,252,130,101,130,151,1,11,26,247,23,244,31,244,5,196,6,56,3,128,3,152,1,156,1,128,3,128
003731  3  03 FC 82 65  
003735  3  82 97 01 0B  
00374D  3  00 7E 00 FF          .byte 0,126,0,255,0,255,96,153,224,165,192,66,198,189,5,253,7,253,1,113,1,142,0,224,0,230,0,103,0,96,0,224
003751  3  00 FF 60 99  
003755  3  E0 A5 C0 42  
00376D  3  80 1F C0 3F          .byte 128,31,192,63,192,63,88,38,120,41,176,16,113,175,65,127,65,255,64,92,128,99,0,56,128,57,192,25,0,24,0,56
003771  3  C0 3F 58 26  
003775  3  78 29 B0 10  
00378D  3  00 00 07 E0          .byte 0,0,7,224,15,240,15,240,105,144,106,86,116,46,123,222,23,232,23,232,11,208,14,240,6,112,6,96,14,96,0,112
003791  3  0F F0 0F F0  
003795  3  69 90 6A 56  
0037AD  3  00 00 01 F8          .byte 0,0,1,248,3,252,3,252,26,100,154,149,157,11,158,247,5,250,5,250,2,244,3,188,1,156,1,152,3,152,0,28
0037B1  3  03 FC 03 FC  
0037B5  3  1A 64 9A 95  
0037CD  3  00 00 00 7E          .byte 0,0,0,126,0,255,0,255,6,153,102,165,231,66,231,189,129,126,129,126,0,189,0,239,0,103,0,102,0,230,0,7
0037D1  3  00 FF 00 FF  
0037D5  3  06 99 66 A5  
0037ED  3  00 00 80 1F          .byte 0,0,128,31,192,63,192,63,65,166,89,169,185,208,121,239,160,95,160,95,64,47,192,59,192,25,128,25,128,57,192,1
0037F1  3  C0 3F C0 3F  
0037F5  3  41 A6 59 A9  
00380D  3  07 E0 0F F0          .byte 7,224,15,240,15,240,105,144,122,80,52,32,61,214,11,250,11,254,8,232,7,24,0,112,6,112,14,96,0,96,0,112
003811  3  0F F0 69 90  
003815  3  7A 50 34 20  
00382D  3  01 F8 03 FC          .byte 1,248,3,252,3,252,26,100,30,148,13,8,143,117,130,254,130,255,2,58,1,198,0,28,1,156,3,152,0,24,0,28
003831  3  03 FC 1A 64  
003835  3  1E 94 0D 08  
00384D  3  00 7E 00 FF          .byte 0,126,0,255,0,255,6,153,7,165,3,66,99,221,160,191,224,191,128,142,128,113,0,7,0,103,0,230,0,6,0,7
003851  3  00 FF 06 99  
003855  3  07 A5 03 42  
00386D  3  80 1F C0 3F          .byte 128,31,192,63,192,63,65,166,65,233,128,208,88,247,232,47,248,47,160,35,96,28,192,1,192,25,128,57,128,1,192,1
003871  3  C0 3F 41 A6  
003875  3  41 E9 80 D0  
00388D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,24,0,60,0,60,0,126,0,126,0,255
003891  3  00 00 00 00  
003895  3  00 00 00 00  
0038AD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,15,0,15,128,31,128,31,192,63
0038B1  3  00 00 00 00  
0038B5  3  00 00 00 00  
0038CD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,1,128,1,192,3,192,3,224,7,224,7,240,15
0038D1  3  00 00 00 00  
0038D5  3  00 00 00 00  
0038ED  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,96,0,240,0,240,0,248,1,248,1,252,3
0038F1  3  00 00 00 00  
0038F5  3  00 00 00 00  
00390D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,24,0,60,0,60,0,126,0,126,0,255,0,0
003911  3  00 00 00 00  
003915  3  00 00 00 00  
00392D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,15,0,15,128,31,128,31,192,63,0,0
003931  3  00 00 00 00  
003935  3  00 00 00 00  
00394D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,1,128,1,192,3,192,3,224,7,224,7,240,15,0,0
003951  3  00 00 00 00  
003955  3  00 00 00 00  
00396D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,96,0,240,0,240,0,248,1,248,1,252,3,0,0
003971  3  00 00 00 00  
003975  3  00 00 00 00  
00398D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,240,31,252,127,254,255,223,95,245,243,255,111,239,63,252
003991  3  00 00 00 00  
003995  3  00 00 00 00  
0039AD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,252,7,255,159,255,255,247,87,253,252,255,219,251,15,255
0039B1  3  00 00 00 00  
0039B5  3  00 00 00 00  
0039CD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,193,255,231,255,255,253,85,255,255,63,246,254,195,255
0039D1  3  00 00 00 00  
0039D5  3  00 00 00 00  
0039ED  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,31,240,127,249,255,127,255,213,127,255,207,189,191,240,255
0039F1  3  00 00 00 00  
0039F5  3  00 00 00 00  
003A0D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,252,63,252,255,192,252,0,240,0
003A11  3  00 00 00 00  
003A15  3  00 00 00 00  
003A2D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,255,15,255,63,240,63,0,60,0
003A31  3  00 00 00 00  
003A35  3  00 00 00 00  
003A4D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,127,195,255,15,252,15,192,15,0
003A51  3  00 00 00 00  
003A55  3  00 00 00 00  
003A6D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,31,240,255,3,255,3,240,3,192
003A71  3  00 00 00 00  
003A75  3  00 00 00 00  
003A8D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,5,160,5,0,0,63,252,255,255
003A91  3  00 00 00 00  
003A95  3  00 00 00 00  
003AAD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,1,104,1,0,0,15,255,255,255
003AB1  3  00 00 00 00  
003AB5  3  00 00 00 00  
003ACD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,0,90,0,0,0,195,255,255,255
003AD1  3  00 00 00 00  
003AD5  3  00 00 00 00  
003AED  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,128,22,128,0,0,240,255,255,255
003AF1  3  00 00 00 00  
003AF5  3  00 00 00 00  
003B0D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,170,85,170,85,0,0,0,0,160,5,160,5,0,0,0,0,0,0,63,252,255,255
003B11  3  00 00 00 00  
003B15  3  00 00 AA 55  
003B2D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,106,149,106,149,0,0,0,0,104,1,104,1,0,0,0,0,0,0,15,255,255,255
003B31  3  00 00 00 00  
003B35  3  00 00 6A 95  
003B4D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,90,165,90,165,0,0,0,0,90,0,90,0,0,0,0,0,0,0,195,255,255,255
003B51  3  00 00 00 00  
003B55  3  00 00 5A A5  
003B6D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,86,169,86,169,0,0,0,0,22,128,22,128,0,0,0,0,0,0,240,255,255,255
003B71  3  00 00 00 00  
003B75  3  00 00 56 A9  
003B8D  3  AA 55 AA 55          .byte 170,85,170,85,0,0,0,0,160,5,160,5,0,0,0,0,160,5,160,5,0,0,0,0,0,0,0,0,63,252,255,255
003B91  3  00 00 00 00  
003B95  3  A0 05 A0 05  
003BAD  3  6A 95 6A 95          .byte 106,149,106,149,0,0,0,0,104,1,104,1,0,0,0,0,104,1,104,1,0,0,0,0,0,0,0,0,15,255,255,255
003BB1  3  00 00 00 00  
003BB5  3  68 01 68 01  
003BCD  3  5A A5 5A A5          .byte 90,165,90,165,0,0,0,0,90,0,90,0,0,0,0,0,90,0,90,0,0,0,0,0,0,0,0,0,195,255,255,255
003BD1  3  00 00 00 00  
003BD5  3  5A 00 5A 00  
003BED  3  56 A9 56 A9          .byte 86,169,86,169,0,0,0,0,22,128,22,128,0,0,0,0,22,128,22,128,0,0,0,0,0,0,0,0,240,255,255,255
003BF1  3  00 00 00 00  
003BF5  3  16 80 16 80  
003C0D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,170,85,170,85,0,0,0,0,160,5,160,5,0,0,0,0,0,0,63,252,255,255
003C11  3  00 00 00 00  
003C15  3  00 00 AA 55  
003C2D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,106,149,106,149,0,0,0,0,104,1,104,1,0,0,0,0,0,0,15,255,255,255
003C31  3  00 00 00 00  
003C35  3  00 00 6A 95  
003C4D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,90,165,90,165,0,0,0,0,90,0,90,0,0,0,0,0,0,0,195,255,255,255
003C51  3  00 00 00 00  
003C55  3  00 00 5A A5  
003C6D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,86,169,86,169,0,0,0,0,22,128,22,128,0,0,0,0,0,0,240,255,255,255
003C71  3  00 00 00 00  
003C75  3  00 00 56 A9  
003C8D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,192,3,112,14,152,25,108,54,166,101,75,210,21,168,2,64,0,0,0,0
003C91  3  00 00 00 00  
003C95  3  00 00 00 00  
003CAD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,240,0,156,3,102,6,155,13,105,153,146,244,5,106,0,144,0,0,0,0
003CB1  3  00 00 00 00  
003CB5  3  00 00 00 00  
003CCD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,60,0,231,0,153,129,102,195,90,102,36,189,129,90,0,36,0,0,0,0
003CD1  3  00 00 00 00  
003CD5  3  00 00 00 00  
003CED  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,15,0,57,192,102,96,217,176,150,153,73,47,160,86,0,9,0,0,0,0
003CF1  3  00 00 00 00  
003CF5  3  00 00 00 00  
003D0D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,28,111,246,213,171,162,69,0,0,0,0,0,0
003D11  3  00 00 00 00  
003D15  3  00 00 00 00  
003D2D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,7,155,253,245,106,104,145,0,0,0,0,0,0
003D31  3  00 00 00 00  
003D35  3  00 00 00 00  
003D4D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,129,102,255,189,90,90,36,0,0,0,0,0,0
003D51  3  00 00 00 00  
003D55  3  00 00 00 00  
003D6D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,224,217,191,175,86,22,137,0,0,0,0,0,0
003D71  3  00 00 00 00  
003D75  3  00 00 00 00  
003D8D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,2,48,3,192,205,176,63,254,17,145,18,65
003D91  3  00 00 00 00  
003D95  3  00 00 00 00  
003DAD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,140,0,240,51,108,143,255,68,100,68,144
003DB1  3  00 00 00 00  
003DB5  3  00 00 00 00  
003DCD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,35,0,60,12,219,227,255,17,25,17,36
003DD1  3  00 00 00 00  
003DD5  3  00 00 00 00  
003DED  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,192,8,0,15,195,54,248,255,68,70,4,73
003DF1  3  00 00 00 00  
003DF5  3  00 00 00 00  
003E0D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,12,64,3,192,13,179,63,252,68,32,64,32
003E11  3  00 00 00 00  
003E15  3  00 00 00 00  
003E2D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,3,16,0,240,195,108,15,255,17,8,16,8
003E31  3  00 00 00 00  
003E35  3  00 00 00 00  
003E4D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,196,0,60,48,219,195,255,4,66,4,2
003E51  3  00 00 00 00  
003E55  3  00 00 00 00  
003E6D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,49,0,15,204,54,240,255,129,16,129,0
003E71  3  00 00 00 00  
003E75  3  00 00 00 00  
003E8D  3  00 40 00 A0          .byte 0,64,0,160,1,64,0,128,1,64,9,144,22,232,15,240,31,248,191,253,121,158,186,93,7,224,5,160,3,192,1,128
003E91  3  01 40 00 80  
003E95  3  01 40 09 90  
003EAD  3  00 10 00 28          .byte 0,16,0,40,0,80,0,32,0,80,2,100,5,186,3,252,7,254,111,255,158,103,110,151,1,248,1,104,0,240,0,96
003EB1  3  00 50 00 20  
003EB5  3  00 50 02 64  
003ECD  3  00 04 00 0A          .byte 0,4,0,10,0,20,0,8,0,20,0,153,129,110,0,255,129,255,219,255,231,153,219,165,0,126,0,90,0,60,0,24
003ED1  3  00 14 00 08  
003ED5  3  00 14 00 99  
003EED  3  00 01 80 02          .byte 0,1,128,2,0,5,0,2,0,5,64,38,160,91,192,63,224,127,246,255,121,230,118,233,128,31,128,22,0,15,0,6
003EF1  3  00 05 00 02  
003EF5  3  00 05 40 26  
003F0D  3  02 00 05 00          .byte 2,0,5,0,2,128,1,0,2,128,9,144,23,104,15,240,31,248,191,253,121,158,186,93,7,224,5,160,3,192,1,128
003F11  3  02 80 01 00  
003F15  3  02 80 09 90  
003F2D  3  00 80 01 40          .byte 0,128,1,64,0,160,0,64,0,160,2,100,5,218,3,252,7,254,111,255,158,103,110,151,1,248,1,104,0,240,0,96
003F31  3  00 A0 00 40  
003F35  3  00 A0 02 64  
003F4D  3  00 20 00 50          .byte 0,32,0,80,0,40,0,16,0,40,0,153,129,118,0,255,129,255,219,255,231,153,219,165,0,126,0,90,0,60,0,24
003F51  3  00 28 00 10  
003F55  3  00 28 00 99  
003F6D  3  00 08 00 14          .byte 0,8,0,20,0,10,0,4,0,10,64,38,160,93,192,63,224,127,246,255,121,230,118,233,128,31,128,22,0,15,0,6
003F71  3  00 0A 00 04  
003F75  3  00 0A 40 26  
003F8D  3  0E 20 0F 90          .byte 14,32,15,144,11,64,9,144,9,64,9,144,9,64,1,144,5,64,13,144,9,64,9,144,9,64,9,144,9,64,13,176
003F91  3  0B 40 09 90  
003F95  3  09 40 09 90  
003FAD  3  03 88 03 E4          .byte 3,136,3,228,2,208,2,100,2,80,2,100,2,80,0,100,1,80,3,100,2,80,2,100,2,80,2,100,2,80,3,108
003FB1  3  02 D0 02 64  
003FB5  3  02 50 02 64  
003FCD  3  00 E2 00 F9          .byte 0,226,0,249,0,180,0,153,0,148,0,153,0,148,0,25,0,84,0,217,0,148,0,153,0,148,0,153,0,148,0,219
003FD1  3  00 B4 00 99  
003FD5  3  00 94 00 99  
003FED  3  80 38 40 3E          .byte 128,56,64,62,0,45,64,38,0,37,64,38,0,37,64,6,0,21,64,54,0,37,64,38,0,37,64,38,0,37,192,54
003FF1  3  00 2D 40 26  
003FF5  3  00 25 40 26  
00400D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,72,79,255,94,118,92,68,124,0,0,0
004011  3  00 00 00 00  
004015  3  00 00 00 00  
00402D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,146,211,255,151,157,23,17,31,0,0,0
004031  3  00 00 00 00  
004035  3  00 00 00 00  
00404D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,228,244,255,101,231,69,196,7,192,0,0
004051  3  00 00 00 00  
004055  3  00 00 00 00  
00406D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,249,253,63,217,121,17,113,1,240,0,0
004071  3  00 00 00 00  
004075  3  00 00 00 00  
00408D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,224,227,19,30,12
004091  3  00 00 00 00  
004095  3  00 00 00 00  
0040AD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,248,196,7,131
0040B1  3  00 00 00 00  
0040B5  3  00 00 00 00  
0040CD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,62,49,193,224
0040D1  3  00 00 00 00  
0040D5  3  00 00 00 00  
0040ED  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,7,79,140,48,120
0040F1  3  00 00 00 00  
0040F5  3  00 00 00 00  
00410D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,28,198,50,1,225
004111  3  00 00 00 00  
004115  3  00 00 00 00  
00412D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,7,177,140,64,120
004131  3  00 00 00 00  
004135  3  00 00 00 00  
00414D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,193,44,99,16,30
004151  3  00 00 00 00  
004155  3  00 00 00 00  
00416D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,240,203,24,132,7
004171  3  00 00 00 00  
004175  3  00 00 00 00  
00418D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,64,42,232,93,84,171,136,117,84,174,131,117,14,178,176,88,224
004191  3  00 00 00 00  
004195  3  00 00 00 00  
0041AD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,80,10,186,23,85,42,226,29,85,235,160,157,67,44,172,22,56
0041B1  3  00 00 00 00  
0041B5  3  00 00 00 00  
0041CD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,130,174,69,213,138,184,71,85,58,232,231,80,11,43,5,142
0041D1  3  00 00 00 00  
0041D5  3  00 00 00 00  
0041ED  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,160,171,81,117,34,174,81,213,14,186,57,212,194,202,129,99
0041F1  3  00 00 00 00  
0041F5  3  00 00 00 00  
00420D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,64,42,232,93,84,171,136,117,84,174,131,117,14,187,48,77,128
004211  3  00 00 00 00  
004215  3  00 00 00 00  
00422D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,80,10,186,23,85,42,226,29,85,235,160,157,67,46,204,19,96
004231  3  00 00 00 00  
004235  3  00 00 00 00  
00424D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,130,174,69,213,138,184,71,85,58,232,231,80,11,179,4,216
004251  3  00 00 00 00  
004255  3  00 00 00 00  
00426D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,160,171,81,117,34,174,81,213,14,186,57,212,194,236,1,54
004271  3  00 00 00 00  
004275  3  00 00 00 00  
00428D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,160,23,84,42,186,17,213,42,174,193,117,112,174,13,77,7,26
004291  3  00 00 00 00  
004295  3  00 00 00 00  
0042AD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,5,213,138,174,68,117,138,171,112,93,156,43,67,83,129,198
0042B1  3  00 00 00 00  
0042B5  3  00 00 00 00  
0042CD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,65,117,162,171,81,29,226,170,92,23,231,10,208,212,160,113
0042D1  3  00 00 00 00  
0042D5  3  00 00 00 00  
0042ED  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,10,80,93,232,170,84,71,184,170,215,5,185,194,52,53,104,28
0042F1  3  00 00 00 00  
0042F5  3  00 00 00 00  
00430D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,160,23,84,42,186,17,213,42,174,193,117,112,174,12,221,1,178
004311  3  00 00 00 00  
004315  3  00 00 00 00  
00432D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,5,213,138,174,68,117,138,171,112,93,156,43,67,55,128,108
004331  3  00 00 00 00  
004335  3  00 00 00 00  
00434D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,65,117,162,171,81,29,226,170,92,23,231,10,208,205,32,27
004351  3  00 00 00 00  
004355  3  00 00 00 00  
00436D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,10,80,93,232,170,84,71,184,170,215,5,185,194,116,51,200,6
004371  3  00 00 00 00  
004375  3  00 00 00 00  
00438D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,222,228,151,228,151
004391  3  00 00 00 00  
004395  3  00 00 00 00  
0043AD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,183,249,37,249,37
0043B1  3  00 00 00 00  
0043B5  3  00 00 00 00  
0043CD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,109,126,73,126,73
0043D1  3  00 00 00 00  
0043D5  3  00 00 00 00  
0043ED  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,219,95,146,95,146
0043F1  3  00 00 00 00  
0043F5  3  00 00 00 00  
00440D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,176,29,184,27,120,11,112
004411  3  00 00 00 00  
004415  3  00 00 00 00  
00442D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,108,7,110,6,222,2,220
004431  3  00 00 00 00  
004435  3  00 00 00 00  
00444D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,219,129,219,129,183,0,183
004451  3  00 00 00 00  
004455  3  00 00 00 00  
00446D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,54,224,118,224,109,192,45
004471  3  00 00 00 00  
004475  3  00 00 00 00  
00448D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,15,90,90,105,150,31,248,6,96,0,0,0,0,0,0,0,0
004491  3  00 00 00 00  
004495  3  00 00 00 00  
0044AD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,3,150,150,154,101,7,254,1,152,0,0,0,0,0,0,0,0
0044B1  3  00 00 00 00  
0044B5  3  00 00 00 00  
0044CD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,165,165,102,153,129,255,0,102,0,0,0,0,0,0,0,0
0044D1  3  00 00 00 00  
0044D5  3  00 00 00 00  
0044ED  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,192,105,105,89,166,224,127,128,25,0,0,0,0,0,0,0,0
0044F1  3  00 00 00 00  
0044F5  3  00 00 00 00  
00450D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,64,25,152,61,188,54,108,96,6,96,6,64,2,64,2,0,0
004511  3  00 00 00 00  
004515  3  00 00 00 00  
00452D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,6,102,15,111,13,155,152,1,152,1,144,0,144,0,0,0
004531  3  00 00 00 00  
004535  3  00 00 00 00  
00454D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,129,153,195,219,195,102,102,0,102,0,36,0,36,0,0,0
004551  3  00 00 00 00  
004555  3  00 00 00 00  
00456D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,96,102,240,246,176,217,25,128,25,128,9,0,9,0,0,0
004571  3  00 00 00 00  
004575  3  00 00 00 00  
00458D  3               frmlst:
00458D  3  00 08                .byte 0,8
00458F  3  08 08                .byte 8,8
004591  3  10 01                .byte 16,1
004593  3  11 01                .byte 17,1
004595  3  12 01                .byte 18,1
004597  3  13 01                .byte 19,1
004599  3  14 01                .byte 20,1
00459B  3  15 04                .byte 21,4
00459D  3  19 02                .byte 25,2
00459F  3  1B 01                .byte 27,1
0045A1  3  1C 01                .byte 28,1
0045A3  3  1D 04                .byte 29,4
0045A5  3  21 02                .byte 33,2
0045A7  3  23 02                .byte 35,2
0045A9  3  25 02                .byte 37,2
0045AB  3  27 01                .byte 39,1
0045AD  3  28 01                .byte 40,1
0045AF  3  29 02                .byte 41,2
0045B1  3  2B 02                .byte 43,2
0045B3  3  2D 02                .byte 45,2
0045B5  3  2F 02                .byte 47,2
0045B7  3  31 02 33 00          .byte 49,2,51,0
0045BB  3               scdat:
0045BB  3  8F 00 70 00          .word 143,112,358,304,375,475,589,609,621,623,566,445,501,510,506,421,535,502,383,471,496,379,458,517,396,274
0045BF  3  66 01 30 01  
0045C3  3  77 01 DB 01  
0045EF  3  AF 01 57 01          .word 431,343,521
0045F3  3  09 02        
0045F5  3  FF 10 66 20          .byte 255,16,102,32,26,32,16,16,16,32,28,27,26,32,61,27,29,29,31,32,255,16,13,29,30,0,0,0,31,28,30,255,0,11
0045F9  3  1A 20 10 10  
0045FD  3  10 20 1C 1B  
004617  3  1F 1C 1F 1A          .byte 31,28,31,26,32,16,16,32,16,16,32,32,30,255,0,7,15,7,8,6,5,255,0,7,10,7,8,0,0,31,29,30,31
00461B  3  20 10 10 20  
00461F  3  10 10 20 20  
004638  3  1E 00 00 00          .byte 30,0,0,0,10,8,255,0,23,7,6,7,7,8,5,255,0,71,255,33,12,255,0,18,92,92,255,0,30,81,81,255,0,94
00463C  3  0A 08 FF 00  
004640  3  17 07 06 07  
00465A  3  6A 69 FF 00          .byte 106,105,255,0,30,103,104,255,0,30,78,78,255,0,30,106,105,255,0,30,103,104,255,0,30,80,80,255,0,68,110,107,108
00465E  3  1E 67 68 FF  
004662  3  00 1E 4E 4E  
00467B  3  6D FF 00 1D          .byte 109,255,0,29,111,112,255,0,15
00467F  3  6F 70 FF 00  
004683  3  0F           
004684  3  FF 10 66 20          .byte 255,16,102,32,26,32,16,16,16,32,28,27,26,32,61,27,29,29,31,32,255,16,13,29,30,0,0,0,31,28,30,255,0,11
004688  3  1A 20 10 10  
00468C  3  10 20 1C 1B  
0046A6  3  1F 1C 1F 1A          .byte 31,28,31,26,32,16,16,32,16,16,32,32,30,255,0,7,15,7,8,6,5,255,0,7,10,7,8,0,0,31,29,30,31
0046AA  3  20 10 10 20  
0046AE  3  10 10 20 20  
0046C7  3  1E 00 00 00          .byte 30,0,0,0,10,8,255,0,23,7,6,7,7,8,5,255,0,37,255,33,17,255,0,111,255,33,17,255,0,21,255,100,5
0046CB  3  0A 08 FF 00  
0046CF  3  17 07 06 07  
0046E8  3  FF 00 1B FF          .byte 255,0,27,255,81,5,255,0,0,255,0,13
0046EC  3  51 05 FF 00  
0046F0  3  00 FF 00 0D  
0046F4  3  FF 00 24 FF          .byte 255,0,36,255,91,24,255,0,8,255,91,24,255,0,8,91,91,255,0,4,255,91,18,255,0,8,91,91,255,0,4,255,91,18
0046F8  3  5B 18 FF 00  
0046FC  3  08 FF 5B 18  
004716  3  FF 00 08 5B          .byte 255,0,8,91,91,255,0,4,91,94,90,90,90,91,93,92,90,92,90,92,90,92,90,90,91,91,255,0,8,91,91,255,0,4
00471A  3  5B FF 00 04  
00471E  3  5B 5E 5A 5A  
004738  3  5B 5C 5A 5A          .byte 91,92,90,90,90,91,93,90,90,92,90,90,92,90,92,90,91,91,255,0,8,255,91,7,255,90,4,91,93,255,90,7,92
00473C  3  5A 5B 5D 5A  
004740  3  5A 5C 5A 5A  
004759  3  5A 5B 5B FF          .byte 90,91,91,255,0,8,91,91,255,90,6,92,90,90,91,93,92,90,90,90,92,90,90,90,92,91,91,255,0,8,91,91,92
00475D  3  00 08 5B 5B  
004761  3  FF 5A 06 5C  
00477A  3  5A 5C 5A 5A          .byte 90,92,90,90,92,92,90,92,91,93,90,90,92,90,92,90,92,90,92,91,91,255,0,8,255,91,12,93,92,90,92,90,92
00477E  3  5C 5C 5A 5C  
004782  3  5B 5D 5A 5A  
00479B  3  5A 5C 5C 5C          .byte 90,92,92,92,91,91,255,0,8,91,91,90,92,90,90,92,90,90,92,92,91,93,90,90,90,92,90,90,92,90,92,91,91
00479F  3  5B 5B FF 00  
0047A3  3  08 5B 5B 5A  
0047BC  3  FF 00 08 5B          .byte 255,0,8,91,91,90,90,90,92,92,90,92,90,90,91,93,255,90,9,91,91,255,0,8,91,91,255,90,9,91,93,90,90,90
0047C0  3  5B 5A 5A 5A  
0047C4  3  5C 5C 5A 5C  
0047DE  3  5C 5A 5A 5A          .byte 92,90,90,90,92,90,91,91,255,0,8,91,91,92,92,90,90,92,90,92,92,92,91,93,90,90,92,90,92,92,92,90,90
0047E2  3  5C 5A 5B 5B  
0047E6  3  FF 00 08 5B  
0047FF  3  5B 5B FF 00          .byte 91,91,255,0,8,91,91,92,255,90,4,92,90,90,90,91,93,90,92,90,92,90,92,90,92,90,91,91,255,0,8,91,91
004803  3  08 5B 5B 5C  
004807  3  FF 5A 04 5C  
004820  3  FF 5A 09 5B          .byte 255,90,9,91,93,255,91,11,255,0,8,91,91,92,90,90,90,92,90,90,90,92,91,93,255,91,11,255,0,8,91,91,255,90,4
004824  3  5D FF 5B 0B  
004828  3  FF 00 08 5B  
004843  3  FF 5C 05 5B          .byte 255,92,5,91,93,255,91,11,255,0,8,255,91,24,255,0,8,255,91,24,255,0,68
004847  3  5D FF 5B 0B  
00484B  3  FF 00 08 FF  
00485A  3  02 03 0D 0D          .byte 2,3,13,13,12,0,2,3,13,0,0,13,12,255,0,7,12,13,2,3,12,13,2,3,13,13,2,3,4,6,9,8,10
00485E  3  0C 00 02 03  
004862  3  0D 00 00 0D  
00487B  3  0B 08 07 06          .byte 11,8,7,6,5,4,9,8,6,8,10,11,9,8,9,8,10,5,4,9,8,7,8,7,10,11,5,14,255,1,30,14,1
00487F  3  05 04 09 08  
004883  3  06 08 0A 0B  
00489C  3  FF 10 1E 01          .byte 255,16,30,1,1,255,16,30,1,1,255,16,30,1,1,255,16,30,1,1,255,16,30,1,1,255,16,30,1,1,255,16,30
0048A0  3  01 FF 10 1E  
0048A4  3  01 01 FF 10  
0048BD  3  01 01 FF 10          .byte 1,1,255,16,10,32,255,16,7,32,32,27,29,28,32,255,16,6,1,1,255,16,6,32,32,27,30,0,31,32,29,31,32
0048C1  3  0A 20 FF 10  
0048C5  3  07 20 20 1B  
0048DE  3  1B 1E FF 00          .byte 27,30,255,0,4,4,6,31,26,255,16,4,1,1,28,31,32,60,31,30,4,0,0,4,6,10,12,255,0,4,13,15,9
0048E2  3  04 04 06 1F  
0048E6  3  1A FF 10 04  
0048FF  3  08 07 06 05          .byte 8,7,6,5,4,6,31,32,16,16,1,1,255,0,28,31,30,1,1,255,0,28,113,113,1,1,255,0,28,113,113,1,1
004903  3  04 06 1F 20  
004907  3  10 10 01 01  
004920  3  FF 00 1C 71          .byte 255,0,28,113,113,1,1,255,0,28,113,113,1,1,255,0,7,21,25,255,0,19,113,113,1,1,255,44,12,45,22,23,24
004924  3  71 01 01 FF  
004928  3  00 1C 71 71  
004941  3  00 00 00 18          .byte 0,0,0,24,46,44,44,45,24,0,0,0,113,113,1,1,99,18,19,98,18,19,17,98,19,17,18,46,255,44,9,45,18
004945  3  2E 2C 2C 2D  
004949  3  18 00 00 00  
004962  3  13 2E FF 2C          .byte 19,46,255,44,5,1,1,20,21,22,23,25,255,0,6,37,98,18,17,18,99,98,17,18,17,18,98,18,17,18,17,18,17
004966  3  05 01 01 14  
00496A  3  15 16 17 19  
004983  3  62 01 0E FF          .byte 98,1,14,255,1,30,14
004987  3  01 1E 0E     
00498A  3  02 03 0D 0D          .byte 2,3,13,13,12,0,2,3,13,0,0,13,12,255,0,7,12,13,2,3,12,13,2,3,13,13,2,3,4,6,9,8,10
00498E  3  0C 00 02 03  
004992  3  0D 00 00 0D  
0049AB  3  0B 08 07 06          .byte 11,8,7,6,5,4,9,8,6,8,10,11,9,8,9,8,10,5,4,9,8,7,8,7,10,11,5,14,255,1,30,14,1
0049AF  3  05 04 09 08  
0049B3  3  06 08 0A 0B  
0049CC  3  00 1F FF 10          .byte 0,31,255,16,28,1,1,7,8,255,16,28,1,1,0,0,32,255,16,27,1,1,12,0,0,31,255,16,26,1,1,0,0
0049D0  3  1C 01 01 07  
0049D4  3  08 FF 10 1C  
0049ED  3  0A 09 FF 10          .byte 10,9,255,16,26,1,1,0,12,0,0,31,255,16,7,32,32,29,28,31,27,255,16,12,1,1,255,0,4,10,27,16,16
0049F1  3  1A 01 01 00  
0049F5  3  0C 00 00 1F  
004A0E  3  20 1C 1D 1E          .byte 32,28,29,30,0,13,0,12,87,0,28,32,26,32,255,16,8,1,1,12,255,0,5,31,28,13,255,0,6,88,87,10,6
004A12  3  00 0D 00 0C  
004A16  3  57 00 1C 20  
004A2F  3  0F 00 00 1A          .byte 15,0,0,26,255,16,7,1,1,255,0,9,15,10,8,7,6,5,88,87,89,255,0,5,31,255,16,6,1,1,51,0,0
004A33  3  FF 10 07 01  
004A37  3  01 FF 00 09  
004A50  3  0A 08 07 0C          .byte 10,8,7,12,255,0,7,86,85,97,96,13,0,0,15,7,8,31,29,31,29,31,30,1,1,49,13,255,0,11,13,85,85
004A54  3  FF 00 07 56  
004A58  3  55 61 60 0D  
004A71  3  61 5F 59 FF          .byte 97,95,89,255,0,11,1,1,255,0,14,83,97,97,95,96,255,0,11,1,1,255,0,14,84,85,97,97,89,255,0,11,1,1
004A75  3  00 0B 01 01  
004A79  3  FF 00 0E 53  
004A93  3  00 00 0C FF          .byte 0,0,12,255,0,11,85,85,97,95,96,255,0,11,1,1,255,0,14,81,88,97,89,255,0,12,1,1,255,0,16,100,0
004A97  3  00 0B 55 55  
004A9B  3  61 5F 60 FF  
004AB4  3  18 2E FF 2C          .byte 24,46,255,44,4,45,24,255,0,4,1,1,255,0,15,24,55,46,44,45,98,18,19,46,255,44,6,1,1,255,0,14,24
004AB8  3  04 2D 18 FF  
004ABC  3  00 04 01 01  
004AD5  3  2E 2C 2C 2D          .byte 46,44,44,45,98,17,18,17,17,17,18,98,18,17,98,1,1,255,0,12,24,46,44,45,98,18,17,19,18,17,98,18,19
004AD9  3  62 11 12 11  
004ADD  3  11 11 12 62  
004AF6  3  11 12 11 13          .byte 17,18,17,19,18,1,14,255,1,30,14
004AFA  3  12 01 0E FF  
004AFE  3  01 1E 0E     
004B01  3  02 03 0D 0D          .byte 2,3,13,13,12,0,2,3,13,0,0,13,12,255,0,7,12,13,2,3,12,13,2,3,13,13,2,3,4,6,9,8,10
004B05  3  0C 00 02 03  
004B09  3  0D 00 00 0D  
004B22  3  0B 08 07 06          .byte 11,8,7,6,5,4,9,8,6,8,10,11,9,8,9,8,10,5,4,9,8,7,8,7,10,11,5,14,255,1,30,14,1
004B26  3  05 04 09 08  
004B2A  3  06 08 0A 0B  
004B43  3  FF 00 05 0C          .byte 255,0,5,12,255,0,7,37,17,255,18,4,17,19,18,17,18,98,18,17,18,19,18,1,1,15,12,255,0,12,98,18,17
004B47  3  FF 00 07 25  
004B4B  3  11 FF 12 04  
004B64  3  13 11 11 62          .byte 19,17,17,98,17,18,18,17,18,17,98,17,18,1,1,255,0,15,98,18,18,18,17,18,17,18,19,18,17,18,17,18,17
004B68  3  11 12 12 11  
004B6C  3  12 11 62 11  
004B85  3  01 01 FF 00          .byte 1,1,255,0,14,46,44,45,18,17,18,19,18,17,18,17,98,17,18,17,98,1,1,255,0,11,46,44,44,45,98,18,18
004B89  3  0E 2E 2C 2D  
004B8D  3  12 11 12 13  
004BA6  3  62 12 12 11          .byte 98,18,18,17,98,17,18,17,18,19,18,17,1,1,255,0,11,37,18,98,18,17,18,18,17,17,18,17,17,18,18,17,18
004BAA  3  62 11 12 11  
004BAE  3  12 13 12 11  
004BC7  3  11 12 12 01          .byte 17,18,18,1,1,255,0,12,98,99,98,99,98,98,99,98,17,18,17,18,18,19,18,17,18,98,1,1,0,0,0,46,44
004BCB  3  01 FF 00 0C  
004BCF  3  62 63 62 63  
004BE8  3  2D FF 00 0E          .byte 45,255,0,14,98,99,99,98,17,18,18,18,17,18,1,1,0,0,0,37,98,19,255,0,19,99,98,98,17,17,1,1,255,0,11
004BEC  3  62 63 63 62  
004BF0  3  11 12 12 12  
004C0B  3  19 FF 00 0F          .byte 25,255,0,15,19,17,98,1,1,255,0,9,46,255,44,5,45,255,0,11,98,18,18,1,1,255,0,9,98,99,19,98,99
004C0F  3  13 11 62 01  
004C13  3  01 FF 00 09  
004C2C  3  13 62 00 00          .byte 19,98,0,0,0,46,44,44,45,255,0,5,98,19,1,1,255,0,19,98,17,99,19,255,0,5,17,18,1,1,255,0,27
004C30  3  00 2E 2C 2C  
004C34  3  2D FF 00 05  
004C4D  3  14 11 62 01          .byte 20,17,98,1,1,255,0,4,38,40,41,40,39,0,0,0,25,21,255,0,12,25,17,17,17,1,1,0,24,46,255,44,12
004C51  3  01 FF 00 04  
004C55  3  26 28 29 28  
004C6E  3  2D 18 FF 00          .byte 45,24,255,0,9,17,17,19,18,1,1,44,44,45,98,17,18,19,18,17,18,17,18,17,98,46,255,44,4,45,24,0,0
004C72  3  09 11 11 13  
004C76  3  12 01 01 2C  
004C8F  3  18 2E 2C 2C          .byte 24,46,44,44,45,17,98,1,1,18,98,18,17,17,18,98,18,17,19,98,18,17,18,17,17,18,19,98,17,22,23,22,23
004C93  3  2D 11 62 01  
004C97  3  01 12 62 12  
004CB0  3  12 62 12 11          .byte 18,98,18,17,98,18,1,1,98,17,17,19,17,18,17,17,18,17,18,17,18,19,18,17,18,17,18,17,98,22,23,98,18
004CB4  3  62 12 01 01  
004CB8  3  62 11 11 13  
004CD1  3  11 12 11 12          .byte 17,18,17,18,19,1,14,255,1,30,14
004CD5  3  13 01 0E FF  
004CD9  3  01 1E 0E     
004CDC  3  02 03 0D 0D          .byte 2,3,13,13,12,0,2,3,13,0,0,13,12,255,0,7,12,13,2,3,12,13,2,3,13,13,2,3,4,6,9,8,10
004CE0  3  0C 00 02 03  
004CE4  3  0D 00 00 0D  
004CFD  3  0B 08 07 06          .byte 11,8,7,6,5,4,9,8,6,8,10,11,9,8,9,8,10,5,4,9,8,7,8,7,10,11,5,14,255,1,30,14,1
004D01  3  05 04 09 08  
004D05  3  06 08 0A 0B  
004D1E  3  32 31 32 23          .byte 50,49,50,35,35,34,13,0,0,48,49,50,49,49,35,34,35,34,49,13,0,13,0,48,35,34,49,50,49,0,1,1,51
004D22  3  23 22 0D 00  
004D26  3  00 30 31 32  
004D3F  3  31 35 24 22          .byte 49,53,36,34,35,0,0,12,48,49,51,49,53,36,34,34,35,4,9,8,7,6,7,35,35,54,48,51,13,1,1,12,0
004D43  3  23 00 00 0C  
004D47  3  30 31 33 31  
004D60  3  0C 23 22 22          .byte 12,35,34,34,6,10,9,8,51,48,51,7,35,34,36,34,0,0,0,13,0,0,36,35,6,10,7,6,1,1,8,7,6
004D64  3  06 0A 09 08  
004D68  3  33 30 33 07  
004D81  3  23 23 22 FF          .byte 35,35,34,255,0,8,35,35,34,35,12,255,0,5,35,34,0,0,0,12,1,1,0,0,13,35,35,35,0,50,49,0,0,0
004D85  3  00 08 23 23  
004D89  3  22 23 0C FF  
004DA3  3  0D 00 23 22          .byte 13,0,35,34,35,34,255,0,6,35,34,0,13,0,0,1,1,0,0,0,35,34,35,54,51,49,255,0,5,35,36,34,35
004DA7  3  23 22 FF 00  
004DAB  3  06 23 22 00  
004DC4  3  00 00 00 32          .byte 0,0,0,50,50,0,35,34,255,0,4,1,1,0,0,0,35,34,34,255,0,4,50,51,0,0,35,34,34,34,0,0,0
004DC8  3  32 00 23 22  
004DCC  3  FF 00 04 01  
004DE5  3  31 33 35 24          .byte 49,51,53,36,34,255,0,4,1,1,51,50,0,35,34,34,0,0,0,48,51,50,49,0,35,34,34,34,0,50,51,0,0,0
004DE9  3  22 FF 00 04  
004DED  3  01 01 33 32  
004E07  3  23 23 FF 00          .byte 35,35,255,0,4,1,1,48,51,52,36,35,35,0,0,0,49,50,49,53,52,36,35,35,36,0,50,51,51,0,0,35,34
004E0B  3  04 01 01 30  
004E0F  3  33 34 24 23  
004E28  3  FF 00 04 01          .byte 255,0,4,1,1,0,0,0,35,35,34,255,0,4,48,49,49,0,35,34,35,35,54,49,49,49,0,0,35,34,255,0,4
004E2C  3  01 00 00 00  
004E30  3  23 23 22 FF  
004E49  3  01 01 00 00          .byte 1,1,0,0,0,36,34,35,255,0,8,35,35,34,35,0,0,49,0,0,0,36,34,255,0,4,1,1,0,0,0,35,34,34
004E4D  3  00 24 22 23  
004E51  3  FF 00 08 23  
004E6B  3  FF 00 08 24          .byte 255,0,8,36,34,36,34,255,0,6,35,35,255,0,4,1,1,0,0,0,35,36,34,255,0,8,35,34,35,34,255,0,6
004E6F  3  22 24 22 FF  
004E73  3  00 06 23 23  
004E8C  3  23 22 FF 00          .byte 35,34,255,0,4,1,1,0,0,0,35,34,34,255,0,8,34,34,35,36,255,0,6,35,34,255,0,4,1,1,0,0,0
004E90  3  04 01 01 00  
004E94  3  00 00 23 22  
004EAD  3  23 23 22 FF          .byte 35,35,34,255,0,8,35,34,34,35,255,0,6,35,34,255,0,4,1,1,0,0,57,35,55,35,56,255,0,7,35,35,34,34
004EB1  3  00 08 23 22  
004EB5  3  22 23 FF 00  
004ECF  3  FF 00 05 39          .byte 255,0,5,57,35,35,56,0,0,0,1,1,255,44,7,45,24,0,0,25,0,57,35,35,35,55,56,24,46,255,44,9,1,1
004ED3  3  23 23 38 00  
004ED7  3  00 00 01 01  
004EF1  3  62 11 12 62          .byte 98,17,18,98,17,46,255,44,15,45,98,17,18,17,18,22,23,18,1,1,18,98,17,19,17,18,17,98,18,22,23,17,18
004EF5  3  11 2E FF 2C  
004EF9  3  0F 2D 62 11  
004F12  3  13 12 62 12          .byte 19,18,98,18,17,18,17,18,17,18,19,18,22,23,17,18,19,1,14,255,1,30,14
004F16  3  11 12 11 12  
004F1A  3  11 12 13 12  
004F29  3  02 03 0D 0D          .byte 2,3,13,13,12,0,2,3,13,0,0,13,12,255,0,7,12,13,2,3,12,13,2,3,13,13,2,3,4,6,9,8,10
004F2D  3  0C 00 02 03  
004F31  3  0D 00 00 0D  
004F4A  3  0B 08 07 06          .byte 11,8,7,6,5,4,9,8,6,8,10,11,9,8,9,8,10,5,4,9,8,7,8,7,10,11,5,14,255,1,30,14,1
004F4E  3  05 04 09 08  
004F52  3  06 08 0A 0B  
004F6B  3  00 0C FF 00          .byte 0,12,255,0,4,35,35,36,34,50,49,50,53,36,35,36,49,0,0,12,0,0,35,34,35,54,51,49,49,1,1,0,0
004F6F  3  04 23 23 24  
004F73  3  22 32 31 32  
004F8C  3  0C 33 32 08          .byte 12,51,50,8,255,35,4,54,51,50,49,35,35,34,6,9,10,9,6,7,35,35,34,12,48,49,0,1,1,9,10,48,50,50
004F90  3  FF 23 04 36  
004F94  3  33 32 31 23  
004FAE  3  31 23 24 23          .byte 49,35,36,35,36,48,51,49,10,35,36,35,0,0,0,51,48,50,35,35,35,0,0,0,12,1,1,0,0,48,48,49,52
004FB2  3  24 30 33 31  
004FB6  3  0A 23 24 23  
004FCF  3  23 22 22 23          .byte 35,34,34,35,0,12,0,0,35,34,35,12,0,50,48,50,52,35,35,34,10,9,7,6,1,1,0,13,0,49,49,0,36
004FD3  3  00 0C 00 00  
004FD7  3  23 22 23 0C  
004FF0  3  23 22 24 00          .byte 35,34,36,0,0,0,12,35,35,34,0,51,50,48,51,51,36,35,34,255,0,4,1,1,255,0,5,13,35,35,34,34,0
004FF4  3  00 00 0C 23  
004FF8  3  23 22 00 33  
005011  3  32 00 00 23          .byte 50,0,0,35,34,35,54,51,51,49,12,0,35,36,35,0,50,50,0,1,1,255,0,6,35,34,34,35,54,51,0,0,35
005015  3  22 23 36 33  
005019  3  33 31 0C 00  
005032  3  24 22 00 30          .byte 36,34,0,48,49,0,0,0,35,35,35,54,50,49,0,1,1,255,0,6,35,35,36,34,0,0,50,51,35,35,34,255,0,6
005036  3  31 00 00 00  
00503A  3  23 23 23 36  
005054  3  23 22 24 00          .byte 35,34,36,0,48,0,0,1,1,0,0,0,50,50,0,35,35,35,34,0,48,50,52,36,34,35,255,0,6,35,35,34,255,0,4
005058  3  30 00 00 01  
00505C  3  01 00 00 00  
005077  3  01 01 00 00          .byte 1,1,0,0,51,49,50,52,35,34,35,34,0,48,48,49,35,36,36,255,0,4,53,52,36,34,34,255,0,4,1,1,0,0
00507B  3  33 31 32 34  
00507F  3  23 22 23 22  
005099  3  30 33 31 00          .byte 48,51,49,0,36,35,34,36,255,0,4,35,34,35,255,0,6,35,34,36,255,0,4,1,1,255,0,6,35,35,34,34,255,0,4
00509D  3  24 23 22 24  
0050A1  3  FF 00 04 23  
0050BC  3  23 23 24 FF          .byte 35,35,36,255,0,6,35,35,34,255,0,4,1,1,255,0,6,35,36,35,34,255,0,4,35,34,34,255,0,6,34,35,35
0050C0  3  00 06 23 23  
0050C4  3  22 FF 00 04  
0050DD  3  FF 00 04 01          .byte 255,0,4,1,1,0,25,0,0,0,57,35,36,35,35,56,0,0,0,35,35,34,255,0,6,35,34,34,255,0,4,1,1
0050E1  3  01 00 19 00  
0050E5  3  00 00 39 23  
0050FE  3  FF 2C 0B 2D          .byte 255,44,11,45,24,57,55,35,35,56,0,25,0,0,0,36,35,34,255,0,4,1,1,98,18,98,17,17,18,18,17,98,46
005102  3  18 39 37 23  
005106  3  23 38 00 19  
00511F  3  FF 2C 0B 2D          .byte 255,44,11,45,38,35,35,35,56,0,0,0,1,1,18,19,18,22,23,98,18,18,17,18,17,18,17,98,17,18,17,18,98
005123  3  26 23 23 23  
005127  3  38 00 00 00  
005140  3  2E FF 2C 0A          .byte 46,255,44,10,1,1,18,17,18,17,17,17,18,98,18,98,18,17,18,17,17,17,98,17,17,17,18,98,18,17,18,17,98
005144  3  01 01 12 11  
005148  3  12 11 11 11  
005161  3  11 11 62 01          .byte 17,17,98,1,1,98,17,17,19,17,98,17,19,22,23,17,17,18,19,18,17,18,17,98,17,18,17,18,19,18,17,18,17
005165  3  01 62 11 11  
005169  3  13 11 62 11  
005182  3  12 13 01 0E          .byte 18,19,1,14,255,1,30,14
005186  3  FF 01 1E 0E  
00518A  3  02 03 0D 0D          .byte 2,3,13,13,12,0,2,3,13,0,0,13,12,255,0,7,12,13,2,3,12,13,2,3,13,13,2,3,4,6,9,8,10
00518E  3  0C 00 02 03  
005192  3  0D 00 00 0D  
0051AB  3  0B 08 07 06          .byte 11,8,7,6,5,4,9,8,6,8,10,11,9,8,9,8,10,5,4,9,8,7,8,7,10,11,5,14,255,1,30,14,1
0051AF  3  05 04 09 08  
0051B3  3  06 08 0A 0B  
0051CC  3  30 31 35 23          .byte 48,49,53,35,35,34,49,255,0,4,51,51,49,35,35,34,34,49,48,12,51,48,48,35,36,49,4,6,10,1,1,12,0,0
0051D0  3  23 22 31 FF  
0051D4  3  00 04 33 33  
0051EE  3  24 23 22 06          .byte 36,35,34,6,8,7,6,5,48,51,50,36,35,34,34,48,12,0,48,51,53,36,34,9,10,11,12,1,1,0,0,12,35
0051F2  3  08 07 06 05  
0051F6  3  30 33 32 24  
00520F  3  22 23 00 00          .byte 34,35,0,0,13,0,0,0,48,51,35,34,36,34,6,7,8,48,48,51,35,35,255,0,4,1,1,6,7,6,35,35,34
005213  3  0D 00 00 00  
005217  3  30 33 23 22  
005230  3  0D 00 00 00          .byte 13,0,0,0,50,49,6,7,35,35,34,34,255,0,6,35,34,0,50,12,0,1,1,12,0,0,35,34,35,7,51,50,48
005234  3  32 31 06 07  
005238  3  23 23 22 22  
005251  3  32 32 31 00          .byte 50,50,49,0,35,34,35,34,12,0,0,0,12,0,35,36,54,51,0,0,1,1,0,0,12,35,35,34,51,50,51,51,51
005255  3  23 22 23 22  
005259  3  0C 00 00 00  
005272  3  35 36 34 23          .byte 53,54,52,35,36,34,34,0,0,50,50,0,0,35,34,255,0,4,1,1,0,0,0,35,34,35,54,51,49,48,48,49,49
005276  3  24 22 22 00  
00527A  3  00 32 32 00  
005293  3  0C 24 22 22          .byte 12,36,34,34,36,0,51,49,50,50,0,36,34,255,0,4,1,1,0,0,0,35,36,34,48,51,49,0,51,49,0,0,35
005297  3  24 00 33 31  
00529B  3  32 32 00 24  
0052B4  3  22 22 23 36          .byte 34,34,35,54,50,54,48,49,0,35,34,0,0,0,50,1,1,0,0,0,36,35,34,255,0,8,35,35,34,34,0,48,50
0052B8  3  32 36 30 31  
0052BC  3  00 23 22 00  
0052D5  3  30 33 00 23          .byte 48,51,0,35,34,0,50,51,49,1,1,50,49,0,35,35,34,255,0,8,35,36,35,34,0,48,51,49,0,0,35,35,54
0052D9  3  22 00 32 33  
0052DD  3  31 01 01 32  
0052F6  3  35 31 32 01          .byte 53,49,50,1,1,49,49,52,36,34,34,255,0,8,35,35,34,34,255,0,6,36,34,0,48,48,49,1,1,48,49,0,35
0052FA  3  01 31 31 34  
0052FE  3  24 22 22 FF  
005317  3  22 24 FF 00          .byte 34,36,255,0,8,35,34,34,34,255,0,6,35,34,0,0,48,49,1,1,0,0,0,35,36,34,255,0,4,50,49,50,0
00531B  3  08 23 22 22  
00531F  3  22 FF 00 06  
005338  3  23 24 22 23          .byte 35,36,34,35,0,0,51,50,0,0,35,34,255,0,4,1,1,0,0,0,36,34,34,255,0,4,50,51,53,52,35,34,35
00533C  3  00 00 33 32  
005340  3  00 00 23 22  
005359  3  24 00 32 33          .byte 36,0,50,51,48,50,0,35,34,255,0,4,1,1,0,0,0,35,35,34,50,49,50,0,48,50,49,0,36,35,34,35,0
00535D  3  30 32 00 23  
005361  3  22 FF 00 04  
00537A  3  32 32 30 31          .byte 50,50,48,49,52,35,34,255,0,4,1,1,0,0,0,35,34,35,54,51,49,255,0,5,35,34,35,34,54,48,50,49,0,0
00537E  3  34 23 22 FF  
005382  3  00 04 01 01  
00539C  3  24 22 FF 00          .byte 36,34,255,0,4,1,1,0,0,0,35,34,34,48,49,255,0,6,35,36,34,34,0,48,49,0,0,0,35,34,255,0,4
0053A0  3  04 01 01 00  
0053A4  3  00 00 23 22  
0053BD  3  01 01 00 00          .byte 1,1,0,0,0,35,35,34,255,0,8,35,34,36,34,255,0,6,35,35,255,0,4,1,1,0,0,0,35,34,35,255,0,4
0053C1  3  00 23 23 22  
0053C5  3  FF 00 08 23  
0053DF  3  32 33 32 00          .byte 50,51,50,0,35,35,34,34,255,0,5,50,35,36,50,51,50,0,1,14,255,1,30,14
0053E3  3  23 23 22 22  
0053E7  3  FF 00 05 32  
0053F7  3  02 03 0D 0D          .byte 2,3,13,13,12,0,2,3,13,0,0,13,12,255,0,7,12,13,2,3,12,13,2,3,13,13,2,3,4,6,9,8,10
0053FB  3  0C 00 02 03  
0053FF  3  0D 00 00 0D  
005418  3  0B 08 07 06          .byte 11,8,7,6,5,4,9,8,6,8,10,11,9,8,9,8,10,5,4,9,8,7,8,7,10,11,5,14,255,1,30,14,1
00541C  3  05 04 09 08  
005420  3  06 08 0A 0B  
005439  3  00 00 30 32          .byte 0,0,48,50,51,49,35,35,36,35,54,51,49,49,36,35,34,51,50,51,0,13,48,35,34,35,13,50,51,0,1,1,12
00543D  3  33 31 23 23  
005441  3  24 23 36 33  
00545A  3  00 33 31 30          .byte 0,51,49,48,51,35,35,34,34,0,48,49,51,35,35,34,48,51,49,13,0,0,35,35,34,54,51,50,49,1,1,0,12
00545E  3  33 23 23 22  
005462  3  22 00 30 31  
00547B  3  00 30 33 31          .byte 0,48,51,49,35,36,35,34,7,6,51,53,36,36,34,51,51,7,9,8,10,35,34,35,0,48,51,0,1,1,255,0,6
00547F  3  23 24 23 22  
005483  3  07 06 33 35  
00549C  3  23 23 22 24          .byte 35,35,34,36,0,0,0,13,35,34,34,12,0,0,50,51,0,35,34,34,10,9,8,7,1,1,10,9,10,50,9,8,35,35,35
0054A0  3  00 00 00 0D  
0054A4  3  23 22 22 0C  
0054BF  3  22 0D 00 00          .byte 34,13,0,0,0,35,35,34,0,50,51,48,53,52,34,35,34,12,0,0,0,1,1,0,0,48,48,49,0,34,35,35,34
0054C3  3  00 23 23 22  
0054C7  3  00 32 33 30  
0054E0  3  FF 00 04 23          .byte 255,0,4,35,34,34,51,50,51,51,50,13,36,34,35,255,0,4,1,1,13,48,50,48,53,52,35,35,35,34,255,0,4
0054E4  3  22 22 33 32  
0054E8  3  33 33 32 0D  
005501  3  23 24 23 36          .byte 35,36,35,54,50,53,51,49,0,35,35,34,255,0,4,1,1,0,48,48,51,49,0,36,34,34,34,255,0,4,35,35,34
005505  3  32 35 33 31  
005509  3  00 23 23 22  
005522  3  30 30 32 32          .byte 48,48,50,50,49,0,35,34,34,255,0,4,1,1,0,0,48,49,0,0,35,35,34,34,0,50,51,0,35,34,34,0,48
005526  3  31 00 23 22  
00552A  3  22 FF 00 04  
005543  3  31 33 00 00          .byte 49,51,0,0,35,35,34,0,50,51,0,1,1,255,0,6,35,34,35,35,48,51,50,49,35,36,34,255,0,6,36,34,35
005547  3  23 23 22 00  
00554B  3  32 33 00 01  
005564  3  36 33 32 31          .byte 54,51,50,49,1,1,255,0,6,35,34,36,35,54,48,51,52,36,34,34,255,0,6,35,34,36,0,48,51,0,1,1,255,0,6
005568  3  01 01 FF 00  
00556C  3  06 23 22 24  
005587  3  24 23 22 24          .byte 36,35,34,36,48,51,48,51,35,35,34,0,0,51,50,51,0,36,35,34,255,0,4,1,1,0,50,51,50,0,0,35,34
00558B  3  30 33 30 33  
00558F  3  23 23 22 00  
0055A8  3  23 22 FF 00          .byte 35,34,255,0,4,35,34,34,0,50,50,53,54,52,34,35,34,255,0,4,1,1,51,48,50,54,53,52,35,34,34,35,255,0,4
0055AC  3  04 23 22 22  
0055B0  3  00 32 32 35  
0055CB  3  23 23 22 30          .byte 35,35,34,48,51,49,51,49,0,35,34,35,255,0,4,1,1,48,50,51,51,51,0,36,35,34,34,255,0,4,35,34,35
0055CF  3  33 31 33 31  
0055D3  3  00 23 22 23  
0055EC  3  36 33 31 31          .byte 54,51,49,49,0,0,36,35,34,255,0,4,1,1,0,48,49,51,0,0,35,34,35,34,255,0,4,35,34,36,0,48,51
0055F0  3  00 00 24 23  
0055F4  3  22 FF 00 04  
00560D  3  00 00 00 23          .byte 0,0,0,35,35,36,255,0,4,1,1,255,0,6,35,34,34,34,255,0,4,35,34,34,255,0,6,35,35,35,255,0,4
005611  3  23 24 FF 00  
005615  3  04 01 01 FF  
00562E  3  01 01 FF 00          .byte 1,1,255,0,6,35,35,34,34,255,0,4,36,35,34,255,0,6,35,35,36,255,0,4,1,1,255,0,6,35,34,35,34
005632  3  06 23 23 22  
005636  3  22 FF 00 04  
00564F  3  FF 00 04 22          .byte 255,0,4,34,36,35,50,255,0,5,36,34,35,51,50,51,0,1,14,255,1,30,14
005653  3  24 23 32 FF  
005657  3  00 05 24 22  
005666  3  02 03 0D 0D          .byte 2,3,13,13,12,0,2,3,13,0,0,13,12,255,0,7,12,13,2,3,12,13,2,3,13,13,2,3,4,6,9,8,10
00566A  3  0C 00 02 03  
00566E  3  0D 00 00 0D  
005687  3  0B 08 07 06          .byte 11,8,7,6,5,4,9,8,6,8,10,11,9,8,9,8,10,5,4,9,8,7,8,7,10,11,5,14,255,1,30,14,1
00568B  3  05 04 09 08  
00568F  3  06 08 0A 0B  
0056A8  3  13 12 11 12          .byte 19,18,17,18,98,18,18,19,81,81,255,0,7,13,9,6,7,8,12,0,87,255,0,4,12,1,1,98,17,18,17,18,18,18
0056AC  3  62 12 12 13  
0056B0  3  51 51 FF 00  
0056CA  3  62 FF 00 10          .byte 98,255,0,16,87,12,255,0,4,1,1,17,18,17,18,17,17,22,23,20,0,0,25,255,0,11,84,87,89,4,9,7,8
0056CE  3  57 0C FF 00  
0056D2  3  04 01 01 11  
0056EB  3  01 01 12 11          .byte 1,1,18,17,18,18,19,17,18,46,255,44,5,45,255,0,6,4,6,5,85,97,89,89,0,0,0,1,1,19,18,18,18
0056EF  3  12 12 13 11  
0056F3  3  12 2E FF 2C  
00570C  3  11 11 12 62          .byte 17,17,18,98,18,17,18,17,18,19,255,0,8,86,97,97,95,89,0,0,0,1,1,22,23,18,98,18,17,18,17,18,19
005710  3  12 11 12 11  
005714  3  12 13 FF 00  
00572D  3  12 11 12 63          .byte 18,17,18,99,25,255,0,7,85,83,97,97,97,12,0,0,1,1,17,17,18,17,18,18,98,18,17,18,17,18,46,44,44
005731  3  19 FF 00 07  
005735  3  55 53 61 61  
00574E  3  2D FF 00 05          .byte 45,255,0,5,88,97,97,97,95,97,89,0,12,1,1,18,98,18,19,18,98,17,18,17,18,17,18,17,18,17,98,255,0,5
005752  3  58 61 61 61  
005756  3  5F 61 59 00  
005770  3  58 55 5F 61          .byte 88,85,95,97,97,97,89,0,0,1,1,17,18,17,18,17,18,17,18,17,18,98,18,19,18,17,19,255,0,5,88,97,97,97
005774  3  61 61 59 00  
005778  3  00 01 01 11  
005792  3  5F 61 59 00          .byte 95,97,89,0,0,1,1,17,18,98,18,17,18,18,19,17,18,17,18,17,18,46,44,44,45,0,0,0,86,85,97,97,97
005796  3  00 01 01 11  
00579A  3  12 62 12 11  
0057B3  3  5F 60 00 00          .byte 95,96,0,0,1,1,18,17,19,18,19,99,81,98,18,18,98,17,18,17,18,17,18,19,25,0,0,0,83,85,97,95,96
0057B7  3  01 01 12 11  
0057BB  3  13 12 13 63  
0057D4  3  00 00 00 01          .byte 0,0,0,1,1,17,98,19,98,255,0,4,99,19,18,17,18,17,18,17,46,44,44,45,0,0,81,88,97,89,81,0,0,0
0057D8  3  01 11 62 13  
0057DC  3  62 FF 00 04  
0057F6  3  01 01 62 13          .byte 1,1,98,19,98,255,0,7,99,98,17,98,98,99,98,81,81,81,255,0,4,100,255,0,5,1,1,17,99,255,0,10,98
0057FA  3  62 FF 00 07  
0057FE  3  63 62 11 62  
005817  3  FF 00 0A 65          .byte 255,0,10,101,100,25,255,0,4,1,1,18,20,255,0,20,77,255,44,7,1,1,22,23,25,255,0,10,25,255,0,7,20
00581B  3  64 19 FF 00  
00581F  3  04 01 01 12  
005838  3  13 12 11 12          .byte 19,18,17,18,98,18,17,98,1,1,18,46,45,24,255,0,6,24,46,255,44,10,45,17,18,19,18,17,18,19,1,1,46
00583C  3  62 12 11 62  
005840  3  01 01 12 2E  
005859  3  2C 2C 2D 18          .byte 44,44,45,24,25,0,0,25,24,44,45,18,17,18,17,98,17,18,17,19,17,18,22,23,98,18,19,18,17,1,1,98,18
00585D  3  19 00 00 19  
005861  3  18 2C 2D 12  
00587A  3  11 12 12 13          .byte 17,18,18,19,0,0,17,17,18,17,18,98,17,18,17,18,19,18,17,18,98,18,17,18,17,18,17,19,1,14,255,1,30
00587E  3  00 00 11 11  
005882  3  12 11 12 62  
00589B  3  0E                   .byte 14
00589C  3  02 03 0D 0D          .byte 2,3,13,13,12,0,2,3,13,0,0,13,12,255,0,7,12,13,2,3,12,13,2,3,13,13,2,3,4,6,9,8,10
0058A0  3  0C 00 02 03  
0058A4  3  0D 00 00 0D  
0058BD  3  0B 08 07 06          .byte 11,8,7,6,5,4,9,8,6,8,10,11,9,8,9,8,10,5,4,9,8,7,8,7,10,11,5,14,255,1,30,14,1
0058C1  3  05 04 09 08  
0058C5  3  06 08 0A 0B  
0058DE  3  FF 10 12 20          .byte 255,16,18,32,32,29,31,32,29,28,0,12,0,0,15,1,1,255,16,17,28,0,13,10,8,6,0,15,7,9,8,7,6
0058E2  3  20 1D 1F 20  
0058E6  3  1D 1C 00 0C  
0058FF  3  01 01 3D 1C          .byte 1,1,61,28,27,61,255,16,10,32,29,30,0,13,255,0,9,12,0,1,1,44,44,44,45,59,32,16,16,32,62,29,26
005903  3  1B 3D FF 10  
005907  3  0A 20 1D 1E  
005920  3  1C 1B 00 00          .byte 28,27,0,0,12,255,0,13,1,1,17,19,46,44,44,44,45,59,30,12,255,0,12,12,0,0,0,4,6,7,6,1,1
005924  3  0C FF 00 0D  
005928  3  01 01 11 13  
005941  3  12 11 12 62          .byte 18,17,18,98,18,46,44,45,7,8,10,9,10,5,255,0,16,1,1,17,17,18,17,18,18,17,98,255,0,7,4,9,10
005945  3  12 2E 2C 2D  
005949  3  07 08 0A 09  
005962  3  0B 08 06 07          .byte 11,8,6,7,6,5,255,0,6,1,1,18,98,18,19,18,17,99,25,0,12,255,0,20,1,1,17,18,17,18,17,18,46
005966  3  06 05 FF 00  
00596A  3  06 01 01 12  
005983  3  2C 2C 2C 2D          .byte 44,44,44,45,0,0,12,255,0,16,1,1,17,18,17,18,17,18,18,19,17,18,19,255,0,19,1,1,18,17,19,18,18
005987  3  00 00 0C FF  
00598B  3  00 10 01 01  
0059A4  3  11 62 11 12          .byte 17,98,17,18,17,98,255,0,19,1,1,17,98,17,18,17,18,17,18,18,19,255,0,20,1,1,98,18,17,18,19,18,17
0059A8  3  11 62 FF 00  
0059AC  3  13 01 01 11  
0059C5  3  12 11 63 FF          .byte 18,17,99,255,0,11,46,44,44,44,45,255,0,4,1,1,17,18,17,18,17,98,17,18,98,255,0,12,37,17,98,17,19
0059C9  3  00 0B 2E 2C  
0059CD  3  2C 2C 2D FF  
0059E6  3  FF 00 04 01          .byte 255,0,4,1,1,18,19,18,17,17,18,17,18,255,0,15,12,255,0,5,12,1,1,98,18,17,18,17,18,19,98,255,0,4
0059EA  3  01 12 13 12  
0059EE  3  11 11 12 11  
005A08  3  2E FF 2C 04          .byte 46,255,44,4,45,255,0,12,1,1,18,98,18,17,18,17,18,255,0,5,17,18,99,17,98,19,255,0,4,12,255,0,7
005A0C  3  2D FF 00 0C  
005A10  3  01 01 12 62  
005A29  3  01 01 11 12          .byte 1,1,17,18,98,19,18,18,99,255,0,10,13,255,0,9,12,0,0,1,1,98,18,17,98,98,46,44,44,45,24,0,0,0
005A2D  3  62 13 12 12  
005A31  3  63 FF 00 0A  
005A4B  3  0D FF 00 08          .byte 13,255,0,8,13,255,0,7,1,14,255,1,30,14
005A4F  3  0D FF 00 07  
005A53  3  01 0E FF 01  
005A59  3  02 03 0D 0D          .byte 2,3,13,13,12,0,2,3,13,0,0,13,12,255,0,7,12,13,2,3,12,13,2,3,13,13,2,3,4,6,9,8,10
005A5D  3  0C 00 02 03  
005A61  3  0D 00 00 0D  
005A7A  3  0B 08 07 06          .byte 11,8,7,6,5,4,9,8,6,8,10,11,9,8,9,8,10,5,4,9,8,7,8,7,10,11,5,74,255,73,30,74,73
005A7E  3  05 04 09 08  
005A82  3  06 08 0A 0B  
005A9B  3  48 47 48 47          .byte 72,71,72,71,72,70,58,64,70,72,71,72,71,79,71,72,79,72,71,72,71,79,71,72,71,72,79,71,72,79,73,73,71
005A9F  3  48 46 3A 40  
005AA3  3  46 48 47 48  
005ABC  3  4F 48 48 50          .byte 79,72,72,80,78,58,64,78,79,80,79,78,80,79,79,70,70,70,80,79,78,79,71,72,70,71,72,72,72,73,73,72,70
005AC0  3  4E 3A 40 4E  
005AC4  3  4F 50 4F 4E  
005ADD  3  48 50 00 00          .byte 72,80,0,0,58,64,255,0,8,70,71,70,255,0,5,79,78,70,71,70,71,73,73,71,70,70,25,255,0,12,71,79,78
005AE1  3  3A 40 FF 00  
005AE5  3  08 46 47 46  
005AFE  3  FF 00 07 4E          .byte 255,0,7,78,72,72,79,73,73,79,77,255,75,9,76,0,0,0,70,79,255,0,10,79,71,71,73,73,71,72,79,72,71
005B02  3  48 48 4F 49  
005B06  3  49 4F 4D FF  
005B1F  3  48 4F 48 4F          .byte 72,79,72,79,71,72,70,58,64,72,81,78,255,0,10,101,72,72,73,73,79,71,71,70,79,71,72,71,71,72,79,78,58
005B23  3  47 48 46 3A  
005B27  3  40 48 51 4E  
005B40  3  40 46 18 FF          .byte 64,70,24,255,0,11,25,79,71,73,73,71,71,70,71,72,71,80,79,80,79,80,0,58,64,71,70,25,255,0,10,70,72
005B44  3  00 0B 19 4F  
005B48  3  47 49 49 47  
005B61  3  4F 49 49 4F          .byte 79,73,73,79,72,72,80,79,80,255,0,6,58,64,78,70,70,255,0,9,101,78,72,71,73,73,71,71,78,255,0,9,58
005B65  3  48 48 50 4F  
005B69  3  50 FF 00 06  
005B82  3  40 00 4E FF          .byte 64,0,78,255,0,9,101,70,72,71,79,73,73,79,78,255,0,10,58,255,0,4,20,255,0,8,78,70,70,71,73,73,255,0,16
005B86  3  00 09 65 46  
005B8A  3  48 47 4F 49  
005BA5  3  46 46 FF 00          .byte 70,70,255,0,8,24,78,72,72,73,73,255,0,16,78,70,255,0,8,70,72,71,71,73,73,75,76,255,0,14,70,79,255,0,8
005BA9  3  08 18 4E 48  
005BAD  3  48 49 49 FF  
005BC8  3  4F 4F 48 48          .byte 79,79,72,72,73,73,79,72,21,255,0,13,70,70,255,0,6,67,66,65,71,79,71,73,73,72,72,70,25,255,0,13,70
005BCC  3  49 49 4F 48  
005BD0  3  15 FF 00 0D  
005BE9  3  FF 00 08 41          .byte 255,0,8,65,71,71,72,73,73,71,79,70,71,70,25,22,23,24,255,0,6,77,75,76,24,0,0,0,25,0,0,0,65
005BED  3  47 47 48 49  
005BF1  3  49 47 4F 46  
005C0A  3  4E 47 47 49          .byte 78,71,71,73,73,79,72,71,77,255,75,4,76,58,64,77,255,75,4,76,70,72,58,64,77,255,75,6,76,72,73,73,71
005C0E  3  49 4F 48 47  
005C12  3  4D FF 4B 04  
005C2B  3  48 4F 48 4F          .byte 72,79,72,79,70,71,70,79,58,64,71,72,71,79,71,70,71,79,58,64,71,72,79,71,72,79,72,71,70,73,74,255,73,30
005C2F  3  46 47 46 4F  
005C33  3  3A 40 47 48  
005C4D  3  4A                   .byte 74
005C4E  3  02 03 0D 0D          .byte 2,3,13,13,12,0,2,3,13,0,0,13,12,255,0,7,12,13,2,3,12,13,2,3,13,13,2,3,4,6,9,8,10
005C52  3  0C 00 02 03  
005C56  3  0D 00 00 0D  
005C6F  3  0B 08 07 06          .byte 11,8,7,6,5,4,9,8,6,8,10,11,9,8,9,8,10,5,4,9,8,7,8,7,10,11,5,74,255,73,30,74,73
005C73  3  05 04 09 08  
005C77  3  06 08 0A 0B  
005C90  3  47 48 46 47          .byte 71,72,70,71,72,71,72,71,72,71,72,79,72,71,79,71,71,72,71,72,71,70,71,72,71,72,72,71,72,79,73,73,79
005C94  3  48 47 48 47  
005C98  3  48 47 48 4F  
005CB1  3  47 46 4F 50          .byte 71,70,79,80,79,78,79,71,70,71,72,71,72,71,72,79,80,79,78,70,71,70,70,71,72,79,72,71,72,73,73,71,70
005CB5  3  4F 4E 4F 47  
005CB9  3  46 47 48 47  
005CD2  3  FF 00 07 4E          .byte 255,0,7,78,79,80,79,79,80,78,255,0,5,79,78,78,80,79,79,71,71,72,73,73,72,78,255,0,25,78,70,71,73,73
005CD6  3  4F 50 4F 4F  
005CDA  3  50 4E FF 00  
005CF4  3  4F 19 00 00          .byte 79,25,0,0,24,255,75,4,76,24,255,0,17,78,70,73,73,72,70,58,64,70,71,70,71,72,77,75,75,76,24,0,0
005CF8  3  18 FF 4B 04  
005CFC  3  4C 18 FF 00  
005D15  3  19 FF 00 0C          .byte 25,255,0,12,78,73,73,71,72,58,64,78,0,78,80,79,81,71,70,77,255,75,5,76,24,255,0,10,73,73,72,79,58
005D19  3  4E 49 49 47  
005D1D  3  48 3A 40 4E  
005D36  3  40 FF 00 07          .byte 64,255,0,7,78,81,71,70,71,70,72,77,75,76,24,255,0,8,73,73,70,78,255,0,12,78,79,80,79,71,71,77,75
005D3A  3  4E 51 47 46  
005D3E  3  47 46 48 4D  
005D57  3  4C FF 00 07          .byte 76,255,0,7,73,73,70,70,255,0,17,71,79,71,79,255,0,4,24,77,75,73,73,70,77,75,75,76,24,0,0,25,255,0,6
005D5B  3  49 49 46 46  
005D5F  3  FF 00 11 47  
005D7A  3  43 42 41 00          .byte 67,66,65,0,79,70,71,70,0,0,77,75,75,76,70,73,73,71,72,72,70,77,255,75,6,76,255,0,5,65,0,0,71
005D7E  3  4F 46 47 46  
005D82  3  00 00 4D 4B  
005D9B  3  48 4F 3A 40          .byte 72,79,58,64,79,71,72,72,72,73,73,72,72,79,80,71,72,71,72,79,72,79,81,255,0,5,65,77,75,75,76,72,58
005D9F  3  4F 47 48 48  
005DA3  3  48 49 49 48  
005DBC  3  40 46 48 47          .byte 64,70,72,71,79,70,73,73,79,78,0,0,78,80,79,78,79,80,80,70,77,255,75,5,76,70,70,81,79,58,64,71,70
005DC0  3  4F 46 49 49  
005DC4  3  4F 4E 00 00  
005DDD  3  50 4F 4E 49          .byte 80,79,78,73,73,255,0,11,78,81,71,71,72,71,71,79,78,78,255,0,4,78,78,0,0,0,73,73,0,0,25,255,0,11
005DE1  3  49 FF 00 0B  
005DE5  3  4E 51 47 47  
005DFF  3  4E 4F 4E 50          .byte 78,79,78,80,255,0,12,73,73,255,75,7,76,24,0,0,0,25,255,0,10,24,255,0,5,25,73,73,79,72,72,71,72
005E03  3  FF 00 0C 49  
005E07  3  49 FF 4B 07  
005E20  3  47 4F 4D FF          .byte 71,79,77,255,75,22,73,73,71,72,71,79,70,71,72,70,72,71,70,71,72,79,72,72,71,72,71,79,71,72,71,72,71,71
005E24  3  4B 16 49 49  
005E28  3  47 48 47 4F  
005E42  3  46 4F 46 47          .byte 70,79,70,71,73,74,255,73,30,74
005E46  3  49 4A FF 49  
005E4A  3  1E 4A        
005E4C  3  02 03 0D 0D          .byte 2,3,13,13,12,0,2,3,13,0,0,13,12,255,0,7,12,13,2,3,12,13,2,3,13,13,2,3,4,6,9,8,10
005E50  3  0C 00 02 03  
005E54  3  0D 00 00 0D  
005E6D  3  0B 08 07 06          .byte 11,8,7,6,5,4,9,8,6,8,10,11,9,8,9,8,10,5,4,9,8,7,8,7,10,11,5,74,255,73,30,74,73
005E71  3  05 04 09 08  
005E75  3  06 08 0A 0B  
005E8E  3  48 46 4F 47          .byte 72,70,79,71,70,70,71,72,79,71,70,70,72,71,70,70,79,71,71,79,71,72,71,79,71,79,71,71,71,79,73,73,72,72
005E92  3  46 46 47 48  
005E96  3  4F 47 46 46  
005EB0  3  46 46 50 4F          .byte 70,70,80,79,70,81,0,78,81,79,78,80,79,79,70,78,78,79,71,70,79,71,70,70,72,79,72,71,73,73,79,71,70
005EB4  3  46 51 00 4E  
005EB8  3  51 4F 4E 50  
005ED1  3  51 00 00 4E          .byte 81,0,0,78,255,0,13,78,71,72,71,72,72,70,70,79,72,73,73,71,72,70,255,0,18,78,81,79,81,79,72,70,70
005ED5  3  FF 00 0D 4E  
005ED9  3  47 48 47 48  
005EF2  3  47 49 49 46          .byte 71,73,73,70,70,255,0,24,79,71,79,79,73,73,78,255,0,16,25,255,0,9,70,71,70,73,73,255,0,8,24,77,76
005EF6  3  46 FF 00 18  
005EFA  3  4F 47 4F 4F  
005F13  3  00 00 4D FF          .byte 0,0,77,255,75,6,76,24,0,0,0,25,0,78,71,72,73,73,255,0,6,24,77,75,76,79,58,64,70,71,79,71,79
005F17  3  4B 06 4C 18  
005F1B  3  00 00 00 19  
005F34  3  47 46 4D FF          .byte 71,70,77,255,75,7,76,70,73,73,25,0,0,0,24,77,75,75,76,79,72,58,64,79,79,72,70,80,81,79,71,70,71
005F38  3  4B 07 4C 46  
005F3C  3  49 49 19 00  
005F55  3  4F 46 4F 48          .byte 79,70,79,72,70,70,79,73,73,255,75,6,76,79,70,79,79,0,0,78,79,80,78,255,0,4,81,0,81,79,71,72,79
005F59  3  46 46 4F 49  
005F5D  3  49 FF 4B 06  
005F76  3  47 46 49 49          .byte 71,70,73,73,70,79,70,70,79,70,70,70,72,72,78,255,0,14,81,71,70,70,71,73,73,71,72,72,71,72,71,79,71
005F7A  3  46 4F 46 46  
005F7E  3  4F 46 46 46  
005F97  3  4F 48 48 66          .byte 79,72,72,102,47,255,0,13,81,70,71,70,73,73,71,72,79,80,81,79,71,70,72,72,71,70,47,255,0,14,79,70,71
005F9B  3  2F FF 00 0D  
005F9F  3  51 46 47 46  
005FB8  3  49 49 51 4F          .byte 73,73,81,79,255,0,4,70,79,70,79,72,70,71,255,0,14,70,70,70,73,73,255,0,7,79,72,70,71,58,78,255,0,13
005FBC  3  FF 00 04 46  
005FC0  3  4F 46 4F 48  
005FDA  3  18 4F 46 47          .byte 24,79,70,71,73,73,255,0,4,24,77,75,76,71,79,70,58,64,25,255,0,12,70,70,79,70,73,73,0,0,24,77,75,75
005FDE  3  49 49 FF 00  
005FE2  3  04 18 4D 4B  
005FFC  3  4C 46 46 46          .byte 76,70,70,70,71,58,64,72,20,255,0,10,70,79,72,71,71,73,73,255,75,5,76,70,70,25,79,72,58,64,70,79,255,0,9
006000  3  47 3A 40 48  
006004  3  14 FF 00 0A  
00601F  3  15 46 4F 4F          .byte 21,70,79,79,72,71,73,73,71,72,79,70,70,79,24,79,72,72,72,58,64,71,79,70,255,0,8,70,70,71,72,71,79
006023  3  48 47 49 49  
006027  3  47 48 4F 46  
006040  3  49 4A FF 49          .byte 73,74,255,73,30,74
006044  3  1E 4A        
006046  3  02 03 0D 0D          .byte 2,3,13,13,12,0,2,3,13,0,0,13,12,255,0,7,12,13,2,3,12,13,2,3,13,13,2,3,4,6,9,8,10
00604A  3  0C 00 02 03  
00604E  3  0D 00 00 0D  
006067  3  0B 08 07 06          .byte 11,8,7,6,5,4,9,8,6,8,10,11,9,8,9,8,10,5,4,9,8,7,8,7,10,11,5,74,255,73,30,74,73
00606B  3  05 04 09 08  
00606F  3  06 08 0A 0B  
006088  3  4F 47 48 47          .byte 79,71,72,71,79,72,70,71,79,80,70,71,72,71,79,70,79,80,80,70,78,71,72,71,71,72,79,72,70,71,73,73,72
00608C  3  4F 48 46 47  
006090  3  4F 50 46 47  
0060A9  3  46 46 00 00          .byte 70,70,0,0,79,70,71,70,0,0,78,79,78,255,0,8,78,80,78,80,79,72,78,70,73,73,72,70,255,0,4,78,78
0060AD  3  4F 46 47 46  
0060B1  3  00 00 4E 4F  
0060CA  3  00 00 00 43          .byte 0,0,0,67,66,65,255,0,14,21,70,73,73,79,81,255,0,11,65,255,0,14,70,71,73,73,72,20,255,0,11,65,255,0,13
0060CE  3  42 41 FF 00  
0060D2  3  0E 15 46 49  
0060ED  3  14 47 4F 49          .byte 20,71,79,73,73,70,70,255,0,7,77,75,75,75,76,255,0,13,70,70,71,73,73,72,70,255,0,7,37,72,71,72,70
0060F1  3  49 46 46 FF  
0060F5  3  00 07 4D 4B  
00610E  3  FF 00 0D 51          .byte 255,0,13,81,70,72,73,73,79,0,0,25,255,0,6,78,79,78,255,0,15,72,81,73,73,77,255,75,4,76,255,0,22
006112  3  46 48 49 49  
006116  3  4F 00 00 19  
00612F  3  46 47 49 49          .byte 70,71,73,73,71,79,72,72,71,79,58,64,255,0,20,81,72,73,73,79,71,70,70,71,79,58,64,255,0,21,70,73,73
006133  3  47 4F 48 48  
006137  3  47 4F 3A 40  
006150  3  48 48 4F 4E          .byte 72,72,79,78,80,0,58,64,255,0,21,79,73,73,70,70,255,0,4,58,64,255,0,21,71,73,73,72,81,255,0,4,58
006154  3  50 00 3A 40  
006158  3  FF 00 15 4F  
006171  3  40 FF 00 0E          .byte 64,255,0,14,25,255,0,6,78,73,73,79,255,0,5,58,64,255,0,11,77,75,75,75,76,24,255,0,5,73,73,71,24
006175  3  19 FF 00 06  
006179  3  4E 49 49 4F  
006192  3  FF 00 04 3A          .byte 255,0,4,58,255,0,12,37,71,79,70,77,75,75,76,24,0,0,73,73,71,70,255,0,4,58,64,255,0,12,79,72,71,71
006196  3  FF 00 0C 25  
00619A  3  47 4F 46 4D  
0061B4  3  46 47 4D 4B          .byte 70,71,77,75,75,75,73,73,70,79,25,0,0,0,58,64,255,0,13,71,71,70,71,79,70,71,72,71,73,73,71,70,70,70
0061B8  3  4B 4B 49 49  
0061BC  3  46 4F 19 00  
0061D6  3  00 00 3A 40          .byte 0,0,58,64,255,0,14,71,71,70,71,72,70,71,79,73,74,255,73,30,74
0061DA  3  FF 00 0E 47  
0061DE  3  47 46 47 48  
0061EB  3  02 03 0D 0D          .byte 2,3,13,13,12,0,2,3,13,0,0,13,12,255,0,7,12,13,2,3,12,13,2,3,13,13,2,3,4,6,9,8,10
0061EF  3  0C 00 02 03  
0061F3  3  0D 00 00 0D  
00620C  3  0B 08 07 06          .byte 11,8,7,6,5,4,9,8,6,8,10,11,9,8,9,8,10,5,4,9,8,7,8,7,10,11,5,74,255,73,30,74,73
006210  3  05 04 09 08  
006214  3  06 08 0A 0B  
00622D  3  47 48 47 48          .byte 71,72,71,72,71,72,79,71,72,71,70,71,72,71,72,72,71,70,71,71,70,71,70,71,71,72,79,72,71,79,73,73,72
006231  3  47 48 4F 47  
006235  3  48 47 46 47  
00624E  3  47 48 4F 4E          .byte 71,72,79,78,78,0,78,79,80,79,78,78,79,72,79,70,79,79,78,78,80,79,80,78,79,70,72,71,71,73,73,71,80
006252  3  4E 00 4E 4F  
006256  3  50 4F 4E 4E  
00626F  3  4E FF 00 0B          .byte 78,255,0,11,71,72,71,78,78,255,0,7,78,79,79,72,73,73,70,255,0,13,78,79,78,255,0,4,25,255,0,6,71
006273  3  47 48 47 4E  
006277  3  4E FF 00 07  
006290  3  4F 49 49 FF          .byte 79,73,73,255,0,5,25,255,0,13,77,255,75,4,76,58,64,72,70,71,73,73,70,0,0,77,75,75,75,76,0,0,25
006294  3  00 05 19 FF  
006298  3  00 0D 4D FF  
0062B1  3  FF 00 08 47          .byte 255,0,8,71,72,70,70,71,72,58,64,79,72,71,73,73,71,58,64,71,79,70,81,77,255,75,11,76,72,71,79,80,78
0062B5  3  48 46 46 47  
0062B9  3  48 3A 40 4F  
0062D2  3  3A 40 00 47          .byte 58,64,0,71,70,73,73,71,58,64,70,72,78,0,81,81,78,81,79,80,81,78,81,81,78,81,79,79,80,255,0,6,79
0062D6  3  46 49 49 47  
0062DA  3  3A 40 46 48  
0062F3  3  47 49 49 46          .byte 71,73,73,70,58,64,79,70,67,66,65,255,0,21,70,73,73,78,255,0,6,65,255,0,10,25,0,0,0,24,77,255,75,4
0062F7  3  3A 40 4F 46  
0062FB  3  43 42 41 FF  
006315  3  4C 47 49 49          .byte 76,71,73,73,72,255,0,6,65,255,0,4,24,77,255,75,9,76,79,70,80,81,79,70,73,73,79,77,255,75,5,76,0,0
006319  3  48 FF 00 06  
00631D  3  41 FF 00 04  
006337  3  4D 4B 4B 4C          .byte 77,75,75,76,70,71,72,79,72,70,72,71,72,80,78,255,0,5,73,73,72,72,79,70,71,72,71,72,58,64,71,79,71,71
00633B  3  46 47 48 4F  
00633F  3  48 46 48 47  
006359  3  4F 47 4F 4F          .byte 79,71,79,79,78,80,79,78,78,0,0,0,25,0,0,0,73,73,79,71,72,71,79,80,78,78,58,64,79,72,72,70,71
00635D  3  4E 50 4F 4E  
006361  3  4E 00 00 00  
00637A  3  4F FF 00 09          .byte 79,255,0,9,77,255,75,4,73,73,72,79,71,79,255,0,4,58,64,0,79,80,79,80,255,0,10,37,70,71,72,71,73,73
00637E  3  4D FF 4B 04  
006382  3  49 49 48 4F  
00639C  3  47 47 50 FF          .byte 71,71,80,255,0,22,70,71,72,79,72,73,73,72,70,0,25,255,0,5,24,77,75,76,25,24,77,75,75,76,24,0,0
0063A0  3  00 16 46 47  
0063A4  3  48 4F 48 49  
0063BD  3  19 00 00 4F          .byte 25,0,0,79,71,70,71,70,73,73,71,77,255,75,8,76,72,79,58,64,81,71,77,255,75,7,76,70,71,72,71,73,73
0063C1  3  47 46 47 46  
0063C5  3  49 49 47 4D  
0063DE  3  4F 48 48 47          .byte 79,72,72,71,72,79,72,71,71,72,71,72,71,58,64,70,79,72,71,72,79,72,71,72,71,71,79,72,71,79,73,74,255,73,30
0063E2  3  48 4F 48 47  
0063E6  3  47 48 47 48  
006401  3  4A                   .byte 74
006402  3  02 03 0D 0D          .byte 2,3,13,13,12,0,2,3,13,0,0,13,12,255,0,7,12,13,2,3,12,13,2,3,13,13,2,3,4,6,9,8,10
006406  3  0C 00 02 03  
00640A  3  0D 00 00 0D  
006423  3  0B 08 07 06          .byte 11,8,7,6,5,4,9,8,6,8,10,11,9,8,9,8,10,5,4,9,8,7,8,7,10,11,5,74,255,73,30,74,73
006427  3  05 04 09 08  
00642B  3  06 08 0A 0B  
006444  3  4F 48 47 46          .byte 79,72,71,70,78,79,71,71,70,70,72,72,79,58,64,79,72,71,70,70,79,78,79,80,79,70,71,71,79,70,73,73,72
006448  3  4E 4F 47 47  
00644C  3  46 46 48 48  
006465  3  47 4F 4E 00          .byte 71,79,78,0,0,0,79,78,78,70,70,72,58,64,72,70,71,80,78,255,0,5,78,71,70,71,71,73,73,72,79,255,0,8
006469  3  00 00 4F 4E  
00646D  3  4E 46 46 48  
006487  3  47 48 46 3A          .byte 71,72,70,58,64,78,79,80,255,0,9,79,70,71,73,73,70,255,0,9,79,72,80,255,0,15,71,70,73,73,71,70,255,0,9
00648B  3  40 4E 4F 50  
00648F  3  FF 00 09 4F  
0064AA  3  46 FF 00 10          .byte 70,255,0,16,70,70,73,73,79,80,0,0,0,25,255,0,5,79,77,75,75,75,76,255,0,11,78,71,73,73,71,72,77
0064AE  3  46 46 49 49  
0064B2  3  4F 50 00 00  
0064CB  3  FF 4B 04 4C          .byte 255,75,4,76,255,0,4,71,72,71,72,79,58,64,255,0,9,70,71,73,73,79,71,79,71,70,71,70,255,0,6,67,66
0064CF  3  FF 00 04 47  
0064D3  3  48 47 48 4F  
0064EC  3  41 00 3A 40          .byte 65,0,58,64,255,0,9,78,79,73,73,72,70,71,70,79,80,78,255,0,8,65,0,58,64,255,0,10,70,73,73,80,78
0064F0  3  FF 00 09 4E  
0064F4  3  4F 49 49 48  
00650D  3  4F 4E FF 00          .byte 79,78,255,0,11,65,0,58,64,255,0,10,71,73,73,70,255,0,8,24,77,255,75,5,76,58,64,255,0,9,20,70,73,73
006511  3  0B 41 00 3A  
006515  3  40 FF 00 0A  
00652F  3  48 19 FF 00          .byte 72,25,255,0,6,77,75,76,70,71,72,79,70,72,58,64,255,0,9,71,72,73,73,71,70,24,255,0,5,81,78,81,79
006533  3  06 4D 4B 4C  
006537  3  46 47 48 4F  
006550  3  50 4F 46 46          .byte 80,79,70,70,78,58,64,255,0,9,78,71,73,73,70,77,75,76,24,255,0,9,70,70,0,58,64,255,0,9,24,70,73,73
006554  3  4E 3A 40 FF  
006558  3  00 09 4E 47  
006572  3  48 47 48 4D          .byte 72,71,72,77,75,76,24,25,77,255,75,4,76,70,78,0,58,64,255,0,8,21,71,71,73,73,72,79,72,72,72,70,58
006576  3  4B 4C 18 19  
00657A  3  4D FF 4B 04  
006593  3  40 50 FF 46          .byte 64,80,255,70,4,81,255,0,13,71,70,70,73,73,72,71,79,71,70,70,58,64,72,70,70,78,0,0,0,25,255,0,10
006597  3  04 51 FF 00  
00659B  3  0D 47 46 46  
0065B4  3  19 47 46 4F          .byte 25,71,70,79,73,73,79,71,70,70,72,79,58,64,80,72,77,255,75,9,76,25,24,77,75,75,75,76,71,71,73,73,71
0065B8  3  49 49 4F 47  
0065BC  3  46 46 48 4F  
0065D5  3  46 46 46 47          .byte 70,70,70,71,72,58,64,70,71,72,70,71,79,71,72,71,72,71,71,70,58,64,70,71,72,79,72,71,72,73,74,255,73,30
0065D9  3  48 3A 40 46  
0065DD  3  47 48 46 47  
0065F7  3  4A                   .byte 74
0065F8  3  02 03 0D 0D          .byte 2,3,13,13,12,0,2,3,13,0,0,13,12,255,0,7,12,13,2,3,12,13,2,3,13,13,2,3,4,6,9,8,10
0065FC  3  0C 00 02 03  
006600  3  0D 00 00 0D  
006619  3  0B 08 07 06          .byte 11,8,7,6,5,4,9,8,6,8,10,11,9,8,9,8,10,5,4,9,8,7,8,7,10,11,5,74,255,73,30,74,73
00661D  3  05 04 09 08  
006621  3  06 08 0A 0B  
00663A  3  4E 47 46 46          .byte 78,71,70,70,70,71,58,64,71,72,70,72,71,79,70,72,72,70,72,72,72,58,64,255,71,4,79,71,79,73,73,71,70
00663E  3  46 47 3A 40  
006642  3  47 48 46 48  
00665B  3  4F 47 4E 47          .byte 79,71,78,71,58,64,79,78,78,0,78,71,70,79,70,71,72,78,70,58,64,70,70,78,72,71,71,71,73,73,71,79,70
00665F  3  3A 40 4F 4E  
006663  3  4E 00 4E 47  
00667C  3  48 48 46 3A          .byte 72,72,70,58,64,255,0,6,78,79,78,80,78,0,0,58,64,72,71,71,79,72,78,71,73,73,79,72,79,72,79,72,58
006680  3  40 FF 00 06  
006684  3  4E 4F 4E 50  
00669D  3  40 FF 00 0D          .byte 64,255,0,13,58,64,70,71,79,72,79,78,72,73,73,72,78,79,72,77,76,255,0,17,78,72,72,79,78,0,79,73,73
0066A1  3  3A 40 46 47  
0066A5  3  4F 48 4F 4E  
0066BE  3  4E 00 00 4E          .byte 78,0,0,78,70,79,255,0,17,70,72,80,78,0,0,0,73,73,255,0,4,70,77,75,76,24,0,0,0,25,255,0,6
0066C2  3  46 4F FF 00  
0066C6  3  11 46 48 50  
0066DF  3  18 4D 4B 4C          .byte 24,77,75,76,79,78,255,0,5,73,73,255,0,4,78,70,81,77,255,75,12,76,81,70,255,0,7,73,73,255,0,5,78
0066E3  3  4F 4E FF 00  
0066E7  3  05 49 49 FF  
006700  3  00 4F 4E 4F          .byte 0,79,78,79,70,81,79,80,78,81,79,70,78,79,70,0,78,255,0,7,73,73,255,0,10,78,255,0,6,78,0,0,78
006704  3  46 51 4F 50  
006708  3  4E 51 4F 46  
006721  3  FF 00 09 49          .byte 255,0,9,73,73,255,0,4,102,255,0,21,102,0,0,0,73,73,255,0,30,73,73,255,0,13,102,255,0,16,73,73,255,0,30
006725  3  49 FF 00 04  
006729  3  66 FF 00 15  
006744  3  49 49 FF 00          .byte 73,73,255,0,20,102,255,0,9,73,73,255,0,30,73,73,255,0,5,102,255,0,24,73,73,255,0,10,102,255,0,15,102
006748  3  14 66 FF 00  
00674C  3  09 49 49 FF  
006765  3  00 00 00 49          .byte 0,0,0,73,73,255,0,17,102,255,0,12,73,74,255,73,30,74
006769  3  49 FF 00 11  
00676D  3  66 FF 00 0C  
006777  3  02 03 0D 0D          .byte 2,3,13,13,12,0,2,3,13,0,0,13,12,255,0,7,12,13,2,3,12,13,2,3,13,13,2,3,4,6,9,8,10
00677B  3  0C 00 02 03  
00677F  3  0D 00 00 0D  
006798  3  0B 08 07 06          .byte 11,8,7,6,5,4,9,8,6,8,10,11,9,8,9,8,10,5,4,9,8,7,8,7,10,11,5,74,255,73,30,74,73
00679C  3  05 04 09 08  
0067A0  3  06 08 0A 0B  
0067B9  3  4F 48 47 46          .byte 79,72,71,70,0,0,58,64,255,0,14,70,71,72,79,72,71,72,79,73,73,72,71,70,81,0,0,58,64,255,0,15,70,70,70
0067BD  3  00 00 3A 40  
0067C1  3  FF 00 0E 46  
0067DC  3  47 4F 47 48          .byte 71,79,71,72,73,73,71,70,80,0,0,0,58,64,255,0,16,78,80,70,71,71,79,73,73,79,70,255,0,4,58,64,255,0,19
0067E0  3  49 49 47 46  
0067E4  3  50 00 00 00  
0067FF  3  46 47 48 49          .byte 70,71,72,73,73,71,70,255,0,4,58,64,255,0,7,25,255,0,12,79,71,73,73,70,70,255,0,4,58,64,255,0,5
006803  3  49 47 46 FF  
006807  3  00 04 3A 40  
006820  3  4D FF 4B 06          .byte 77,255,75,6,76,24,25,255,0,5,70,79,73,73,79,81,255,0,4,58,255,0,5,77,75,76,79,71,70,72,77,75,75,75
006824  3  4C 18 19 FF  
006828  3  00 05 46 4F  
006842  3  4C 18 00 00          .byte 76,24,0,0,0,79,71,73,73,72,255,0,5,58,64,0,0,0,77,75,76,81,0,78,80,79,81,79,78,77,255,75,4
006846  3  00 4F 47 49  
00684A  3  49 48 FF 00  
006863  3  4C 47 4F 49          .byte 76,71,79,73,73,70,255,0,6,64,0,0,0,81,79,81,255,0,8,78,79,72,71,72,79,79,71,73,73,79,20,255,0,22
006867  3  49 46 FF 00  
00686B  3  06 40 00 00  
006885  3  4E 48 47 4F          .byte 78,72,71,79,71,72,73,73,79,70,255,0,21,21,70,78,79,70,70,71,73,73,72,77,75,75,76,24,255,0,17,70,71,71
006889  3  47 48 49 49  
00688D  3  4F 46 FF 00  
0068A7  3  48 47 46 4F          .byte 72,71,70,79,73,73,71,70,71,71,77,75,75,76,24,255,0,14,79,70,67,66,65,70,71,73,73,72,79,70,80,78,81
0068AB  3  49 49 47 46  
0068AF  3  47 47 4D 4B  
0068C8  3  4F 4D 4B 4C          .byte 79,77,75,76,255,0,17,65,70,72,73,73,71,70,70,255,0,4,81,78,81,255,0,17,65,79,71,73,73,79,71,70,70
0068CC  3  FF 00 11 41  
0068D0  3  46 48 49 49  
0068E9  3  14 FF 00 07          .byte 20,255,0,7,25,255,0,8,25,77,255,75,5,76,72,73,73,79,78,71,77,255,75,19,76,79,71,72,71,72,71,73,73
0068ED  3  19 FF 00 08  
0068F1  3  19 4D FF 4B  
00690A  3  00 00 4F 47          .byte 0,0,79,71,70,70,79,71,72,71,70,70,79,70,71,72,79,72,72,70,72,70,71,72,71,79,72,79,72,79,73,73,0,0,0
00690E  3  46 46 4F 47  
006912  3  48 47 46 46  
00692D  3  4E 4F 48 4F          .byte 78,79,72,79,70,70,70,79,71,70,71,72,70,70,72,71,79,80,72,71,72,71,79,71,72,71,72,73,74,255,73,30,74
006931  3  46 46 46 4F  
006935  3  47 46 47 48  
00694E  3  02 03 0D 0D          .byte 2,3,13,13,12,0,2,3,13,0,0,13,12,255,0,7,12,13,2,3,12,13,2,3,13,13,2,3,4,6,9,8,10
006952  3  0C 00 02 03  
006956  3  0D 00 00 0D  
00696F  3  0B 08 07 06          .byte 11,8,7,6,5,4,9,8,6,8,10,11,9,8,9,8,10,5,4,9,8,7,8,7,10,11,5,74,255,73,30,74,73
006973  3  05 04 09 08  
006977  3  06 08 0A 0B  
006990  3  47 48 46 4E          .byte 71,72,70,78,79,78,70,72,70,80,70,58,64,70,70,70,255,0,8,70,70,80,70,79,70,73,73,78,70,72,255,70,4
006994  3  4F 4E 46 48  
006998  3  46 50 46 3A  
0069B1  3  47 48 46 51          .byte 71,72,70,81,58,64,70,70,255,0,12,70,70,70,73,73,70,70,79,70,71,70,81,79,70,0,70,58,64,79,255,0,15
0069B5  3  3A 40 46 46  
0069B9  3  FF 00 0C 46  
0069D2  3  4F 49 49 4F          .byte 79,73,73,79,81,70,78,255,70,4,79,70,70,58,64,255,0,16,70,73,73,255,70,4,81,78,0,70,0,81,70,58,64
0069D6  3  51 46 4E FF  
0069DA  3  46 04 4F 46  
0069F3  3  19 FF 00 0F          .byte 25,255,0,15,71,73,73,70,78,70,78,255,0,4,79,70,70,58,64,70,255,0,14,20,70,73,73,70,70,255,0,8,78
0069F7  3  47 49 49 46  
0069FB  3  4E 46 4E FF  
006A14  3  3A 40 46 46          .byte 58,64,70,70,0,0,25,255,0,10,70,70,73,73,70,81,255,0,11,79,70,77,75,75,75,76,24,0,0,0,24,77,75
006A18  3  00 00 19 FF  
006A1C  3  00 0A 46 46  
006A35  3  4C 47 48 49          .byte 76,71,72,73,73,79,255,0,13,70,79,70,70,79,77,255,75,5,76,70,79,70,79,73,73,70,255,0,7,24,77,75,75,75
006A39  3  49 4F FF 00  
006A3D  3  0D 46 4F 46  
006A57  3  4C 47 48 4E          .byte 76,71,72,78,78,0,79,79,70,80,70,70,80,78,0,79,70,73,73,70,77,76,24,0,0,0,77,75,75,76,79,70,79
006A5B  3  4E 00 4F 4F  
006A5F  3  46 50 46 46  
006A78  3  51 4F FF 00          .byte 81,79,255,0,7,78,0,0,0,25,70,70,73,73,71,71,77,75,76,58,64,79,70,79,70,70,70,255,0,14,71,79,70
006A7C  3  07 4E 00 00  
006A80  3  00 19 46 46  
006A99  3  49 49 48 51          .byte 73,73,72,81,71,79,71,58,64,70,70,0,81,255,0,14,79,80,70,72,79,73,73,78,70,81,0,81,58,64,71,79,255,0,20
006A9D  3  47 4F 47 3A  
006AA1  3  40 46 46 00  
006ABC  3  46 49 49 46          .byte 70,73,73,70,70,70,0,0,58,64,81,70,255,0,19,21,70,73,73,81,70,77,75,76,58,64,71,81,0,25,255,0,17
006AC0  3  46 46 00 00  
006AC4  3  3A 40 51 46  
006ADD  3  46 48 49 49          .byte 70,72,73,73,70,0,70,72,70,58,64,77,255,75,8,76,24,255,0,4,24,77,75,75,75,76,79,71,73,73,70,70,70
006AE1  3  46 00 46 48  
006AE5  3  46 3A 40 4D  
006AFE  3  51 48 3A 40          .byte 81,72,58,64,79,71,80,72,70,71,70,71,70,77,75,75,76,58,64,70,71,79,255,71,4,70,73,73,78,72,70,70,79
006B02  3  4F 47 50 48  
006B06  3  46 47 46 47  
006B1F  3  3A 40 4F 4E          .byte 58,64,79,78,79,70,79,78,81,80,71,70,70,79,70,58,64,79,79,70,72,79,79,70,79,73,74,255,73,30,74
006B23  3  4F 46 4F 4E  
006B27  3  51 50 47 46  
006B3E  3  02 03 0D 0D          .byte 2,3,13,13,12,0,2,3,13,0,0,13,12,255,0,7,12,13,2,3,12,13,2,3,13,13,2,3,4,6,9,8,10
006B42  3  0C 00 02 03  
006B46  3  0D 00 00 0D  
006B5F  3  0B 08 07 06          .byte 11,8,7,6,5,4,9,8,6,8,10,11,9,8,9,8,10,5,4,9,8,7,8,7,10,11,5,74,255,73,30,74,73
006B63  3  05 04 09 08  
006B67  3  06 08 0A 0B  
006B80  3  4F 47 4F 47          .byte 79,71,79,71,79,58,64,70,71,79,70,71,70,70,71,79,70,79,72,72,58,64,72,72,79,78,79,80,78,79,73,73,70
006B84  3  4F 3A 40 46  
006B88  3  47 4F 46 47  
006BA1  3  47 47 50 48          .byte 71,71,80,72,58,64,78,0,70,78,0,78,79,78,0,78,78,70,71,58,64,72,72,255,0,5,82,73,73,79,79,79,0
006BA5  3  3A 40 4E 00  
006BA9  3  46 4E 00 4E  
006BC2  3  4E 3A 40 FF          .byte 78,58,64,255,0,8,67,66,65,79,70,58,64,72,79,255,0,5,82,73,73,70,78,70,0,0,58,64,255,0,10,65,0
006BC6  3  00 08 43 42  
006BCA  3  41 4F 46 3A  
006BE3  3  4F 3A 40 4E          .byte 79,58,64,78,255,0,6,82,73,73,78,255,0,5,64,255,0,10,65,255,0,11,82,73,73,82,255,0,12,77,75,75,75
006BE7  3  FF 00 06 52  
006BEB  3  49 49 4E FF  
006C04  3  4C FF 00 05          .byte 76,255,0,5,25,255,0,5,82,73,73,82,255,0,12,81,78,79,71,70,0,0,77,75,75,75,76,255,0,4,82,73,73
006C08  3  19 FF 00 05  
006C0C  3  52 49 49 52  
006C25  3  52 FF 00 0A          .byte 82,255,0,10,79,80,255,0,4,78,0,0,81,79,71,71,79,255,0,4,82,73,73,82,255,0,21,79,79,255,0,5,101
006C29  3  4F 50 FF 00  
006C2D  3  04 4E 00 00  
006C46  3  49 49 52 FF          .byte 73,73,82,255,0,17,79,80,255,0,9,82,73,73,82,255,0,7,79,80,255,0,19,82,73,73,82,255,0,13,79,80,255,0,13
006C4A  3  00 11 4F 50  
006C4E  3  FF 00 09 52  
006C69  3  52 49 49 52          .byte 82,73,73,82,255,0,19,79,80,255,0,7,82,73,73,82,255,0,10,79,80,255,0,12,79,80,0,0,82,73,73,82,255,0,28
006C6D  3  FF 00 13 4F  
006C71  3  50 FF 00 07  
006C8C  3  52 49 49 FF          .byte 82,73,73,255,82,19,102,255,82,10,73,73,255,0,22,101,255,0,7,73,73,255,0,4,101,255,0,8,101,255,0,16,73,73
006C90  3  52 13 66 FF  
006C94  3  52 0A 49 49  
006CAE  3  FF 00 1C 65          .byte 255,0,28,101,0,73,74,255,73,30,74
006CB2  3  00 49 4A FF  
006CB6  3  49 1E 4A     
006CB9  3  02 03 0D 0D          .byte 2,3,13,13,12,0,2,3,13,0,0,13,12,255,0,7,12,13,2,3,12,13,2,3,13,13,2,3,4,6,9,8,10
006CBD  3  0C 00 02 03  
006CC1  3  0D 00 00 0D  
006CDA  3  0B 08 07 06          .byte 11,8,7,6,5,4,9,8,6,8,10,11,9,8,9,8,10,5,4,9,8,7,8,7,10,11,5,74,255,73,30,74,73
006CDE  3  05 04 09 08  
006CE2  3  06 08 0A 0B  
006CFB  3  47 4F 47 48          .byte 71,79,71,72,71,70,78,71,70,71,72,71,79,71,70,71,71,79,70,71,70,71,72,70,79,71,70,71,71,70,73,73,79
006CFF  3  47 46 4E 47  
006D03  3  46 47 48 47  
006D1C  3  48 46 4E 50          .byte 72,70,78,80,78,0,0,79,78,80,79,255,70,4,72,70,70,72,70,70,80,79,78,70,67,66,65,72,73,73,72,70,78
006D20  3  4E 00 00 4F  
006D24  3  4E 50 4F FF  
006D3D  3  FF 00 0B 4E          .byte 255,0,11,78,70,70,79,70,70,80,255,0,7,65,79,73,73,79,79,255,0,14,71,70,79,255,0,9,65,70,73,73,70
006D41  3  46 46 4F 46  
006D45  3  46 50 FF 00  
006D5E  3  FF 00 0F 46          .byte 255,0,15,70,70,255,0,6,77,255,75,4,76,73,73,80,255,0,15,78,255,0,5,58,64,70,79,70,70,79,79,73,73
006D62  3  46 FF 00 06  
006D66  3  4D FF 4B 04  
006D7F  3  FF 00 0C 19          .byte 255,0,12,25,255,0,9,58,64,78,79,78,78,0,0,73,73,25,0,0,25,0,0,0,24,77,255,75,4,76,24,255,0,15
006D83  3  FF 00 09 3A  
006D87  3  40 4E 4F 4E  
006DA1  3  49 49 FF 4B          .byte 73,73,255,75,8,76,81,78,70,77,255,75,4,76,24,255,0,11,73,73,70,71,79,70,72,71,71,70,81,0,0,0,37
006DA5  3  08 4C 51 4E  
006DA9  3  46 4D FF 4B  
006DC2  3  4F 50 47 46          .byte 79,80,71,70,77,75,75,75,76,24,0,0,0,24,77,75,75,73,73,79,72,81,70,79,70,78,255,0,9,78,78,81,78
006DC6  3  4D 4B 4B 4B  
006DCA  3  4C 18 00 00  
006DE3  3  4D FF 4B 07          .byte 77,255,75,7,76,70,73,73,0,78,0,78,255,0,16,81,79,71,70,79,70,72,79,70,78,73,73,255,0,22,78,78,0
006DE7  3  4C 46 49 49  
006DEB  3  00 4E 00 4E  
006E04  3  51 4E 00 4E          .byte 81,78,0,78,0,73,73,255,0,30,73,73,255,0,21,25,255,0,8,73,73,255,0,13,25,0,0,24,77,255,75,5,76
006E08  3  00 49 49 FF  
006E0C  3  00 1E 49 49  
006E25  3  18 FF 00 05          .byte 24,255,0,5,73,73,75,75,76,24,0,25,0,0,24,77,255,75,8,76,79,71,72,77,75,75,75,76,24,0,0,73,73
006E29  3  49 49 4B 4B  
006E2D  3  4C 18 00 19  
006E46  3  4F 4D FF 4B          .byte 79,77,255,75,9,76,71,72,70,71,72,70,72,71,79,71,72,70,72,77,255,75,4,73,73,71,70,71,72,79,71,70,71
006E4A  3  09 4C 47 48  
006E4E  3  46 47 48 46  
006E67  3  46 4F 46 46          .byte 70,79,70,70,70,72,71,79,71,71,70,71,71,72,70,79,72,71,71,79,71,70,73,74,255,73,30,74
006E6B  3  46 48 47 4F  
006E6F  3  47 47 46 47  
006E83  3  02 03 0D 0D          .byte 2,3,13,13,12,0,2,3,13,0,0,13,12,255,0,7,12,13,2,3,12,13,2,3,13,13,2,3,4,6,9,8,10
006E87  3  0C 00 02 03  
006E8B  3  0D 00 00 0D  
006EA4  3  0B 08 07 06          .byte 11,8,7,6,5,4,9,8,6,8,10,11,9,8,9,8,10,5,4,9,8,7,8,7,10,11,5,74,255,73,30,74,73
006EA8  3  05 04 09 08  
006EAC  3  06 08 0A 0B  
006EC5  3  46 47 4F 46          .byte 70,71,79,70,72,72,79,70,70,72,71,79,72,71,71,72,79,71,79,72,71,71,79,72,71,72,70,79,72,79,73,73,71
006EC9  3  48 48 4F 46  
006ECD  3  46 48 47 4F  
006EE6  3  48 4F 46 4E          .byte 72,79,70,78,0,78,78,79,71,79,0,78,79,78,79,71,71,72,71,79,70,78,78,78,79,78,70,72,71,73,73,79,78
006EEA  3  00 4E 4E 4F  
006EEE  3  47 4F 00 4E  
006F07  3  FF 00 04 43          .byte 255,0,4,67,66,65,78,255,0,6,78,80,78,79,78,255,0,7,71,79,73,73,72,255,0,7,65,255,0,19,70,71,73,73
006F0B  3  42 41 4E FF  
006F0F  3  00 06 4E 50  
006F29  3  4F FF 00 07          .byte 79,255,0,7,65,255,0,19,78,70,73,73,71,25,0,0,77,75,75,75,76,255,0,8,25,255,0,11,79,73,73,70,79
006F2D  3  41 FF 00 13  
006F31  3  4E 46 49 49  
006F4A  3  3A 40 4F 48          .byte 58,64,79,72,71,70,81,255,0,4,24,77,255,75,5,76,24,255,0,8,73,73,79,72,58,64,70,78,78,255,0,5,77
006F4E  3  47 46 51 FF  
006F52  3  00 04 18 4D  
006F6B  3  4B 4C 47 48          .byte 75,76,71,72,71,71,77,255,75,4,76,24,255,0,4,73,73,71,79,58,64,78,255,0,7,79,71,70,71,70,72,71,71
006F6F  3  47 47 4D FF  
006F73  3  4B 04 4C 18  
006F8C  3  48 47 4F 4D          .byte 72,71,79,77,255,75,6,73,73,72,71,58,64,255,0,7,64,72,70,71,79,255,78,4,71,72,71,72,79,71,72,71,72
006F90  3  FF 4B 06 49  
006F94  3  49 48 47 3A  
006FAD  3  47 49 49 47          .byte 71,73,73,71,79,58,64,255,0,4,77,76,58,64,78,71,80,255,0,5,79,71,70,72,79,78,79,70,71,79,73,73,71
006FB1  3  4F 3A 40 FF  
006FB5  3  00 04 4D 4C  
006FCE  3  48 3A 40 FF          .byte 72,58,64,255,0,4,71,70,58,64,71,80,255,0,7,78,78,78,0,0,0,78,78,0,73,73,72,80,58,64,255,0,4
006FD2  3  00 04 47 46  
006FD6  3  3A 40 47 50  
006FEF  3  46 4E 3A 40          .byte 70,78,58,64,72,70,255,0,16,73,73,71,70,58,64,255,0,5,70,58,64,71,79,255,0,16,73,73,79,78,58,255,0,6
006FF3  3  48 46 FF 00  
006FF7  3  10 49 49 47  
007011  3  51 3A 40 48          .byte 81,58,64,72,71,25,255,0,15,73,73,72,255,0,9,58,64,78,71,70,255,0,6,77,75,75,76,24,255,0,4,73,73
007015  3  47 19 FF 00  
007019  3  0F 49 49 48  
007032  3  48 15 FF 00          .byte 72,21,255,0,7,25,58,64,71,70,79,25,255,0,4,25,71,71,77,255,75,6,73,73,72,70,255,0,6,20,70,58,64
007036  3  07 19 3A 40  
00703A  3  47 46 4F 19  
007053  3  4E 46 47 46          .byte 78,70,71,70,25,58,64,25,71,72,71,79,71,71,79,78,71,70,73,73,70,80,255,0,6,71,78,58,64,72,78,72,79
007057  3  19 3A 40 19  
00705B  3  47 48 47 4F  
007074  3  48 3A 40 46          .byte 72,58,64,70,71,78,79,72,70,78,72,71,71,79,73,74,255,73,30,74
007078  3  47 4E 4F 48  
00707C  3  46 4E 48 47  
007088  3  02 03 0D 0D          .byte 2,3,13,13,12,0,2,3,13,0,0,13,12,255,0,7,12,13,2,3,12,13,2,3,13,13,2,3,4,6,9,8,10
00708C  3  0C 00 02 03  
007090  3  0D 00 00 0D  
0070A9  3  0B 08 07 06          .byte 11,8,7,6,5,4,9,8,6,8,10,11,9,8,9,8,10,5,4,9,8,7,8,7,10,11,5,74,255,73,30,74,73
0070AD  3  05 04 09 08  
0070B1  3  06 08 0A 0B  
0070CA  3  4F 48 47 48          .byte 79,72,71,72,79,72,79,72,71,80,79,79,78,79,80,78,78,79,72,71,72,71,79,71,79,72,71,70,79,70,73,73,72,72
0070CE  3  4F 48 4F 48  
0070D2  3  47 50 4F 4F  
0070EC  3  4F 47 46 47          .byte 79,71,70,71,71,72,79,255,0,9,79,78,80,79,78,79,72,79,70,72,70,79,73,73,79,72,72,71,80,78,78,80,255,0,16
0070F0  3  47 48 4F FF  
0070F4  3  00 09 4F 4E  
00710F  3  4E 4F FF 48          .byte 78,79,255,72,4,73,73,72,71,79,79,255,0,22,78,72,79,71,73,73,71,80,255,0,25,79,72,72,73,73,80,255,0,27
007113  3  04 49 49 48  
007117  3  47 4F 4F FF  
007131  3  4F 47 49 49          .byte 79,71,73,73,255,0,16,25,0,0,25,255,0,9,72,73,73,255,0,10,24,77,255,75,9,76,255,0,7,79,73,73,0,0
007135  3  FF 00 10 19  
007139  3  00 00 19 FF  
007153  3  19 00 00 00          .byte 25,0,0,0,24,77,75,75,75,76,81,79,78,71,72,70,81,81,79,80,255,0,7,72,73,73,255,75,7,76,79,80,81,81
007157  3  18 4D 4B 4B  
00715B  3  4B 4C 51 4F  
007175  3  00 00 00 4E          .byte 0,0,0,78,78,78,255,0,8,79,80,0,71,73,73,80,81,78,81,81,79,80,81,255,0,21,79,73,73,255,0,29,71
007179  3  4E 4E FF 00  
00717D  3  08 4F 50 00  
007196  3  49 49 FF 00          .byte 73,73,255,0,13,77,75,76,255,0,8,79,80,0,0,0,70,73,73,255,0,13,79,78,79,255,0,13,72,73,73,255,0,13
00719A  3  0D 4D 4B 4C  
00719E  3  FF 00 08 4F  
0071B8  3  19 46 48 FF          .byte 25,70,72,255,0,13,79,73,73,255,0,6,25,255,0,6,70,79,70,255,0,10,79,80,0,72,73,73,0,0,24,77,255,75,6
0071BC  3  00 0D 4F 49  
0071C0  3  49 FF 00 06  
0071DB  3  4C 00 00 48          .byte 76,0,0,72,72,78,255,0,13,79,73,73,75,75,75,76,81,79,80,81,70,81,79,58,64,79,78,255,0,14,71,73,73
0071DF  3  48 4E FF 00  
0071E3  3  0D 4F 49 49  
0071FC  3  4E 4F 51 51          .byte 78,79,81,81,255,0,7,58,64,255,0,11,79,80,0,0,0,70,73,74,255,73,30,74
007200  3  FF 00 07 3A  
007204  3  40 FF 00 0B  
007214  3  02 03 0D 0D          .byte 2,3,13,13,12,0,2,3,13,0,0,13,12,255,0,7,12,13,2,3,12,13,2,3,13,13,2,3,4,6,9,8,10
007218  3  0C 00 02 03  
00721C  3  0D 00 00 0D  
007235  3  0B 08 07 06          .byte 11,8,7,6,5,4,9,8,6,8,10,11,9,8,9,8,10,5,4,9,8,7,8,7,10,11,5,74,255,73,30,74,73
007239  3  05 04 09 08  
00723D  3  06 08 0A 0B  
007256  3  52 FF 00 0A          .byte 82,255,0,10,58,64,255,0,16,70,73,73,82,255,0,10,58,64,255,0,16,79,73,73,82,255,0,10,58,64,255,0,16
00725A  3  3A 40 FF 00  
00725E  3  10 46 49 49  
007277  3  46 49 49 52          .byte 70,73,73,82,255,0,10,58,64,255,0,13,79,80,0,82,73,73,82,255,0,28,82,73,73,82,255,0,28,82,73,73,82
00727B  3  FF 00 0A 3A  
00727F  3  40 FF 00 0D  
007298  3  FF 00 0A 4F          .byte 255,0,10,79,80,255,0,11,79,80,0,0,0,82,73,73,102,255,0,28,82,73,73,82,255,0,6,79,80,255,0,20,82
00729C  3  50 FF 00 0B  
0072A0  3  4F 50 00 00  
0072B9  3  49 49 52 FF          .byte 73,73,82,255,0,25,79,80,0,82,73,73,82,255,0,28,102,73,73,82,0,0,79,80,255,0,13,102,255,0,10,82,73,73
0072BD  3  00 19 4F 50  
0072C1  3  00 52 49 49  
0072DB  3  52 FF 00 1C          .byte 82,255,0,28,82,73,73,82,255,0,7,79,80,255,0,16,102,0,0,82,73,73,82,102,255,0,9,79,80,255,0,16,82
0072DF  3  52 49 49 52  
0072E3  3  FF 00 07 4F  
0072FC  3  49 49 FF 52          .byte 73,73,255,82,20,102,255,82,9,73,73,255,0,30,73,73,255,0,7,102,255,0,17,102,255,0,4,73,73,255,0,13,102
007300  3  14 66 FF 52  
007304  3  09 49 49 FF  
00731D  3  FF 00 10 49          .byte 255,0,16,73,74,255,73,30,74
007321  3  4A FF 49 1E  
007325  3  4A           
007326  3  02 03 0D 0D          .byte 2,3,13,13,12,0,2,3,13,0,0,13,12,255,0,7,12,13,2,3,12,13,2,3,13,13,2,3,4,6,9,8,10
00732A  3  0C 00 02 03  
00732E  3  0D 00 00 0D  
007347  3  0B 08 07 06          .byte 11,8,7,6,5,4,9,8,6,8,10,11,9,8,9,8,10,5,4,9,8,7,8,7,10,11,5,74,255,73,30,74,73
00734B  3  05 04 09 08  
00734F  3  06 08 0A 0B  
007368  3  50 FF 00 07          .byte 80,255,0,7,70,71,58,64,70,70,79,78,79,58,64,72,79,71,72,79,78,71,72,79,70,79,73,73,70,102,255,0,6
00736C  3  46 47 3A 40  
007370  3  46 46 4F 4E  
007389  3  4F 46 3A 40          .byte 79,70,58,64,71,79,0,0,70,58,64,70,79,80,78,0,0,0,79,79,71,70,73,73,72,255,0,8,78,58,64,78,71
00738D  3  47 4F 00 00  
007391  3  46 3A 40 46  
0073AA  3  46 00 4F 3A          .byte 70,0,79,58,64,70,78,255,0,6,78,71,79,73,73,79,255,0,9,58,64,0,0,79,71,70,58,64,78,255,0,8,78
0073AE  3  40 46 4E FF  
0073B2  3  00 06 4E 47  
0073CB  3  4F 49 49 48          .byte 79,73,73,72,102,255,0,8,58,64,0,0,0,71,70,255,0,12,70,73,73,71,70,255,0,13,78,78,25,255,0,11,70
0073CF  3  66 FF 00 08  
0073D3  3  3A 40 00 00  
0073EC  3  49 49 46 48          .byte 73,73,70,72,255,0,13,77,255,75,4,76,255,0,7,25,79,73,73,71,79,255,0,9,24,77,75,76,37,71,72,71,72
0073F0  3  FF 00 0D 4D  
0073F4  3  FF 4B 04 4C  
00740D  3  46 FF 00 05          .byte 70,255,0,5,77,75,75,76,73,73,79,255,0,8,24,77,75,75,76,81,0,78,79,78,80,78,255,0,5,37,70,71,70
007411  3  4D 4B 4B 4C  
007415  3  49 49 4F FF  
00742E  3  49 49 46 66          .byte 73,73,70,102,255,0,4,77,255,75,4,76,70,79,255,0,11,25,0,78,70,79,73,73,71,70,255,0,4,81,79,81,78
007432  3  FF 00 04 4D  
007436  3  FF 4B 04 4C  
00744F  3  51 4F 4E FF          .byte 81,79,78,255,0,10,77,255,75,4,76,71,73,73,79,72,255,0,21,71,70,79,70,70,71,79,73,73,71,79,0,79,80
007453  3  00 0A 4D FF  
007457  3  4B 04 4C 47  
007470  3  FF 00 12 4E          .byte 255,0,18,78,78,0,78,78,71,70,73,73,70,102,255,0,9,79,80,255,0,7,79,80,255,0,6,78,82,73,73,82,255,0,6
007474  3  4E 00 4E 4E  
007478  3  47 46 49 49  
007493  3  4F 50 FF 00          .byte 79,80,255,0,6,79,80,255,0,12,82,73,73,255,82,30,73,73,0,0,0,102,255,0,7,102,255,0,6,102,255,0,7
007497  3  06 4F 50 FF  
00749B  3  00 0C 52 49  
0074B4  3  66 00 00 00          .byte 102,0,0,0,73,73,255,0,7,102,255,0,22,73,73,255,0,14,102,255,0,9,102,255,0,4,102,73,74,255,73,30,74
0074B8  3  49 49 FF 00  
0074BC  3  07 66 FF 00  
0074D5  3  02 03 0D 0D          .byte 2,3,13,13,12,0,2,3,13,0,0,13,12,255,0,7,12,13,2,3,12,13,2,3,13,13,2,3,4,6,9,8,10
0074D9  3  0C 00 02 03  
0074DD  3  0D 00 00 0D  
0074F6  3  0B 08 07 06          .byte 11,8,7,6,5,4,9,8,6,8,10,11,9,8,9,8,10,5,4,9,8,7,8,7,10,11,5,74,255,73,30,74,73
0074FA  3  05 04 09 08  
0074FE  3  06 08 0A 0B  
007517  3  4F 46 46 4F          .byte 79,70,70,79,70,70,70,79,115,69,255,16,20,73,73,70,70,72,79,70,0,78,43,255,42,22,73,73,79,71,79,0,78
00751B  3  46 46 46 4F  
00751F  3  73 45 FF 10  
007538  3  00 00 02 03          .byte 0,0,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,73,73,70,80,255,0,5,43
00753C  3  02 03 02 03  
007540  3  02 03 02 03  
007559  3  FF 2A 16 49          .byte 255,42,22,73,73,79,70,255,0,7,68,255,63,20,73,73,70,78,255,0,8,68,255,63,19,73,73,78,255,0,10,68,255,63,18
00755D  3  49 4F 46 FF  
007561  3  00 07 44 FF  
00757C  3  49 49 46 FF          .byte 73,73,70,255,0,13,68,255,63,15,73,73,79,255,0,19,116,255,42,9,73,73,255,0,21,2,33,2,33,2,33,2,33
007580  3  00 0D 44 FF  
007584  3  3F 0F 49 49  
00759D  3  02 49 49 FF          .byte 2,73,73,255,0,22,116,255,42,7,73,73,255,0,24,116,255,114,5,73,73,255,0,21,118,119,119,119,255,114,5,73,73
0075A1  3  00 16 74 FF  
0075A5  3  2A 07 49 49  
0075BE  3  4B 4C FF 02          .byte 75,76,255,2,16,33,33,117,255,0,4,116,255,114,4,73,73,70,70,255,0,25,2,33,2,73,73,79,70,102,255,0,5
0075C2  3  10 21 21 75  
0075C6  3  FF 00 04 74  
0075DF  3  66 FF 00 10          .byte 102,255,0,16,101,70,70,71,79,73,73,72,80,0,0,0,102,255,0,8,102,255,0,5,102,0,0,0,101,70,72,79,70,70
0075E3  3  65 46 46 47  
0075E7  3  4F 49 49 48  
007601  3  49 49 47 4D          .byte 73,73,71,77,76,255,0,7,102,255,0,13,71,72,79,79,72,71,73,73,79,72,80,255,0,14,102,255,0,5,102,71,70
007605  3  4C FF 00 07  
007609  3  66 FF 00 0D  
007622  3  48 46 48 4F          .byte 72,70,72,79,73,74,255,73,30,74
007626  3  49 4A FF 49  
00762A  3  1E 4A        
00762C  3  02 03 0D 0D          .byte 2,3,13,13,12,0,2,3,13,0,0,13,12,255,0,7,12,13,2,3,12,13,2,3,13,13,2,3,4,6,9,8,10
007630  3  0C 00 02 03  
007634  3  0D 00 00 0D  
00764D  3  0B 08 07 06          .byte 11,8,7,6,5,4,9,8,6,8,10,11,9,8,9,8,10,5,4,9,8,7,8,7,10,11,5,74,255,73,30,74,73
007651  3  05 04 09 08  
007655  3  06 08 0A 0B  
00766E  3  4F 47 46 4F          .byte 79,71,70,79,70,71,71,71,70,58,64,71,71,70,79,81,78,79,71,58,64,72,71,79,72,79,71,71,79,71,73,73,70
007672  3  46 47 47 47  
007676  3  46 3A 40 47  
00768F  3  4F 47 47 4F          .byte 79,71,71,79,78,78,81,78,58,64,81,81,70,0,0,0,70,70,58,64,78,81,0,81,0,0,71,71,79,73,73,72,71,71
007693  3  4E 4E 51 4E  
007697  3  3A 40 51 51  
0076B1  3  4F FF 00 05          .byte 79,255,0,5,58,64,0,0,81,70,0,21,70,81,58,64,255,0,7,81,71,73,73,79,70,79,255,0,6,58,64,0,0,0
0076B5  3  3A 40 00 00  
0076B9  3  51 46 00 15  
0076D3  3  46 48 46 51          .byte 70,72,70,81,0,58,64,255,0,8,81,73,73,72,71,70,255,0,6,58,64,0,0,0,81,71,79,0,0,58,64,255,0,8
0076D7  3  00 3A 40 FF  
0076DB  3  00 08 51 49  
0076F5  3  46 49 49 47          .byte 70,73,73,71,71,78,255,0,6,58,64,255,0,4,70,71,70,70,58,64,255,0,8,79,73,73,79,78,255,0,13,78,70
0076F9  3  47 4E FF 00  
0076FD  3  06 3A 40 FF  
007716  3  00 4F 46 40          .byte 0,79,70,64,255,0,7,25,70,73,73,71,70,255,0,14,70,255,0,9,77,75,75,76,73,73,71,79,255,0,11,25,0,0
00771A  3  FF 00 07 19  
00771E  3  46 49 49 47  
007738  3  51 FF 00 08          .byte 81,255,0,8,77,76,71,72,81,73,73,80,70,255,0,5,77,255,75,13,76,0,0,77,76,79,71,78,0,73,73,70,71
00773C  3  4D 4C 47 48  
007740  3  51 49 49 50  
007759  3  48 00 00 3A          .byte 72,0,0,58,64,81,78,79,80,70,79,79,70,70,80,70,70,81,79,81,58,64,71,71,71,79,0,0,73,73,70,70,79
00775D  3  40 51 4E 4F  
007761  3  50 46 4F 4F  
00777A  3  48 00 3A 40          .byte 72,0,58,64,255,0,5,79,71,72,71,70,255,0,5,58,64,79,72,80,0,0,0,73,73,71,70,79,70,70,58,64,255,0,6
00777E  3  FF 00 05 4F  
007782  3  47 48 47 46  
00779D  3  46 46 4F 4E          .byte 70,70,79,78,255,0,5,58,64,71,71,255,0,4,73,73,79,25,0,78,78,79,64,255,0,6,78,78,255,0,7,58,64
0077A1  3  FF 00 05 3A  
0077A5  3  40 47 47 FF  
0077BE  3  48 4F FF 00          .byte 72,79,255,0,4,73,73,72,72,255,0,22,79,255,0,5,73,73,71,79,255,0,7,25,255,0,14,70,255,0,5,73,73
0077C2  3  04 49 49 48  
0077C6  3  48 FF 00 16  
0077DF  3  47 4D 4B 4C          .byte 71,77,75,76,24,24,77,255,75,5,76,24,255,0,4,24,77,255,75,5,76,255,0,4,73,73,79,70,71,77,75,75,76
0077E3  3  18 18 4D FF  
0077E7  3  4B 05 4C 18  
007800  3  4F 47 4F 47          .byte 79,71,79,71,77,255,75,8,76,71,71,72,70,81,255,0,4,73,73,71,71,79,71,72,70,72,71,70,71,79,71,71,79
007804  3  4D FF 4B 08  
007808  3  4C 47 47 48  
007821  3  47 48 47 46          .byte 71,72,71,70,71,79,70,72,71,79,78,255,0,5,73,74,255,73,30,74
007825  3  47 4F 46 48  
007829  3  47 4F 4E FF  
007835  3               numsc:
007835  3  1D                   .byte 29
007836  3               nmedat:
007836  3  08 08 60 50          .byte 8,8,96,80,255
00783A  3  FF           
00783B  3  08 08 58 78          .byte 8,8,88,120,255
00783F  3  FF           
007840  3  08 06 28 38          .byte 8,6,40,56,255
007844  3  FF           
007845  3  00 05 98 90          .byte 0,5,152,144,255
007849  3  FF           
00784A  3  02 0C 50 10          .byte 2,12,80,16,0,1,136,184,255
00784E  3  00 01 88 B8  
007852  3  FF           
007853  3  00 01 90 C8          .byte 0,1,144,200,1,17,72,32,2,12,48,8,255
007857  3  01 11 48 20  
00785B  3  02 0C 30 08  
007860  3  00 01 90 B0          .byte 0,1,144,176,1,17,152,80,2,12,32,56,255
007864  3  01 11 98 50  
007868  3  02 0C 20 38  
00786D  3  00 01 88 98          .byte 0,1,136,152,2,12,80,8,1,18,128,96,255
007871  3  02 0C 50 08  
007875  3  01 12 80 60  
00787A  3  00 04 88 30          .byte 0,4,136,48,3,14,128,232,255
00787E  3  03 0E 80 E8  
007882  3  FF           
007883  3  07 0A 98 D8          .byte 7,10,152,216,0,0,120,40,3,14,40,40,3,14,128,232,255
007887  3  00 00 78 28  
00788B  3  03 0E 28 28  
007894  3  00 01 80 D8          .byte 0,1,128,216,7,9,168,56,1,17,144,120,255
007898  3  07 09 A8 38  
00789C  3  01 11 90 78  
0078A1  3  00 00 A0 40          .byte 0,0,160,64,3,12,32,72,3,12,80,232,255
0078A5  3  03 0C 20 48  
0078A9  3  03 0C 50 E8  
0078AE  3  06 0B 98 C8          .byte 6,11,152,200,0,5,104,136,1,13,152,112,2,21,48,168,255
0078B2  3  00 05 68 88  
0078B6  3  01 0D 98 70  
0078BF  3  00 05 78 70          .byte 0,5,120,112,6,11,120,128,2,21,48,152,1,13,144,48,255
0078C3  3  06 0B 78 80  
0078C7  3  02 15 30 98  
0078D0  3  00 00 68 60          .byte 0,0,104,96,1,17,72,56,255
0078D4  3  01 11 48 38  
0078D8  3  FF           
0078D9  3  00 01 80 A8          .byte 0,1,128,168,6,11,56,96,2,21,128,32,4,21,48,208,255
0078DD  3  06 0B 38 60  
0078E1  3  02 15 80 20  
0078EA  3  00 04 68 10          .byte 0,4,104,16,1,20,64,80,6,11,104,48,1,13,152,184,5,15,104,32,255
0078EE  3  01 14 40 50  
0078F2  3  06 0B 68 30  
0078FF  3  00 00 40 30          .byte 0,0,64,48,6,11,96,112,2,21,96,136,1,20,128,88,1,20,152,120,255
007903  3  06 0B 60 70  
007907  3  02 15 60 88  
007914  3  00 01 40 B0          .byte 0,1,64,176,1,20,72,80,255
007918  3  01 14 48 50  
00791C  3  FF           
00791D  3  00 02 68 18          .byte 0,2,104,24,6,11,136,208,5,15,136,192,2,21,72,216,1,17,144,64,255
007921  3  06 0B 88 D0  
007925  3  05 0F 88 C0  
007932  3  00 00 68 20          .byte 0,0,104,32,5,16,112,208,1,13,72,216,1,20,144,80,255
007936  3  05 10 70 D0  
00793A  3  01 0D 48 D8  
007943  3  00 01 40 A8          .byte 0,1,64,168,6,11,56,128,3,21,168,72,4,21,112,192,2,21,160,8,255
007947  3  06 0B 38 80  
00794B  3  03 15 A8 48  
007958  3  00 05 30 C8          .byte 0,5,48,200,6,11,48,216,1,13,72,88,1,13,152,32,255
00795C  3  06 0B 30 D8  
007960  3  01 0D 48 58  
007969  3  00 01 50 D8          .byte 0,1,80,216,6,11,56,56,4,21,48,176,255
00796D  3  06 0B 38 38  
007971  3  04 15 30 B0  
007976  3  00 00 58 10          .byte 0,0,88,16,2,21,40,128,4,21,112,128,255
00797A  3  02 15 28 80  
00797E  3  04 15 70 80  
007983  3  00 01 58 D8          .byte 0,1,88,216,5,16,128,96,3,21,136,128,255
007987  3  05 10 80 60  
00798B  3  03 15 88 80  
007990  3  00 01 48 68          .byte 0,1,72,104,2,21,160,16,255
007994  3  02 15 A0 10  
007998  3  FF           
007999  3  00 00 78 10          .byte 0,0,120,16,255
00799D  3  FF           
00799E  3  00 01 58 70          .byte 0,1,88,112,1,13,152,120,255
0079A2  3  01 0D 98 78  
0079A6  3  FF           
0079A7  3               NUMOBJ = 1
0079A7  3               objdta:
0079A7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,56,120,254,56,120
0079AB  3  00 00 00 00  
0079AF  3  00 00 00 00  
0079CD  3               font:
0079CD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0079D1  3  00 00 00 00  
0079D5  3  00 10 10 10          .byte 0,16,16,16,0,16,0,0
0079D9  3  00 10 00 00  
0079DD  3  00 EE 00 00          .byte 0,238,0,0,0,0,0,0
0079E1  3  00 00 00 00  
0079E5  3  00 44 FE 44          .byte 0,68,254,68,254,68,0,0
0079E9  3  FE 44 00 00  
0079ED  3  0F 00 7D 41          .byte 15,0,125,65,7,71,65,125
0079F1  3  07 47 41 7D  
0079F5  3  F0 00 BE 82          .byte 240,0,190,130,224,226,130,190
0079F9  3  E0 E2 82 BE  
0079FD  3  01 03 06 0D          .byte 1,3,6,13,27,55,111,222
007A01  3  1B 37 6F DE  
007A05  3  80 C0 60 B0          .byte 128,192,96,176,216,172,118,251
007A09  3  D8 AC 76 FB  
007A0D  3  00 00 00 07          .byte 0,0,0,7,63,124,112,0
007A11  3  3F 7C 70 00  
007A15  3  00 1C FC F0          .byte 0,28,252,240,192,0,0,0
007A19  3  C0 00 00 00  
007A1D  3  00 00 7E 4F          .byte 0,0,126,79,94,88,120,0
007A21  3  5E 58 78 00  
007A25  3  00 00 48 FF          .byte 0,0,72,255,118,68,0,0
007A29  3  76 44 00 00  
007A2D  3  3C 5E 5F 5F          .byte 60,94,95,95,111,51,12,3
007A31  3  6F 33 0C 03  
007A35  3  78 FC FC FC          .byte 120,252,252,252,252,248,224,128
007A39  3  FC F8 E0 80  
007A3D  3  00 00 00 00          .byte 0,0,0,0,56,0,0,0
007A41  3  38 00 00 00  
007A45  3  00 06 08 10          .byte 0,6,8,16,32,192,0,0
007A49  3  20 C0 00 00  
007A4D  3  00 7C 8A 92          .byte 0,124,138,146,162,124,0,0
007A51  3  A2 7C 00 00  
007A55  3  00 30 D0 10          .byte 0,48,208,16,16,254,0,0
007A59  3  10 FE 00 00  
007A5D  3  00 FC 02 7C          .byte 0,252,2,124,128,254,0,0
007A61  3  80 FE 00 00  
007A65  3  00 FE 02 1C          .byte 0,254,2,28,2,252,0,0
007A69  3  02 FC 00 00  
007A6D  3  00 0C 30 C4          .byte 0,12,48,196,254,4,0,0
007A71  3  FE 04 00 00  
007A75  3  00 FE 80 FC          .byte 0,254,128,252,2,252,0,0
007A79  3  02 FC 00 00  
007A7D  3  00 7E 80 FC          .byte 0,126,128,252,130,124,0,0
007A81  3  82 7C 00 00  
007A85  3  00 FE 02 0C          .byte 0,254,2,12,48,192,0,0
007A89  3  30 C0 00 00  
007A8D  3  00 7C 82 7C          .byte 0,124,130,124,130,124,0,0
007A91  3  82 7C 00 00  
007A95  3  00 7C 82 7E          .byte 0,124,130,126,2,252,0,0
007A99  3  02 FC 00 00  
007A9D  3  00 00 38 00          .byte 0,0,56,0,56,0,0,0
007AA1  3  38 00 00 00  
007AA5  3  00 00 00 00          .byte 0,0,0,0,0,0,12,48
007AA9  3  00 00 0C 30  
007AAD  3  00 06 18 60          .byte 0,6,24,96,24,6,0,0
007AB1  3  18 06 00 00  
007AB5  3  00 00 FE 00          .byte 0,0,254,0,254,0,0,0
007AB9  3  FE 00 00 00  
007ABD  3  00 60 18 06          .byte 0,96,24,6,24,96,0,0
007AC1  3  18 60 00 00  
007AC5  3  00 FC 02 3C          .byte 0,252,2,60,0,56,0,0
007AC9  3  00 38 00 00  
007ACD  3  00 F8 04 72          .byte 0,248,4,114,138,118,0,0
007AD1  3  8A 76 00 00  
007AD5  3  00 10 28 44          .byte 0,16,40,68,124,130,0,0
007AD9  3  7C 82 00 00  
007ADD  3  00 FC 82 FC          .byte 0,252,130,252,130,252,0,0
007AE1  3  82 FC 00 00  
007AE5  3  00 7C 82 80          .byte 0,124,130,128,130,124,0,0
007AE9  3  82 7C 00 00  
007AED  3  00 F8 84 82          .byte 0,248,132,130,130,252,0,0
007AF1  3  82 FC 00 00  
007AF5  3  00 FE 80 FE          .byte 0,254,128,254,128,254,0,0
007AF9  3  80 FE 00 00  
007AFD  3  00 FE 80 FE          .byte 0,254,128,254,128,128,0,0
007B01  3  80 80 00 00  
007B05  3  00 7E 80 BE          .byte 0,126,128,190,130,126,0,0
007B09  3  82 7E 00 00  
007B0D  3  00 82 82 FE          .byte 0,130,130,254,130,130,0,0
007B11  3  82 82 00 00  
007B15  3  00 FE 10 10          .byte 0,254,16,16,16,254,0,0
007B19  3  10 FE 00 00  
007B1D  3  00 02 02 02          .byte 0,2,2,2,2,252,0,0
007B21  3  02 FC 00 00  
007B25  3  00 86 98 E0          .byte 0,134,152,224,152,134,0,0
007B29  3  98 86 00 00  
007B2D  3  00 80 80 80          .byte 0,128,128,128,128,254,0,0
007B31  3  80 FE 00 00  
007B35  3  00 82 C6 AA          .byte 0,130,198,170,146,130,0,0
007B39  3  92 82 00 00  
007B3D  3  00 C2 A2 92          .byte 0,194,162,146,138,134,0,0
007B41  3  8A 86 00 00  
007B45  3  00 7C 82 82          .byte 0,124,130,130,130,124,0,0
007B49  3  82 7C 00 00  
007B4D  3  00 FC 82 FC          .byte 0,252,130,252,128,128,0,0
007B51  3  80 80 00 00  
007B55  3  00 7C 82 82          .byte 0,124,130,130,132,122,0,0
007B59  3  84 7A 00 00  
007B5D  3  00 FC 82 FC          .byte 0,252,130,252,152,134,0,0
007B61  3  98 86 00 00  
007B65  3  00 7E 80 7C          .byte 0,126,128,124,2,252,0,0
007B69  3  02 FC 00 00  
007B6D  3  00 FE 10 10          .byte 0,254,16,16,16,16,0,0
007B71  3  10 10 00 00  
007B75  3  00 82 82 82          .byte 0,130,130,130,130,124,0,0
007B79  3  82 7C 00 00  
007B7D  3  00 82 82 44          .byte 0,130,130,68,40,16,0,0
007B81  3  28 10 00 00  
007B85  3  00 82 92 AA          .byte 0,130,146,170,198,130,0,0
007B89  3  C6 82 00 00  
007B8D  3  00 C6 28 10          .byte 0,198,40,16,40,198,0,0
007B91  3  28 C6 00 00  
007B95  3  00 82 44 28          .byte 0,130,68,40,16,16,0,0
007B99  3  10 10 00 00  
007B9D  3  00 FE 08 10          .byte 0,254,8,16,32,254,0,0
007BA1  3  20 FE 00 00  
007BA5  3  00 7E 40 40          .byte 0,126,64,64,64,64,126,0
007BA9  3  40 40 7E 00  
007BAD  3  00 C0 20 10          .byte 0,192,32,16,8,6,0,0
007BB1  3  08 06 00 00  
007BB5  3  00 7E 02 02          .byte 0,126,2,2,2,2,126,0
007BB9  3  02 02 7E 00  
007BBD  3  6C FE 80 FE          .byte 108,254,128,254,128,254,0,0
007BC1  3  80 FE 00 00  
007BC5  3  00 00 00 00          .byte 0,0,0,0,0,255,0,0
007BC9  3  00 FF 00 00  
007BCD  3  00 9C A2 E2          .byte 0,156,162,226,162,156,0,0
007BD1  3  A2 9C 00 00  
007BD5  3  00 10 28 44          .byte 0,16,40,68,124,130,0,0
007BD9  3  7C 82 00 00  
007BDD  3  00 FE 80 FC          .byte 0,254,128,252,130,252,0,0
007BE1  3  82 FC 00 00  
007BE5  3  00 82 82 82          .byte 0,130,130,130,130,255,1,0
007BE9  3  82 FF 01 00  
007BED  3  00 3E 42 42          .byte 0,62,66,66,66,255,0,0
007BF1  3  42 FF 00 00  
007BF5  3  00 FE 80 FE          .byte 0,254,128,254,128,254,0,0
007BF9  3  80 FE 00 00  
007BFD  3  00 7C 92 7C          .byte 0,124,146,124,16,16,0,0
007C01  3  10 10 00 00  
007C05  3  00 FE 80 80          .byte 0,254,128,128,128,128,0,0
007C09  3  80 80 00 00  
007C0D  3  00 C6 28 10          .byte 0,198,40,16,40,198,0,0
007C11  3  28 C6 00 00  
007C15  3  00 86 8A 92          .byte 0,134,138,146,162,194,0,0
007C19  3  A2 C2 00 00  
007C1D  3  38 86 8A 92          .byte 56,134,138,146,162,194,0,0
007C21  3  A2 C2 00 00  
007C25  3  00 86 98 E0          .byte 0,134,152,224,152,134,0,0
007C29  3  98 86 00 00  
007C2D  3  00 3E 42 82          .byte 0,62,66,130,130,130,0,0
007C31  3  82 82 00 00  
007C35  3  00 82 C6 AA          .byte 0,130,198,170,146,130,0,0
007C39  3  92 82 00 00  
007C3D  3  00 82 82 FE          .byte 0,130,130,254,130,130,0,0
007C41  3  82 82 00 00  
007C45  3  00 7C 82 82          .byte 0,124,130,130,130,124,0,0
007C49  3  82 7C 00 00  
007C4D  3  00 FE 82 82          .byte 0,254,130,130,130,130,0,0
007C51  3  82 82 00 00  
007C55  3  00 7E 82 7E          .byte 0,126,130,126,50,194,0,0
007C59  3  32 C2 00 00  
007C5D  3  00 FC 82 FC          .byte 0,252,130,252,128,128,0,0
007C61  3  80 80 00 00  
007C65  3  00 7C 82 80          .byte 0,124,130,128,130,124,0,0
007C69  3  82 7C 00 00  
007C6D  3  00 FE 10 10          .byte 0,254,16,16,16,16,0,0
007C71  3  10 10 00 00  
007C75  3  00 82 44 28          .byte 0,130,68,40,16,224,0,0
007C79  3  10 E0 00 00  
007C7D  3  00 92 92 7C          .byte 0,146,146,124,146,146,0,0
007C81  3  92 92 00 00  
007C85  3  00 FC 82 FC          .byte 0,252,130,252,130,252,0,0
007C89  3  82 FC 00 00  
007C8D  3  00 80 80 FC          .byte 0,128,128,252,130,252,0,0
007C91  3  82 FC 00 00  
007C95  3  00 82 82 FA          .byte 0,130,130,250,134,250,0,0
007C99  3  86 FA 00 00  
007C9D  3  00 FC 02 1C          .byte 0,252,2,28,2,252,0,0
007CA1  3  02 FC 00 00  
007CA5  3  00 92 92 92          .byte 0,146,146,146,146,254,0,0
007CA9  3  92 FE 00 00  
007CAD  3  00 FC 02 1E          .byte 0,252,2,30,2,252,0,0
007CB1  3  02 FC 00 00  
007CB5  3  00 92 92 92          .byte 0,146,146,146,146,255,1,0
007CB9  3  92 FF 01 00  
007CBD  3  00 82 82 7E          .byte 0,130,130,126,2,2,0,0
007CC1  3  02 02 00 00  
007CC5  3  00 C0 40 7C          .byte 0,192,64,124,66,124,0,0
007CC9  3  42 7C 00 00  
007CCD  3               jtab:
007CCD  3  F8 FA FC FE          .byte 248,250,252,254,254,255,255,255,0,0,0,1,1,1,2,2,4,6,8,8,8,99
007CD1  3  FE FF FF FF  
007CD5  3  00 00 00 01  
007CE3  3  14 24 63 04  keys:   .byte 20,36,99,4,144,35,117,33,17,1,146
007CE7  3  90 23 75 21  
007CEB  3  11 01 92     
007CEE  3               
007CEE  2               
007CEE  1               	.include "z80.asm"
007CEE  2               ;------------------------------------------------------
007CEE  2               ; z80.asm
007CEE  2               ; spectrum stuff
007CEE  2               ; adresses
007CEE  2               
007CEE  2               
007CEE  2               ; Contains seperatly 1 bit set
007CEE  2               
007CEE  2               _bitmem0	= $f8
007CEE  2               _bitmem1	= $f9
007CEE  2               _bitmem2	= $fa
007CEE  2               _bitmem3	= $fb
007CEE  2               _bitmem4	= $fc
007CEE  2               _bitmem5	= $fd
007CEE  2               _bitmem6	= $fe
007CEE  2               _bitmem7	= $ff
007CEE  2               
007CEE  2               ; constants
007CEE  2               _bitvalue0	= $01
007CEE  2               _bitvalue1	= $02
007CEE  2               _bitvalue2	= $04
007CEE  2               _bitvalue3	= $08
007CEE  2               _bitvalue4	= $10
007CEE  2               _bitvalue5	= $20
007CEE  2               _bitvalue6	= $40
007CEE  2               _bitvalue7	= $80
007CEE  2               
007CEE  2               _notbitvalue0	= $fe
007CEE  2               _notbitvalue1	= $fd
007CEE  2               _notbitvalue2	= $fb
007CEE  2               _notbitvalue3	= $f7
007CEE  2               _notbitvalue4	= $ef
007CEE  2               _notbitvalue5	= $df
007CEE  2               _notbitvalue6	= $bf
007CEE  2               _notbitvalue7	= $7f
007CEE  2               
007CEE  2               
007CEE  2               exx:
007CEE  2  A5 62        		lda z80_c
007CF0  2  A4 6E        		ldy z80_cp
007CF2  2  84 62        		sty z80_c
007CF4  2  85 6E        		sta z80_cp
007CF6  2  A5 63        		lda z80_b
007CF8  2  A4 6F        		ldy z80_bp
007CFA  2  84 63        		sty z80_b
007CFC  2  85 6F        		sta z80_bp
007CFE  2  A5 64        		lda z80_e
007D00  2  A4 70        		ldy z80_ep
007D02  2  84 64        		sty z80_e
007D04  2  85 70        		sta z80_ep
007D06  2  A5 65        		lda z80_d
007D08  2  A4 71        		ldy z80_dp
007D0A  2  84 65        		sty z80_d
007D0C  2  85 71        		sta z80_dp
007D0E  2  A5 rr        		lda scraddr
007D10  2  A4 72        		ldy z80_lp
007D12  2  84 rr        		sty scraddr
007D14  2  85 72        		sta z80_lp
007D16  2  A5 rr        		lda scraddr+1
007D18  2  A4 73        		ldy z80_hp
007D1A  2  84 rr        		sty scraddr+1
007D1C  2  85 73        		sta z80_hp
007D1E  2  60           		rts
007D1F  2               
007D1F  2               
007D1F  1               eind_asm:
007D1F  1               eop:					; End Of Program
007D1F  1               
