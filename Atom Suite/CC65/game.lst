ca65 V2.17 - Git d13d068
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2017
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $0220
000000r 1               	.DEFINE header   1		; Header Wouter Ras emulator
000000r 1               	.DEFINE filenaam "AGD"
000000r 1               
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               mflag = 1 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               cflag = 0 ;
000000r 2               oflag = 1 ;
000000r 2               lflag = 1 ;
000000r 2               
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "z80-zp.inc"
000000r 2               ;.segment "ZEROPAGE"
000000r 2               
000000r 2               ws	 = $60
000000r 2               
000000r 2               z80_f	 = ws+$00
000000r 2               z80_a	 = ws+$01
000000r 2               z80_af	 = z80_f
000000r 2               
000000r 2               z80_c	 = ws+$02
000000r 2               z80_b	 = ws+$03
000000r 2               z80_bc	 = z80_c
000000r 2               
000000r 2               z80_e	 = ws+$04
000000r 2               z80_d	 = ws+$05
000000r 2               z80_de	 = z80_e
000000r 2               
000000r 2               z80_l	 = ws+$06
000000r 2               z80_h	 = ws+$07
000000r 2               z80_hl	 = z80_l
000000r 2               
000000r 2               z80_x    = ws+$08
000000r 2               z80_i    = ws+$09
000000r 2               z80_ix	 = z80_x
000000r 2               
000000r 2               z80_iy	 = ws+$0a
000000r 2               
000000r 2               z80_fp	 = ws+$0c
000000r 2               z80_ap	 = ws+$0d
000000r 2               
000000r 2               z80_cp	 = ws+$0e
000000r 2               z80_bp	 = ws+$0f
000000r 2               z80_bcp	 = z80_cp
000000r 2               
000000r 2               z80_ep	 = ws+$10
000000r 2               z80_dp	 = ws+$11
000000r 2               z80_dep	 = z80_ep
000000r 2               
000000r 2               z80_lp	 = ws+$12
000000r 2               z80_hp	 = ws+$13
000000r 2               z80_hlp	 = z80_lp
000000r 2               
000000r 2               z80_sp   = ws+$14
000000r 2               
000000r 2               z80_reg0 = ws+$16
000000r 2               z80_reg1 = ws+$17
000000r 2               z80_reg2 = ws+$18
000000r 2               z80_reg3 = ws+$19
000000r 2               
000000r 2               z80_r	 = ws+$1a
000000r 2               
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        	; last random number.
00001Er 2  xx           varobj:	.res 1  	   	; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:	    .res 1
00002Br 2  xx           loopb:	    .res 1
00002Cr 2  xx           loopc:	    .res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2               
000037r 2  xx xx        tmp:        .res 2
000039r 2  xx xx        scr_l:      .res 2
00003Br 2  xx xx        scr_r:      .res 2
00003Dr 2  xx xx        scr_txt:    .res 2
00003Fr 2               
00003Fr 2  xx           xtmp:	    .res 1
000040r 2  xx           spcnt:	    .res 1
000041r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000043r 2  xx           seed:	    .res 1		; seed for random numbers.
000044r 2               
000044r 2  xx           ccnt:       .res 1
000045r 2  xx           flag:	    .res 1
000046r 2  xx           rcol:	    .res 1
000047r 2  xx           rrow:	    .res 1
000048r 2               
000048r 2  xx           combyt:	    .res 1		; byte type compressed.
000049r 2  xx           comcnt:	    .res 1		; compression counter.
00004Ar 2  xx           prtmod:	    .res 1      	; print mode, 0 = standard, 1 = double-height.
00004Br 2  xx           qscnt:	    .res 1
00004Cr 2               
00004Cr 2  xx           sprptr:	    .res 1      	; not a ptr
00004Dr 2  xx           sprcnt:	    .res 1
00004Er 2               
00004Er 2  xx xx        skptr:	    .res 2		; search pointer.
000050r 2  xx           sktptr:	    .res 1      	; not a ptr
000051r 2  xx           tmproom:    .res 1
000052r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000054r 2               
000054r 2               .if mflag
000054r 2  xx xx        TmpAddr:    .res 2
000056r 2  xx           bwid:	    .res 1     		; box/menu width.
000057r 2  xx           blen:	    .res 1     		; box/menu height.
000058r 2  xx           btop:	    .res 1    	 	; box coordinates.
000059r 2  xx           blft:	    .res 1
00005Ar 2               .endif
00005Ar 2               
00005Ar 2               .if pflag
00005Ar 2               shrctr:	    .res 1
00005Ar 2               explcnt:    .res 1
00005Ar 2               seed3:	    .res 1
00005Ar 2               .endif
00005Ar 2               
00005Ar 1               
00005Ar 1               .segment "CODE"
000000r 1               
000000r 1               .if header
000000r 1               ;********************************************************************
000000r 1               ; ATM Header for Atom emulator Wouter Ras
000000r 1               
000000r 1               .org asm_code-22*header
00020A  1               name_start:
00020A  1  41 47 44     	.byte filenaam			; Filename
00020D  1               name_end:
00020D  1  00 00 00 00  	.repeat 16-name_end+name_start	; Fill with 0 till 16 chars
000211  1  00 00 00 00  
000215  1  00 00 00 00  
00021A  1               	  .byte $0
00021A  1               	.endrep
00021A  1               
00021A  1  20 02        	.word asm_code			; 2 bytes startaddress
00021C  1  20 02        	.word exec			; 2 bytes linkaddress
00021E  1  9E 6C        	.word eind_asm-start_asm	; 2 bytes filelength
000220  1               
000220  1               ;********************************************************************
000220  1               .else
000220  1               .org asm_code
000220  1               .endif
000220  1               
000220  1               exec:
000220  1               start_asm:
000220  1               	.include "game.inc"
000220  2               .include "foggy.inc"
000220  3               ; Game engine code --------------------------------------------------------------
000220  3               
000220  3               ; Arcade Game Designer.
000220  3               ; (C) 2008 Jonathan Cauldwell.
000220  3               ; ZX Spectrum Next Engine v0.1.
000220  3               
000220  3               ; Global definitions ------------------------------------------------------------
000220  3               
000220  3               	FONT = font		; Font address
000220  3               
000220  3               ; Block characteristics.
000220  3               
000220  3               	PLATFM = 1		; platform.
000220  3               	WALL = PLATFM + 1	; solid wall.
000220  3               	LADDER = WALL + 1	; ladder.
000220  3               	FODDER = LADDER + 1	; fodder block.
000220  3               	DEADLY = FODDER + 1	; deadly block.
000220  3               	CUSTOM = DEADLY + 1	; custom block.
000220  3               	WATER  = CUSTOM + 1	; water block.
000220  3                       COLECT = WATER + 1      ; collectable block.
000220  3                       NUMTYP = COLECT + 1     ; number of types.
000220  3               
000220  3               ; Sprites.
000220  3               
000220  3               	NUMSPR = 12		; number of sprites.
000220  3               	TABSIZ = 17		; size of each entry.
000220  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
000220  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
000220  3               	var_X  = 8		; new x coordinate of sprite.
000220  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
000220  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
000220  3               
000220  3               ; Particle engine.
000220  3               
000220  3               	NUMSHR = 55		; pieces of shrapnel.
000220  3               	SHRSIZ = 6		; bytes per particle.
000220  3               
000220  3               ; Local vars
000220  3               
000220  3               ;	scraddr	= $80
000220  3               ;	fntaddr	= $82
000220  3               ;	tileaddr= $84
000220  3               ;	bufaddr	= $86
000220  3               ;	tmp     = $88
000220  3               
000220  3               ;	scr_l	= $90
000220  3               ;	scr_r	= $92
000220  3               ;	scr_txt	= $94
000220  3               	pbptr	= $96		; Needed for Adventuremode
000220  3               
000220  3               ; System constants
000220  3               
000220  3               	ScreenAddr  = $8000	; Startaddress video RAM
000220  3               	ScrSelAddr  = $b000	; Screen selection address
000220  3               	KeyRowAddr  = $b000	; PIA key matrix row
000220  3               	KeyColAddr  = $b001	; PIA key matrix column
000220  3               	SpeakerBit  = $b002	; Speaker bit
000220  3               	CmdReg      = $b400	; Command register AtoMMC
000220  3               	DatReg      = $b401	; Data register AtoMMC
000220  3               	Timer2_Low  = $b808	; Timer 2 low byte
000220  3               	Timer2_High = $b809	; Timer 2 high byte
000220  3               
000220  3               ; System calls
000220  3               
000220  3               	SCRSYNC	 = $fe66	; wait for next CRT field flyback 60 Hz
000220  3               	SCRSYNC1 = $fe6b	; wait for CRT field flyback 60 Hz
000220  3               	OSRDCH   = $fe94	; get key subroutine
000220  3                       READKEY  = $fe71	; scan key matrix subroutine
000220  3               
000220  3               ; Conditional compilation flags
000220  3               ; Flags are set in commandline assembly
000220  3               
000220  3               ; Flags set by AGD compiler
000220  3               ;	mflag  			; MENU + INV
000220  3               ;	pflag 			; particle engine
000220  3               ;	sflag 			; scrollytext
000220  3               ;	dflag 			; digging mode
000220  3               ;	cflag			; collectable blocks
000220  3               ;	oflag			; objects
000220  3               ;	lflag			; ladders
000220  3               ;
000220  3               ; Flags set manually
000220  3               ;	iflag			; invert mode
000220  3               ;	aflag			; adventure mode
000220  3               ;	hflag			; hidden sprite mode
000220  3               
000220  3               .if mflag
000220  3                .out "- MEN/INV enabled"
000220  3               .endif
000220  3               .if pflag
000220  3                .out "- Particles enabled"
000220  3               .endif
000220  3               .if sflag
000220  3                .out "- Scrolling enabled"
000220  3               .endif
000220  3               .if dflag
000220  3                .out "- Digging enabled"
000220  3               .endif
000220  3               .if cflag
000220  3                .out "- Collectable blocks enabled"
000220  3               .endif
000220  3               .if oflag
000220  3                .out "- Objects enabled"
000220  3               .endif
000220  3               .if lflag
000220  3                .out "- Ladders enabled"
000220  3               .endif
000220  3               .if iflag
000220  3                .out "- Invert mode enabled"
000220  3               .endif
000220  3               .if aflag
000220  3                .out "- Adventure mode enabled"
000220  3               .endif
000220  3               .if hflag
000220  3                .out "- Hidden sprites/foregroundblocks enabled"
000220  3               .endif
000220  3               
000220  3               .if iflag
000220  3               	TxtInvert   = $ff	; Invert byte for character printing
000220  3               	ScrFillByte = $ff	; Screen fill byte for CLS
000220  3               .else
000220  3               	TxtInvert   = $00	; Invert byte for character printing
000220  3               	ScrFillByte = $00	; Screen fill byte for CLS
000220  3               .endif
000220  3               
000220  3               	ScrMode     = $f0	; Screen mode:
000220  3               				;  $d0 = CLEAR4a colour
000220  3               				;  $f0 = CLEAR4  mono
000220  3               
000220  3               ;===============================================================
000220  3               ; Game starts here
000220  3               ;===============================================================
000220  3               
000220  3               .segment "CODE"
000220  3               
000220  3               ;--------------------------------------------------------------
000220  3               ; If a font is required...
000220  3               ;--------------------------------------------------------------
000220  3               
000220  3               ;	lda #<(FONT-256)	; address of font.
000220  3               ;	sta #<(FONT-256)r
000220  3               ;	lda #>(FONT-256)
000220  3               ;	sta #>(FONT-256)
000220  3               
000220  3  20 85 05     	jsr game	 	; start the game.
000223  3  A9 0C        	lda #12			; Clear screen + exit to Basic
000225  3  4C F4 FF     	jmp $fff4
000228  3               
000228  3               ;contrl:	.byte 0			; control, 0 = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000228  3               ;joyval:	.byte 0			; joystick reading.
000228  3               ;frmno:	.byte 0			; selected frame.
000228  3               
000228  3               ; Don't change the order of these four.
000228  3               ; Menu routine relies on winlft following wintop.
000228  3               
000228  3  00           wintop:	.byte WINDOWTOP		; top of window.
000229  3  02           winlft:	.byte WINDOWLFT		; left edge.
00022A  3  14           winhgt:	.byte WINDOWHGT		; window height.
00022B  3  1C           winwid:	.byte WINDOWWID		; window width.
00022C  3  14           numob:	.byte NUMOBJ		; number of objects in game.
00022D  3               
00022D  3               ; Variables start here.
00022D  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
00022D  3               
00022D  3  00           wntopx:	.byte (8 * WINDOWTOP)
00022E  3  10           wnlftx:	.byte (8 * WINDOWLFT)
00022F  3  90           wnbotx:	.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
000230  3  DE           wnrgtx:	.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
000231  3               
000231  3               ;scno:	.byte 0			; present screen number.
000231  3               ;numlif:	.byte 3			; number of lives.
000231  3               
000231  3               ;vara:	.byte 0			; general-purpose variable.
000231  3               ;varb:	.byte 0			; general-purpose variable.
000231  3               ;varc:	.byte 0			; general-purpose variable.
000231  3               ;vard:	.byte 0			; general-purpose variable.
000231  3               ;vare:	.byte 0			; general-purpose variable.
000231  3               ;varf:	.byte 0			; general-purpose variable.
000231  3               ;varg:	.byte 0			; general-purpose variable.
000231  3               ;varh:	.byte 0			; general-purpose variable.
000231  3               ;vari:	.byte 0			; general-purpose variable.
000231  3               ;varj:	.byte 0			; general-purpose variable.
000231  3               ;vark:	.byte 0			; general-purpose variable.
000231  3               ;varl:	.byte 0			; general-purpose variable.
000231  3               ;varm:	.byte 0			; general-purpose variable.
000231  3               ;varn:	.byte 0			; general-purpose variable.
000231  3               ;varo:	.byte 0			; general-purpose variable.
000231  3               ;varp:	.byte 0			; general-purpose variable.
000231  3               ;varq:	.byte 0			; general-purpose variable.
000231  3               ;varr:	.byte 0			; general-purpose variable.
000231  3               ;vars:	.byte 0			; general-purpose variable.
000231  3               ;vart:	.byte 0			; general-purpose variable.
000231  3               ;varu:	.byte 0			; general-purpose variable.
000231  3               ;varv:	.byte 0			; general-purpose variable.
000231  3               ;varw:	.byte 0			; general-purpose variable.
000231  3               ;varz:	.byte 0			; general-purpose variable.
000231  3               
000231  3               ;charx:	.byte 0			; cursor x position.
000231  3               ;chary:	.byte 0			; cursor y position.
000231  3               
000231  3               ;clock:	.byte 0			; last clock reading.
000231  3               ;varrnd:	.byte 255		; last random number.
000231  3               ;varobj:	.byte 254		; last object number.
000231  3               ;varopt:	.byte 255		; last option chosen from menu.
000231  3               ;varblk:	.byte 255		; block type.
000231  3               ;nexlev:	.byte 0			; next level flag.
000231  3               ;restfl:	.byte 0			; restart screen flag.
000231  3               ;deadf:	.byte 0			; dead flag.
000231  3               ;gamwon:	.byte 0			; game won flag.
000231  3               ;dispx:	.byte 0			; cursor x position.
000231  3               ;dispy:	.byte 0			; cursor y position.
000231  3               
000231  3               ; Make sure pointers are arranged in the same order as the data itself.
000231  3               
000231  3  EB 43        frmptr:	.word frmlst         ; sprite frames.
000233  3               
000233  3               ; Assorted game routines which can go in contended memory.
000233  3               
000233  3               ;--------------------------------------------------------------
000233  3               ; Modify for inventory.
000233  3               ; called by the INV command
000233  3               ;
000233  3               ; Input:
000233  3               ;  X   = message nr with objects seperated with ,
000233  3               ;
000233  3               ; Output:
000233  3               ;  OPT = selected line nr of INV menu
000233  3               ;--------------------------------------------------------------
000233  3               
000233  3               .if mflag
000233  3               minve:
000233  3  A9 3E        	lda #<(invdis)		; routine address.
000235  3  8D 17 03     	sta mod0+1		; set up menu routine.
000238  3  8D 8C 02     	sta mod2+1		; set up count routine.
00023B  3  A9 04        	lda #>(invdis)
00023D  3  8D 18 03     	sta mod0+2
000240  3  8D 8D 02     	sta mod2+2
000243  3  A9 54        	lda #<(fopt)		; find option from available objects.
000245  3  8D BB 03     	sta mod1+1		; set up routine.
000248  3  A9 04        	lda #>(fopt)
00024A  3  8D BC 03     	sta mod1+1+1
00024D  3  4C 6A 02     	jmp dbox		; do menu routine.
000250  3               
000250  3               ;--------------------------------------------------------------
000250  3               ; Modify for menu.
000250  3               ; called by the MENU command
000250  3               ;
000250  3               ; Input:
000250  3               ;  X   = message nr with menu items seperated with ,
000250  3               ;
000250  3               ; Output:
000250  3               ;  OPT = selected line nr of MENU menu
000250  3               ;--------------------------------------------------------------
000250  3               
000250  3               mmenu:
000250  3  A9 0A        	lda #<(always)		; routine address.
000252  3  8D 17 03     	sta mod0+1		; set up routine.
000255  3  8D 8C 02     	sta mod2+1		; set up count routine.
000258  3  A9 0E        	lda #>(always)
00025A  3  8D 18 03     	sta mod0+2
00025D  3  8D 8D 02     	sta mod2+2
000260  3               
000260  3  A9 E7        	lda #<(fstd)		; standard option selection.
000262  3  8D BB 03     	sta mod1+1		; set up routine.
000265  3  A9 03        	lda #>(fstd)
000267  3  8D BC 03     	sta mod1+2
00026A  3               
00026A  3               ; Drop through into box routine.
00026A  3               
00026A  3               ;--------------------------------------------------------------
00026A  3               ; Work out size of box for message or menu.
00026A  3               ;--------------------------------------------------------------
00026A  3               
00026A  3               dbox:
00026A  3  A9 76        	lda #<(msgdat)		; pointer to messages.
00026C  3  85 66        	sta z80_l
00026E  3  A9 29        	lda #>(msgdat)
000270  3  85 67        	sta z80_h
000272  3               
000272  3  20 5D 11     	jsr getwrd		; get message number.
000275  3               
000275  3  A5 67        	lda z80_h		; store pointer to message.
000277  3  85 rr        	sta TmpAddr
000279  3  A5 66        	lda z80_l
00027B  3  85 rr        	sta TmpAddr+1
00027D  3               
00027D  3  A9 01        	lda #1			; height.
00027F  3  85 65        	sta z80_d
000281  3  A9 00        	lda #0			; start at object zero.
000283  3  85 rr        	sta combyt		; store number of object in combyt.
000285  3  85 64        	sta z80_e		; maximum width.
000287  3               dbox5:
000287  3  A9 00        	lda #0			; this line"s width.
000289  3  85 63        	sta z80_b
00028B  3               mod2:
00028B  3  20 0A 0E     	jsr always		; item in player"s possession?
00028E  3  C9 FF        	cmp #255
000290  3  D0 02        	bne dbox6		; not in inventory, skip this line.
000292  3  E6 65        	inc z80_d		; add to tally.
000294  3               dbox6:
000294  3  A0 00        	ldy #0			; get character.
000296  3  B1 66        	lda (z80_hl),y
000298  3  85 61        	sta z80_a
00029A  3  E6 66        	inc z80_l		; next character.
00029C  3  D0 02        	bne :+
00029E  3  E6 67        	inc z80_h
0002A0  3               :
0002A0  3  A5 61        	lda z80_a		; reached end of line?
0002A2  3  C9 2C        	cmp #','
0002A4  3  F0 0D        	beq dbox3		; yes.
0002A6  3  C9 0D        	cmp #13
0002A8  3  F0 09        	beq dbox3		; yes.
0002AA  3  E6 63        	inc z80_b		; add to this line"s width.
0002AC  3  A5 61        	lda z80_a
0002AE  3  30 10        	bmi dbox4		; end of message? yes, end count.
0002B0  3  4C 94 02     	jmp dbox6		; repeat until we find the end.
0002B3  3               dbox3:
0002B3  3  A5 64        	lda z80_e		; maximum line width.
0002B5  3  C5 63        	cmp z80_b		; have we exceeded longest so far?
0002B7  3  10 CE        	bpl dbox5		; no, carry on looking.
0002B9  3  A5 63        	lda z80_b		; make this the widest so far.
0002BB  3  85 64        	sta z80_e
0002BD  3  4C 87 02     	jmp dbox5		; keep looking.
0002C0  3               dbox4:
0002C0  3  A5 64        	lda z80_e		; maximum line width.
0002C2  3  C5 63        	cmp z80_b		; have we exceeded longest so far?
0002C4  3  10 04        	bpl dbox8		; no, carry on looking.
0002C6  3  A5 63        	lda z80_b		; final line is the longest so far.
0002C8  3  85 64        	sta z80_e
0002CA  3               dbox8:
0002CA  3  C6 65        	dec z80_d		; decrement items found.
0002CC  3  D0 03        	bne :+			; total was zero.
0002CE  3  4C 11 04     	jmp dbox15
0002D1  3               :
0002D1  3  A5 64        	lda z80_e		; longest line.
0002D3  3  D0 03        	bne :+			; was it zero?
0002D5  3  4C 11 04     	jmp dbox15		; total was zero.
0002D8  3               :
0002D8  3  85 rr        	sta bwid		; set up size.
0002DA  3  A5 65        	lda z80_d
0002DC  3  85 rr        	sta blen
0002DE  3               
0002DE  3               ;--------------------------------------------------------------
0002DE  3               ; That's set up our box size.
0002DE  3               ;--------------------------------------------------------------
0002DE  3               
0002DE  3  AD 2A 02     	lda winhgt		; window height in characters.
0002E1  3  38           	sec
0002E2  3  E5 65        	sbc z80_d		; subtract height of box.
0002E4  3  4A           	lsr a			; divide by 2.
0002E5  3  18           	clc
0002E6  3  6D 28 02     	adc wintop		; add top edge of window.
0002E9  3  85 rr        	sta btop		; set up box top.
0002EB  3               
0002EB  3  AD 2B 02     	lda winwid		; window width in characters.
0002EE  3  38           	sec
0002EF  3  E5 64        	sbc z80_e		; subtract box width.
0002F1  3  4A           	lsr a			; divide by 2.
0002F2  3  18           	clc
0002F3  3  6D 29 02     	adc winlft		; add left edge of window.
0002F6  3  85 rr        	sta blft		; box left.
0002F8  3               
0002F8  3  A9 6C        	lda #<(FONT-256)		; font.
0002FA  3  8D 9A 09     	sta grbase		; set up for text display.
0002FD  3  A9 6A        	lda #>(FONT-256)
0002FF  3  8D 9B 09     	sta grbase+1
000302  3               
000302  3  A5 rr        	lda TmpAddr+1		; restore message pointer.
000304  3  85 66        	sta z80_l
000306  3  A5 rr        	lda TmpAddr
000308  3  85 67        	sta z80_h
00030A  3               
00030A  3  A5 rr        	lda btop		; box top.
00030C  3  85 rr        	sta dispy		; set display coordinate.
00030E  3  A9 00        	lda #0			; start at object zero.
000310  3  85 rr        	sta combyt		; store number of object in combyt.
000312  3               dbox2:
000312  3  A5 rr        	lda combyt		; get object number.
000314  3  85 61        	sta z80_a
000316  3               mod0:
000316  3  20 0A 0E     	jsr always		; check inventory for display.
000319  3  C9 FF        	cmp #255
00031B  3  F0 03        	beq :+
00031D  3  4C F1 03     	jmp dbox13		; not in inventory, skip this line.
000320  3               :
000320  3  A5 rr        	lda blft		; box left.
000322  3  85 rr        	sta dispx		; set left display position.
000324  3  A5 rr        	lda bwid		; box width.
000326  3  85 63        	sta z80_b		; store width.
000328  3               dbox0:
000328  3  A0 00        	ldy #0
00032A  3  B1 66        	lda (z80_hl),y		; get character.
00032C  3  C9 2C        	cmp #','		; end of line?
00032E  3  F0 59        	beq dbox1		; yes, next one.
000330  3  C9 0D        	cmp #13			; end of line?
000332  3  F0 55        	beq dbox1		; yes, next one.
000334  3               
000334  3  C9 8D        	cmp #141			; end of line?
000336  3  D0 05        	bne :+
000338  3  C6 rr        	dec bwid
00033A  3  4C 97 03     	jmp dbox7		; yes, next one.
00033D  3               :
00033D  3  C6 63        	dec z80_b		; one less to display.
00033F  3  29 7F        	and #127		; remove terminator.
000341  3               
000341  3  20 D0 0B     	jsr pchr		; display on screen.
000344  3               
000344  3  A0 00        	ldy #0
000346  3  B1 66        	lda (z80_hl),y		; get character.
000348  3  85 61        	sta z80_a
00034A  3  E6 66        	inc z80_l		; next character.
00034C  3  D0 02        	bne :+
00034E  3  E6 67        	inc z80_h
000350  3               :
000350  3  A5 61        	lda z80_a
000352  3  C9 80        	cmp #128		; end of message?
000354  3  30 03        	bmi :+
000356  3  4C 97 03     	jmp dbox7		; yes, job done.
000359  3               :
000359  3  A5 63        	lda z80_b		; chars remaining.
00035B  3  F0 03        	beq :+			; are any left?
00035D  3  4C 28 03     	jmp dbox0		; yes, continue.
000360  3               :
000360  3               ;---------------------------------------------------
000360  3               ; Reached limit of characters per line.
000360  3               ;---------------------------------------------------
000360  3               
000360  3               dbox9:
000360  3  A0 00        	ldy #0
000362  3  B1 66        	lda (z80_hl),y		; get character.
000364  3  E6 66        	inc z80_l		; next one.
000366  3  D0 02        	bne :+
000368  3  E6 67        	inc z80_h
00036A  3               :
00036A  3  C9 2C        	cmp #','		; another line?
00036C  3  F0 24        	beq dbox10		; yes, do next line.
00036E  3  C9 0D        	cmp #13			; another line?
000370  3  F0 20        	beq dbox10		; yes, do next line.
000372  3  C9 80        	cmp #128		; end of message?
000374  3  B0 03        	bcs :+
000376  3  4C A1 03     	jmp dbox11		; yes, finish message.
000379  3               :
000379  3  4C 60 03     	jmp dbox9
00037C  3               
00037C  3               ;---------------------------------------------------
00037C  3               ; Fill box to end of line.
00037C  3               ;---------------------------------------------------
00037C  3               
00037C  3               dboxf:
00037C  3  A9 20        	lda #32			; space character.
00037E  3  20 D0 0B     	jsr pchr		; display character.
000381  3  C6 63        	dec z80_b
000383  3  F0 03        	beq :+
000385  3  4C 7C 03     	jmp dboxf		; repeat for remaining chars on line.
000388  3               :
000388  3  60           	rts
000389  3               dbox1:
000389  3  E6 66        	inc z80_l		; skip character.
00038B  3  D0 02        	bne :+
00038D  3  E6 67        	inc z80_h
00038F  3               :
00038F  3  20 7C 03     	jsr dboxf		; fill box out to right side.
000392  3               dbox10:
000392  3  E6 rr        	inc dispy		; y coordinate down a line next position.
000394  3  4C 12 03     	jmp dbox2		; next line.
000397  3               dbox7:
000397  3  A5 63        	lda z80_b		; chars remaining.
000399  3  D0 03        	bne :+			; are any left?
00039B  3  4C A1 03     	jmp dbox11		; no, nothing to draw.
00039E  3               :
00039E  3  20 7C 03     	jsr dboxf		; fill message to line.
0003A1  3               
0003A1  3               ;------------------------------------------------------
0003A1  3               ; Drawn the box menu, now select option.
0003A1  3               ;------------------------------------------------------
0003A1  3               
0003A1  3               dbox11:
0003A1  3  A5 rr        	lda btop		; box top.
0003A3  3  85 rr        	sta dispy		; set bar position.
0003A5  3               dbox14:
0003A5  3  20 83 0F     	jsr joykey		; get controls.
0003A8  3  C9 7F        	cmp #$7f		; anything pressed?
0003AA  3  D0 F9        	bne dbox14		; yes, debounce it.
0003AC  3  20 1A 04     	jsr dbar		; draw bar.
0003AF  3               dbox12:
0003AF  3  20 83 0F     	jsr joykey		; get controls.
0003B2  3  C9 7F        	cmp #$7f		; anything pressed?
0003B4  3  F0 F9        	beq dbox12		; no, nothing.
0003B6  3  29 10        	and #16			; fire button pressed?
0003B8  3  D0 03        	bne :+
0003BA  3               mod1:
0003BA  3  4C E7 03     	jmp fstd		; yes, job done.
0003BD  3               :
0003BD  3  20 1A 04     	jsr dbar		; delete bar.
0003C0  3               
0003C0  3  A5 rr        	lda joyval		; joystick reading.
0003C2  3  29 08        	and #8			; going up?
0003C4  3  F0 13        	beq dboxu		; yes, go up.
0003C6  3               
0003C6  3  A6 rr        	ldx dispy		; vertical position of bar.
0003C8  3  E8           	inx			; look down.
0003C9  3  8A           	txa
0003CA  3  38           	sec
0003CB  3  E5 rr        	sbc btop		; find distance from top.
0003CD  3  C5 rr        	cmp blen		; top of box.
0003CF  3  D0 03        	bne :+
0003D1  3  4C A5 03     	jmp dbox14		; yes, go no further.
0003D4  3               :
0003D4  3  E6 rr        	inc dispy		; move bar.
0003D6  3  4C A5 03     	jmp dbox14		; continue.
0003D9  3               dboxu:
0003D9  3  A5 rr        	lda dispy		; vertical position of bar.
0003DB  3  C5 rr        	cmp btop		; are we at the top?
0003DD  3  D0 03        	bne :+
0003DF  3  4C A5 03     	jmp dbox14		; yes, go no further.
0003E2  3               :
0003E2  3  C6 rr        	dec dispy		; move bar.
0003E4  3  4C A5 03     	jmp dbox14		; continue.
0003E7  3               fstd:
0003E7  3  A5 rr        	lda dispy		; bar position.
0003E9  3  38           	sec
0003EA  3  E5 rr        	sbc btop		; find selected option.
0003EC  3  85 rr        	sta varopt		; store the option.
0003EE  3  4C 25 05     	jmp redraw		; redraw the screen.
0003F1  3               
0003F1  3               ;------------------------------------------------------
0003F1  3               ; Option not available.  Skip this line.
0003F1  3               ;------------------------------------------------------
0003F1  3               
0003F1  3               dbox13:
0003F1  3  A0 00        	ldy #0
0003F3  3  B1 66        	lda (z80_hl),y		; get character.
0003F5  3  E6 66        	inc z80_l		; next one.
0003F7  3  D0 02        	bne :+
0003F9  3  E6 67        	inc z80_h
0003FB  3               :
0003FB  3  C9 2C        	cmp #','		; another line?
0003FD  3  D0 03        	bne :+
0003FF  3  4C 12 03     	jmp dbox2		; yes, do next line.
000402  3               :
000402  3  C9 0D        	cmp #13			; another line?
000404  3  D0 03        	bne :+
000406  3  4C 12 03     	jmp dbox2		; yes, do next line.
000409  3               :
000409  3               
000409  3  10 03        	bpl :+			; end of message?
00040B  3  4C A1 03     	jmp dbox11		; yes, finish message.
00040E  3               :
00040E  3  4C F1 03     	jmp dbox13
000411  3               dbox15:
000411  3  A5 rr        	lda TmpAddr		; pop message pointer from the stack.
000413  3  85 67        	sta z80_h
000415  3  A5 rr        	lda TmpAddr+1
000417  3  85 66        	sta z80_l
000419  3  60           	rts
00041A  3               
00041A  3               ;------------------------------------------------------
00041A  3               ; Invert bar
00041A  3               ;------------------------------------------------------
00041A  3               
00041A  3               dbar:
00041A  3  A5 rr        	lda blft		; box left.
00041C  3  85 rr        	sta dispx		; set display coordinate.
00041E  3  20 DA 0A     	jsr gprad		; get printing address.
000421  3               
000421  3  A5 rr        	lda bwid		; box width.
000423  3  85 62        	sta z80_c		; loop counter in c.
000425  3  A5 67        	lda z80_h
000427  3  85 65        	sta z80_d		; store screen address high byte.
000429  3               dbar1:
000429  3  A2 07        	ldx #7			; pixel height in b.
00042B  3               dbar0:
00042B  3  BC 4A 0B     	ldy scrtab,x
00042E  3  B1 rr        	lda (scraddr),y		; get screen byte.
000430  3  49 FF        	eor #255		; reverse all bits.
000432  3  91 rr        	sta (scraddr),y		; write back to screen.
000434  3  CA           	dex			; next line down.
000435  3  10 F4        	bpl dbar0		; draw rest of character.
000437  3               
000437  3  E6 rr        	inc scraddr		; one char right.
000439  3  C6 62        	dec z80_c		; decrement character counter.
00043B  3  D0 EC        	bne dbar1		; repeat for whole line.
00043D  3  60           	rts
00043E  3               
00043E  3               ;------------------------------------------------------
00043E  3               ; Point to object
00043E  3               ;
00043E  3               ; Input:
00043E  3               ;  -
00043E  3               ;
00043E  3               ; Output:
00043E  3               ;  A = object number, A=255 if already in possession
00043E  3               ;------------------------------------------------------
00043E  3               
00043E  3               invdis:
00043E  3  A5 66        	lda z80_l		; store message text pointer.
000440  3  48           	pha
000441  3  A5 67        	lda z80_h
000443  3  48           	pha
000444  3  A5 rr        	lda combyt		; object number.
000446  3  E6 rr        	inc combyt		; ready for next one.
000448  3  20 44 08     	jsr gotob		; check if we have object.
00044B  3  A8           	tay
00044C  3  68           	pla
00044D  3  85 67        	sta z80_h
00044F  3  68           	pla
000450  3  85 66        	sta z80_l
000452  3  98           	tya
000453  3  60           	rts
000454  3               
000454  3               ;------------------------------------------------------
000454  3               ; Find option selected.
000454  3               ;
000454  3               ; Input:
000454  3               ;  -
000454  3               ;
000454  3               ; Output:
000454  3               ;  OPT = selected object
000454  3               ;------------------------------------------------------
000454  3               
000454  3               fopt:
000454  3  A5 rr        	lda dispy
000456  3  38           	sec
000457  3  E5 rr        	sbc btop		; find selected option.
000459  3  85 rr        	sta tmp+2		; option selected in b register.
00045B  3  E6 rr        	inc tmp+2
00045D  3               
00045D  3  A9 00        	lda #0			; set to first item.
00045F  3  85 rr        	sta combyt		; object number.
000461  3               fopt0:
000461  3  20 71 04     	jsr fobj		; find next object in inventory.
000464  3  C6 rr        	dec tmp+2
000466  3  D0 F9        	bne fopt0		; repeat for relevant steps down the list.
000468  3               
000468  3  A5 rr        	lda combyt		; get option.
00046A  3  85 rr        	sta varopt		; store the option.
00046C  3  C6 rr        	dec varopt		; one less, due to where we increment combyt.
00046E  3  4C 25 05     	jmp redraw		; redraw the screen.
000471  3               fobj:
000471  3  A4 rr        	ldy combyt		; object number.
000473  3  E6 rr        	inc combyt		; ready for next item.
000475  3  98           	tya
000476  3  20 44 08     	jsr gotob		; do we have this item?
000479  3  C9 FF        	cmp #255
00047B  3  D0 01        	bne :+
00047D  3  60           	rts
00047E  3               :
00047E  3  4C 71 04     	jmp fobj		; yes, it's on the list.
000481  3               
000481  3               ;bwid:	.byte 0              ; box/menu width.
000481  3               ;blen:	.byte 0              ; box/menu height.
000481  3               ;btop:	.byte 0              ; box coordinates.
000481  3               ;blft:	.byte 0
000481  3               .endif
000481  3               
000481  3               ;----------------------------------------------------
000481  3               ; Wait for keypress.
000481  3               ;----------------------------------------------------
000481  3               
000481  3               prskey:
000481  3  98           	tya
000482  3  48           	pha
000483  3               prsloop:
000483  3  20 E4 04     	jsr vsync
000486  3  20 71 FE     	jsr READKEY
000489  3  C0 FF        	cpy #255
00048B  3  F0 F6        	beq prsloop		; wait until key pressed
00048D  3  68           	pla
00048E  3  A8           	tay
00048F  3  60           	rts
000490  3               
000490  3               ;----------------------------------------------------
000490  3               ; Delay routine 1/50 sec
000490  3               ;
000490  3               ; Wait 1/60 sec = 16666 usec
000490  3               ; Wait 208 x 16 =  3328 usec
000490  3               ;                 19994 usec
000490  3               ; rts           =     6 usec
000490  3               ; Total         = 20000 usec
000490  3               ;----------------------------------------------------
000490  3               
000490  3               delay:
000490  3  85 rr        	sta xtmp
000492  3               del_loop:
000492  3  20 66 FE     	jsr SCRSYNC		; wait for flyback
000495  3               
000495  3  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
000497  3               delay1:
000497  3  61 80        	adc ($80,x)		;	 6 usec
000499  3  61 80        	adc ($80,x)		;	 6 usec
00049B  3  88           	dey			;	 2 usec
00049C  3  D0 F9        	bne delay1		;	 2 usec
00049E  3  EA           	nop			; 2 usec
00049F  3  EA           	nop			; 2 usec
0004A0  3               				; tot: 20000 usec
0004A0  3  C6 rr        	dec xtmp
0004A2  3  D0 EE        	bne del_loop
0004A4  3  60           	rts
0004A5  3               
0004A5  3               ;----------------------------------------------------
0004A5  3               ; Clear sprite table.
0004A5  3               ;
0004A5  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
0004A5  3               ;----------------------------------------------------
0004A5  3               
0004A5  3               xspr:
0004A5  3  A9 FF        	lda #255		; clear byte.
0004A7  3  A2 00        	ldx #0			; length of table.
0004A9  3               xspr0:
0004A9  3  9D 8A 18     	sta sprtab,x		; sprite table.
0004AC  3  E8           	inx			; move to next byte.
0004AD  3  E0 CC        	cpx #SPRBUF
0004AF  3  D0 F8        	bne xspr0		; repeat for rest of table.
0004B1  3  60           	rts
0004B2  3               
0004B2  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0004B2  3               ; Sound, NOT IMPLEMENTED!!!
0004B2  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0004B2  3               ;
0004B2  3               ;silenc:
0004B2  3               ;	jsr silen1 		; silence channel 1.
0004B2  3               ;	jsr silen2 		; silence channel 2.
0004B2  3               ;	jsr silen3 		; silence channel 3.
0004B2  3               ;	jmp plsnd 		; play all channels to switch them off.
0004B2  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0004B2  3               
0004B2  3               ;-------------------------------------------------------------
0004B2  3               ; Initialise all objects.
0004B2  3               ;
0004B2  3               ; Reset current room,y,x to start room,y,x for all objects
0004B2  3               ;-------------------------------------------------------------
0004B2  3               
0004B2  3               .if oflag
0004B2  3               iniob:
0004B2  3  A9 74        	lda #<objdta 		; objects table.
0004B4  3  85 68        	sta z80_x
0004B6  3  A9 68        	lda #>objdta
0004B8  3  85 69        	sta z80_i
0004BA  3               
0004BA  3  AE 2C 02     	ldx numob 		; number of objects in the game.
0004BD  3               iniob0:
0004BD  3  A0 23        	ldy #35
0004BF  3  B1 68        	lda (z80_ix),y 		; start screen.
0004C1  3  A0 20        	ldy #32
0004C3  3  91 68        	sta (z80_ix),y 		; set start screen.
0004C5  3               
0004C5  3  A0 24        	ldy #36
0004C7  3  B1 68        	lda (z80_ix),y 		; find start y.
0004C9  3  A0 21        	ldy #33
0004CB  3  91 68        	sta (z80_ix),y 		; set start y.
0004CD  3               
0004CD  3  A0 25        	ldy #37
0004CF  3  B1 68        	lda (z80_ix),y 		; get initial x.
0004D1  3  A0 22        	ldy #34
0004D3  3  91 68        	sta (z80_ix),y 		; set x coord.
0004D5  3               
0004D5  3  18           	clc 			; point to next object.
0004D6  3  A5 68        	lda z80_x
0004D8  3  69 26        	adc #38			; distance between objects.
0004DA  3  85 68        	sta z80_x
0004DC  3  90 02        	bcc :+
0004DE  3  E6 69        	inc z80_i
0004E0  3               :
0004E0  3  CA           	dex 			; repeat.
0004E1  3  D0 DA        	bne iniob0
0004E3  3               
0004E3  3  60           	rts
0004E4  3               .endif
0004E4  3               
0004E4  3               ;-------------------------------------------------------------
0004E4  3               ; Screen synchronisation.
0004E4  3               ;
0004E4  3               ;  - read joystick/keyboard
0004E4  3               ;  - handle sound
0004E4  3               ;  - sync framerate with clock
0004E4  3               ;  - handle shrapnel every even frame
0004E4  3               ;-------------------------------------------------------------
0004E4  3               
0004E4  3               vsync:
0004E4  3  48           	pha
0004E5  3  98           	tya
0004E6  3  48           	pha
0004E7  3  8A           	txa
0004E8  3  48           	pha
0004E9  3  20 83 0F     	jsr joykey		; read joystick/keyboard.
0004EC  3               vsync1:
0004EC  3  AD 09 B8     	lda Timer2_High		; sync framerate with clock
0004EF  3  C9 FF        	cmp #$ff
0004F1  3  D0 F9        	bne vsync1
0004F3  3  A9 C3        	lda #>50000
0004F5  3  8D 09 B8     	sta Timer2_High
0004F8  3  A9 50        	lda #<50000
0004FA  3  8D 08 B8     	sta Timer2_Low
0004FD  3               
0004FD  3  A5 rr        	lda clock
0004FF  3  29 01        	and #1
000501  3  D0 03        	bne:+
000503  3  20 84 05     	jsr proshr		; handle shrapnel every even frame
000506  3               :
000506  3  AD 24 05     	lda sndtyp
000509  3  F0 13        	beq sndskip
00050B  3               sndloop:
00050B  3  AD 02 B0     	lda SpeakerBit		; handle sound
00050E  3  AC 24 05     	ldy sndtyp
000511  3               sndwait:
000511  3  88           	dey
000512  3  D0 FD        	bne sndwait
000514  3  49 04        	eor #4
000516  3  8D 02 B0     	sta SpeakerBit
000519  3  CE 24 05     	dec sndtyp
00051C  3  D0 ED        	bne sndloop
00051E  3               sndskip:
00051E  3  68           	pla
00051F  3  AA           	tax
000520  3  68           	pla
000521  3  A8           	tay
000522  3  68           	pla
000523  3  60           	rts
000524  3               
000524  3  00           sndtyp:	.byte 0
000525  3               
000525  3               ;-----------------------------------------------
000525  3               ; Redraw the screen.
000525  3               ;
000525  3               ; Remove old copy of all sprites for redraw.
000525  3               ;-----------------------------------------------
000525  3               
000525  3               redraw:
000525  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
000527  3  48           	pha
000528  3  A5 68        	lda z80_x
00052A  3  48           	pha
00052B  3               
00052B  3  20 A2 0C     	jsr droom		; show screen layout.
00052E  3               .if oflag
00052E  3  20 C8 07     	jsr shwob		; draw objects.
000531  3               .endif
000531  3               numsp0:
000531  3  A9 0C        	lda #NUMSPR		; sprites to draw.
000533  3  85 rr        	sta tmp
000535  3               
000535  3  A9 8A        	lda #<sprtab		; sprite table.
000537  3  85 68        	sta z80_x
000539  3  A9 18        	lda #>sprtab
00053B  3  85 69        	sta z80_i
00053D  3               redrw0:
00053D  3  A0 00        	ldy #0
00053F  3  B1 68        	lda (z80_ix),y		; old sprite type.
000541  3  C9 FF        	cmp #255		; is it enabled?
000543  3  F0 0B        	beq redrw1 		; no, find next one.
000545  3               
000545  3  A0 03        	ldy #3
000547  3  B1 68        	lda (z80_ix),y 		; sprite y.
000549  3  C9 B1        	cmp #177		; beyond maximum?
00054B  3  B0 03        	bcs redrw1		; yes, nothing to draw.
00054D  3               
00054D  3  20 A0 13     	jsr sspria		; show single sprite.
000550  3               redrw1:
000550  3  18           	clc			; next sprite.
000551  3  A5 68        	lda z80_x
000553  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
000555  3  85 68        	sta z80_x
000557  3  90 02        	bcc :+
000559  3  E6 69        	inc z80_i
00055B  3               :
00055B  3  C6 rr        	dec tmp			; repeat for remaining sprites.
00055D  3  D0 DE        	bne redrw0
00055F  3               rpblc1:
00055F  3               ;	jsr dshrp		; redraw shrapnel.
00055F  3               
00055F  3               .if aflag
00055F  3  20 89 06     	jsr rbloc		; draw blocks for this screen
000562  3               .endif
000562  3  68           	pla			; retrieve sprite pointer.
000563  3  85 68        	sta z80_x
000565  3  68           	pla
000566  3  85 69        	sta z80_i
000568  3               
000568  3  60           	rts
000569  3               
000569  3               ;----------------------------------------------------------------------
000569  3               ; Clear screen routine.
000569  3               ;
000569  3               ; Fill screenmem $8000-$97ff with ScrFillByte
000569  3               ;----------------------------------------------------------------------
000569  3               
000569  3               cls:
000569  3  A9 80        	lda #>ScreenAddr		; screen address.
00056B  3  8D 74 05     	sta clsloop+2
00056E  3  A9 00        	lda #ScrFillByte
000570  3  A0 00        	ldy #0
000572  3               clsloop:
000572  3  99 00 80     	sta ScreenAddr,y
000575  3  C8           	iny
000576  3  D0 FA        	bne clsloop
000578  3  EE 74 05     	inc clsloop+2
00057B  3  AE 74 05     	ldx clsloop+2
00057E  3  E0 98        	cpx #>(ScreenAddr+$1800)
000580  3  D0 F0        	bne clsloop
000582  3  60           	rts
000583  3               
000583  3               ;----------------------------------------------------------------------
000583  3               ; Atomic palette is static
000583  3               ;----------------------------------------------------------------------
000583  3               
000583  3               setpal:
000583  3  60           	rts
000584  3               
000584  3               ;----------------------------------------------------------------------
000584  3               ; FODDER check
000584  3               ;----------------------------------------------------------------------
000584  3               
000584  3               .if pflag .or dflag
000584  3               fdchk:
000584  3               	cmp #FODDER 		; is it fodder?
000584  3               	beq :+
000584  3               	rts 			; no.
000584  3               :
000584  3               	lda #0			; wipe fodder in MAP
000584  3               	ldy #0
000584  3               	sta (bufaddr),y 	; rewrite block type.
000584  3               
000584  3               	lda dispx		; x=x/8
000584  3               	pha
000584  3               	lsr a
000584  3               	lsr a
000584  3               	lsr a
000584  3               	sta dispx
000584  3               
000584  3               	lda dispy		; y=y/8
000584  3               	pha
000584  3               	lsr a
000584  3               	lsr a
000584  3               	lsr a
000584  3               	sta dispy
000584  3               
000584  3               	lda #0 			; block to write.
000584  3               	jsr pattr 		; write block.
000584  3               
000584  3               	pla
000584  3               	sta dispy
000584  3               	pla
000584  3               	sta dispx
000584  3               	rts
000584  3               .endif
000584  3               
000584  3               ;----------------------------------------------------
000584  3               ; Scrolly text and puzzle variables.
000584  3               ;----------------------------------------------------
000584  3               
000584  3               .if sflag
000584  3               txtbit:	.byte 128		; bit to write.
000584  3               txtwid:	.byte 16		; width of ticker message.
000584  3               txtpos:	.word msgdat
000584  3               txtini:	.word msgdat
000584  3               txtscr:	.word ScreenAddr
000584  3               .endif
000584  3               
000584  3               ;----------------------------------------------------
000584  3               ; Specialist routines.
000584  3               ; Process shrapnel.
000584  3               ;----------------------------------------------------
000584  3               proshr:
000584  3               .if pflag
000584  3               	lda #<SHRAPN		; table.
000584  3               	sta z80_x
000584  3               	lda #>SHRAPN
000584  3               	sta z80_i
000584  3               
000584  3               	lda #NUMSHR		; shrapnel pieces to process.
000584  3               	sta shrctr
000584  3               prosh0:
000584  3               	ldy #0
000584  3               	lda (z80_ix),y		; on/off marker.
000584  3               	asl a
000584  3               proshx:
000584  3               	bcs :+
000584  3               	jsr prosh1 		; on, so process it.
000584  3               :
000584  3               	clc
000584  3               	lda z80_x
000584  3               	adc #SHRSIZ
000584  3               	sta z80_x
000584  3               	bcc :+
000584  3               	inc z80_i
000584  3               :
000584  3               	dec shrctr		; round again.
000584  3               	bne prosh0
000584  3               .endif
000584  3               .if sflag
000584  3               	jsr scrly
000584  3               .endif
000584  3  60           	rts
000585  3               
000585  3               .if pflag
000585  3               ;shrctr:	.byte 0
000585  3               
000585  3               ;----------------------------------------------------
000585  3               ; Proces shrapnel piece
000585  3               ;----------------------------------------------------
000585  3               
000585  3               prosh1:
000585  3               	jsr plot 		; delete the pixel.
000585  3               
000585  3               	lda #<shrptr		; shrapnel routine pointers.
000585  3               	sta z80_l
000585  3               	lda #>shrptr
000585  3               	sta z80_h
000585  3               
000585  3               	ldy #0
000585  3               	lda (z80_ix),y		; restore shrapnel type.
000585  3               	jsr prosh2 		; run the routine.
000585  3               	jsr chkxy		; check x and y are good before we redisplay.
000585  3               
000585  3               	lda #<SHRSIZ 		; distance to next.
000585  3               	sta z80_e
000585  3               	lda #>SHRSIZ
000585  3               	sta z80_d
000585  3               	rts
000585  3               
000585  3               ;----------------------------------------------------
000585  3               ; Run the routine
000585  3               ;----------------------------------------------------
000585  3               
000585  3               prosh2:
000585  3               	asl a 			; 2 bytes per address.
000585  3               	tay
000585  3               	lda shrptr,y
000585  3               	sta z80_l
000585  3               	lda shrptr+1,y 		; fetch high byte from table.
000585  3               	sta z80_h
000585  3               	jmp (z80_hl) 		; jump to routine.
000585  3               
000585  3               ;----------------------------------------------------
000585  3               ; Paricle routine table
000585  3               ;----------------------------------------------------
000585  3               
000585  3               shrptr:	.word laser		; laser.
000585  3               	.word trail		; vapour trail.
000585  3               	.word shrap		; shrapnel from explosion.
000585  3               	.word dotl		; horizontal starfield left.
000585  3               	.word dotr		; horizontal starfield right.
000585  3               	.word dotu		; vertical starfield up.
000585  3               	.word dotd		; vertical starfield down.
000585  3               	.word ptcusr		; user particle.
000585  3               
000585  3               ;----------------------------------------------------
000585  3               ; Explosion shrapnel.
000585  3               ;----------------------------------------------------
000585  3               
000585  3               shrap:
000585  3               	ldy #1
000585  3               	lda (z80_ix),y 		; get the angle.
000585  3               	clc
000585  3               	adc #<shrsin		; shrapnel sine table.
000585  3               	sta z80_l
000585  3               	lda #>shrsin
000585  3               	adc #0
000585  3               	sta z80_h
000585  3               
000585  3               	ldy #0
000585  3               	lda (z80_hl),y 		; fetch value from table.
000585  3               	sta z80_e
000585  3               	inc z80_l 		; next byte of table.
000585  3               	bne :+
000585  3               	inc z80_h
000585  3               :
000585  3               	ldy #0
000585  3               	lda (z80_hl),y		; fetch value from table.
000585  3               	sta z80_d
000585  3               	inc z80_l		; next byte of table.
000585  3               	bne :+
000585  3               	inc z80_h
000585  3               :
000585  3               	ldy #0
000585  3               	lda (z80_hl),y 		; fetch value from table.
000585  3               	sta z80_c
000585  3               	inc z80_l 		; next byte of table.
000585  3               	bne :+
000585  3               	inc z80_h
000585  3               :
000585  3               	ldy #0
000585  3               	lda (z80_hl),y 		; fetch value from table.
000585  3               	sta z80_b
000585  3               
000585  3               	ldy #2
000585  3               	lda (z80_ix),y 		; x coordinate in hl.
000585  3               	clc
000585  3               	adc z80_e		; add sine lb
000585  3               	sta (z80_ix),y		; store new coordinate lb.
000585  3               	ldy #3
000585  3               	lda (z80_ix),y
000585  3               	adc z80_d		; add sine hb
000585  3               	sta (z80_ix),y		; store new coordinate hb.
000585  3               
000585  3               	ldy #4
000585  3               	lda (z80_ix),y	 	; y coordinate in hl.
000585  3               	clc
000585  3               	adc z80_c		; add cosine lb
000585  3               	sta (z80_ix),y		; store new coordinate lb.
000585  3               	ldy #5
000585  3               	lda (z80_ix),y
000585  3               	adc z80_b		; add cosine lb
000585  3               	sta (z80_ix),y		; store new coordinate hb.
000585  3               
000585  3               	rts
000585  3               
000585  3               ;----------------------------------------------------
000585  3               ; Move dots
000585  3               ;----------------------------------------------------
000585  3               
000585  3               dotl:
000585  3               	ldy #5
000585  3               	lda (z80_ix),y
000585  3               	sec
000585  3               	sbc #1		 	; move left.
000585  3               	sta (z80_ix),y
000585  3               	rts
000585  3               dotr:
000585  3               	ldy #5
000585  3               	lda (z80_ix),y
000585  3               	clc
000585  3               	adc #1		 	; move left.
000585  3               	sta (z80_ix),y
000585  3               	rts
000585  3               dotu:
000585  3               	ldy #3
000585  3               	lda (z80_ix),y
000585  3               	sec
000585  3               	sbc #1		 	; move up.
000585  3               	sta (z80_ix),y
000585  3               	rts
000585  3               dotd:
000585  3               	ldy #3
000585  3               	lda (z80_ix),y
000585  3               	clc
000585  3               	adc #1			; move down.
000585  3               	sta (z80_ix),y
000585  3               	rts
000585  3               
000585  3               ;----------------------------------------------------
000585  3               ; Check if coordinates are ok before redrawing at new position.
000585  3               ;
000585  3               ; left:   X>L		X=L	Ok
000585  3               ; right:  R+15>X	X=R	Ok
000585  3               ; top:    Y>T		Y=T	Ok
000585  3               ; bottom: B+15>Y	Y=B	Ok
000585  3               ;----------------------------------------------------
000585  3               
000585  3               chkxy:
000585  3               
000585  3               ; top:    Y>T		Y=T	Ok
000585  3               
000585  3               	ldy #3
000585  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000585  3               	cmp wntopx		; window top.
000585  3               	bcs :+			; compare with top window limit.
000585  3               	jmp kilshr		; out of window, kill shrapnel.
000585  3               :
000585  3               ; left:   X>L		X=L	Ok
000585  3               
000585  3               	ldy #5
000585  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000585  3               	cmp wnlftx		; left edge.
000585  3               	bcs :+			; compare with left window limit.
000585  3               	jmp kilshr		; out of window, kill shrapnel.
000585  3               :
000585  3               ; bottom: B+15>Y	Y=B	Ok
000585  3               
000585  3               	lda wnbotx		; point to bottom.
000585  3               	clc
000585  3               	adc #15
000585  3               	ldy #3
000585  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
000585  3               	bcs :+			; compare with shrapnel x coordinate.
000585  3               	jmp kilshr		; off screen, kill shrapnel..
000585  3               :
000585  3               ; right:  R+15>X	X=R	Ok
000585  3               
000585  3               	lda wnrgtx		; point to right edge.
000585  3               	clc
000585  3               	adc #15
000585  3               	ldy #5
000585  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
000585  3               	bcs :+			; compare with window limit.
000585  3               	jmp kilshr		; off screen, kill shrapnel.
000585  3               :
000585  3               
000585  3               ;----------------------------------------------------
000585  3               ; Drop through.
000585  3               ; Display shrapnel.
000585  3               ;----------------------------------------------------
000585  3               
000585  3               plot:
000585  3               	ldy #3
000585  3               	lda (z80_ix),y		; y integer.
000585  3               	sta dispy	 	; workspace coordinates.
000585  3               	ldy #5
000585  3               	lda (z80_ix),y	 	; x integer.
000585  3               	sta dispx 		; workspace coordinates.
000585  3               
000585  3               	ldy #0
000585  3               	lda (z80_ix),y 		; type.
000585  3               	bne :+			; is it a laser?
000585  3               	jmp plot1 		; yes, draw laser instead.
000585  3               :
000585  3               plot0:
000585  3               	lda dispx		; which pixel within byte do we
000585  3               	and #7			; want to set first?
000585  3               	tay
000585  3               	lda dots,y 		; table of small pixel positions.
000585  3               	sta z80_e 		; get value.
000585  3               
000585  3               	jsr scadd 		; screen address.
000585  3               	ldy #0
000585  3               	lda (scraddr),y		; see what's already there.
000585  3               	eor z80_e
000585  3               	sta (scraddr),y 	; put back on screen.
000585  3               	rts
000585  3               
000585  3               plot1:
000585  3               	jsr scadd 		; screen address.
000585  3               	ldy #0
000585  3               	lda (scraddr),y 	; fetch byte there.
000585  3               	eor #255 		; toggle all bits.
000585  3               	sta (scraddr),y 	; new byte.
000585  3               	rts
000585  3               
000585  3               ;----------------------------------------------------
000585  3               ; Switch off shrapnel
000585  3               ;----------------------------------------------------
000585  3               
000585  3               kilshr:
000585  3               	lda #128
000585  3               	ldy #0
000585  3               	sta (z80_ix),y	; switch off shrapnel.
000585  3               	rts
000585  3               
000585  3               ;----------------------------------------------------
000585  3               ; Sine/cosine table
000585  3               ;----------------------------------------------------
000585  3               
000585  3               shrsin:	.word 0,1024,391,946,724,724,946,391
000585  3               	.word 1024,0,946,65144,724,64811,391,64589
000585  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
000585  3               	.word 64512,0,64589,391,64811,724,65144,946
000585  3               
000585  3               ;----------------------------------------------------
000585  3               ; Create trail
000585  3               ;----------------------------------------------------
000585  3               
000585  3               trail:
000585  3               	ldy #1
000585  3               	lda (z80_ix),y 	; time remaining.
000585  3               	sec
000585  3               	sbc #1
000585  3               	sta (z80_ix),y
000585  3               	bne :+
000585  3               	jmp trailk		; time to switch it off.
000585  3               :
000585  3               	jsr qrand		; get a random number.
000585  3               	lsr a 			; x or y axis?
000585  3               	bcc :+
000585  3               	jmp trailv		; use y.
000585  3               :
000585  3               ; Trail horizontal
000585  3               
000585  3               	lsr a 			; which direction?
000585  3               	bcc :+
000585  3               	jmp traill		; go left.
000585  3               :
000585  3               ; Trail right
000585  3               
000585  3               	ldy #5
000585  3               	lda (z80_ix),y
000585  3               	clc
000585  3               	adc #1	 		; go right.
000585  3               	sta (z80_ix),y
000585  3               	rts
000585  3               
000585  3               ; Trail left
000585  3               
000585  3               traill:
000585  3               	ldy #5
000585  3               	lda (z80_ix),y
000585  3               	sec
000585  3               	sbc #1 			; go left.
000585  3               	sta (z80_ix),y
000585  3               	rts
000585  3               
000585  3               ; Trail vertical
000585  3               
000585  3               trailv:
000585  3               	lsr a		 	; which direction?
000585  3               	bcc :+
000585  3               	jmp trailu		; go up.
000585  3               :
000585  3               ; Trail down
000585  3               
000585  3               	ldy #3
000585  3               	lda (z80_ix),y
000585  3               	clc
000585  3               	adc #1 			; go down.
000585  3               	sta (z80_ix),y
000585  3               	rts
000585  3               
000585  3               ; Trail up
000585  3               
000585  3               trailu:
000585  3               	ldy #3
000585  3               	lda (z80_ix),y
000585  3               	sec
000585  3               	sbc #1 			; go up.
000585  3               	sta (z80_ix),y
000585  3               	rts
000585  3               
000585  3               ; Kill trail
000585  3               
000585  3               trailk:
000585  3               	lda #200		; set off-screen to kill vapour trail.
000585  3               	ldy #3
000585  3               	sta (z80_ix),y
000585  3               	rts
000585  3               
000585  3               ;----------------------------------------------------
000585  3               ; Create laser beam
000585  3               ;----------------------------------------------------
000585  3               
000585  3               laser:
000585  3               	ldy #1
000585  3               	lda (z80_ix),y 		; direction.
000585  3               	ror a 			; left or right?
000585  3               	bcs :+
000585  3               	jmp laserl		; move left.
000585  3               :
000585  3               ; Laser right
000585  3               
000585  3               	lda #8			; distance to travel.
000585  3               	sta z80_b
000585  3               	jmp laserm		; move laser.
000585  3               
000585  3               ; Laser left
000585  3               
000585  3               laserl:
000585  3               	lda #248		; distance to travel.
000585  3               	sta z80_b
000585  3               laserm:
000585  3               	ldy #5
000585  3               	lda (z80_ix),y		; x position.
000585  3               	clc
000585  3               	adc z80_b		; add distance.
000585  3               	sta (z80_ix),y		; set new x coordinate.
000585  3               
000585  3               ; Test new block.
000585  3               
000585  3               	sta dispx 		; set x for block collision detection purposes.
000585  3               	ldy #3
000585  3               	lda (z80_ix),y 		; get y.
000585  3               	sta dispy		; set coordinate for collision test.
000585  3               	jsr tstbl 		; get block type there.
000585  3               	cmp #WALL		; is it solid?
000585  3               	bne :+
000585  3               	jmp trailk		; yes, it cannot pass.
000585  3               :
000585  3               .if pflag .or dflag
000585  3                       cmp #FODDER             ; is it fodder?
000585  3                       bne :+
000585  3                       jsr fdchk               ; remove fodder block.
000585  3                       jmp trailk              ; destroy laser.
000585  3               :
000585  3               .endif
000585  3                       rts                     ; no, ignore it.
000585  3               
000585  3               ;----------------------------------------------------
000585  3               ; Dots mask
000585  3               ;----------------------------------------------------
000585  3               
000585  3               dots:	.byte 128,64,32,16,8,4,2,1
000585  3               
000585  3               
000585  3               ;----------------------------------------------------
000585  3               ; Plot, preserving de.
000585  3               ;----------------------------------------------------
000585  3               
000585  3               plotde:
000585  3               	lda z80_d 		; put de on stack.
000585  3               	pha
000585  3               	lda z80_e
000585  3               	pha
000585  3               
000585  3               	jsr plot 		; plot pixel.
000585  3               
000585  3               	pla			; restore de from stack.
000585  3               	sta z80_e
000585  3               	pla
000585  3               	sta z80_d
000585  3               
000585  3               	rts
000585  3               
000585  3               ;----------------------------------------------------
000585  3               ; Shoot a laser.
000585  3               ;----------------------------------------------------
000585  3               
000585  3               shoot:
000585  3               	sta z80_c		; store direction in c register.
000585  3               	ldy #8
000585  3               	lda (z80_ix),y 		; y coordinate.
000585  3               shoot1:
000585  3               	clc
000585  3               	adc #7 			; down 7 pixels.
000585  3               	sta z80_l 		; puty y coordinate in l.
000585  3               
000585  3               	ldy #9
000585  3               	lda (z80_ix),y 		; x coordinate in h.
000585  3               	sta z80_h
000585  3               
000585  3               	lda z80_i		; store pointer to sprite.
000585  3               	pha
000585  3               	lda z80_x
000585  3               	pha
000585  3               
000585  3               	jsr fpslot 		; find particle slot.
000585  3               	bcs :+
000585  3               	jmp vapou2		; failed, restore ix.
000585  3               :
000585  3               	lda #0
000585  3               	ldy #0
000585  3               	sta (z80_ix),y 		; set up a laser.
000585  3               
000585  3               	lda z80_c
000585  3               	ldy #1
000585  3               	sta (z80_ix),y 		; set the direction.
000585  3               
000585  3               	lda z80_l
000585  3               	ldy #3
000585  3               	sta (z80_ix),y		; set y coordinate.
000585  3               
000585  3               	ror z80_c		; check direction we want.
000585  3               	bcc :+
000585  3               	jmp shootr		; shoot right.
000585  3               :
000585  3               	lda z80_h		; X position.
000585  3               shoot0:
000585  3               	and #248		; align on character boundary.
000585  3               	ldy #5
000585  3               	sta (z80_ix),y		; set x coordinate.
000585  3               	jmp vapou0 		; draw first image.
000585  3               shootr:
000585  3               	lda z80_h		; x position.
000585  3               	clc
000585  3               	adc #15			; look right.
000585  3               	jmp shoot0		; align and continue.
000585  3               
000585  3               ;----------------------------------------------------
000585  3               ; Create a bit of vapour trail.
000585  3               ;----------------------------------------------------
000585  3               
000585  3               vapour:
000585  3               	lda z80_i		; store pointer to sprite.
000585  3               	pha
000585  3               	lda z80_x
000585  3               	pha
000585  3               
000585  3               	ldy #8
000585  3               	lda (z80_ix),y 		; y coordinate.
000585  3               	clc
000585  3               	adc #7			; mid-point of sprite.
000585  3               	sta z80_l
000585  3               
000585  3               	ldy #9
000585  3               	lda (z80_ix),y 		; x coordinate.
000585  3               	adc #7
000585  3               	sta z80_h
000585  3               
000585  3               	jsr fpslot 		; find particle slot.
000585  3               	bcc :+
000585  3               	jmp vapou1		; no, we can use it.
000585  3               :
000585  3               vapou2:
000585  3               	pla
000585  3               	sta z80_x
000585  3               	pla
000585  3               	sta z80_i
000585  3               	rts
000585  3               vapou1:
000585  3               	lda z80_l
000585  3               	ldy #3
000585  3               	sta (z80_ix),y		; set up y.
000585  3               
000585  3               	lda z80_h
000585  3               	ldy #5
000585  3               	sta (z80_ix),y 		; set up x coordinate.
000585  3               
000585  3               	jsr qrand		; get quick random number.
000585  3               	and #15			; random time.
000585  3               	clc
000585  3               	adc #15			; minimum time on screen.
000585  3               	ldy #1
000585  3               	sta (z80_ix),y		; set time on screen.
000585  3               
000585  3               	lda #1
000585  3               	ldy #0
000585  3               	sta (z80_ix),y		; define particle as vapour trail.
000585  3               vapou0:
000585  3               	jsr chkxy		; plot first position.
000585  3               	jmp vapou2
000585  3               
000585  3               ;----------------------------------------------------
000585  3               ; Create a user particle.
000585  3               ;----------------------------------------------------
000585  3               
000585  3               ptusr:
000585  3               	sta z80_f		; store timer.
000585  3               
000585  3               	ldy #8
000585  3               	lda (z80_ix),y 		; y coordinate.
000585  3               	clc
000585  3               	adc #7			; mid-point of sprite.
000585  3               	sta z80_l
000585  3               
000585  3               	ldy #9
000585  3               	lda (z80_ix),y 		; x coordinate.
000585  3               	clc
000585  3               	adc #7			; mid-point of sprite.
000585  3               	sta z80_h
000585  3               
000585  3               	jsr fpslot 		; find particle slot.
000585  3               	bcs ptusr1
000585  3               	rts 			; out of slots, can't generate anything.
000585  3               ptusr1:
000585  3               	lda z80_l
000585  3               	ldy #3
000585  3               	sta (z80_ix),y 		; set up y.
000585  3               
000585  3               	lda z80_h
000585  3               	ldy #5
000585  3               	sta (z80_ix),y		; set up x coordinate.
000585  3               
000585  3               	lda z80_f 		; restore timer.
000585  3               	ldy #1
000585  3               	sta (z80_ix),y		; set time on screen.
000585  3               
000585  3               	lda #7
000585  3               	ldy #0
000585  3               	sta (z80_ix),y		; define particle as user particle.
000585  3               
000585  3               	jmp chkxy		; plot first position.
000585  3               
000585  3               ;----------------------------------------------------
000585  3               ; Create a vertical or horizontal star.
000585  3               ;----------------------------------------------------
000585  3               
000585  3               star:
000585  3               	lda z80_i		; store pointer to sprite.
000585  3               	pha
000585  3               	lda z80_x
000585  3               	pha
000585  3               
000585  3               	jsr fpslot 		; find particle slot.
000585  3               	bcs star7		; found one we can use.
000585  3               star0:
000585  3               	pla 			; restore sprite pointer.
000585  3               	sta z80_x
000585  3               	pla
000585  3               	sta z80_i
000585  3               	rts 			; out of slots, can't generate anything.
000585  3               star7:
000585  3               	lda z80_c		; direction.
000585  3               	and #3 			; is it left?
000585  3               	bne :+
000585  3               	jmp star1 		; yes, it's left.
000585  3               :
000585  3               	cmp #1 			; is it right?
000585  3               	bne :+
000585  3               	jmp star2 		; yes, it's right.
000585  3               :
000585  3               	cmp #2 			; is it up?
000585  3               	bne :+
000585  3               	jmp star3 		; yes, it's up.
000585  3               :
000585  3               	ldy wntopx 		; get edge of screen.
000585  3               	iny			; down one pixel.
000585  3               	tya
000585  3               star8:
000585  3               	ldy #3
000585  3               	sta (z80_ix),y 		; set y coord.
000585  3               	jsr qrand 		; get quick random number.
000585  3               star9:
000585  3               	ldy #5
000585  3               	sta (z80_ix),y		; set x position.
000585  3               
000585  3               	lda z80_c		; direction.
000585  3               	and #3			; zero to three.
000585  3               	clc
000585  3               	adc #3			; 3 to 6 for starfield.
000585  3               	ldy #0
000585  3               	sta (z80_ix),y		; define particle as star.
000585  3               	jsr chkxy		; plot first position.
000585  3               	jmp star0
000585  3               star1:
000585  3               	jsr qrand		; get quick random number.
000585  3               	ldy #3
000585  3               	sta (z80_ix),y 		; set y coord.
000585  3               
000585  3               	lda wnrgtx 		; get edge of screen.
000585  3               	clc
000585  3               	adc #15			; add width of sprite minus 1.
000585  3               	jmp star9
000585  3               star2:
000585  3               	jsr qrand 		; get quick random number.
000585  3               	ldy #3
000585  3               	sta (z80_ix),y		; set y coord.
000585  3               
000585  3               	lda wnlftx		; get edge of screen.
000585  3               	jmp star9
000585  3               star3:
000585  3               	lda wnbotx 		; get edge of screen.
000585  3               	clc
000585  3               	adc #15 		; height of sprite minus one pixel.
000585  3               	jmp star8
000585  3               
000585  3               ;----------------------------------------------------
000585  3               ; Find particle slot for lasers or vapour trail.
000585  3               ; can't use alternate accumulator.
000585  3               ;----------------------------------------------------
000585  3               
000585  3               fpslot:
000585  3               	lda #<SHRAPN 		; shrapnel table.
000585  3               	sta z80_x
000585  3               	lda #>SHRAPN
000585  3               	sta z80_i
000585  3               
000585  3               	lda #NUMSHR		; number of pieces in table.
000585  3               	sta z80_b
000585  3               fpslt0:
000585  3               	ldy #0
000585  3               	lda (z80_ix),y		; get type.
000585  3               	asl a  			; is this slot in use?
000585  3               	bcc :+
000585  3               	rts			; no, we can use it.
000585  3               :
000585  3               	clc			; point to more shrapnel.
000585  3               	lda z80_x
000585  3               	adc #SHRSIZ
000585  3               	sta z80_x
000585  3               	bcc :+
000585  3               	inc z80_i
000585  3               :
000585  3               	dec z80_b		; repeat for all shrapnel.
000585  3               	bne fpslt0
000585  3               
000585  3               	clc
000585  3               	rts 			; out of slots, can't generate anything.
000585  3               
000585  3               ;----------------------------------------------------
000585  3               ; Create an explosion at sprite position.
000585  3               ;----------------------------------------------------
000585  3               
000585  3               explod:
000585  3               	sta z80_c 		; particles to create.
000585  3               
000585  3               	lda z80_i 		; store pointer to sprite.
000585  3               	pha
000585  3               	lda z80_x
000585  3               	pha
000585  3               
000585  3               	ldy #8
000585  3               	lda (z80_ix),y 		; y coordinate.
000585  3               	sta z80_l
000585  3               	ldy #9
000585  3               	lda (z80_ix),y		; x coordinate.
000585  3               	sta z80_h
000585  3               
000585  3               	lda #<SHRAPN		; shrapnel table.
000585  3               	sta z80_x
000585  3               	lda #>SHRAPN
000585  3               	sta z80_i
000585  3               
000585  3               	lda #NUMSHR		; number of pieces in table.
000585  3               	sta explcnt
000585  3               expld0:
000585  3               	ldy #0
000585  3               	lda (z80_ix),y		; get type.
000585  3               	asl a 			; is this slot in use?
000585  3               	bcs expld1		; no, we can use it.
000585  3               expld2:
000585  3               	clc
000585  3               	lda z80_x
000585  3               	adc #SHRSIZ
000585  3               	sta z80_x
000585  3               	bcc :+
000585  3               	inc z80_i
000585  3               :
000585  3               	dec explcnt		; repeat for all shrapnel.
000585  3               	bne expld0
000585  3               expld3:
000585  3               	pla			; restore sprite pointer.
000585  3               	sta z80_x
000585  3               	pla
000585  3               	sta z80_i
000585  3               	rts 			; out of slots, can't generate any more.
000585  3               
000585  3               expld1:
000585  3               	lda z80_c		; shrapnel counter.
000585  3               	and #15			; 0 to 15.
000585  3               	clc			; add to x.
000585  3               	adc z80_l
000585  3               	ldy #3
000585  3               	sta (z80_ix),y		; y coord.
000585  3               
000585  3               	lda seed3 		; crap random number.
000585  3               	and #15			; 0 to 15.
000585  3               	clc 			; add to y.
000585  3               	adc z80_h
000585  3               	ldy #5
000585  3               	sta (z80_ix),y		; x coord.
000585  3               
000585  3               	lda #2
000585  3               	ldy #0
000585  3               	sta (z80_ix),y		; switch it on.
000585  3               
000585  3               	jsr chkxy		; plot first position.
000585  3               	jsr qrand		; quick random angle.
000585  3               	and #60 		; keep within range.
000585  3               	ldy #1
000585  3               	sta (z80_ix),y		; angle.
000585  3               
000585  3               	dec z80_c		; one less piece of shrapnel to generate.
000585  3               	bne expld2 		; back to main explosion loop.
000585  3               	jmp expld3 		; restore sprite pointer and exit.
000585  3               
000585  3               ;explcnt:	.byte 0
000585  3               
000585  3               ;----------------------------------------------------
000585  3               ; Quick random
000585  3               ;----------------------------------------------------
000585  3               
000585  3               qrand:
000585  3               	jsr random		; r register.
000585  3               	eor seed3		; combine with seed.
000585  3               	sta seed3 		; new seed.
000585  3               	rts
000585  3               
000585  3               ;seed3:	.byte 0
000585  3               
000585  3               ;----------------------------------------------------
000585  3               ; Display all shrapnel.
000585  3               ;----------------------------------------------------
000585  3               
000585  3               dshrp:
000585  3               	lda #<plotde		; display routine.
000585  3               	sta proshx+1
000585  3               	lda #>plotde
000585  3               	sta proshx+2
000585  3               	jsr proshr		; process shrapnel.
000585  3               
000585  3               	lda #<prosh1		; processing routine.
000585  3               	sta proshx+1
000585  3               	lda #>prosh1
000585  3               	sta proshx+2
000585  3               	rts
000585  3               
000585  3               ;------------------------------------------------------
000585  3               ; Particle engine.
000585  3               ;
000585  3               ; Init particle data for 55 particles in SHRAPN table.
000585  3               ; Every particle has 6 bytes.
000585  3               ;
000585  3               ; global:	-
000585  3               ; local:	x,y,hl
000585  3               ; calls:	-
000585  3               ;------------------------------------------------------
000585  3               
000585  3               inishr:
000585  3               	lda #<SHRAPN 		; table.
000585  3               	sta z80_l
000585  3               	lda #>SHRAPN
000585  3               	sta z80_h
000585  3               
000585  3               	ldy #0
000585  3               	ldx #NUMSHR		; shrapnel pieces to process.
000585  3               inish0:
000585  3               	lda #255 		; kill the shrapnel.
000585  3               	sta (z80_hl),y
000585  3               
000585  3               	clc 			; point there.
000585  3               	lda z80_l
000585  3               	adc #SHRSIZ		; distance to next.
000585  3               	sta z80_l
000585  3               	bcc :+
000585  3               	inc z80_h
000585  3               :
000585  3               	dex
000585  3               	bne inish0 		; round again.
000585  3               	rts
000585  3               
000585  3               ;------------------------------------------------------
000585  3               ; Check for collision between laser and sprite.
000585  3               ;------------------------------------------------------
000585  3               
000585  3               lcol:
000585  3               	lda #<SHRAPN		; shrapnel table.
000585  3               	sta z80_l
000585  3               	lda #>SHRAPN
000585  3               	sta z80_h
000585  3               
000585  3               	lda #NUMSHR		; number of pieces in table.
000585  3               	sta z80_b
000585  3               lcol0:
000585  3               	ldy #0
000585  3               	lda (z80_hl),y 		; get type.
000585  3               	beq lcol1		; yes, check collision.
000585  3               lcol3:
000585  3               	clc			; point to more shrapnel.
000585  3               	lda z80_l
000585  3               	adc #SHRSIZ
000585  3               	sta z80_l
000585  3               	bcc :+
000585  3               	inc z80_h
000585  3               :
000585  3               	dec z80_b		; repeat for all shrapnel.
000585  3               	bne lcol0
000585  3               	rts 			; no collision, carry not set.
000585  3               lcol1:
000585  3               	ldy #3
000585  3               	lda (z80_hl),y		; get y.
000585  3               	sec
000585  3               	ldy #8
000585  3               	sbc (z80_ix),y		; subtract sprite y.
000585  3               lcolh:
000585  3               	cmp #16 		; within range?
000585  3               	bcc :+
000585  3               	jmp lcol2		; no, missed.
000585  3               :
000585  3               	ldy #5
000585  3               	lda (z80_hl),y 		; get x.
000585  3               	sec
000585  3               	ldy #9
000585  3               	sbc (z80_ix),y 		; subtract sprite y.
000585  3               	cmp #16			; within range?
000585  3               	bcs :+
000585  3               	jmp lcol4 		; yes, collision occurred.
000585  3               :
000585  3               lcol2:
000585  3               	jmp lcol3
000585  3               lcol4:
000585  3               	sec
000585  3               	rts 			; return with carry set for collision.
000585  3               .endif
000585  3               
000585  3               ;------------------------------------------------------
000585  3               ; Main game engine code starts here.
000585  3               ; After initialisation, mloop is the main loop
000585  3               ;------------------------------------------------------
000585  3               
000585  3               game:
000585  3               
000585  3               ; Set up screen address table.
000585  3               
000585  3               setsat:
000585  3  A9 00        	lda #<ScreenAddr		; start of screen.
000587  3  85 rr        	sta scraddr
000589  3  A9 80        	lda #>ScreenAddr
00058B  3  85 rr        	sta scraddr+1
00058D  3               
00058D  3  A0 00        	ldy #0			; vertical lines on screen.
00058F  3               setsa0:
00058F  3  A5 rr        	lda scraddr
000591  3  99 00 9B     	sta SCADTB_lb,y		; write low byte.
000594  3  A5 rr        	lda scraddr+1
000596  3  C0 C0        	cpy #192		; vertical lines on screen.
000598  3  90 02        	bcc :+
00059A  3  09 F0        	ora #$F0		; plot sprites in rom if of screen
00059C  3               :
00059C  3  99 00 9C     	sta SCADTB_hb,y		; write high byte.
00059F  3  20 00 14     	jsr nline		; next line down.
0005A2  3  C8           	iny			; next position in table.
0005A3  3  D0 EA        	bne setsa0
0005A5  3               
0005A5  3               ; Init graphics mode
0005A5  3               
0005A5  3  A9 F0        	lda #ScrMode		; graphics mode
0005A7  3  8D 00 B0     	sta ScrSelAddr 		; screen selection address
0005AA  3  20 83 05     	jsr setpal 		; set up palette.
0005AD  3               
0005AD  3               ; Init AtoMMC joystick
0005AD  3  20 BD 0F     	jsr joyinit		; AtoMMC joystick on PORT B
0005B0  3               
0005B0  3               rpblc2:
0005B0  3               .if pflag
0005B0  3               	jsr inishr 		; initialise particle engine.
0005B0  3               .endif
0005B0  3               evintr:
0005B0  3  20 17 27     	jsr evnt12 		; call intro/menu event.
0005B3  3               
0005B3  3  A9 02        	lda #WALL 		; write default property.
0005B5  3  A2 00        	ldx #0
0005B7  3               clrmap:
0005B7  3  9D 00 98     	sta MAP,x 		; block properties.
0005BA  3  9D 00 99     	sta MAP+256,x
0005BD  3  9D 00 9A     	sta MAP+512,x
0005C0  3  E8           	inx			; next byte.
0005C1  3  D0 F4        	bne clrmap
0005C3  3               .if oflag
0005C3  3  20 B2 04     	jsr iniob 		; initialise objects.
0005C6  3               .endif
0005C6  3  A9 00        	lda #0			; put zero in accumulator.
0005C8  3  85 rr        	sta gamwon		; reset game won flag.
0005CA  3               
0005CA  3  20 78 07     	jsr inisc 		; init the score.
0005CD  3               mapst:
0005CD  3  AD AF 19     	lda stmap 		; start position on map.
0005D0  3  8D 67 19     	sta roomtb		; set up position in table, if there is one.
0005D3  3               
0005D3  3               inipbl:
0005D3  3               .if aflag
0005D3  3  A9 BE        	lda #<eop		; reset blockpointer
0005D5  3  85 96        	sta pbptr
0005D7  3  A9 6E        	lda #>eop
0005D9  3  85 97        	sta pbptr+1
0005DB  3               .endif
0005DB  3  20 4F 15     	jsr initsc 		; set up first screen.
0005DE  3               
0005DE  3  A9 56        	lda #<ssprit 		; default to spare sprite in table.
0005E0  3  85 68        	sta z80_x
0005E2  3  A9 19        	lda #>ssprit
0005E4  3  85 69        	sta z80_i
0005E6  3               evini:
0005E6  3  20 0A 28     	jsr evnt13 		; initialisation.
0005E9  3               
0005E9  3               ; Two restarts.
0005E9  3               ; First restart - clear all sprites and initialise everything.
0005E9  3               
0005E9  3               rstrt:
0005E9  3  20 18 07     	jsr rsevt 		; restart events.
0005EC  3  20 A5 04     	jsr xspr 		; clear sprite table.
0005EF  3  20 BB 16     	jsr sprlst 		; fetch pointer to screen sprites.
0005F2  3  20 44 17     	jsr ispr 		; initialise sprite table.
0005F5  3               
0005F5  3  4C 04 06     	jmp rstrt0
0005F8  3               
0005F8  3               ; Second restart - clear all but player, and don't initialise him.
0005F8  3               
0005F8  3               rstrtn:
0005F8  3  20 18 07     	jsr rsevt		; restart events.
0005FB  3  20 E8 16     	jsr nspr 		; clear all non-player sprites.
0005FE  3  20 BB 16     	jsr sprlst 		; fetch pointer to screen sprites.
000601  3  20 81 17     	jsr kspr 		; initialise sprite table, no more players.
000604  3               
000604  3               ; Set up the player and/or enemy sprites.
000604  3               
000604  3               rstrt0:
000604  3  A9 00        	lda #0 			; zero in accumulator.
000606  3  85 rr        	sta nexlev 		; reset next level flag.
000608  3  85 rr        	sta restfl 		; reset restart flag.
00060A  3  85 rr        	sta deadf 		; reset dead flag.
00060C  3  20 A2 0C     	jsr droom 		; show screen layout.
00060F  3               rpblc0:
00060F  3               .if pflag
00060F  3               	jsr inishr 		; initialise particle engine.
00060F  3               .endif
00060F  3               .if aflag
00060F  3  20 89 06     	jsr rbloc		; draw blocks for this screen
000612  3               .endif
000612  3               .if oflag
000612  3  20 C8 07     	jsr shwob		; draw objects.
000615  3               .endif
000615  3               
000615  3  A9 8A        	lda #<sprtab 		; address of sprite table, even sprites.
000617  3  85 68        	sta z80_x
000619  3  A9 18        	lda #>sprtab
00061B  3  85 69        	sta z80_i
00061D  3  20 82 12     	jsr dspr 		; display sprites.
000620  3               
000620  3  A9 9B        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
000622  3  85 68        	sta z80_x
000624  3  A9 18        	lda #>(sprtab+TABSIZ)
000626  3  85 69        	sta z80_i
000628  3  20 82 12     	jsr dspr 		; display sprites.
00062B  3               mloop:
00062B  3  20 E4 04     	jsr vsync 		; synchronise with display.
00062E  3  A9 8A        	lda #<sprtab 		; address of sprite table, even sprites.
000630  3  85 68        	sta z80_x
000632  3  A9 18        	lda #>sprtab
000634  3  85 69        	sta z80_i
000636  3  20 82 12     	jsr dspr 		; display even sprites.
000639  3               
000639  3  20 C7 07     	jsr plsnd 		; play sounds.
00063C  3               
00063C  3  20 84 05     	jsr proshr
00063F  3  A9 9B        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
000641  3  85 68        	sta z80_x
000643  3  A9 18        	lda #>(sprtab+TABSIZ)
000645  3  85 69        	sta z80_i
000647  3  20 82 12     	jsr dspr 		; display odd sprites.
00064A  3               
00064A  3  A9 56        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
00064C  3  85 68        	sta z80_x
00064E  3  A9 19        	lda #>(ssprit)
000650  3  85 69        	sta z80_i
000652  3               evlp1:
000652  3  20 17 26     	jsr evnt10 		; called once per main loop.
000655  3  20 00 12     	jsr pspr 		; process sprites.
000658  3               
000658  3               ; Main loop events.
000658  3               
000658  3  A9 56        	lda #<ssprit 		; point to spare sprite for spawning purposes.
00065A  3  85 68        	sta z80_x
00065C  3  A9 19        	lda #>ssprit
00065E  3  85 69        	sta z80_i
000660  3               evlp2:
000660  3  20 16 27     	jsr evnt11 		; called once per main loop.
000663  3               bsortx:
000663  3  20 76 11     	jsr bsort 		; sort sprites.
000666  3               
000666  3  A5 rr        	lda nexlev		; finished level flag.
000668  3  D0 5A        	bne newlev		; is set, go to next level.
00066A  3  A5 rr        	lda gamwon		; finished game flag.
00066C  3  D0 65        	bne evwon		; is set, finish the game.
00066E  3  A5 rr        	lda restfl 		; finished level flag.
000670  3  C9 01        	cmp #1			; has it been set?
000672  3  D0 03        	bne :+
000674  3  4C E9 05     	jmp rstrt		; yes, go to next level.
000677  3               :
000677  3  C9 02        	cmp #2			; has it been set?
000679  3  D0 03        	bne :+
00067B  3  4C F8 05     	jmp rstrtn		; yes, go to next level.
00067E  3               :
00067E  3  A5 rr        	lda deadf 		; dead flag.
000680  3  D0 57        	bne pdead		; yes, player dead.
000682  3               
000682  3               ; back to start of main loop.
000682  3               
000682  3  E6 rr        	inc frmno
000684  3  E6 rr        	inc clock
000686  3  4C 2B 06     	jmp mloop		; switched to a jmp mloop during test mode.
000689  3               
000689  3               ;----------------------------------------------------------
000689  3               ; Read blocks from list and update screen accordingly.
000689  3               ;----------------------------------------------------------
000689  3               
000689  3               .if aflag
000689  3               rbloc:
000689  3  A9 BE        	lda #<eop		; reset temp blockpointer
00068B  3  85 rr        	sta tmp
00068D  3  A9 6E        	lda #>eop
00068F  3  85 rr        	sta tmp+1
000691  3               
000691  3               rbloc2:
000691  3  A5 rr        	lda tmp			; check for last block
000693  3  C5 96        	cmp pbptr
000695  3  D0 07        	bne rbloc1
000697  3  A5 rr        	lda tmp+1
000699  3  C5 97        	cmp pbptr+1
00069B  3  D0 01        	bne rbloc1
00069D  3  60           	rts
00069E  3               rbloc1:
00069E  3  A0 00        	ldy #0
0006A0  3  B1 rr        	lda (tmp),y		; check if block for this scno
0006A2  3  C5 rr        	cmp scno
0006A4  3  D0 10        	bne rbloc0		; if not, skip
0006A6  3  C8           	iny
0006A7  3  B1 rr        	lda (tmp),y		; get y
0006A9  3  85 rr        	sta dispy
0006AB  3  C8           	iny
0006AC  3  B1 rr        	lda (tmp),y		; get x
0006AE  3  85 rr        	sta dispx
0006B0  3  C8           	iny
0006B1  3  B1 rr        	lda (tmp),y		; get blocknr
0006B3  3  20 58 0B     	jsr pattr2		; draw block
0006B6  3               rbloc0:
0006B6  3  18           	clc			; point to next block
0006B7  3  A5 rr        	lda tmp
0006B9  3  69 04        	adc #4
0006BB  3  85 rr        	sta tmp
0006BD  3  90 D2        	bcc rbloc2
0006BF  3  E6 rr        	inc tmp+1
0006C1  3  4C 91 06     	jmp rbloc2
0006C4  3               .endif
0006C4  3               
0006C4  3               ;----------------------------------------------------------
0006C4  3               ; New level
0006C4  3               ;----------------------------------------------------------
0006C4  3               
0006C4  3               newlev:
0006C4  3  A5 rr        	lda scno 			; current screen.
0006C6  3  18           	clc
0006C7  3  69 01        	adc #1				; next screen.
0006C9  3  CD 97 66     	cmp numsc			; total number of screens.
0006CC  3  B0 05        	bcs evwon			; yes, game finished.
0006CE  3  85 rr        	sta scno			; set new level number.
0006D0  3  4C E9 05     	jmp rstrt			; restart, clearing all aliens.
0006D3  3               
0006D3  3               evwon:
0006D3  3  20 4D 29     	jsr evnt18		 	; game completed.
0006D6  3  4C ED 06     	jmp tidyup			; tidy up and return to BASIC/calling routine.
0006D9  3               
0006D9  3               ;----------------------------------------------------------
0006D9  3               ; Player dead.
0006D9  3               ;----------------------------------------------------------
0006D9  3               
0006D9  3               pdead:
0006D9  3  A9 00        	lda #0				; zeroise accumulator.
0006DB  3  85 rr        	sta deadf			; reset dead flag.
0006DD  3               evdie:
0006DD  3  20 E3 28     	jsr evnt16 			; death subroutine.
0006E0  3  A5 rr        	lda numlif			; number of lives.
0006E2  3  F0 03        	beq :+
0006E4  3  4C E9 05     	jmp rstrt 			; restart game.
0006E7  3               :
0006E7  3               evfail:
0006E7  3  20 0F 29     	jsr evnt17 			; failure event.
0006EA  3  4C 85 05     	jmp game			; restart game
0006ED  3               
0006ED  3               ;----------------------------------------------------------
0006ED  3               ; Tidy things up
0006ED  3               ;----------------------------------------------------------
0006ED  3               
0006ED  3               tidyup:
0006ED  3  A0 00        	ldy #0				; digits to check.
0006EF  3               tidyu2:
0006EF  3  B9 88 09     	lda score,y 			; get score digit.
0006F2  3  CD 8E 09     	cmp hiscor 			; are we larger than high score digit?
0006F5  3  90 07        	bcc tidyu0			; high score is bigger.
0006F7  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
0006F9  3  C8           	iny				; next digit of high score.
0006FA  3  C0 06        	cpy #6
0006FC  3  D0 F1        	bne tidyu2			; repeat for all digits
0006FE  3               tidyu0:
0006FE  3  A9 88        	lda #<score			; return pointing to score.
000700  3  85 62        	sta z80_c
000702  3  A9 09        	lda #>score
000704  3  85 63        	sta z80_b
000706  3  60           	rts
000707  3               tidyu1:
000707  3  A0 05        	ldy #5
000709  3               tidyu3:
000709  3  B9 88 09     	lda score,y			; score.
00070C  3  99 8E 09     	sta hiscor,y			; high score.
00070F  3  88           	dey
000710  3  10 F7        	bpl tidyu3 			; copy score to high score.
000712  3               evnewh:
000712  3  20 73 29     	jsr evnt19			; new high score event.
000715  3  4C FE 06     	jmp tidyu0			; tidy up.
000718  3               
000718  3               ;--------------------------------------------------
000718  3               ; Restart event.
000718  3               ;--------------------------------------------------
000718  3               
000718  3               rsevt:
000718  3  A9 56        	lda #<ssprit 			; default to spare element in table.
00071A  3  85 68        	sta z80_x
00071C  3  A9 19        	lda #>ssprit
00071E  3  85 69        	sta z80_i
000720  3               evrs:
000720  3  4C E1 28     	jmp evnt14	 		; call restart event.
000723  3               
000723  3               ;------------------------------------------------------------------
000723  3               ; Copy number passed in a to string position bc, right-justified.
000723  3               ;
000723  3               ; Input:
000723  3               ;  A  = number
000723  3               ;  BC = string address
000723  3               ;
000723  3               ; Output:
000723  3               ;  BC = string with number
000723  3               ;-----------------------------------------------------------------
000723  3               
000723  3               num2ch:
000723  3  85 65        	sta z80_d		; Save number
000725  3               
000725  3  A9 00        	lda #0
000727  3  85 rr        	sta flag
000729  3               numdg3:
000729  3  A2 64        	ldx #100		; hundreds column.
00072B  3  86 64        	stx z80_e
00072D  3  20 3D 07     	jsr numdg		; show digit.
000730  3               numdg2:
000730  3  A2 0A        	ldx #10			; tens column.
000732  3  86 64        	stx z80_e
000734  3  20 3D 07     	jsr numdg		; show digit.
000737  3               
000737  3  E6 rr        	inc flag
000739  3  A2 01        	ldx #1			; units column.
00073B  3  86 64        	stx z80_e
00073D  3               numdg:
00073D  3  A9 30        	lda #48			; clear digit.
00073F  3  85 61        	sta z80_a
000741  3               numdg1:
000741  3  A5 65        	lda z80_d
000743  3  C5 64        	cmp z80_e
000745  3  90 0E        	bcc numdg0		; nothing to show.
000747  3  38           	sec
000748  3  A5 65        	lda z80_d
00074A  3  E5 64        	sbc z80_e		; subtract from column.
00074C  3  85 65        	sta z80_d
00074E  3  E6 61        	inc z80_a		; increment digit.
000750  3  E6 rr        	inc flag
000752  3  4C 41 07     	jmp numdg1		; repeat until column is zero.
000755  3               numdg0:
000755  3  A0 00        	ldy #0
000757  3  A5 61        	lda z80_a
000759  3  91 62        	sta (z80_bc),y		; write digit to buffer.
00075B  3  A5 rr        	lda flag
00075D  3  F0 06        	beq :+
00075F  3  E6 62        	inc z80_c		; next buffer position.
000761  3  D0 02        	bne :+
000763  3  E6 63        	inc z80_b
000765  3               :
000765  3  60           	rts
000766  3               num2dd:
000766  3  85 65        	sta z80_d		; Save number
000768  3               
000768  3  A9 01        	lda #1
00076A  3  85 rr        	sta flag
00076C  3               
00076C  3  4C 30 07     	jmp numdg2
00076F  3               num2td:
00076F  3  85 65        	sta z80_d		; Save number
000771  3               
000771  3  A9 01        	lda #1
000773  3  85 rr        	sta flag
000775  3  4C 29 07     	jmp numdg3
000778  3               
000778  3               ;flag:	.byte 0
000778  3               
000778  3               ;---------------------------------------------------------
000778  3               ; Reset score to "000000"
000778  3               ;---------------------------------------------------------
000778  3               
000778  3               inisc:
000778  3  A9 30        	lda #'0'
00077A  3  A2 05        	ldx #5			; digits to initialise.
00077C  3               inisc0:
00077C  3  9D 88 09     	sta score,x 		; write zero digit.
00077F  3  CA           	dex			; next column.
000780  3  10 FA        	bpl inisc0		; repeat for all digits.
000782  3               
000782  3  60           	rts
000783  3               
000783  3               ;-----------------------------------------------------
000783  3               ; Multiply h by d and return in hl.
000783  3               ;
000783  3               ; Input:
000783  3               ;  H = first number
000783  3               ;  D = second number
000783  3               ;
000783  3               ; Output:
000783  3               ;  HL = result H x D
000783  3               ;-----------------------------------------------------
000783  3               
000783  3               imul:
000783  3  A5 65        	lda z80_d		; HL = H * D
000785  3  85 64        	sta z80_e
000787  3  A5 67        	lda z80_h
000789  3  85 62        	sta z80_c		; make c first multiplier.
00078B  3               imul0:
00078B  3  A9 00        	lda #0			; zeroise total.
00078D  3  85 66        	sta z80_l
00078F  3  85 67        	sta z80_h
000791  3               
000791  3  A5 67        	lda z80_h
000793  3  85 65        	sta z80_d		; zeroise high byte.
000795  3               
000795  3  A9 08        	lda #8			; repeat 8 times.
000797  3  85 63        	sta z80_b
000799  3               imul1:
000799  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
00079B  3  90 0E        	bcc imul2		; wasn't set.
00079D  3  18           	clc			; bit was set, so add de.
00079E  3  A5 66        	lda z80_l
0007A0  3  65 64        	adc z80_e
0007A2  3  85 66        	sta z80_l
0007A4  3  A5 67        	lda z80_h
0007A6  3  65 65        	adc z80_d
0007A8  3  85 67        	sta z80_h
0007AA  3  18           	clc 			; reset carry.
0007AB  3               imul2:
0007AB  3  06 64        	asl z80_e 		; shift de 1 bit left.
0007AD  3  26 65        	rol z80_d
0007AF  3  C6 63        	dec z80_b
0007B1  3  D0 E6        	bne imul1		; repeat 8 times.
0007B3  3               
0007B3  3  60           	rts
0007B4  3               
0007B4  3               ;-----------------------------------------------
0007B4  3               ; Divide d by e and return in d, remainder in a.
0007B4  3               ;
0007B4  3               ; Input:
0007B4  3               ;  D = first number
0007B4  3               ;  E = second number
0007B4  3               ;
0007B4  3               ; Output:
0007B4  3               ;  D = result D/E
0007B4  3               ;  A = remainder
0007B4  3               ;-----------------------------------------------
0007B4  3               
0007B4  3               idiv:
0007B4  3  A9 00        	lda #0
0007B6  3  A0 08        	ldy #8		 	; bits to shift.
0007B8  3  06 65        	asl z80_d
0007BA  3               idiv0:
0007BA  3  2A           	rol a 			; multiply d by 2.
0007BB  3  C5 64        	cmp z80_e 		; test if e is smaller.
0007BD  3  90 02        	bcc idiv1		; e is greater, no division this time.
0007BF  3  E5 64        	sbc z80_e		; subtract it.
0007C1  3               idiv1:
0007C1  3  26 65        	rol z80_d		; rotate into d.
0007C3  3  88           	dey
0007C4  3  D0 F4        	bne idiv0		; repeat
0007C6  3  60           	rts
0007C7  3               
0007C7  3               ;---------------------------------------------------
0007C7  3               ; Play AY sound effect
0007C7  3               ;---------------------------------------------------
0007C7  3               
0007C7  3               plsnd:
0007C7  3  60           	rts
0007C8  3               
0007C8  3               ;---------------------------------------------------
0007C8  3               ; Objects handling.
0007C8  3               ; 32 bytes for image
0007C8  3               ; 3 for room, y and x
0007C8  3               ; 3 for starting room, y and x.
0007C8  3               ; 254 = disabled.
0007C8  3               ; 255 = object in player"s pockets.
0007C8  3               ;---------------------------------------------------
0007C8  3               
0007C8  3               ;---------------------------------------------------
0007C8  3               ; Show items present.
0007C8  3               ;---------------------------------------------------
0007C8  3               
0007C8  3               .if oflag
0007C8  3               shwob:
0007C8  3  A9 74        	lda #<objdta 			; objects table.
0007CA  3  85 66        	sta z80_l
0007CC  3  A9 68        	lda #>objdta
0007CE  3  85 67        	sta z80_h
0007D0  3               
0007D0  3  AD 2C 02     	lda numob 			; number of objects in the game.
0007D3  3  85 rr        	sta sprcnt
0007D5  3               shwob0:
0007D5  3  A0 20        	ldy #32 			; distance to room number.
0007D7  3  B1 66        	lda (z80_hl),y 			; same as an item?
0007D9  3  C5 rr        	cmp scno 			; current location.
0007DB  3  D0 03        	bne :+
0007DD  3  20 F2 07     	jsr dobj 			; yes, display object.
0007E0  3               :
0007E0  3  18           	clc
0007E1  3  A5 66        	lda z80_l
0007E3  3  69 26        	adc #38 			; distance to next item.
0007E5  3  85 66        	sta z80_l
0007E7  3  A5 67        	lda z80_h
0007E9  3  69 00        	adc #0
0007EB  3  85 67        	sta z80_h	 		; point to it.
0007ED  3  C6 rr        	dec sprcnt
0007EF  3  D0 E4        	bne shwob0 			; repeat for others.
0007F1  3  60           	rts
0007F2  3               
0007F2  3               ;---------------------------------------------------
0007F2  3               ; Display object.
0007F2  3               ; hl must point to object's start address.
0007F2  3               ;
0007F2  3               ; Input:
0007F2  3               ;  HL = object address
0007F2  3               ;---------------------------------------------------
0007F2  3               
0007F2  3               dobj:
0007F2  3  A0 21        	ldy #33
0007F4  3  B1 66        	lda (z80_hl),y 			; point to y.
0007F6  3  85 rr        	sta dispy
0007F8  3  C8           	iny
0007F9  3  B1 66        	lda (z80_hl),y 			; point to x.
0007FB  3  85 rr        	sta dispx
0007FD  3               dobj1:
0007FD  3  4C EA 0B     	jmp sprite 			; draw this sprite.
000800  3               
000800  3               ;--------------------------------------
000800  3               ; Remove an object.
000800  3               ;
000800  3               ; Input:
000800  3               ;  A = object number
000800  3               ;--------------------------------------
000800  3               
000800  3               remob:
000800  3  CD 2C 02     	cmp numob			; number of objects in game.
000803  3  90 01        	bcc :+				; are we checking past the end?
000805  3  60           	rts				; yes, can't get non-existent item.
000806  3               :
000806  3  48           	pha				; remember object.
000807  3  20 15 08     	jsr getob			; pick it up if we haven't already got it.
00080A  3  68           	pla				; retrieve object number.
00080B  3  20 44 08     	jsr gotob			; get its address.
00080E  3  A9 FE        	lda #254
000810  3  A0 20        	ldy #32
000812  3  91 66        	sta (z80_hl),y			; remove it.
000814  3  60           	rts
000815  3               
000815  3               ;---------------------------------------------------
000815  3               ; Pick up object number held in the accumulator.
000815  3               ;
000815  3               ; Input:
000815  3               ;  A = object number
000815  3               ;---------------------------------------------------
000815  3               
000815  3               getob:
000815  3  CD 2C 02     	cmp numob 		; number of objects in game.
000818  3  90 01        	bcc :+			; are we checking past the end?
00081A  3  60           	rts			; yes, can't get non-existent item.
00081B  3               :
00081B  3  20 44 08     	jsr gotob 		; check if we already have it.
00081E  3  C9 FF        	cmp #255
000820  3  D0 01        	bne :+
000822  3  60           	rts			; we already do.
000823  3               :
000823  3  A0 20        	ldy #32
000825  3  B1 66        	lda (z80_hl),y		; is it on this screen?
000827  3  C5 rr        	cmp scno 		; current screen.
000829  3  D0 14        	bne getob0		; not on screen, so nothing to delete.
00082B  3               
00082B  3  A9 FF        	lda #255
00082D  3  91 66        	sta (z80_hl),y		; pick it up.
00082F  3  C8           	iny 			; point to y coord.
000830  3               getob1:
000830  3  A0 21        	ldy #33
000832  3  B1 66        	lda (z80_hl),y		; y coord.
000834  3  85 rr        	sta dispy
000836  3  A0 22        	ldy #34
000838  3  B1 66        	lda (z80_hl),y 		; x coord.
00083A  3  85 rr        	sta dispx
00083C  3  4C FD 07     	jmp dobj1 		; delete object sprite.
00083F  3               getob0:
00083F  3  A9 FF        	lda #255
000841  3  91 66        	sta (z80_hl),y 		; pick it up.
000843  3  60           	rts
000844  3               .endif
000844  3               
000844  3               ;-----------------------------------------------------------------
000844  3               ; Got object check.
000844  3               ; Call with object in accumulator, returns zero set if in pockets.
000844  3               ;
000844  3               ; Input:
000844  3               ;  A = object number
000844  3               ;-----------------------------------------------------------------
000844  3               .if oflag .or mflag
000844  3               gotob:
000844  3  CD 2C 02     	cmp numob 		; number of objects in game.
000847  3  90 03        	bcc :+ 			; are we checking past the end?
000849  3  4C 50 08     	jmp gotob0 		; yes, we can't have a non-existent object.
00084C  3               :
00084C  3  20 55 08     	jsr findob		; find the object.
00084F  3               gotob1:
00084F  3  60           	rts
000850  3               
000850  3               gotob0:
000850  3  A9 FE        	lda #254 		; missing.
000852  3  4C 4F 08     	jmp gotob1
000855  3               
000855  3               findob:
000855  3  48           	pha			; save object number
000856  3  A9 74        	lda #<objdta 		; objects.
000858  3  85 66        	sta z80_l
00085A  3  A9 68        	lda #>objdta
00085C  3  85 67        	sta z80_h
00085E  3  68           	pla			; retreive object number
00085F  3  F0 0F        	beq fndob1 		; is it zero? yes, skip loop.
000861  3  AA           	tax 			; loop counter
000862  3               fndob2:
000862  3  18           	clc
000863  3  A5 66        	lda z80_l
000865  3  69 26        	adc #38 		; size of each object.
000867  3  85 66        	sta z80_l
000869  3  90 02        	bcc :+
00086B  3  E6 67        	inc z80_h
00086D  3               :
00086D  3  CA           	dex 			; repeat until we find address.
00086E  3  D0 F2        	bne fndob2
000870  3               fndob1:
000870  3  A0 20        	ldy #32			; distance to room it's in.
000872  3  B1 66        	lda (z80_hl),y		; fetch status.
000874  3  60           	rts
000875  3               .endif
000875  3               
000875  3               ;---------------------------------------------
000875  3               ; Drop object number at (dispx, dispy).
000875  3               ;
000875  3               ; Input:
000875  3               ;  A = object number
000875  3               ;---------------------------------------------
000875  3               
000875  3               .if oflag
000875  3               drpob:
000875  3  CD 2C 02     	cmp numob 		; are we checking past the end?
000878  3  90 01        	bcc :+
00087A  3  60           	rts			; yes, can't drop non-existent item.
00087B  3               :
00087B  3  20 44 08     	jsr gotob		; make sure object is in inventory.
00087E  3  C5 rr        	cmp scno		; already on this screen?
000880  3  D0 01        	bne :+
000882  3  60           	rts			; yes, nothing to do.
000883  3               :
000883  3  A0 20        	ldy #32
000885  3  A5 rr        	lda scno
000887  3  91 66        	sta (z80_hl),y		; bring onto screen.
000889  3  A5 rr        	lda dispy		; sprite y coordinate.
00088B  3  C8           	iny
00088C  3  91 66        	sta (z80_hl),y		; point to object y.
00088E  3  A5 rr        	lda dispx 		; sprite x coordinate.
000890  3  C8           	iny
000891  3  91 66        	sta (z80_hl),y 		; point to object x
000893  3  4C F2 07     	jmp dobj		; draw the object sprite.
000896  3               
000896  3               ;-----------------------------------------------
000896  3               ; Seek objects at sprite position.
000896  3               ;
000896  3               ; Output:
000896  3               ;  A = object number, if not found A=255
000896  3               ;-----------------------------------------------
000896  3               
000896  3               skobj:
000896  3  A9 74        	lda #<objdta 		; pointer to objects.
000898  3  85 66        	sta z80_l
00089A  3  A9 68        	lda #>objdta
00089C  3  85 67        	sta z80_h
00089E  3               
00089E  3  AD 2C 02     	lda numob 		; number of objects in game.
0008A1  3  85 63        	sta z80_b 		; set up the loop counter.
0008A3  3               skobj0:
0008A3  3  A5 rr        	lda scno		; current room number.
0008A5  3  A0 20        	ldy #32
0008A7  3  D1 66        	cmp (z80_hl),y		; is object in here?
0008A9  3  D0 03        	bne :+
0008AB  3  20 C0 08     	jsr skobj1		; yes, check coordinates.
0008AE  3               :
0008AE  3  18           	clc			; point to next object in table.
0008AF  3  A5 66        	lda z80_l
0008B1  3  69 26        	adc #38			; size of each object.
0008B3  3  85 66        	sta z80_l
0008B5  3  90 02        	bcc :+
0008B7  3  E6 67        	inc z80_h
0008B9  3               :
0008B9  3  C6 63        	dec z80_b
0008BB  3  D0 E6        	bne skobj0		; repeat for all objects.
0008BD  3               
0008BD  3  A9 FF        	lda #255		; end of list and nothing found, return 255.
0008BF  3  60           	rts
0008C0  3               
0008C0  3               skobj1:
0008C0  3  A0 21        	ldy #33			; point to y coordinate.
0008C2  3  B1 66        	lda (z80_hl),y		; point to y coordinate.
0008C4  3  38           	sec
0008C5  3  A0 08        	ldy #8
0008C7  3  F1 68        	sbc (z80_ix),y 		; subtract sprite y.
0008C9  3  18           	clc
0008CA  3  69 0F        	adc #15			; add sprite height minus one.
0008CC  3  C9 1F        	cmp #31			; within range?
0008CE  3  90 03        	bcc :+
0008D0  3  4C EE 08     	jmp skobj2		; no, ignore object.
0008D3  3               :
0008D3  3  A0 22        	ldy #34			; point to x coordinate now.
0008D5  3  B1 66        	lda (z80_hl),y 		; get coordinate.
0008D7  3  38           	sec
0008D8  3  A0 09        	ldy #9
0008DA  3  F1 68        	sbc (z80_ix),y 		; subtract the sprite x.
0008DC  3  18           	clc			; add sprite width minus one.
0008DD  3  69 0F        	adc #15
0008DF  3  C9 1F        	cmp #31			; within range?
0008E1  3  90 03        	bcc :+
0008E3  3  4C EE 08     	jmp skobj2		; no, ignore object.
0008E6  3               :
0008E6  3  68           	pla			; remove return address from stack.
0008E7  3  68           	pla
0008E8  3               
0008E8  3  AD 2C 02     	lda numob 		; objects in game.
0008EB  3  38           	sec
0008EC  3  E5 63        	sbc z80_b		; subtract loop counter.
0008EE  3               skobj2:
0008EE  3  60           	rts			; accumulator now points to object.
0008EF  3               .endif
0008EF  3               
0008EF  3               ;---------------------------------------------------------------------
0008EF  3               ; Spawn a new sprite.
0008EF  3               ;---------------------------------------------------------------------
0008EF  3               
0008EF  3               spawn:
0008EF  3  A9 8A        	lda #<sprtab		; sprite table.
0008F1  3  85 66        	sta z80_l
0008F3  3  A9 18        	lda #>sprtab
0008F5  3  85 67        	sta z80_h
0008F7  3               numsp1:
0008F7  3  A9 0C        	lda #NUMSPR		; number of sprites.
0008F9  3  85 rr        	sta spcnt
0008FB  3               spaw0:
0008FB  3  A0 00        	ldy #0
0008FD  3  B1 66        	lda (z80_hl),y		; get sprite type.
0008FF  3  C9 FF        	cmp #255		; is it an unused slot?
000901  3  F0 0F        	beq spaw1 		; yes, we can use this one.
000903  3               
000903  3  18           	clc 			; point to next sprite in table.
000904  3  A5 66        	lda z80_l
000906  3  69 11        	adc #TABSIZ		; size of each entry.
000908  3  85 66        	sta z80_l
00090A  3  90 02        	bcc :+
00090C  3  E6 67        	inc z80_h
00090E  3               :
00090E  3  C6 rr        	dec spcnt		; one less iteration.
000910  3  D0 E9        	bne spaw0		; keep going until we find a slot.
000912  3               
000912  3               ; Didn't find one but drop through and set up a dummy sprite instead.
000912  3               
000912  3               spaw1:
000912  3  A5 69        	lda z80_i		; address of original sprite.
000914  3  48           	pha
000915  3  A5 68        	lda z80_x
000917  3  48           	pha
000918  3               
000918  3  A5 66        	lda z80_l		; store spawned sprite address.
00091A  3  85 rr        	sta spptr
00091C  3  A5 67        	lda z80_h
00091E  3  85 rr        	sta spptr+1
000920  3               
000920  3  A5 62        	lda z80_c
000922  3  A0 00        	ldy #0
000924  3  91 66        	sta (z80_hl),y 		; set the type.
000926  3  A0 05        	ldy #5
000928  3  91 66        	sta (z80_hl),y		; copy
00092A  3               
00092A  3  A5 63        	lda z80_b
00092C  3  A0 01        	ldy #1
00092E  3  91 66        	sta (z80_hl),y		; set the image.
000930  3  A0 06        	ldy #6
000932  3  91 66        	sta (z80_hl),y		; copy
000934  3               
000934  3  A9 00        	lda #0 			; frame zero.
000936  3  A0 02        	ldy #2
000938  3  91 66        	sta (z80_hl),y		; set frame.
00093A  3  A0 07        	ldy #7
00093C  3  91 66        	sta (z80_hl),y		; copy
00093E  3               
00093E  3  A0 08        	ldy #8
000940  3  B1 68        	lda (z80_ix),y 		; x coordinate.
000942  3  A0 03        	ldy #3
000944  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
000946  3  A0 08        	ldy #8
000948  3  91 66        	sta (z80_hl),y		; copy
00094A  3               
00094A  3  A0 09        	ldy #9
00094C  3  B1 68        	lda (z80_ix),y 		; y coordinate.
00094E  3  A0 04        	ldy #4
000950  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
000952  3  A0 09        	ldy #9
000954  3  91 66        	sta (z80_hl),y		; copy
000956  3               
000956  3  A0 0A        	ldy #10			; direction of original.
000958  3  B1 68        	lda (z80_ix),y
00095A  3  91 66        	sta (z80_hl),y		; direction
00095C  3               
00095C  3  A9 00        	lda #0
00095E  3  A0 0B        	ldy #11
000960  3  91 66        	sta (z80_hl),y		; reset parameter.
000962  3  C8           	iny
000963  3  91 66        	sta (z80_hl),y		; reset parameter.
000965  3  C8           	iny
000966  3  91 66        	sta (z80_hl),y		; reset parameter.
000968  3  C8           	iny
000969  3  91 66        	sta (z80_hl),y		; reset parameter.
00096B  3               rtssp:
00096B  3  A5 rr        	lda spptr		; address of new sprite.
00096D  3  85 68        	sta z80_x
00096F  3  A5 rr        	lda spptr+1
000971  3  85 69        	sta z80_i
000973  3               evis1:
000973  3  20 E3 25     	jsr evnt09 		; call sprite initialisation event.
000976  3               
000976  3  A5 rr        	lda spptr 		; address of new sprite.
000978  3  85 68        	sta z80_x
00097A  3  A5 rr        	lda spptr+1
00097C  3  85 69        	sta z80_i
00097E  3  20 A0 13     	jsr sspria 		; display the new sprite.
000981  3               
000981  3  68           	pla			; address of original sprite.
000982  3  85 68        	sta z80_x
000984  3  68           	pla
000985  3  85 69        	sta z80_i
000987  3               
000987  3  60           	rts
000988  3               
000988  3               ;spcnt:	.byte 0
000988  3               ;spptr:	.word 0			; spawned sprite pointer.
000988  3               ;seed:	.byte 0			; seed for random numbers.
000988  3  30 30 30 30  score:	.byte "000000"		; player"s score.
00098C  3  30 30        
00098E  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
000992  3  30 30        
000994  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
000998  3  30 30        
00099A  3  00 80        grbase:	.word ScreenAddr	; graphics base address.
00099C  3               
00099C  3               ;----------------------------------------------------
00099C  3               ; Check y-pos
00099C  3               ;----------------------------------------------------
00099C  3               
00099C  3               checkx:
00099C  3  A5 rr        	lda dispy		; y position.
00099E  3  C9 18        	cmp #24			; off screen?
0009A0  3  B0 01        	bcs :+
0009A2  3  60           	rts			; no, it's okay.
0009A3  3               :
0009A3  3  68           	pla			; remove return address from stack.
0009A4  3  85 66        	sta z80_l
0009A6  3  68           	pla
0009A7  3  85 67        	sta z80_h
0009A9  3  60           	rts
0009AA  3               
0009AA  3               ;-----------------------------------------------
0009AA  3               ; Displays the current high score.
0009AA  3               ;-----------------------------------------------
0009AA  3               
0009AA  3               dhisc:
0009AA  3  A9 8E        	lda #<hiscor 		; high score text.
0009AC  3  85 66        	sta z80_l
0009AE  3  A9 09        	lda #>hiscor
0009B0  3  85 67        	sta z80_h
0009B2  3  4C BD 09     	jmp dscor1		; check in printable range then show 6 digits.
0009B5  3               
0009B5  3               ;------------------------------------------------------
0009B5  3               ; Displays the current score.
0009B5  3               ;------------------------------------------------------
0009B5  3               
0009B5  3               dscor:
0009B5  3  A9 88        	lda #<score		; score text.
0009B7  3  85 66        	sta z80_l
0009B9  3  A9 09        	lda #>score
0009BB  3  85 67        	sta z80_h
0009BD  3               dscor1:
0009BD  3  20 4A 11     	jsr preprt		; set up font and print position.
0009C0  3  20 9C 09     	jsr checkx		; make sure we're in a printable range.
0009C3  3               
0009C3  3  A9 06        	lda #6			; digits to display.
0009C5  3  85 63        	sta z80_b
0009C7  3  A5 rr        	lda prtmod		; get print mode.
0009C9  3  F0 03        	beq :+			; standard size text?
0009CB  3  4C EA 09     	jmp bscor0		; no, show double-height.
0009CE  3               :
0009CE  3               dscor0:
0009CE  3  A0 00        	ldy #0
0009D0  3  B1 66        	lda (z80_hl),y 		; fetch character.
0009D2  3  20 11 0B     	jsr pchar 		; display character.
0009D5  3  E6 rr        	inc dispx		; move along x coordinate
0009D7  3               
0009D7  3  E6 66        	inc z80_l		; next score column.
0009D9  3  D0 02        	bne :+
0009DB  3  E6 67        	inc z80_h
0009DD  3               :
0009DD  3  C6 63        	dec z80_b
0009DF  3  D0 ED        	bne dscor0 		; repeat for all digits.
0009E1  3               dscor2:
0009E1  3  A5 rr        	lda dispx 		; set up display coordinates.
0009E3  3  85 rr        	sta charx
0009E5  3  A5 rr        	lda dispy
0009E7  3  85 rr        	sta chary
0009E9  3  60           	rts
0009EA  3               
0009EA  3               ;------------------------------------------------------
0009EA  3               ; Displays the current score in double-height characters.
0009EA  3               ;
0009EA  3               ; Input:
0009EA  3               ;  B  = digit number
0009EA  3               ;  HL = score string
0009EA  3               ;------------------------------------------------------
0009EA  3               
0009EA  3               bscor0:
0009EA  3  A0 00        	ldy #0
0009EC  3               
0009EC  3  B1 66        	lda (z80_hl),y 		; fetch character.
0009EE  3  20 CD 10     	jsr bchar 		; display big char.
0009F1  3               
0009F1  3  E6 66        	inc z80_l 		; next score column.
0009F3  3  D0 02        	bne :+
0009F5  3  E6 67        	inc z80_h
0009F7  3               :
0009F7  3  C6 63        	dec z80_b
0009F9  3  F0 03        	beq :+
0009FB  3  4C EA 09     	jmp bscor0 		; repeat for all digits.
0009FE  3               :
0009FE  3  4C E1 09     	jmp dscor2 		; tidy up line and column variables.
000A01  3               
000A01  3               ;-----------------------------------------------------
000A01  3               ; Adds number in the hl pair to the score.
000A01  3               ;-----------------------------------------------------
000A01  3               
000A01  3               addsc:
000A01  3  A9 89        	lda #<(score+1) 	; ten thousands column.
000A03  3  85 64        	sta z80_e
000A05  3  A9 09        	lda #>(score+1)
000A07  3  85 65        	sta z80_d
000A09  3  A9 10        	lda #<10000		; amount to add each time.
000A0B  3  85 62        	sta z80_c
000A0D  3  A9 27        	lda #>10000
000A0F  3  85 63        	sta z80_b
000A11  3  20 55 0A     	jsr incsc		; add to score.
000A14  3               
000A14  3  E6 64        	inc z80_e		; thousands column.
000A16  3  D0 02        	bne :+
000A18  3  E6 65        	inc z80_d
000A1A  3               :
000A1A  3  A9 E8        	lda #<1000		; amount to add each time.
000A1C  3  85 62        	sta z80_c
000A1E  3  A9 03        	lda #>1000
000A20  3  85 63        	sta z80_b
000A22  3  20 55 0A     	jsr incsc 		; add to score.
000A25  3               
000A25  3  E6 64        	inc z80_e		; hundreds column.
000A27  3  D0 02        	bne :+
000A29  3  E6 65        	inc z80_d
000A2B  3               :
000A2B  3  A9 64        	lda #<100		; amount to add each time.
000A2D  3  85 62        	sta z80_c
000A2F  3  A9 00        	lda #>100
000A31  3  85 63        	sta z80_b
000A33  3  20 55 0A     	jsr incsc		; add to score.
000A36  3               
000A36  3  E6 64        	inc z80_e 		; tens column.
000A38  3  D0 02        	bne :+
000A3A  3  E6 65        	inc z80_d
000A3C  3               :
000A3C  3  A9 0A        	lda #<10		; amount to add each time.
000A3E  3  85 62        	sta z80_c
000A40  3  A9 00        	lda #>10
000A42  3  85 63        	sta z80_b
000A44  3  20 55 0A     	jsr incsc 		; add to score.
000A47  3               
000A47  3  E6 64        	inc z80_e		; units column.
000A49  3  D0 02        	bne :+
000A4B  3  E6 65        	inc z80_d
000A4D  3               :
000A4D  3  A9 01        	lda #<1			; units.
000A4F  3  85 62        	sta z80_c
000A51  3  A9 00        	lda #>1
000A53  3  85 63        	sta z80_b
000A55  3               incsc:
000A55  3  A5 67        	lda z80_h		; store amount to add.
000A57  3  48           	pha
000A58  3  A5 66        	lda z80_l
000A5A  3  48           	pha
000A5B  3               
000A5B  3  38           	sec			; subtract from amount to add.
000A5C  3  A5 66        	lda z80_l
000A5E  3  E5 62        	sbc z80_c
000A60  3  85 66        	sta z80_l
000A62  3  A5 67        	lda z80_h
000A64  3  E5 63        	sbc z80_b
000A66  3  85 67        	sta z80_h
000A68  3  90 14        	bcc incsc0		; too much, restore value.
000A6A  3               
000A6A  3  68           	pla			; delete the previous amount from the stack.
000A6B  3  68           	pla
000A6C  3               
000A6C  3  A5 65        	lda z80_d 		; store column position.
000A6E  3  48           	pha
000A6F  3  A5 64        	lda z80_e
000A71  3  48           	pha
000A72  3  20 85 0A     	jsr incsc2		; do the increment.
000A75  3               
000A75  3  68           	pla			; restore column.
000A76  3  85 64        	sta z80_e
000A78  3  68           	pla
000A79  3  85 65        	sta z80_d
000A7B  3  4C 55 0A     	jmp incsc		; repeat until all added.
000A7E  3               
000A7E  3               incsc0:
000A7E  3  68           	pla			; restore previous value.
000A7F  3  85 66        	sta z80_l
000A81  3  68           	pla
000A82  3  85 67        	sta z80_h
000A84  3  60           	rts
000A85  3               incsc2:
000A85  3  A0 00        	ldy #0
000A87  3  B1 64        	lda (z80_de),y 		; get amount.
000A89  3  18           	clc
000A8A  3  69 01        	adc #1			; add one to column.
000A8C  3  91 64        	sta (z80_de),y		; write new column total.
000A8E  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
000A90  3  B0 01        	bcs :+
000A92  3  60           	rts			; no, carry on.
000A93  3               :
000A93  3  A9 30        	lda #'0'		; make it zero.
000A95  3  91 64        	sta (z80_de),y		; write new column total.
000A97  3  C6 64        	dec z80_e		; back one column.
000A99  3  D0 02        	bne :+
000A9B  3  C6 65        	dec z80_d
000A9D  3               :
000A9D  3  4C 85 0A     	jmp incsc2
000AA0  3               
000AA0  3               ;------------------------------------
000AA0  3               ; Add bonus to score and reset bonus
000AA0  3               ;------------------------------------
000AA0  3               
000AA0  3               addbo:
000AA0  3  A2 05        	ldx #5			; last digit.
000AA2  3  18           	clc			; clear carry.
000AA3  3               addbo0:
000AA3  3  BD 88 09     	lda score,x		; get score.
000AA6  3  7D 94 09     	adc bonus,x		; add bonus.
000AA9  3  38           	sec			; 0 to 18.
000AAA  3  E9 30        	sbc #48
000AAC  3  48           	pha
000AAD  3  A9 30        	lda #'0'
000AAF  3  9D 94 09     	sta bonus,x		; zeroise bonus.
000AB2  3  68           	pla
000AB3  3  C9 3A        	cmp #58			; carried?
000AB5  3  B0 07        	bcs addbo2		; no, do next one.
000AB7  3  38           	sec
000AB8  3  E9 0A        	sbc #10			; subtract 10.
000ABA  3  38           	sec
000ABB  3  4C BF 0A     	jmp addbo1
000ABE  3               addbo2:
000ABE  3  18           	clc
000ABF  3               addbo1:
000ABF  3  9D 88 09     	sta score,x		; write new score.
000AC2  3  CA           	dex			; next digit.
000AC3  3  10 DE        	bpl addbo0		; repeat for all 6 digits.
000AC5  3  60           	rts
000AC6  3               
000AC6  3               ;------------------------------------
000AC6  3               ; Swap score and bonus.
000AC6  3               ;------------------------------------
000AC6  3               
000AC6  3               swpsb:
000AC6  3  A2 05        	ldx #5			; digits to add.
000AC8  3               swpsb0:
000AC8  3  BD 88 09     	lda score,x 		; get score digits.
000ACB  3  48           	pha			; save digit
000ACC  3  BD 94 09     	lda bonus,x 		; get bonus digits.
000ACF  3  9D 88 09     	sta score,x		; switch score-bonus
000AD2  3  68           	pla
000AD3  3  9D 94 09     	sta bonus,x
000AD6  3  CA           	dex 			; repeat for all 6 digits.
000AD7  3  10 EF        	bpl swpsb0
000AD9  3  60           	rts
000ADA  3               
000ADA  3               ;----------------------------------------------------
000ADA  3               ; Get print address.
000ADA  3               ;----------------------------------------------------
000ADA  3               
000ADA  3               gprad:
000ADA  3  A5 rr        	lda dispx		; get x
000ADC  3  85 rr        	sta scraddr		; store lb address
000ADE  3  A5 rr        	lda dispy		; get y
000AE0  3  09 80        	ora #$80		; add $80
000AE2  3  85 rr        	sta scraddr+1		; store hb address
000AE4  3  60           	rts
000AE5  3               
000AE5  3               ;--------------------------------------------------------------
000AE5  3               ; Get property buffer address of char at (dispx, dispy) in hl.
000AE5  3               ;
000AE5  3               ; Output:
000AE5  3               ;  bufaddr = MAP + dispy*32 + dispx
000AE5  3               ;--------------------------------------------------------------
000AE5  3               
000AE5  3               pradd:
000AE5  3  A5 rr        	lda dispy 		; y coordinate.
000AE7  3  85 rr        	sta bufaddr
000AE9  3  A9 00        	lda #0
000AEB  3  85 rr        	sta bufaddr+1
000AED  3  06 rr        	asl bufaddr  		; multiply char by 32
000AEF  3  26 rr        	rol bufaddr+1
000AF1  3  06 rr        	asl bufaddr
000AF3  3  26 rr        	rol bufaddr+1
000AF5  3  06 rr        	asl bufaddr
000AF7  3  26 rr        	rol bufaddr+1
000AF9  3  06 rr        	asl bufaddr
000AFB  3  26 rr        	rol bufaddr+1
000AFD  3  06 rr        	asl bufaddr
000AFF  3  26 rr        	rol bufaddr+1
000B01  3  18           	clc			; add address of MAP graphics.
000B02  3  A5 rr        	lda bufaddr
000B04  3  65 rr        	adc dispx
000B06  3  69 00        	adc #<MAP
000B08  3  85 rr        	sta bufaddr
000B0A  3  A5 rr        	lda bufaddr+1
000B0C  3  69 98        	adc #>MAP
000B0E  3  85 rr        	sta bufaddr+1
000B10  3  60           	rts
000B11  3               
000B11  3               ;----------------------------------------------------
000B11  3               ; Display character in A at dispx,dispy.
000B11  3               ;
000B11  3               ; Input:
000B11  3               ;  A 	   = character to print
000B11  3               ;----------------------------------------------------
000B11  3               
000B11  3               pchar:
000B11  3  85 rr        	sta fntaddr
000B13  3  A9 00        	lda #0
000B15  3  85 rr        	sta fntaddr+1
000B17  3  06 rr        	asl fntaddr  		; multiply char by 8.
000B19  3  26 rr        	rol fntaddr+1
000B1B  3  06 rr        	asl fntaddr
000B1D  3  26 rr        	rol fntaddr+1
000B1F  3  06 rr        	asl fntaddr
000B21  3  26 rr        	rol fntaddr+1
000B23  3               
000B23  3  A5 rr        	lda fntaddr
000B25  3  18           	clc
000B26  3  69 6C        	adc #<(FONT-256)
000B28  3  85 rr        	sta fntaddr		; that's the low byte.
000B2A  3  A5 rr        	lda fntaddr+1
000B2C  3  69 6A        	adc #>(FONT-256)
000B2E  3  85 rr        	sta fntaddr+1		; add displacement.
000B30  3               pchark:
000B30  3  20 DA 0A     	jsr gprad		; get screen address.
000B33  3  A2 07        	ldx #7			; lines to write.
000B35  3               pchar0:
000B35  3  A0 00        	ldy #0
000B37  3  B1 rr        	lda (fntaddr),y 	; get image byte.
000B39  3  BC 4A 0B     	ldy scrtab,x		; Get rowoffset
000B3C  3               
000B3C  3  49 00        	eor #TxtInvert		; Invert
000B3E  3               
000B3E  3  91 rr        	sta (scraddr),y 	; copy to screen.
000B40  3  E6 rr        	inc fntaddr		; next image byte.
000B42  3  D0 02        	bne :+
000B44  3  E6 rr        	inc fntaddr+1
000B46  3               :
000B46  3  CA           	dex			; next screen row down.
000B47  3  10 EC        	bpl pchar0		; repeat.
000B49  3  60           	rts
000B4A  3               
000B4A  3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
000B4E  3  60 40 20 00  
000B52  3               
000B52  3               ;----------------------------------------------
000B52  3               ; Print attributes, properties and pixels.
000B52  3               ;
000B52  3               ; Input:
000B52  3               ;  A	= tile number
000B52  3               ;----------------------------------------------
000B52  3               
000B52  3  00           colpatt:	.byte 0
000B53  3               
000B53  3               pattr:
000B53  3               .if aflag
000B53  3  48           	pha
000B54  3  20 B1 0B     	jsr wbloc		; save blockinfo
000B57  3  68           	pla
000B58  3               .endif
000B58  3               
000B58  3               pattr2:
000B58  3  85 63        	sta z80_b		; store cell in b register for now.
000B5A  3  AA           	tax
000B5B  3  BD 1C 30     	lda bprop,x 		; block properties.
000B5E  3  85 62        	sta z80_c
000B60  3  C9 08        	cmp #COLECT
000B62  3  D0 05        	bne :+
000B64  3  A5 63        	lda z80_b
000B66  3  8D 52 0B     	sta colpatt
000B69  3               :
000B69  3  20 E5 0A     	jsr pradd 		; get property buffer address.
000B6C  3  A5 62        	lda z80_c
000B6E  3  A0 00        	ldy #0
000B70  3  91 rr        	sta (bufaddr),y 	; write property.
000B72  3  A5 63        	lda z80_b 		; restore cell.
000B74  3               
000B74  3               ; Print attributes, no properties.
000B74  3               
000B74  3               panp:
000B74  3  85 64        	sta z80_e		; displacement in e.
000B76  3  A9 00        	lda #0
000B78  3  85 65        	sta z80_d		; no high byte.
000B7A  3  06 64        	asl z80_e  		; multiply char by 8.
000B7C  3  26 65        	rol z80_d
000B7E  3  06 64        	asl z80_e
000B80  3  26 65        	rol z80_d
000B82  3  06 64        	asl z80_e
000B84  3  26 65        	rol z80_d
000B86  3  18           	clc
000B87  3  A5 64        	lda z80_e
000B89  3  69 A4        	adc #<chgfx 		; address of graphics.
000B8B  3  85 rr        	sta tileaddr
000B8D  3  A5 65        	lda z80_d
000B8F  3  69 2D        	adc #>chgfx
000B91  3  85 rr        	sta tileaddr+1
000B93  3  20 DA 0A     	jsr gprad 		; get screen address.
000B96  3  A2 07        	ldx #7			; number of pixel rows to write.
000B98  3               panp0:
000B98  3  A0 00        	ldy #0
000B9A  3  B1 rr        	lda (tileaddr),y 	; get image byte.
000B9C  3  49 00        	eor #TxtInvert		; Invert
000B9E  3  BC 4A 0B     	ldy scrtab,x
000BA1  3  91 rr        	sta (scraddr),y 	; copy to screen.
000BA3  3  E6 rr        	inc tileaddr 		; next image byte.
000BA5  3  D0 02        	bne :+
000BA7  3  E6 rr        	inc tileaddr+1
000BA9  3               :
000BA9  3  CA           	dex	 		; repeat for 8 pixel rows.
000BAA  3  10 EC        	bpl panp0
000BAC  3  E6 rr        	inc dispx 		; move along one.
000BAE  3  E6 rr        	inc charx
000BB0  3  60           	rts
000BB1  3               
000BB1  3               ;----------------------------------------------
000BB1  3               ; Write block
000BB1  3               ;----------------------------------------------
000BB1  3               
000BB1  3               .if aflag
000BB1  3               wbloc:
000BB1  3  A0 03        	ldy #3
000BB3  3  91 96        	sta (pbptr),y		; store block number
000BB5  3  88           	dey
000BB6  3  A5 rr        	lda dispx
000BB8  3  91 96        	sta (pbptr),y		; write x position of block.
000BBA  3  88           	dey
000BBB  3  A5 rr        	lda dispy
000BBD  3  91 96        	sta (pbptr),y		; write y position of block.
000BBF  3  88           	dey
000BC0  3  A5 rr        	lda scno
000BC2  3  91 96        	sta (pbptr),y		; write screen.
000BC4  3  18           	clc			; point to next free location
000BC5  3  A5 96        	lda pbptr
000BC7  3  69 04        	adc #4
000BC9  3  85 96        	sta pbptr
000BCB  3  90 02        	bcc :+
000BCD  3  E6 97        	inc pbptr+1
000BCF  3               :
000BCF  3  60           	rts
000BD0  3               .endif
000BD0  3               
000BD0  3               ;----------------------------------------------
000BD0  3               ; Print character pixels, no more.
000BD0  3               ;
000BD0  3               ; Input:
000BD0  3               ;  A	= character to print
000BD0  3               ;----------------------------------------------
000BD0  3               
000BD0  3               pchr:
000BD0  3  20 11 0B     	jsr pchar 		; show character in accumulator.
000BD3  3  E6 rr        	inc dispx		; move along one.
000BD5  3  60           	rts
000BD6  3               
000BD6  3               ;----------------------------------------------------
000BD6  3               ; Shifter sprite routine for objects.
000BD6  3               ;----------------------------------------------------
000BD6  3               
000BD6  3               .if oflag
000BD6  3               sprit7:
000BD6  3  A5 63        	lda z80_b
000BD8  3  F0 0F        	beq sprit0
000BDA  3  85 61        	sta z80_a
000BDC  3               sprit3:
000BDC  3  4E 6A 0C     	lsr spr			; shift into position.
000BDF  3  6E 6B 0C     	ror spr+1
000BE2  3  6E 6C 0C     	ror spr+2
000BE5  3  C6 61        	dec z80_a		; one less iteration.
000BE7  3  D0 F3        	bne sprit3
000BE9  3               sprit0:
000BE9  3  60           	rts 			; now apply to screen.
000BEA  3               
000BEA  3               ;----------------------------------------------------
000BEA  3               ; Draw sprite
000BEA  3               ;----------------------------------------------------
000BEA  3               
000BEA  3               sprite:
000BEA  3  86 rr        	stx xtmp		; Save X-reg
000BEC  3  20 7F 13     	jsr scadd 		; get screen address in scraddr.
000BEF  3               
000BEF  3  A5 rr        	lda dispx 		; x position.
000BF1  3  29 07        	and #7 			; position straddling cells.
000BF3  3  85 63        	sta z80_b		; store in b register.
000BF5  3               
000BF5  3  A5 66        	lda z80_l		; store sprite graphic address.
000BF7  3  8D 0A 0C     	sta sprit1+1
000BFA  3  8D 11 0C     	sta sprit2+1
000BFD  3  A5 67        	lda z80_h
000BFF  3  8D 0B 0C     	sta sprit1+2
000C02  3  8D 12 0C     	sta sprit2+2
000C05  3               
000C05  3  A2 00        	ldx #0			; pixel height.
000C07  3  A0 00        	ldy #0
000C09  3               sprit1:
000C09  3  BD 74 68     	lda objdta,x		; fetch first byte.
000C0C  3  8D 6A 0C     	sta spr
000C0F  3  E8           	inx
000C10  3               sprit2:
000C10  3  BD 74 68     	lda objdta,x
000C13  3  8D 6B 0C     	sta spr+1
000C16  3               
000C16  3  A9 00        	lda #0
000C18  3  8D 6C 0C     	sta spr+2
000C1B  3  20 D6 0B     	jsr sprit7		; shift sprite
000C1E  3               
000C1E  3  CA           	dex
000C1F  3  AD 6A 0C     	lda spr			; fetch graphic.
000C22  3  BC 4A 0C     	ldy spritetab,x
000C25  3  51 rr        	eor (scraddr),y		; merge with screen image.
000C27  3  91 rr        	sta (scraddr),y		; write to screen.
000C29  3  E8           	inx			; next screen byte.
000C2A  3               
000C2A  3  AD 6B 0C     	lda spr+1		; fetch graphic.
000C2D  3  BC 4A 0C     	ldy spritetab,x
000C30  3  51 rr        	eor (scraddr),y		; merge with screen image.
000C32  3  91 rr        	sta (scraddr),y		; write to screen.
000C34  3  C8           	iny
000C35  3               
000C35  3  AD 6C 0C     	lda spr+2		; fetch graphic.
000C38  3  51 rr        	eor (scraddr),y		; merge with screen image.
000C3A  3  91 rr        	sta (scraddr),y		; write to screen.
000C3C  3               
000C3C  3  E8           	inx			; next source byte.
000C3D  3  E0 10        	cpx #16
000C3F  3  D0 02        	bne :+
000C41  3  E6 rr        	inc scraddr+1
000C43  3               :
000C43  3  E0 20        	cpx #32
000C45  3  D0 C2        	bne sprit1		; repeat
000C47  3               
000C47  3  A6 rr        	ldx xtmp		; retreive X-reg
000C49  3  60           	rts
000C4A  3               
000C4A  3               spritetab:
000C4A  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
000C4E  3  40 41 60 61  
000C52  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
000C56  3  C0 C1 E0 E1  
000C5A  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
000C5E  3  40 41 60 61  
000C62  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
000C66  3  C0 C1 E0 E1  
000C6A  3               
000C6A  3  00 00 00     spr:	.byte 0,0,0
000C6D  3               
000C6D  3               ;xtmp:	.byte 0
000C6D  3               .endif
000C6D  3               
000C6D  3               ;-----------------------------------------------------------
000C6D  3               ; Get room address.
000C6D  3               ;-----------------------------------------------------------
000C6D  3               
000C6D  3               groom:
000C6D  3  A6 rr        	ldx scno 		; screen number.
000C6F  3  A0 00        	ldy #0
000C71  3               groomx:
000C71  3  A9 03        	lda #<scdat 		; pointer to screens.
000C73  3  85 66        	sta z80_l
000C75  3  A9 44        	lda #>scdat
000C77  3  85 67        	sta z80_h
000C79  3               groom1:
000C79  3  E0 00        	cpx #0			; is it the first one?
000C7B  3  F0 15        	beq groom0 		; no more screens to skip.
000C7D  3               
000C7D  3  18           	clc
000C7E  3  A5 66        	lda z80_l
000C80  3  79 03 44     	adc scdat,y 		; low byte of screen size.
000C83  3  85 66        	sta z80_l
000C85  3  C8           	iny			; point to high byte.
000C86  3  A5 67        	lda z80_h
000C88  3  79 03 44     	adc scdat,y 		; high byte of screen size.
000C8B  3  85 67        	sta z80_h
000C8D  3  C8           	iny			; next address.
000C8E  3               
000C8E  3  CA           	dex 			; one less iteration.
000C8F  3  4C 79 0C     	jmp groom1 		; loop until we reach the end.
000C92  3               groom0:
000C92  3  AD 97 66     	lda numsc 		; add displacement.
000C95  3  0A           	asl a
000C96  3  18           	clc			; add double displacement to address.
000C97  3  65 66        	adc z80_l
000C99  3  85 66        	sta z80_l
000C9B  3  A5 67        	lda z80_h
000C9D  3  69 00        	adc #0
000C9F  3  85 67        	sta z80_h
000CA1  3  60           	rts
000CA2  3               
000CA2  3               ;-----------------------------------------------------------
000CA2  3               ; Draw present room.
000CA2  3               ;-----------------------------------------------------------
000CA2  3               
000CA2  3               droom:
000CA2  3  AD 28 02     	lda wintop 		; window top.
000CA5  3  85 rr        	sta dispy		; set cursor y position.
000CA7  3               droom2:
000CA7  3  20 6D 0C     	jsr groom 		; get address of current room.
000CAA  3  A9 00        	lda #0	 		; zero in accumulator.
000CAC  3  85 rr        	sta comcnt 		; reset compression counter.
000CAE  3  AD 2A 02     	lda winhgt 		; height of window.
000CB1  3  85 rr        	sta rrow		; set row counter
000CB3  3               droom0:
000CB3  3  AD 29 02     	lda winlft 		; window left edge.
000CB6  3  85 rr        	sta dispx 		; set cursor x position.
000CB8  3  AD 2B 02     	lda winwid 		; width of window.
000CBB  3  85 rr        	sta rcol		; set column counter
000CBD  3               droom1:
000CBD  3  20 CE 0C     	jsr flbyt 		; decompress next byte on the fly.
000CC0  3  20 58 0B     	jsr pattr2 		; show attributes and block.
000CC3  3  C6 rr        	dec rcol		; one less column.
000CC5  3  D0 F6        	bne droom1 		; repeat for entire line.
000CC7  3  E6 rr        	inc dispy		; move down one line.
000CC9  3  C6 rr        	dec rrow 		; one less row.
000CCB  3  D0 E6        	bne droom0 		; repeat for all rows.
000CCD  3  60           	rts
000CCE  3               
000CCE  3               ;rcol:	.byte 0
000CCE  3               ;rrow:	.byte 0
000CCE  3               
000CCE  3               ;----------------------------------------------
000CCE  3               ; Decompress bytes on-the-fly.
000CCE  3               ;----------------------------------------------
000CCE  3               
000CCE  3               flbyt:
000CCE  3  A5 rr        	lda comcnt 		; compression counter.
000CD0  3  D0 21        	bne flbyt1		; any more to decompress?  yes.
000CD2  3               
000CD2  3  A0 00        	ldy #0
000CD4  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
000CD6  3  E6 66        	inc z80_l 		; point to next cell.
000CD8  3  D0 02        	bne :+
000CDA  3  E6 67        	inc z80_h
000CDC  3               :
000CDC  3  C9 FF        	cmp #255 		; is this byte a control code?
000CDE  3  F0 01        	beq :+
000CE0  3  60           	rts 			; no, this byte is uncompressed.
000CE1  3               :
000CE1  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
000CE3  3  85 rr        	sta combyt 		; set up the type.
000CE5  3  E6 66        	inc z80_l 		; point to quantity.
000CE7  3  D0 02        	bne :+
000CE9  3  E6 67        	inc z80_h
000CEB  3               :
000CEB  3  B1 66        	lda (z80_hl),y 		; get quantity.
000CED  3  E6 66        	inc z80_l 		; point to next byte.
000CEF  3  D0 02        	bne :+
000CF1  3  E6 67        	inc z80_h
000CF3  3               :
000CF3  3               flbyt1:
000CF3  3  85 rr        	sta comcnt 		; store new quantity.
000CF5  3  C6 rr        	dec comcnt		; one less.
000CF7  3  A5 rr        	lda combyt 		; byte to expand.
000CF9  3  60           	rts
000CFA  3               
000CFA  3               ;combyt:	.byte 0			; byte type compressed.
000CFA  3               ;comcnt:	.byte 0			; compression counter.
000CFA  3               
000CFA  3               ;------------------------------------------
000CFA  3               ; Ladder down check.
000CFA  3               ;
000CFA  3               ; Input:
000CFA  3               ;  IX = sprite pointer
000CFA  3               ;------------------------------------------
000CFA  3               
000CFA  3               .if lflag
000CFA  3               laddd:
000CFA  3  A0 09        	ldy #9
000CFC  3  B1 68        	lda (z80_ix),y		; x coordinate.
000CFE  3  85 rr        	sta dispx
000D00  3               
000D00  3  A0 08        	ldy #8
000D02  3  B1 68        	lda (z80_ix),y		; y coordinate.
000D04  3  29 FE        	and #254		; make it even.
000D06  3  91 68        	sta (z80_ix),y 		; reset it.
000D08  3               numsp5:
000D08  3  18           	clc 			; look down 16 pixels.
000D09  3  69 10        	adc #16
000D0B  3  85 rr        	sta dispy		; coords in dispx,dispy.
000D0D  3  4C 23 0D     	jmp laddv
000D10  3               
000D10  3               ;------------------------------------------
000D10  3               ; Ladder up check.
000D10  3               ;
000D10  3               ; Input:
000D10  3               ;  IX = sprite pointer
000D10  3               ;
000D10  3               ; Output:
000D10  3               ;  A  = 0 is ok, A <>0 is not ok
000D10  3               ;------------------------------------------
000D10  3               
000D10  3               laddu:
000D10  3  A0 09        	ldy #9
000D12  3  B1 68        	lda (z80_ix),y		; x coordinate.
000D14  3  85 rr        	sta dispx
000D16  3               
000D16  3  A0 08        	ldy #8
000D18  3  B1 68        	lda (z80_ix),y		; y coordinate.
000D1A  3  29 FE        	and #254 		; make it even.
000D1C  3  91 68        	sta (z80_ix),y		; reset it.
000D1E  3               numsp6:
000D1E  3  18           	clc 			; look 2 pixels above feet.
000D1F  3  69 0E        	adc #14
000D21  3  85 rr        	sta dispy		; coords in dispx,dispy.
000D23  3               laddv:
000D23  3  20 F5 0E     	jsr tstbl 		; get map address.
000D26  3  20 2C 0E     	jsr ldchk 		; standard ladder check.
000D29  3  F0 01        	beq :+
000D2B  3  60           	rts 			; no way through.
000D2C  3               :
000D2C  3  E6 rr        	inc bufaddr 		; look right one cell.
000D2E  3  D0 02        	bne :+
000D30  3  E6 rr        	inc bufaddr+1
000D32  3               :
000D32  3  20 2C 0E     	jsr ldchk 		; do the check.
000D35  3  F0 01        	beq :+
000D37  3  60           	rts 			; impassable.
000D38  3               :
000D38  3  A5 rr        	lda dispx 		; y coordinate.
000D3A  3  29 07        	and #7 			; position straddling block cells.
000D3C  3  D0 01        	bne :+
000D3E  3  60           	rts 			; no more checks needed.
000D3F  3               :
000D3F  3  E6 rr        	inc bufaddr 		; look to third cell.
000D41  3  D0 02        	bne :+
000D43  3  E6 rr        	inc bufaddr+1
000D45  3               :
000D45  3  20 2C 0E     	jsr ldchk 		; do the check.
000D48  3  60           	rts  			; return with zero flag set accordingly.
000D49  3               .endif
000D49  3               
000D49  3               ;---------------------------------------------------------
000D49  3               ; Can go up check.
000D49  3               ;
000D49  3               ; Input:
000D49  3               ;  IX = sprite pointer
000D49  3               ;
000D49  3               ; Output:
000D49  3               ;  A  = 0 is ok, A <>0 is not ok
000D49  3               ;---------------------------------------------------------
000D49  3               
000D49  3               cangu:
000D49  3  A0 09        	ldy #9
000D4B  3  B1 68        	lda (z80_ix),y		; x coordinate.
000D4D  3  85 rr        	sta dispx
000D4F  3  A0 08        	ldy #8
000D51  3  B1 68        	lda (z80_ix),y 		; y coordinate.
000D53  3  38           	sec
000D54  3  E9 02        	sbc #2
000D56  3  85 rr        	sta dispy		; coords in dispx,dispy.
000D58  3  20 F5 0E     	jsr tstbl 		; get map address.
000D5B  3  20 FB 0D     	jsr lrchk 		; standard left/right check.
000D5E  3  F0 01        	beq :+
000D60  3  60           	rts			; no way through.
000D61  3               :
000D61  3  E6 rr        	inc bufaddr		; look right one cell.
000D63  3  D0 02        	bne :+
000D65  3  E6 rr        	inc bufaddr+1
000D67  3               :
000D67  3  20 FB 0D     	jsr lrchk 		; do the check.
000D6A  3  F0 01        	beq :+
000D6C  3  60           	rts			; impassable.
000D6D  3               :
000D6D  3  A5 rr        	lda dispx		; x coordinate.
000D6F  3  29 07        	and #7			; position straddling block cells.
000D71  3  D0 01        	bne :+
000D73  3  60           	rts			; no more checks needed.
000D74  3               :
000D74  3  E6 rr        	inc bufaddr		; look to third cell.
000D76  3  D0 02        	bne :+
000D78  3  E6 rr        	inc bufaddr+1
000D7A  3               :
000D7A  3  20 FB 0D     	jsr lrchk		; do the check.
000D7D  3  60           	rts 			; return with zero flag set accordingly.
000D7E  3               
000D7E  3               ;---------------------------------------------------------
000D7E  3               ; Can go down check.
000D7E  3               ;
000D7E  3               ; Input:
000D7E  3               ;  IX = sprite pointer
000D7E  3               ;
000D7E  3               ; Output:
000D7E  3               ;  A  = 0 is ok, A <>0 is not ok
000D7E  3               ;---------------------------------------------------------
000D7E  3               
000D7E  3               cangd:
000D7E  3  A0 09        	ldy #9
000D80  3  B1 68        	lda (z80_ix),y 		; x coordinate.
000D82  3  85 rr        	sta dispx
000D84  3  A0 08        	ldy #8
000D86  3  B1 68        	lda (z80_ix),y		; y coordinate.
000D88  3               numsp3:
000D88  3  18           	clc
000D89  3  69 10        	adc #16 		; look down 16 pixels.
000D8B  3  85 rr        	sta dispy		; coords in dispx,dispy.
000D8D  3  20 F5 0E     	jsr tstbl 		; get map address.
000D90  3  20 10 0E     	jsr plchk 		; block, platform check.
000D93  3  F0 01        	beq :+
000D95  3  60           	rts			; no way through.
000D96  3               :
000D96  3  E6 rr        	inc bufaddr		; look right one cell.
000D98  3  D0 02        	bne :+
000D9A  3  E6 rr        	inc bufaddr+1
000D9C  3               :
000D9C  3  20 10 0E     	jsr plchk		; block, platform check.
000D9F  3  F0 01        	beq :+
000DA1  3  60           	rts			; impassable.
000DA2  3               :
000DA2  3  A5 rr        	lda dispx		; x coordinate.
000DA4  3  29 07        	and #7			; position straddling block cells.
000DA6  3  D0 01        	bne :+
000DA8  3  60           	rts			; no more checks needed.
000DA9  3               :
000DA9  3  E6 rr        	inc bufaddr		; look to third cell.
000DAB  3  D0 02        	bne :+
000DAD  3  E6 rr        	inc bufaddr+1
000DAF  3               :
000DAF  3  20 10 0E     	jsr plchk		; block, platform check.
000DB2  3  60           	rts			; return with zero flag set accordingly.
000DB3  3               
000DB3  3               ;---------------------------------------------------------
000DB3  3               ; Can go left check.
000DB3  3               ;
000DB3  3               ; Input:
000DB3  3               ;  IX = sprite pointer
000DB3  3               ;
000DB3  3               ; Output:
000DB3  3               ;  A  = 0 is ok, A <>0 is not ok
000DB3  3               ;---------------------------------------------------------
000DB3  3               
000DB3  3               cangl:
000DB3  3  A0 08        	ldy #8
000DB5  3  B1 68        	lda (z80_ix),y 		; y coordinate.
000DB7  3  85 rr        	sta dispy
000DB9  3  A0 09        	ldy #9
000DBB  3  B1 68        	lda (z80_ix),y 		; x coordinate.
000DBD  3  38           	sec
000DBE  3  E9 02        	sbc #2			; look left 2 pixels.
000DC0  3  85 rr        	sta dispx		; coords in dispx,dispy.
000DC2  3  4C D4 0D     	jmp cangh		; test if we can go there.
000DC5  3               
000DC5  3               ;---------------------------------------------------------
000DC5  3               ; Can go right check.
000DC5  3               ;
000DC5  3               ; Input:
000DC5  3               ;  IX = sprite pointer
000DC5  3               ;
000DC5  3               ; Output:
000DC5  3               ;  A  = 0 is ok, A <>0 is not ok
000DC5  3               ;---------------------------------------------------------
000DC5  3               
000DC5  3               cangr:
000DC5  3  A0 08        	ldy #8
000DC7  3  B1 68        	lda (z80_ix),y		; y coordinate.
000DC9  3  85 rr        	sta dispy
000DCB  3  A0 09        	ldy #9
000DCD  3  B1 68        	lda (z80_ix),y		; x coordinate.
000DCF  3  18           	clc
000DD0  3  69 10        	adc #16			; look right 16 pixels.
000DD2  3  85 rr        	sta dispx		; coords in dispx,dispy.
000DD4  3               cangh:
000DD4  3               cangh2:
000DD4  3  A9 03        	lda #3			; default rows to write.
000DD6  3  85 63        	sta z80_b
000DD8  3  A5 rr        	lda dispy		; y position.
000DDA  3  29 07        	and #7			; does x straddle cells?
000DDC  3  D0 02        	bne cangh0		; yes, loop counter is good.
000DDE  3  C6 63        	dec z80_b		; one less row to write.
000DE0  3               cangh0:
000DE0  3  20 F5 0E     	jsr tstbl		; get map address.
000DE3  3               cangh1:
000DE3  3  20 FB 0D     	jsr lrchk		; standard left/right check.
000DE6  3  F0 01        	beq :+
000DE8  3  60           	rts			; no way through.
000DE9  3               :
000DE9  3  48           	pha
000DEA  3  18           	clc
000DEB  3  A5 rr        	lda bufaddr
000DED  3  69 20        	adc #32			; look down.
000DEF  3  85 rr        	sta bufaddr
000DF1  3  90 02        	bcc :+
000DF3  3  E6 rr        	inc bufaddr+1
000DF5  3               :
000DF5  3  68           	pla
000DF6  3               
000DF6  3  C6 63        	dec z80_b
000DF8  3  D0 E9        	bne cangh1
000DFA  3  60           	rts
000DFB  3               
000DFB  3               ;-------------------------------------
000DFB  3               ; Check left/right movement is okay.
000DFB  3               ;
000DFB  3               ; Input:
000DFB  3               ;  bufaddr = MAP + x/8 + y/8*32
000DFB  3               ;
000DFB  3               ; Output:
000DFB  3               ;  A  = 0 is ok, A <>0 is not ok
000DFB  3               ;-------------------------------------
000DFB  3               
000DFB  3               lrchk:
000DFB  3  A0 00        	ldy #0
000DFD  3  B1 rr        	lda (bufaddr),y		; fetch map cell.
000DFF  3  C9 02        	cmp #WALL 		; is it passable?
000E01  3  F0 0A        	beq lrchkx		; no.
000E03  3               
000E03  3  C9 04        	cmp #FODDER		; fodder has to be dug.
000E05  3  F0 06        	beq lrchkx		; not passable.
000E07  3  A9 00        	lda #0
000E09  3  60           	rts
000E0A  3               
000E0A  3               ;--------------------------------------------------------------
000E0A  3               ; Called by mmenu
000E0A  3               ;--------------------------------------------------------------
000E0A  3               
000E0A  3               always:
000E0A  3  A9 FF        	lda #255		; report it as okay.
000E0C  3  60           	rts
000E0D  3               
000E0D  3               lrchkx:
000E0D  3  A9 01        	lda #1 			; reset all bits.
000E0F  3  60           	rts
000E10  3               
000E10  3               
000E10  3               ;--------------------------------------------------------------
000E10  3               ; Check platform or solid item is not in way.
000E10  3               ;
000E10  3               ; Input:
000E10  3               ;  bufaddr = MAP + x/8 + y/8*32
000E10  3               ;
000E10  3               ; Output:
000E10  3               ;  A  = 0 is ok, A <>0 is not ok
000E10  3               ;--------------------------------------------------------------
000E10  3               
000E10  3               plchk:
000E10  3  A0 00        	ldy #0
000E12  3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
000E14  3  C9 02        	cmp #WALL 		; is it passable?
000E16  3  F0 F5        	beq lrchkx		; no.
000E18  3               .if pflag .or dflag
000E18  3               	cmp #FODDER		; fodder has to be dug.
000E18  3               	beq lrchkx		; not passable.
000E18  3               .endif
000E18  3  C9 01        	cmp #PLATFM		; platform is solid.
000E1A  3  F0 07        	beq plchkx		; not passable.
000E1C  3               .if lflag
000E1C  3  C9 03        	cmp #LADDER		; is it a ladder?
000E1E  3  F0 ED        	beq lrchkx		; on ladder, deny movement.
000E20  3               .endif
000E20  3               plchk0:
000E20  3  A9 00        	lda #0			; report as ok
000E22  3  60           	rts
000E23  3               plchkx:
000E23  3  A5 rr        	lda dispy		; x coordinate.
000E25  3  29 07        	and #7			; position straddling blocks.
000E27  3  F0 E4        	beq lrchkx		; on platform, deny movement.
000E29  3  4C 20 0E     	jmp plchk0
000E2C  3               
000E2C  3               ;--------------------------------------------------------------
000E2C  3               ; Check ladder is available.
000E2C  3               ;
000E2C  3               ; Input:
000E2C  3               ;  bufaddr = MAP + x/8 + y/8*32
000E2C  3               ;
000E2C  3               ; Output:
000E2C  3               ;  A  = 0 is ok, A <>0 is not ok
000E2C  3               ;--------------------------------------------------------------
000E2C  3               
000E2C  3               .if lflag
000E2C  3               ldchk:
000E2C  3  A0 00        	ldy #0
000E2E  3  B1 rr        	lda (bufaddr),y 	; fetch cell.
000E30  3  C9 03        	cmp #LADDER 		; is it a ladder?
000E32  3  F0 03        	beq :+
000E34  3  A9 01        	lda #1
000E36  3  60           	rts  			; return with zero flag set accordingly.
000E37  3               :
000E37  3  A9 00        	lda #0
000E39  3  60           	rts
000E3A  3               .endif
000E3A  3               
000E3A  3               ;--------------------------------------------------------------
000E3A  3               ; Get collectables.
000E3A  3               ;--------------------------------------------------------------
000E3A  3               
000E3A  3               .if cflag
000E3A  3               getcol:
000E3A  3                       lda #COLECT             ; collectable blocks.
000E3A  3                       sta z80_b
000E3A  3                       jsr tded                ; test for collectable blocks.
000E3A  3                       cmp z80_b               ; did we find one?
000E3A  3                       beq :+
000E3A  3                       rts                     ; none were found, job done.
000E3A  3               :
000E3A  3                       jsr gtblk               ; get block.
000E3A  3                       jsr evnt20              ; collected block event.
000E3A  3                       jmp getcol              ; repeat until none left.
000E3A  3               
000E3A  3               ; Get collectable block.
000E3A  3               
000E3A  3               gtblk:
000E3A  3               	ldy #0
000E3A  3               	lda (bufaddr),y
000E3A  3               	sta z80_a
000E3A  3                       lda #0
000E3A  3                       sta (bufaddr),y		; make it empty now.
000E3A  3               
000E3A  3               	lda bufaddr		; set dispx
000E3A  3               	and #31
000E3A  3               	sta dispx
000E3A  3               
000E3A  3               	lda bufaddr+1		; Set dispy
000E3A  3               	sec
000E3A  3               	sbc #>MAP
000E3A  3               	sta bufaddr+1
000E3A  3               	asl bufaddr
000E3A  3               	rol bufaddr+1
000E3A  3               	asl bufaddr
000E3A  3               	rol bufaddr+1
000E3A  3               	asl bufaddr
000E3A  3               	rol bufaddr+1
000E3A  3               	lda bufaddr+1
000E3A  3               	sta dispy
000E3A  3               
000E3A  3               	lda colpatt		; get blocknr
000E3A  3               	sta z80_e		; displacement in e.
000E3A  3               	lda #0
000E3A  3               	sta z80_d		; no high byte.
000E3A  3               	asl z80_e  		; multiply char by 8.
000E3A  3               	rol z80_d
000E3A  3               	asl z80_e
000E3A  3               	rol z80_d
000E3A  3               	asl z80_e
000E3A  3               	rol z80_d
000E3A  3               	clc
000E3A  3               	lda z80_e
000E3A  3               	adc #<chgfx 		; address of graphics.
000E3A  3               	sta tileaddr
000E3A  3               	lda z80_d
000E3A  3               	adc #>chgfx
000E3A  3               	sta tileaddr+1
000E3A  3               	jsr gprad 		; get screen address.
000E3A  3               	ldx #7			; number of pixel rows to write.
000E3A  3               gtblk0:
000E3A  3               	ldy #0
000E3A  3               	lda (tileaddr),y 	; get image byte.
000E3A  3               	ldy scrtab,x
000E3A  3               	eor (scraddr),y 	; XOR tile on screen
000E3A  3               	sta (scraddr),y 	; copy to screen.
000E3A  3               	inc tileaddr 		; next image byte.
000E3A  3               	bne :+
000E3A  3               	inc tileaddr+1
000E3A  3               :
000E3A  3               	dex	 		; repeat for 8 pixel rows.
000E3A  3               	bpl gtblk0
000E3A  3               	rts
000E3A  3               .endif
000E3A  3               
000E3A  3               ;--------------------------------------------------------------
000E3A  3               ; Touched deadly block check.
000E3A  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
000E3A  3               ;
000E3A  3               ; Input:
000E3A  3               ;  IX = sprite address
000E3A  3               ;
000E3A  3               ; Output:
000E3A  3               ;  A  = 0 is ok, A=5 is not ok
000E3A  3               ;--------------------------------------------------------------
000E3A  3               
000E3A  3               tded:
000E3A  3  A0 08        	ldy #8
000E3C  3  B1 68        	lda (z80_ix),y 		; y coordinate.
000E3E  3  85 rr        	sta dispy
000E40  3  C8           	iny
000E41  3  B1 68        	lda (z80_ix),y 		; x coordinate.
000E43  3  85 rr        	sta dispx		; coords in dispx,dispy.
000E45  3  20 F5 0E     	jsr tstbl		; get map address.
000E48  3  48           	pha
000E49  3  A9 1F        	lda #31			; default distance to next line down.
000E4B  3  85 64        	sta z80_e
000E4D  3  68           	pla
000E4E  3  C5 63        	cmp z80_b		; is this the required block?
000E50  3  D0 01        	bne :+
000E52  3  60           	rts			; yes.
000E53  3               :
000E53  3  E6 rr        	inc bufaddr 		; next cell.
000E55  3  D0 02        	bne :+
000E57  3  E6 rr        	inc bufaddr+1
000E59  3               :
000E59  3  A0 00        	ldy #0
000E5B  3  B1 rr        	lda (bufaddr),y		; fetch type.
000E5D  3  C5 63        	cmp z80_b 		; is this deadly/custom?
000E5F  3  D0 01        	bne :+
000E61  3  60           	rts			; yes.
000E62  3               :
000E62  3  A5 rr        	lda dispx		; horizontal position.
000E64  3  85 62        	sta z80_c 		; store column in c register.
000E66  3  29 07        	and #7			; is it straddling cells?
000E68  3  D0 03        	bne :+
000E6A  3  4C 7E 0E     	jmp tded0		; no.
000E6D  3               :
000E6D  3  E6 rr        	inc bufaddr 		; last cell.
000E6F  3  D0 02        	bne :+
000E71  3  E6 rr        	inc bufaddr+1
000E73  3               :
000E73  3  A0 00        	ldy #0
000E75  3  B1 rr        	lda (bufaddr),y 	; fetch type.
000E77  3  C5 63        	cmp z80_b		; is this the block?
000E79  3  D0 01        	bne :+
000E7B  3  60           	rts			; yes.
000E7C  3               :
000E7C  3  C6 64        	dec z80_e		; one less cell to next row down.
000E7E  3               tded0:
000E7E  3  18           	clc 			; point to next row.
000E7F  3  A5 rr        	lda bufaddr
000E81  3  65 64        	adc z80_e
000E83  3  85 rr        	sta bufaddr
000E85  3  90 02        	bcc :+
000E87  3  E6 rr        	inc bufaddr+1
000E89  3               :
000E89  3  A0 00        	ldy #0
000E8B  3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
000E8D  3  C5 63        	cmp z80_b		; is this fatal?
000E8F  3  D0 01        	bne :+
000E91  3  60           	rts			; yes.
000E92  3               :
000E92  3  E6 rr        	inc bufaddr 		; next cell.
000E94  3  D0 02        	bne :+
000E96  3  E6 rr        	inc bufaddr+1
000E98  3               :
000E98  3  A0 00        	ldy #0
000E9A  3  B1 rr        	lda (bufaddr),y 	; fetch type.
000E9C  3  C5 63        	cmp z80_b		; is this fatal?
000E9E  3  D0 01        	bne :+
000EA0  3  60           	rts			; yes.
000EA1  3               :
000EA1  3  A5 62        	lda z80_c		; horizontal position.
000EA3  3  29 07        	and #7			; is it straddling cells?
000EA5  3  D0 03        	bne :+
000EA7  3  4C B9 0E     	jmp tded1 		; no.
000EAA  3               :
000EAA  3  E6 rr        	inc bufaddr		; last cell.
000EAC  3  D0 02        	bne :+
000EAE  3  E6 rr        	inc bufaddr+1
000EB0  3               :
000EB0  3  A0 00        	ldy #0
000EB2  3  B1 rr        	lda (bufaddr),y		; fetch type.
000EB4  3  C5 63        	cmp z80_b		; is this fatal?
000EB6  3  D0 01        	bne :+
000EB8  3  60           	rts			; yes.
000EB9  3               :
000EB9  3               tded1:
000EB9  3  A5 rr        	lda dispy		; vertical position.
000EBB  3  29 07        	and #7 			; is it straddling cells?
000EBD  3  D0 01        	bne :+
000EBF  3  60           	rts			; no, job done.
000EC0  3               :
000EC0  3  18           	clc			; point to next row.
000EC1  3  A5 rr        	lda bufaddr
000EC3  3  65 64        	adc z80_e
000EC5  3  85 rr        	sta bufaddr
000EC7  3  90 02        	bcc :+
000EC9  3  E6 rr        	inc bufaddr+1
000ECB  3               :
000ECB  3  A0 00        	ldy #0
000ECD  3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
000ECF  3  C5 63        	cmp z80_b		; is this fatal?
000ED1  3  D0 01        	bne :+
000ED3  3  60           	rts			; yes.
000ED4  3               :
000ED4  3  E6 rr        	inc bufaddr		; next cell.
000ED6  3  D0 02        	bne :+
000ED8  3  E6 rr        	inc bufaddr+1
000EDA  3               :
000EDA  3  A0 00        	ldy #0
000EDC  3  B1 rr        	lda (bufaddr),y 	; fetch type.
000EDE  3  C5 63        	cmp z80_b		; is this fatal?
000EE0  3  D0 01        	bne :+
000EE2  3  60           	rts			; yes.
000EE3  3               :
000EE3  3  A5 62        	lda z80_c		; horizontal position.
000EE5  3  29 07        	and #7			; is it straddling cells?
000EE7  3  D0 01        	bne :+
000EE9  3  60           	rts			; no.
000EEA  3               :
000EEA  3  E6 rr        	inc bufaddr		; last cell.
000EEC  3  D0 02        	bne :+
000EEE  3  E6 rr        	inc bufaddr+1
000EF0  3               :
000EF0  3  A0 00        	ldy #0
000EF2  3  B1 rr        	lda (bufaddr),y		; fetch final type.
000EF4  3  60           	rts 			; return with final type in accumulator.
000EF5  3               
000EF5  3               ;---------------------------------------------------
000EF5  3               ; Fetch block type at (dispx, dispy).
000EF5  3               ;
000EF5  3               ; Output:
000EF5  3               ;  A = block type
000EF5  3               ;---------------------------------------------------
000EF5  3               
000EF5  3               tstbl:
000EF5  3  A5 rr        	lda dispy 		; fetch y coord.
000EF7  3  4A           	lsr a			; bufaddr = y/8
000EF8  3  4A           	lsr a
000EF9  3  4A           	lsr a
000EFA  3  85 rr        	sta chary
000EFC  3               
000EFC  3  85 rr        	sta bufaddr
000EFE  3  A9 00        	lda #0
000F00  3  85 rr        	sta bufaddr+1
000F02  3               
000F02  3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
000F04  3  26 rr        	rol bufaddr+1
000F06  3  06 rr        	asl bufaddr
000F08  3  26 rr        	rol bufaddr+1
000F0A  3  06 rr        	asl bufaddr
000F0C  3  26 rr        	rol bufaddr+1
000F0E  3  06 rr        	asl bufaddr
000F10  3  26 rr        	rol bufaddr+1
000F12  3  06 rr        	asl bufaddr
000F14  3  26 rr        	rol bufaddr+1
000F16  3               
000F16  3  A5 rr        	lda dispx		; x/8
000F18  3  4A           	lsr a
000F19  3  4A           	lsr a
000F1A  3  4A           	lsr a
000F1B  3  85 rr        	sta charx
000F1D  3               
000F1D  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
000F1E  3  65 rr        	adc bufaddr
000F20  3  69 00        	adc #<MAP
000F22  3  85 rr        	sta bufaddr
000F24  3  A5 rr        	lda bufaddr+1
000F26  3  69 98        	adc #>MAP
000F28  3  85 rr        	sta bufaddr+1
000F2A  3               
000F2A  3  A0 00        	ldy #0
000F2C  3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
000F2E  3  60           	rts
000F2F  3               
000F2F  3               
000F2F  3               ;-------------------------------------------------------------------
000F2F  3               ; Jump - if we can.
000F2F  3               ; Requires initial speed to be set up in accumulator prior to call.
000F2F  3               ;
000F2F  3               ; Input:
000F2F  3               ;  IX = sprite address
000F2F  3               ;-------------------------------------------------------------------
000F2F  3               
000F2F  3               jump:
000F2F  3  A0 0D        	ldy #13
000F31  3  B1 68        	lda (z80_ix),y		; jump table low.
000F33  3  A0 0E        	ldy #14
000F35  3  11 68        	ora (z80_ix),y		; jump table high.
000F37  3  F0 01        	beq :+
000F39  3  60           	rts			; already in the air.
000F3A  3               :
000F3A  3  A9 6E        	lda #>jtab
000F3C  3  A0 0E        	ldy #14
000F3E  3  91 68        	sta (z80_ix),y		; set jump high.
000F40  3  A9 6C        	lda #<jtab		; jump table start.
000F42  3  A0 0D        	ldy #13
000F44  3  91 68        	sta (z80_ix),y		; set jump low.
000F46  3  60           	rts
000F47  3               
000F47  3               ; Jump table.
000F47  3               
000F47  3               ;jtab:
000F47  3               ;	.byte 248,250,252
000F47  3               ;	.byte 254,254,255
000F47  3               ;	.byte 255,255,0,0
000F47  3               ;	.byte 0,1,1,1,2,2
000F47  3               ;	.byte 4,6,8,8,8,99
000F47  3               
000F47  3               ;------------------------------------------------
000F47  3               ; Random numbers code.
000F47  3               ; Pseudo-random number generator, 8-bit.
000F47  3               ;
000F47  3               ; Output:
000F47  3               ;  RND = random number
000F47  3               ;------------------------------------------------
000F47  3               
000F47  3               random:
000F47  3  A5 rr        	lda seed		; get last random number.
000F49  3  0A           	asl a
000F4A  3  0A           	asl a
000F4B  3  18           	clc
000F4C  3  65 rr        	adc seed
000F4E  3  18           	clc
000F4F  3  69 45        	adc #$45
000F51  3  85 rr        	sta seed		; store new seed.
000F53  3  85 rr        	sta varrnd		; return number in variable.
000F55  3  60           	rts
000F56  3               
000F56  3               ;--------------------------------------------------------
000F56  3               ; Keys
000F56  3               ;
000F56  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
000F56  3               ;             ||||||||
000F56  3               ;             |||||||+> Right    KEY 0  - X
000F56  3               ;             ||||||+-> Left     KEY 1  - Z
000F56  3               ;             |||||+--> Down     KEY 2  - .
000F56  3               ;             ||||+---> Up       KEY 3  - ;
000F56  3               ;             |||+----> Fire1    KEY 4  - SPC
000F56  3               ;             ||+-----> Fire2    KEY 5  - Q
000F56  3               ;             |+------> Fire3    KEY 6  - P
000F56  3               ;             +-------> Not used
000F56  3               ;
000F56  3               ;                       Option1  KEY 7  - 1
000F56  3               ;                       Option2  KEY 8  - 2
000F56  3               ;                       Option3  KEY 9  - 3
000F56  3               ;                       Option4  KEY 10 - 4
000F56  3               ;--------------------------------------------------------
000F56  3               
000F56  3               ;              X   Z   .   ;  SPC  Q   P
000F56  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
000F56  3               ;        .byte $21,$11,$01,$92                   ; menu options.
000F56  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
000F5A  3  00 04 14     
000F5D  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
000F61  3               
000F61  3               ;--------------------------------------------------------
000F61  3               ; Keyboard test routine.
000F61  3               ;
000F61  3               ; Input:
000F61  3               ;  A = key to read, high nibble=row and low nibble=col
000F61  3               ;
000F61  3               ; Output:
000F61  3               ;  carry clr = key pressed
000F61  3               ;  carry set = key not pressed
000F61  3               ;--------------------------------------------------------
000F61  3               
000F61  3               ktest:
000F61  3  85 61        	sta z80_a		; save key
000F63  3               
000F63  3  4A           	lsr a			; set row
000F64  3  4A           	lsr a
000F65  3  4A           	lsr a
000F66  3  4A           	lsr a
000F67  3  09 F0        	ora #ScrMode		; don't flip screenmode
000F69  3  8D 00 B0     	sta KeyRowAddr
000F6C  3               
000F6C  3  A5 61        	lda z80_a
000F6E  3  29 0F        	and #$0f
000F70  3  AA           	tax
000F71  3  AD 01 B0     	lda KeyColAddr		; read column
000F74  3               
000F74  3  3D 7D 0F     	and keymask,x		; check key pressed
000F77  3  F0 02        	beq pressed
000F79  3  38           	sec			; key not pressed
000F7A  3  60           	rts
000F7B  3               pressed:
000F7B  3  18           	clc			; key pressed
000F7C  3  60           	rts
000F7D  3               
000F7D  3  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20
000F81  3  10 20        
000F83  3               
000F83  3               ;-------------------------------------------------------
000F83  3               ; Joystick and keyboard reading routines.
000F83  3               ;
000F83  3               ; contrl = 0, Keyboard
000F83  3               ;          1, JoyKeyb
000F83  3               ;          2, JoyMMC
000F83  3               ;-------------------------------------------------------
000F83  3               
000F83  3               joykey:
000F83  3  A5 rr        	lda contrl 		; control flag.
000F85  3  C9 01        	cmp #1
000F87  3  D0 03        	bne :+
000F89  3  4C A7 0F     	jmp joyjoy 		; read keyboard joystick
000F8C  3               :
000F8C  3  C9 02        	cmp #2
000F8E  3  D0 03        	bne :+
000F90  3  4C D0 0F     	jmp joysin 		; read MMC joystick.
000F93  3               :
000F93  3               ; Keyboard controls.
000F93  3               
000F93  3  A9 00        	lda #0		 	; zero reading.
000F95  3  85 64        	sta z80_e
000F97  3               
000F97  3  A0 06        	ldy #6	 		; address of last key.
000F99  3               joyke0:
000F99  3  B9 82 6E     	lda keys,y 		; get key from table.
000F9C  3  20 61 0F     	jsr ktest		; being pressed?
000F9F  3  26 64        	rol z80_e 		; rotate into reading.
000FA1  3               
000FA1  3  88           	dey		 	; next key.
000FA2  3  10 F5        	bpl joyke0 		; repeat for all keys.
000FA4  3  4C B8 0F     	jmp joyjo1 		; store the value.
000FA7  3               
000FA7  3               ; Keyboard joystick controls.
000FA7  3               
000FA7  3               joyjoy:
000FA7  3  A9 00        	lda #0		 	; zero reading.
000FA9  3  85 64        	sta z80_e
000FAB  3               
000FAB  3  A0 06        	ldy #6	 		; address of last key.
000FAD  3               joyjo3:
000FAD  3  B9 56 0F     	lda jkeys,y 		; get key from table.
000FB0  3  20 61 0F     	jsr ktest		; being pressed?
000FB3  3  26 64        	rol z80_e 		; rotate into reading.
000FB5  3               
000FB5  3  88           	dey		 	; next key.
000FB6  3  10 F5        	bpl joyjo3 		; repeat for all keys.
000FB8  3               joyjo1:
000FB8  3  A5 64        	lda z80_e 		; copy e register to accumulator.
000FBA  3               joyjo2:
000FBA  3  85 rr        	sta joyval		; remember value.
000FBC  3  60           	rts
000FBD  3               
000FBD  3               
000FBD  3               ; AtoMMC joystick controls.
000FBD  3               
000FBD  3               ; Set PORTB direction
000FBD  3               
000FBD  3               joyinit:
000FBD  3  A9 FF        	lda #$ff   		; Write value to latch, bits 0-7 input
000FBF  3  8D 01 B4     	sta DatReg
000FC2  3  20 FE 0F     	jsr interwritedelay
000FC5  3  A9 A1        	lda #$a1   		; Write direction in latch to PORTB
000FC7  3  8D 00 B4     	sta CmdReg
000FCA  3               
000FCA  3               wait_until_not_busy:
000FCA  3  AD 00 B4     	lda CmdReg
000FCD  3  30 FB        	bmi wait_until_not_busy
000FCF  3  60           	rts
000FD0  3               
000FD0  3               ; Get PORTB value
000FD0  3               
000FD0  3               joysin:
000FD0  3  A9 A2        	lda #$a2   		; Read value PORTB in latch
000FD2  3  8D 00 B4     	sta CmdReg
000FD5  3  20 FE 0F     	jsr interwritedelay
000FD8  3               
000FD8  3  AD 01 B4     	lda DatReg		; Read joystick status
000FDB  3  29 7F        	and #$7f
000FDD  3  85 rr        	sta joyval
000FDF  3  85 F0        	sta $f0
000FE1  3               
000FE1  3  AD 87 6E     	lda keys+5		; check fire2
000FE4  3  20 61 0F     	jsr ktest
000FE7  3  B0 06        	bcs :+
000FE9  3  A5 rr        	lda joyval
000FEB  3  29 DF        	and #$df
000FED  3  85 rr        	sta joyval
000FEF  3               :
000FEF  3  AD 88 6E     	lda keys+6		; check fire3
000FF2  3  20 61 0F     	jsr ktest
000FF5  3  B0 06        	bcs :+
000FF7  3  A5 rr        	lda joyval
000FF9  3  29 BF        	and #$bf
000FFB  3  85 rr        	sta joyval
000FFD  3               :
000FFD  3  60           	rts
000FFE  3               
000FFE  3               ; Short delay
000FFE  3               ; Enough to intersperse 2 writes to the FATPIC.
000FFE  3               
000FFE  3               interwritedelay:
000FFE  3  A9 08        	lda  #8
001000  3  38           	sec
001001  3               loop:
001001  3  E9 01        	sbc  #1
001003  3  D0 FC        	bne  loop
001005  3  60           	rts
001006  3               
001006  3               ;tmp_byte:   .byte 0
001006  3               
001006  3               ;---------------------------------------------------------------
001006  3               ; Getkey in column,row format
001006  3               ;
001006  3               ; Output:
001006  3               ;  A = high nibble=row and low nibble=column key in matrix
001006  3               ;---------------------------------------------------------------
001006  3               
001006  3               kget:
001006  3  A9 F0        	lda #ScrMode		; high-mono mode.
001008  3  8D 00 B0     	sta ScrSelAddr		; screen select port
00100B  3  86 rr        	stx xtmp
00100D  3               kget4:
00100D  3  20 71 FE     	jsr READKEY		; read key until pressed
001010  3  C0 FF        	cpy #255
001012  3  F0 F9        	beq kget4
001014  3  85 rr        	sta rcol		; save column
001016  3  86 rr        	stx rrow		; determine row
001018  3               kget3:
001018  3  20 71 FE     	jsr READKEY		; wait until key released
00101B  3  C0 FF        	cpy #255
00101D  3  D0 F9        	bne kget3
00101F  3               
00101F  3  38           	sec			; calculate matrix row
001020  3  A9 0A        	lda #10
001022  3  E5 rr        	sbc rrow
001024  3  0A           	asl a
001025  3  0A           	asl a
001026  3  0A           	asl a
001027  3  0A           	asl a
001028  3  85 rr        	sta rrow
00102A  3               
00102A  3  A0 FF        	ldy #255		; find column mask
00102C  3               kget1:
00102C  3  C8           	iny
00102D  3  B9 7D 0F     	lda keymask,y
001030  3  C5 rr        	cmp rcol
001032  3  F0 03        	beq kget2
001034  3  4C 2C 10     	jmp kget1
001037  3               kget2:
001037  3  98           	tya			; determine column
001038  3  18           	clc
001039  3  65 rr        	adc rrow
00103B  3  A6 rr        	ldx xtmp
00103D  3  60           	rts
00103E  3               
00103E  3               ;---------------------------------------------------------------
00103E  3               ; Display message.
00103E  3               ;
00103E  3               ; Input:
00103E  3               ;  A = message number
00103E  3               ;---------------------------------------------------------------
00103E  3               
00103E  3               dmsg:
00103E  3  AA           	tax
00103F  3  A9 76        	lda #<msgdat		; pointer to messages.
001041  3  85 66        	sta z80_l
001043  3  A9 29        	lda #>msgdat
001045  3  85 67        	sta z80_h
001047  3  20 5D 11     	jsr getwrd		; get message number.
00104A  3               dmsg3:
00104A  3  20 4A 11     	jsr preprt		; pre-printing stuff.
00104D  3  20 9C 09     	jsr checkx		; make sure we"re in a printable range.
001050  3  A5 rr        	lda prtmod		; print mode.
001052  3  D0 47        	bne bmsg1		; no, double-height text.
001054  3               dmsg0:
001054  3  A5 67        	lda z80_h		; store string pointer.
001056  3  48           	pha
001057  3  A5 66        	lda z80_l
001059  3  48           	pha
00105A  3               
00105A  3  A0 00        	ldy #0
00105C  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
00105E  3  29 7F        	and #127		; remove any end marker.
001060  3  C9 0D        	cmp #13
001062  3  F0 24        	beq dmsg1
001064  3  20 11 0B     	jsr pchar		; display character.
001067  3  20 35 11     	jsr nexpos 		; display position.
00106A  3  D0 03        	bne dmsg2		; not on a new line.
00106C  3  20 3C 11     	jsr nexlin		; next line down.
00106F  3               dmsg2:
00106F  3  68           	pla			; retrieve string pointer
001070  3  85 66        	sta z80_l
001072  3  68           	pla
001073  3  85 67        	sta z80_h
001075  3               
001075  3  A0 00        	ldy #0
001077  3  B1 66        	lda (z80_hl),y		; fetch last character.
001079  3  0A           	asl a  			; was it the end?
00107A  3  90 03        	bcc :+
00107C  3  4C E1 09     	jmp dscor2		; yes, job done.
00107F  3               :
00107F  3  E6 66        	inc z80_l		; next character to display.
001081  3  D0 02        	bne :+
001083  3  E6 67        	inc z80_h
001085  3               :
001085  3  4C 54 10     	jmp dmsg0
001088  3               dmsg1:
001088  3  E6 rr        	inc dispy
00108A  3  A5 rr        	lda dispy
00108C  3  C9 18        	cmp #24
00108E  3  90 04        	bcc dmsg4
001090  3  A9 00        	lda #0
001092  3  85 rr        	sta dispy
001094  3               dmsg4:
001094  3  A9 00        	lda #0
001096  3  85 rr        	sta dispx
001098  3  4C 6F 10     	jmp dmsg2
00109B  3               
00109B  3               ;prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
00109B  3               
00109B  3               ;----------------------------------------------------------
00109B  3               ; Display message in big text.
00109B  3               ;
00109B  3               ; Input:
00109B  3               ;  HL = string pointer
00109B  3               ;----------------------------------------------------------
00109B  3               
00109B  3               bmsg1:
00109B  3  A0 00        	ldy #0
00109D  3  B1 66        	lda (z80_hl),y 		; get character to display.
00109F  3  29 7F        	and #127		; only want 7 bits.
0010A1  3  C9 0D        	cmp #13
0010A3  3  F0 13        	beq bmsg2
0010A5  3  20 CD 10     	jsr bchar 		; display big char.
0010A8  3               bmsg3:
0010A8  3  A0 00        	ldy #0
0010AA  3  B1 66        	lda (z80_hl),y 		; look at last character.
0010AC  3  48           	pha
0010AD  3  E6 66        	inc z80_l 		; next character in list.
0010AF  3  D0 02        	bne :+
0010B1  3  E6 67        	inc z80_h
0010B3  3               :
0010B3  3  68           	pla
0010B4  3  0A           	asl a  			; was terminator flag set?
0010B5  3  90 E4        	bcc bmsg1		; no, keep going.
0010B7  3  60           	rts
0010B8  3               bmsg2:
0010B8  3  A9 00        	lda #0
0010BA  3  85 rr        	sta dispx
0010BC  3  E6 rr        	inc dispy
0010BE  3  E6 rr        	inc dispy
0010C0  3  A5 rr        	lda dispy
0010C2  3  C9 17        	cmp #23
0010C4  3  90 E2        	bcc bmsg3
0010C6  3  A9 00        	lda #0
0010C8  3  85 rr        	sta dispy
0010CA  3  4C A8 10     	jmp bmsg3
0010CD  3               
0010CD  3               ;----------------------------------------------------------
0010CD  3               ; Big character display.
0010CD  3               ;
0010CD  3               ; Input:
0010CD  3               ;  A = character
0010CD  3               ;----------------------------------------------------------
0010CD  3               
0010CD  3               bchar:
0010CD  3  85 64        	sta z80_e		; save char in lb
0010CF  3  A9 00        	lda #0
0010D1  3  85 65        	sta z80_d		; reset hb
0010D3  3               
0010D3  3  06 64        	asl z80_e 		; multiply char by 8.
0010D5  3  26 65        	rol z80_d
0010D7  3  06 64        	asl z80_e
0010D9  3  26 65        	rol z80_d
0010DB  3  06 64        	asl z80_e
0010DD  3  26 65        	rol z80_d		; de = a*8
0010DF  3               
0010DF  3  18           	clc			; de = Fontpointer + a*8
0010E0  3  A5 64        	lda z80_e
0010E2  3  69 6C        	adc #<(FONT-256) 		; address of font.
0010E4  3  85 64        	sta z80_e
0010E6  3  A5 65        	lda z80_d
0010E8  3  69 6A        	adc #>(FONT-256)
0010EA  3  85 65        	sta z80_d
0010EC  3               
0010EC  3  20 DA 0A     	jsr gprad 		; get screen address.
0010EF  3               
0010EF  3  A2 00        	ldx #0			; height of character in font.
0010F1  3               bchar0:
0010F1  3  A0 00        	ldy #0
0010F3  3  B1 64        	lda (z80_de),y 		; get a bit of the font.
0010F5  3               
0010F5  3  49 00        	eor #TxtInvert		; Invert
0010F7  3               
0010F7  3  91 rr        	sta (scraddr),y
0010F9  3  48           	pha
0010FA  3  20 00 14     	jsr nline 		; next line down.
0010FD  3  68           	pla
0010FE  3  91 rr        	sta (scraddr),y
001100  3  20 00 14     	jsr nline 		; next line down.
001103  3               
001103  3  18           	clc
001104  3  E6 64        	inc z80_e 		; next line of font.
001106  3  D0 02        	bne :+
001108  3  E6 65        	inc z80_d
00110A  3               :
00110A  3  E8           	inx
00110B  3  E0 08        	cpx #8
00110D  3  D0 E2        	bne bchar0
00110F  3               
00110F  3  20 35 11     	jsr nexpos		; display position.
001112  3  D0 05        	bne bchar2 		; not on a new line.
001114  3               bchar3:
001114  3  E6 rr        	inc dispy
001116  3  20 3C 11     	jsr nexlin 		; next line check.
001119  3               bchar2:
001119  3  4C E1 09     	jmp dscor2		; tidy up line and column variables.
00111C  3               
00111C  3               
00111C  3               ;-------------------------------------------------
00111C  3               ; Display a character.
00111C  3               ;
00111C  3               ; Input:
00111C  3               ;  A = character
00111C  3               ;-------------------------------------------------
00111C  3               
00111C  3               achar:
00111C  3  85 63        	sta z80_b 		; copy to b.
00111E  3  20 4A 11     	jsr preprt 		; get ready to print.
001121  3  A5 63        	lda z80_b		; character in accumulator.
001123  3  A6 rr        	ldx prtmod 		; print mode.
001125  3  F0 03        	beq :+
001127  3  4C CD 10     	jmp bchar 		; no, double-height text.
00112A  3               :
00112A  3  20 11 0B     	jsr pchar 		; display character.
00112D  3  20 35 11     	jsr nexpos 		; display position.
001130  3  F0 E2        	beq bchar3		; next line down.
001132  3  4C 19 11     	jmp bchar2 		; tidy up.
001135  3               
001135  3               
001135  3               ;-------------------------------------------------
001135  3               ; Get next print column position.
001135  3               ;-------------------------------------------------
001135  3               
001135  3               nexpos:
001135  3  E6 rr        	inc dispx		; move along one position.
001137  3  A5 rr        	lda dispx 		; get coordinate.
001139  3  29 1F        	and #31
00113B  3  60           	rts 			; return with status in zero flag.
00113C  3               
00113C  3               ;-------------------------------------------------
00113C  3               ; Get next print line position.
00113C  3               ;-------------------------------------------------
00113C  3               
00113C  3               nexlin:
00113C  3  E6 rr        	inc dispy 		; newline.
00113E  3  A5 rr        	lda dispy		; vertical position.
001140  3  C9 18        	cmp #24			; past screen edge?
001142  3  B0 01        	bcs :+
001144  3  60           	rts			; no, still okay.
001145  3               :
001145  3  A9 00        	lda #0			; restart at top.
001147  3  85 rr        	sta dispy
001149  3  60           	rts
00114A  3               
00114A  3               ;--------------------------------------------------------
00114A  3               ; Pre-print preliminaries.
00114A  3               ;--------------------------------------------------------
00114A  3               
00114A  3               preprt:
00114A  3  A9 6C        	lda #<(FONT-256)		; font pointer.
00114C  3  8D 9A 09     	sta grbase		; set up graphics base.
00114F  3  A9 6A        	lda #>(FONT-256)
001151  3  8D 9B 09     	sta grbase+1
001154  3               prescr:
001154  3  A5 rr        	lda charx 		; display coordinates.
001156  3  85 rr        	sta dispx		; set up general coordinates.
001158  3  A5 rr        	lda chary
00115A  3  85 rr        	sta dispy
00115C  3  60           	rts
00115D  3               
00115D  3               ;--------------------------------------------------------------
00115D  3               ; Get messagenr x in hl
00115D  3               ;
00115D  3               ; Input:
00115D  3               ;  HL = pointer to message list
00115D  3               ;  X  = message number.
00115D  3               ;--------------------------------------------------------------
00115D  3               
00115D  3               getwrd:
00115D  3  E0 00        	cpx #0
00115F  3  D0 01        	bne:+ 			; first word in list?
001161  3  60           	rts 			; yep, don't search.
001162  3               :
001162  3  A0 00        	ldy #0
001164  3               getwd0:
001164  3  B1 66        	lda (z80_hl),y
001166  3  48           	pha
001167  3  E6 66        	inc z80_l
001169  3  D0 02        	bne :+
00116B  3  E6 67        	inc z80_h
00116D  3               :
00116D  3  68           	pla
00116E  3  C9 80        	cmp #128		; found end?
001170  3  30 F2        	bmi getwd0		; no, carry on.
001172  3  CA           	dex			; until we have right number.
001173  3  D0 EF        	bne getwd0
001175  3  60           	rts
001176  3               
001176  3               ;-----------------------------------------------------------
001176  3               ; Bubble sort.
001176  3               ;-----------------------------------------------------------
001176  3               
001176  3               bsort:
001176  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
001178  3  85 rr        	sta qscnt
00117A  3               
00117A  3  A9 8A        	lda #<sprtab 		; sprite table.
00117C  3  85 68        	sta z80_x
00117E  3  A9 18        	lda #>sprtab
001180  3  85 69        	sta z80_i
001182  3               bsort0:
001182  3  A0 00        	ldy #0
001184  3  B1 68        	lda (z80_ix),y 		; first sprite type.
001186  3  C9 FF        	cmp #255 		; is it switched off?
001188  3  F0 30        	beq swemp		; yes, may need to switch another in here.
00118A  3               
00118A  3  A0 11        	ldy #TABSIZ
00118C  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
00118E  3  C9 FF        	cmp #255 		; is it enabled?
001190  3  F0 0A        	beq bsort2 		; no, nothing to swap.
001192  3               
001192  3  A0 14        	ldy #TABSIZ+3
001194  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
001196  3  A0 03        	ldy #3
001198  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
00119A  3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
00119C  3               bsort2:
00119C  3  18           	clc
00119D  3  A5 68        	lda z80_x
00119F  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
0011A1  3  85 68        	sta z80_x
0011A3  3  90 02        	bcc :+
0011A5  3  E6 69        	inc z80_i
0011A7  3               :
0011A7  3  C6 rr        	dec qscnt
0011A9  3  D0 D7        	bne bsort0		; repeat for remaining sprites.
0011AB  3  60           	rts
0011AC  3               
0011AC  3               ;qscnt:	.byte 0
0011AC  3               
0011AC  3               bsort1:
0011AC  3  A0 11        	ldy #TABSIZ
0011AE  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
0011B0  3  C9 FF        	cmp #255		; is it enabled?
0011B2  3  F0 E8        	beq bsort2		; no, nothing to swap.
0011B4  3  20 C8 11     	jsr swspr		; swap positions.
0011B7  3  4C 9C 11     	jmp bsort2
0011BA  3               swemp:
0011BA  3  A0 11        	ldy #TABSIZ
0011BC  3  B1 68        	lda (z80_ix),y		; next table entry.
0011BE  3  C9 FF        	cmp #255		; is that one on?
0011C0  3  F0 DA        	beq bsort2		; no, nothing to swap.
0011C2  3  20 C8 11     	jsr swspr		; swap positions.
0011C5  3  4C 9C 11     	jmp bsort2
0011C8  3               
0011C8  3               ; Swap sprites.
0011C8  3               
0011C8  3               swspr:
0011C8  3  A5 68        	lda z80_x		; table address
0011CA  3  85 64        	sta z80_e		; copy to de pair.
0011CC  3  85 66        	sta z80_l		; copy to hl pair.
0011CE  3  A5 69        	lda z80_i
0011D0  3  85 67        	sta z80_h
0011D2  3  85 65        	sta z80_d
0011D4  3               
0011D4  3  18           	clc
0011D5  3  A5 66        	lda z80_l
0011D7  3  69 11        	adc #TABSIZ		; distance to second entry.
0011D9  3  85 66        	sta z80_l
0011DB  3  90 02        	bcc :+
0011DD  3  E6 67        	inc z80_h
0011DF  3               :
0011DF  3  A9 11        	lda #TABSIZ		; bytes to swap.
0011E1  3  85 63        	sta z80_b
0011E3  3  A0 00        	ldy #0
0011E5  3               swspr0:
0011E5  3  B1 66        	lda (z80_hl),y		; fetch second byte.
0011E7  3  48           	pha
0011E8  3  B1 64        	lda (z80_de),y 		; fetch first byte.
0011EA  3  91 66        	sta (z80_hl),y 		; copy to second.
0011EC  3  68           	pla
0011ED  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
0011EF  3               
0011EF  3  E6 64        	inc z80_e 		; next byte.
0011F1  3  D0 02        	bne :+
0011F3  3  E6 65        	inc z80_d
0011F5  3               :
0011F5  3  E6 66        	inc z80_l 		; next byte.
0011F7  3  D0 02        	bne :+
0011F9  3  E6 67        	inc z80_h
0011FB  3               :
0011FB  3  C6 63        	dec z80_b
0011FD  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
0011FF  3  60           	rts
001200  3               
001200  3               ;----------------------------------------------------
001200  3               ; Process sprites.
001200  3               ;----------------------------------------------------
001200  3               
001200  3               pspr:
001200  3  A9 0C        	lda #NUMSPR		; sprites to process.
001202  3  85 rr        	sta sprptr
001204  3               
001204  3  A9 8A        	lda #<sprtab 		; sprite table.
001206  3  85 68        	sta z80_x
001208  3  A9 18        	lda #>sprtab
00120A  3  85 69        	sta z80_i
00120C  3               pspr1:
00120C  3  A0 00        	ldy #0
00120E  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
001210  3  C9 09        	cmp #9 			; within range of sprite types?
001212  3  B0 03        	bcs :+
001214  3  20 27 12     	jsr pspr2 		; yes, process this one.
001217  3               :
001217  3  18           	clc
001218  3  A5 68        	lda z80_x
00121A  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
00121C  3  85 68        	sta z80_x
00121E  3  90 02        	bcc :+
001220  3  E6 69        	inc z80_i		; next sprite.
001222  3               :
001222  3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
001224  3  D0 E6        	bne pspr1
001226  3  60           	rts
001227  3               
001227  3               ;sprptr:	.byte 0
001227  3               
001227  3               pspr2:
001227  3  A5 68        	lda z80_x 		; store original sprite pointer.
001229  3  85 rr        	sta ogptr
00122B  3  A5 69        	lda z80_i
00122D  3  85 rr        	sta ogptr+1
00122F  3  20 3B 12     	jsr pspr3		; do the routine.
001232  3               rtorg:
001232  3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
001234  3  85 68        	sta z80_x
001236  3  A5 rr        	lda ogptr+1
001238  3  85 69        	sta z80_i
00123A  3               rtorg0:
00123A  3  60           	rts
00123B  3               
00123B  3               pspr3:
00123B  3  A9 70        	lda #<evtyp0		; sprite type events list.
00123D  3  85 66        	sta z80_l
00123F  3  A9 12        	lda #>evtyp0
001241  3  85 67        	sta z80_h
001243  3               pspr4:
001243  3  B1 68        	lda (z80_ix),y
001245  3  0A           	asl a			; double accumulator.
001246  3  18           	clc
001247  3  65 66        	adc z80_l
001249  3  85 66        	sta z80_l
00124B  3  90 02        	bcc :+
00124D  3  E6 67        	inc z80_h
00124F  3               :
00124F  3  B1 66        	lda (z80_hl),y
001251  3  85 64        	sta z80_e 		; copy to de.
001253  3  48           	pha
001254  3               
001254  3  E6 66        	inc z80_l 		; next byte of address.
001256  3  D0 02        	bne :+
001258  3  E6 67        	inc z80_h
00125A  3               :
00125A  3  B1 66        	lda (z80_hl),y 		; address high.
00125C  3  85 65        	sta z80_d
00125E  3               
00125E  3  48           	pha	 		; swap address into hl.
00125F  3  A5 67        	lda z80_h
001261  3  85 65        	sta z80_d
001263  3  68           	pla
001264  3  85 67        	sta z80_h
001266  3  68           	pla
001267  3  85 66        	sta z80_l
001269  3  A5 66        	lda z80_l
00126B  3  85 64        	sta z80_e
00126D  3               
00126D  3  6C 66 00     	jmp (z80_hl) 		; go there.
001270  3               
001270  3               ;ogptr:	.word 0			; original sprite pointer.
001270  3               
001270  3               ; Address of each sprite type's routine.
001270  3               
001270  3  B0 19        evtyp0:	.word evnt00
001272  3  34 1D        evtyp1:	.word evnt01
001274  3  43 1D        evtyp2:	.word evnt02
001276  3  8D 22        evtyp3:	.word evnt03
001278  3  42 23        evtyp4:	.word evnt04
00127A  3  CF 23        evtyp5:	.word evnt05
00127C  3  F7 24        evtyp6:	.word evnt06
00127E  3  E1 25        evtyp7:	.word evnt07
001280  3  E2 25        evtyp8:	.word evnt08
001282  3               
001282  3               ;--------------------------------------------------------------
001282  3               ; Display sprites.
001282  3               ;
001282  3               ; Input:
001282  3               ;  IX = sprite table
001282  3               ;--------------------------------------------------------------
001282  3               
001282  3               dspr:
001282  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
001284  3  85 rr        	sta sprcnt
001286  3               dspr0:
001286  3  A0 00        	ldy #0
001288  3  B1 68        	lda (z80_ix),y 		; get sprite type.
00128A  3  C9 FF        	cmp #255 		; is it enabled?
00128C  3  D0 42        	bne dspr1 		; yes, it needs deleting.
00128E  3               dspr5:
00128E  3  A0 05        	ldy #5
001290  3  B1 68        	lda (z80_ix),y 		; new type.
001292  3  C9 FF        	cmp #255		; is it enabled?
001294  3  D0 77        	bne dspr3 		; yes, it needs drawing.
001296  3               dspr2:
001296  3  A0 05        	ldy #5
001298  3  B1 68        	lda (z80_ix),y 		; copy new type.
00129A  3  A0 00        	ldy #0
00129C  3  91 68        	sta (z80_ix),y
00129E  3  A0 06        	ldy #6
0012A0  3  B1 68        	lda (z80_ix),y 		; copy new image number.
0012A2  3  A0 01        	ldy #1
0012A4  3  91 68        	sta (z80_ix),y
0012A6  3  A0 07        	ldy #7
0012A8  3  B1 68        	lda (z80_ix),y 		; copy new frame.
0012AA  3  A0 02        	ldy #2
0012AC  3  91 68        	sta (z80_ix),y
0012AE  3  A0 08        	ldy #8
0012B0  3  B1 68        	lda (z80_ix),y 		; copy new y.
0012B2  3  A0 03        	ldy #3
0012B4  3  91 68        	sta (z80_ix),y
0012B6  3  A0 09        	ldy #9
0012B8  3  B1 68        	lda (z80_ix),y 		; copy new x.
0012BA  3  A0 04        	ldy #4
0012BC  3  91 68        	sta (z80_ix),y
0012BE  3               
0012BE  3  18           	clc
0012BF  3  A5 68        	lda z80_x
0012C1  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
0012C3  3  85 68        	sta z80_x
0012C5  3  A5 69        	lda z80_i
0012C7  3  69 00        	adc #0
0012C9  3  85 69        	sta z80_i 		; next sprite.
0012CB  3  C6 rr        	dec sprcnt
0012CD  3  D0 B7        	bne dspr0		; repeat for remaining sprites.
0012CF  3  60           	rts
0012D0  3               dspr1:
0012D0  3  A0 05        	ldy #5
0012D2  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
0012D4  3  C9 FF        	cmp #255		; is this enabled?
0012D6  3  D0 06        	bne dspr4 		; yes, display both.
0012D8  3               dspr6:
0012D8  3  20 A0 13     	jsr sspria 		; show single sprite.
0012DB  3  4C 96 12     	jmp dspr2
0012DE  3               
0012DE  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
0012DE  3               
0012DE  3               dspr4:
0012DE  3  A0 04        	ldy #4
0012E0  3  B1 68        	lda (z80_ix),y		; old x.
0012E2  3  A0 09        	ldy #9
0012E4  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
0012E6  3  D0 1F        	bne dspr7 		; they differ, need to redraw.
0012E8  3               
0012E8  3  A0 03        	ldy #3
0012EA  3  B1 68        	lda (z80_ix),y		; old y.
0012EC  3  A0 08        	ldy #8
0012EE  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
0012F0  3  D0 15        	bne dspr7		; they differ, need to redraw.
0012F2  3               
0012F2  3  A0 02        	ldy #2
0012F4  3  B1 68        	lda (z80_ix),y 		; old frame.
0012F6  3  A0 07        	ldy #7
0012F8  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
0012FA  3  4C 07 13     	jmp dspr7 		; they differ, need to redraw.
0012FD  3               
0012FD  3  A0 01        	ldy #1
0012FF  3  B1 68        	lda (z80_ix),y 		; old image.
001301  3  A0 06        	ldy #6
001303  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
001305  3  F0 8F        	beq dspr2		; everything is the same, don't redraw.
001307  3               dspr7:
001307  3  20 B8 13     	jsr sspric 		; delete old sprite, draw new one simultaneously.
00130A  3  4C 96 12     	jmp dspr2
00130D  3               dspr3:
00130D  3  20 B2 13     	jsr ssprib 		; show single sprite.
001310  3  4C 96 12     	jmp dspr2
001313  3               
001313  3               ;sprcnt:	.byte 0
001313  3               
001313  3               ;-----------------------------------------
001313  3               ; Get sprite address calculations.
001313  3               ; gspran = new sprite, gsprad = old sprite.
001313  3               ;
001313  3               ; Input:
001313  3               ;  IX = sprite address
001313  3               ;-----------------------------------------
001313  3               
001313  3               gspran:
001313  3  A0 08        	ldy #8
001315  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
001317  3  85 rr        	sta dispy
001319  3  A0 09        	ldy #9
00131B  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
00131D  3  85 rr        	sta dispx
00131F  3  A0 06        	ldy #6
001321  3  B1 68        	lda (z80_ix),y 		; new sprite image.
001323  3  20 AC 16     	jsr gfrm		; fetch start frame for this sprite.
001326  3               
001326  3  A0 00        	ldy #0
001328  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
00132A  3  A0 07        	ldy #7
00132C  3  18           	clc
00132D  3  71 68        	adc (z80_ix),y 		; new add frame number.
00132F  3  4C 4E 13     	jmp gspra0
001332  3               
001332  3               ;-----------------------------------------
001332  3               ; Calculate old sprite address
001332  3               ;
001332  3               ; Input:
001332  3               ;  IX = sprite address
001332  3               ;
001332  3               ; Output:
001332  3               ;  B  = right byte mask
001332  3               ;  C  = left byte mask
001332  3               ;  DE = spriteframe address
001332  3               ;  scraddr = screenaddress(dispx,dispy)
001332  3               ;-----------------------------------------
001332  3               
001332  3               gsprad:
001332  3  A0 03        	ldy #3
001334  3  B1 68        	lda (z80_ix),y		; y coordinate.
001336  3  85 rr        	sta dispy
001338  3  A0 04        	ldy #4
00133A  3  B1 68        	lda (z80_ix),y		; x coordinate.
00133C  3  85 rr        	sta dispx
00133E  3  A0 01        	ldy #1
001340  3  B1 68        	lda (z80_ix),y 		; sprite image.
001342  3  20 AC 16     	jsr gfrm 		; fetch start frame for this sprite.
001345  3               
001345  3  A0 00        	ldy #0
001347  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
001349  3  A0 02        	ldy #2
00134B  3  18           	clc
00134C  3  71 68        	adc (z80_ix),y 		; add frame number.
00134E  3               gspra0:
00134E  3  4A           	lsr a	  		; multiply by 128.
00134F  3  85 65        	sta z80_d 		; store in d.
001351  3  A9 00        	lda #0
001353  3  6A           	ror a
001354  3  85 64        	sta z80_e 		; got low byte.
001356  3               
001356  3  18           	clc 			; address of play sprites.
001357  3  A5 64        	lda z80_e
001359  3  69 6B        	adc #<sprgfx
00135B  3  85 64        	sta z80_e
00135D  3  A5 65        	lda z80_d
00135F  3  69 30        	adc #>sprgfx
001361  3  85 65        	sta z80_d
001363  3               
001363  3  A5 rr        	lda dispx 		; y coordinate.
001365  3  29 06        	and #6 			; position within byte boundary.
001367  3  AA           	tax	 		; low byte of table displacement.
001368  3               
001368  3  0A           	asl a	  		; multiply by 32.
001369  3  0A           	asl a  			; already a multiple
00136A  3  0A           	asl a  			; of 2, so just 4
00136B  3  0A           	asl a  			; shifts needed.
00136C  3               
00136C  3  18           	clc 			; add to sprite address.
00136D  3  65 64        	adc z80_e
00136F  3  85 64        	sta z80_e
001371  3  90 02        	bcc :+
001373  3  E6 65        	inc z80_d
001375  3               :
001375  3  BD 98 13     	lda spmask,x		 ; pointer to mask table.
001378  3  85 62        	sta z80_c 		; left mask.
00137A  3  BD 99 13     	lda spmask+1,x
00137D  3  85 63        	sta z80_b 		; right mask.
00137F  3               
00137F  3               ;------------------------------------------------------------------
00137F  3               ; Drop into screen address routine.
00137F  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
00137F  3               ;------------------------------------------------------------------
00137F  3               
00137F  3               scadd:
00137F  3  A6 rr        	ldx dispy
001381  3  E0 C0        	cpx #192
001383  3  90 02        	bcc :+
001385  3  A2 C0        	ldx #192
001387  3               :
001387  3  A5 rr        	lda dispx
001389  3  4A           	lsr a
00138A  3  4A           	lsr a
00138B  3  4A           	lsr a
00138C  3  18           	clc
00138D  3  7D 00 9B     	adc SCADTB_lb,x
001390  3  85 rr        	sta scraddr
001392  3  BD 00 9C     	lda SCADTB_hb,x
001395  3  85 rr        	sta scraddr+1
001397  3  60           	rts
001398  3               
001398  3  FF 00 3F C0  spmask:	.byte 255,0,63,192,15,240,3,252
00139C  3  0F F0 03 FC  
0013A0  3               
0013A0  3               
0013A0  3               ;-----------------------------------------------------------------
0013A0  3               ; These are the sprite routines.
0013A0  3               ; sspria = single sprite, old (ix).
0013A0  3               ; ssprib = single sprite, new (ix+5).
0013A0  3               ; sspric = both sprites, old (ix) and new (ix+5).
0013A0  3               ;-----------------------------------------------------------------
0013A0  3               
0013A0  3               sspria:
0013A0  3  20 32 13     	jsr gsprad		; get old sprite address.
0013A3  3               sspri2:
0013A3  3  A9 10        	lda #16			; vertical lines.
0013A5  3  8D B1 13     	sta acnt
0013A8  3               sspri0:
0013A8  3  20 D0 13     	jsr dline		; draw a line.
0013AB  3  CE B1 13     	dec acnt
0013AE  3  D0 F8        	bne sspri0		; repeat 16 times
0013B0  3  60           	rts
0013B1  3               
0013B1  3  00           acnt:	.byte 0
0013B2  3               
0013B2  3               ;-----------------------------------------------------------------
0013B2  3               
0013B2  3               ssprib:
0013B2  3  20 13 13     	jsr gspran 		; get new sprite address.
0013B5  3  4C A3 13     	jmp sspri2
0013B8  3               
0013B8  3               ;-----------------------------------------------------------------
0013B8  3               
0013B8  3               ;ccnt = $7c
0013B8  3               
0013B8  3               sspric:
0013B8  3  20 32 13     	jsr gsprad 		; get old sprite address.
0013BB  3  20 8D 6E     	jsr exx  		; store addresses.
0013BE  3  20 13 13     	jsr gspran 		; get new sprite addresses.
0013C1  3               
0013C1  3  A9 10        	lda #16
0013C3  3  85 rr        	sta ccnt
0013C5  3               lloop:
0013C5  3  20 D0 13     	jsr dline 		; draw a line.
0013C8  3  20 0C 14     	jsr ddline 		; delete a line.
0013CB  3  C6 rr        	dec ccnt
0013CD  3  D0 F6        	bne lloop
0013CF  3               
0013CF  3  60           	rts
0013D0  3               
0013D0  3               ;-------------------------------------------------------------
0013D0  3               ; Drop through.
0013D0  3               ; Line drawn, now work out next target address.
0013D0  3               ;
0013D0  3               ; Input:
0013D0  3               ;  B  = right mask
0013D0  3               ;  C  = left mask
0013D0  3               ;  DE = spriteaddress
0013D0  3               ;  scraddr = screen address
0013D0  3               ;-------------------------------------------------------------
0013D0  3               
0013D0  3               dline:
0013D0  3               .if hflag
0013D0  3               	lda scraddr
0013D0  3               	and #31
0013D0  3               	sta dispx
0013D0  3               	lda scraddr+1
0013D0  3               	and #31
0013D0  3               	sta dispy
0013D0  3               	jsr pradd
0013D0  3               	ldy #0
0013D0  3               	lda (bufaddr),y
0013D0  3               	cmp #CUSTOM
0013D0  3               	beq sline
0013D0  3               .endif
0013D0  3  A0 00        	ldy #0
0013D2  3  B1 64        	lda (z80_de),y 		; graphic data.
0013D4  3  25 62        	and z80_c 		; mask away what's not needed.
0013D6  3  51 rr        	eor (scraddr),y 	; XOR with what's there.
0013D8  3  91 rr        	sta (scraddr),y 	; bung it in.
0013DA  3               sline:
0013DA  3  E6 rr        	inc scraddr 		; next screen address.
0013DC  3  E6 rr        	inc scraddr 		; next screen address.
0013DE  3               .if hflag
0013DE  3               	ldy #2
0013DE  3               	lda (bufaddr),y
0013DE  3               	cmp #CUSTOM
0013DE  3               	beq sline2
0013DE  3               .endif
0013DE  3  A0 00        	ldy #0
0013E0  3  B1 64        	lda (z80_de),y 		; fetch data.
0013E2  3  25 63        	and z80_b 		; mask away unwanted bits.
0013E4  3  51 rr        	eor (scraddr),y 	; XOR with what's there.
0013E6  3  91 rr        	sta (scraddr),y 	; bung it in.
0013E8  3               sline2:
0013E8  3  E6 64        	inc z80_e 		; next graphic.
0013EA  3  D0 02        	bne :+
0013EC  3  E6 65        	inc z80_d
0013EE  3               :
0013EE  3  C6 rr        	dec scraddr 		; one character cell to the left.
0013F0  3               .if hflag
0013F0  3               	ldy #1
0013F0  3               	lda (bufaddr),y
0013F0  3               	cmp #CUSTOM
0013F0  3               	beq sline3
0013F0  3               .endif
0013F0  3  A0 00        	ldy #0
0013F2  3  B1 64        	lda (z80_de),y 		; second bit of data.
0013F4  3  51 rr        	eor (scraddr),y 	; XOR with what's there.
0013F6  3  91 rr        	sta (scraddr),y 	; bung it in.
0013F8  3               
0013F8  3               sline3:
0013F8  3  E6 64        	inc z80_e 		; point to next line of data.
0013FA  3  D0 02        	bne :+
0013FC  3  E6 65        	inc z80_d
0013FE  3               :
0013FE  3  C6 rr        	dec scraddr 		; another char left.
001400  3               
001400  3               ;----------------------------------------------------------------------
001400  3               ; Line drawn, now work out next target address.
001400  3               ;----------------------------------------------------------------------
001400  3               
001400  3               nline:
001400  3  18           	clc
001401  3  A5 rr        	lda scraddr 		; get low byte of address.
001403  3  69 20        	adc #$20
001405  3  85 rr        	sta scraddr 		; new low byte of address.
001407  3  90 02        	bcc :+
001409  3  E6 rr        	inc scraddr+1 		; new high byte of address.
00140B  3               :
00140B  3  60           	rts
00140C  3               
00140C  3               ;-------------------------------------------------------------
00140C  3               ; Line drawn, now work out next target address.
00140C  3               ;
00140C  3               ; Input:
00140C  3               ;  BP  = right mask
00140C  3               ;  CP  = left mask
00140C  3               ;  DEP = spriteaddress
00140C  3               ;  z80_hlp = screen address
00140C  3               ;-------------------------------------------------------------
00140C  3               
00140C  3               ddline:
00140C  3               .if hflag
00140C  3               	lda z80_hlp
00140C  3               	and #31
00140C  3               	sta dispx
00140C  3               	lda z80_hlp+1
00140C  3               	and #31
00140C  3               	sta dispy
00140C  3               	jsr pradd
00140C  3               	ldy #0
00140C  3               	lda (bufaddr),y
00140C  3               	cmp #CUSTOM
00140C  3               	beq dsline
00140C  3               .endif
00140C  3  A0 00        	ldy #0
00140E  3  B1 70        	lda (z80_dep),y 	; graphic data.
001410  3  25 6E        	and z80_cp 		; mask away what's not needed.
001412  3  51 72        	eor (z80_hlp),y 	; XOR with what's there.
001414  3  91 72        	sta (z80_hlp),y 	; bung it in.
001416  3               dsline:
001416  3  E6 72        	inc z80_lp 		; next screen address.
001418  3  E6 72        	inc z80_lp 		; next screen address.
00141A  3               .if hflag
00141A  3               	ldy #2
00141A  3               	lda (bufaddr),y
00141A  3               	cmp #CUSTOM
00141A  3               	beq dsline2
00141A  3               .endif
00141A  3  A0 00        	ldy #0
00141C  3  B1 70        	lda (z80_dep),y 	; fetch data.
00141E  3  25 6F        	and z80_bp 		; mask away unwanted bits.
001420  3  51 72        	eor (z80_hlp),y 	; XOR with what's there.
001422  3  91 72        	sta (z80_hlp),y 	; bung it in.
001424  3               dsline2:
001424  3  E6 70        	inc z80_ep 		; next graphic.
001426  3  D0 02        	bne :+
001428  3  E6 71        	inc z80_dp
00142A  3               :
00142A  3  C6 72        	dec z80_lp 		; one character cell to the left.
00142C  3               .if hflag
00142C  3               	ldy #1
00142C  3               	lda (bufaddr),y
00142C  3               	cmp #CUSTOM
00142C  3               	beq dsline3
00142C  3               .endif
00142C  3  A0 00        	ldy #0
00142E  3  B1 70        	lda (z80_dep),y 	; second bit of data.
001430  3  51 72        	eor (z80_hlp),y 	; XOR with what's there.
001432  3  91 72        	sta (z80_hlp),y 	; bung it in.
001434  3               dsline3:
001434  3  E6 70        	inc z80_ep 		; point to next line of data.
001436  3  D0 02        	bne :+
001438  3  E6 71        	inc z80_dp
00143A  3               :
00143A  3  C6 72        	dec z80_hlp 		; another char left.
00143C  3               
00143C  3               ;----------------------------------------------------------------------
00143C  3               ; Line drawn, now work out next target address.
00143C  3               ;----------------------------------------------------------------------
00143C  3               
00143C  3               dnline:
00143C  3  18           	clc
00143D  3  A5 72        	lda z80_lp 		; get low byte of address.
00143F  3  69 20        	adc #$20
001441  3  85 72        	sta z80_lp 		; new low byte of address.
001443  3  90 02        	bcc :+
001445  3  E6 73        	inc z80_hp 		; new high byte of address.
001447  3               :
001447  3  60           	rts
001448  3               
001448  3               ;-----------------------------------------------------------
001448  3               ; Animates a sprite.
001448  3               ;
001448  3               ; Input:
001448  3               ;  IX = sprite address
001448  3               ;  HL = last sprite address
001448  3               ;-----------------------------------------------------------
001448  3               
001448  3               animsp:
001448  3  25 rr        	and frmno
00144A  3  F0 01        	beq :+
00144C  3  60           	rts
00144D  3               :
00144D  3  A0 06        	ldy #6
00144F  3  B1 68        	lda (z80_ix),y		; sprite image
001451  3  20 AC 16     	jsr gfrm		; get frame data.
001454  3               
001454  3  E6 66        	inc z80_l		; point to frames.
001456  3  D0 02        	bne :+
001458  3  E6 67        	inc z80_h
00145A  3               :
00145A  3  A0 07        	ldy #7
00145C  3  B1 68        	lda (z80_ix),y		; sprite frame.
00145E  3  18           	clc
00145F  3  69 01        	adc #1			; next one along.
001461  3  A0 00        	ldy #0
001463  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
001465  3  90 02        	bcc anims0		; no, not yet.
001467  3  A9 00        	lda #0			; start at first frame.
001469  3               anims0:
001469  3  A0 07        	ldy #7
00146B  3  91 68        	sta (z80_ix),y		; new frame.
00146D  3  60           	rts
00146E  3               
00146E  3               ;--------------------------------------------------------------
00146E  3               ; Animate back
00146E  3               ;
00146E  3               ; Input:
00146E  3               ;  IX = sprite address
00146E  3               ;  HL = last sprite address
00146E  3               ;--------------------------------------------------------------
00146E  3               
00146E  3               animbk:
00146E  3  25 rr        	and frmno
001470  3  F0 01        	beq :+
001472  3  60           	rts
001473  3               :
001473  3  A0 06        	ldy #6
001475  3  B1 68        	lda (z80_ix),y		; sprite image.
001477  3  20 AC 16     	jsr gfrm		; get frame data.
00147A  3               
00147A  3  E6 66        	inc z80_l 		; point to frames.
00147C  3  D0 02        	bne :+
00147E  3  E6 67        	inc z80_h
001480  3               :
001480  3  A0 07        	ldy #7
001482  3  B1 68        	lda (z80_ix),y 		; sprite frame.
001484  3  F0 03        	beq :+
001486  3  4C 8D 14     	jmp rtanb0 		; yes, start at end.
001489  3               :
001489  3  A0 00        	ldy #0
00148B  3  B1 66        	lda (z80_hl),y 		; last sprite.
00148D  3               rtanb0:
00148D  3  38           	sec
00148E  3  E9 01        	sbc #1			; next one along.
001490  3  4C 69 14     	jmp anims0		; set new frame.
001493  3               
001493  3               ;--------------------------------------------------------------
001493  3               ; Check for collision with other sprite, strict enforcement.
001493  3               ;
001493  3               ; Input:
001493  3               ;  b		= sprite to test for
001493  3               ;  ix		= current sprite pointer
001493  3               ;
001493  3               ; global:	b
001493  3               ; local:	x,y,hl,de,skptr
001493  3               ; calls:	-
001493  3               ;--------------------------------------------------------------
001493  3               
001493  3               sktyp:
001493  3  A9 8A        	lda #<sprtab				; sprite table.
001495  3  85 66        	sta z80_l
001497  3  A9 18        	lda #>sprtab
001499  3  85 67        	sta z80_h
00149B  3               numsp2:
00149B  3  A9 0C        	lda #NUMSPR				; number of sprites.
00149D  3  85 rr        	sta sktptr
00149F  3               sktyp0:
00149F  3  A5 66        	lda z80_l 				; store pointer to sprite.
0014A1  3  85 rr        	sta skptr
0014A3  3  A5 67        	lda z80_h
0014A5  3  85 rr        	sta skptr+1
0014A7  3               
0014A7  3  A0 00        	ldy #0
0014A9  3  B1 66        	lda (z80_hl),y 				; get sprite type.
0014AB  3  C5 63        	cmp z80_b				; is it the type we seek?
0014AD  3  F0 1D        	beq coltyp				; yes, we can use this one.
0014AF  3               sktyp1:
0014AF  3  18           	clc
0014B0  3  A5 rr        	lda skptr				; retrieve sprite pointer.
0014B2  3  69 11        	adc #TABSIZ				; size of each entry.
0014B4  3  85 66        	sta z80_l
0014B6  3  A5 rr        	lda skptr+1
0014B8  3  69 00        	adc #0
0014BA  3  85 67        	sta z80_h
0014BC  3  C6 rr        	dec sktptr					; one less iteration.
0014BE  3  D0 DF        	bne sktyp0				; keep going until we find a slot.
0014C0  3  A9 00        	lda #0					; default to ROM address - no sprite.
0014C2  3  85 66        	sta z80_l
0014C4  3  85 67        	sta z80_h
0014C6  3  85 rr        	sta skptr				; store pointer to sprite.
0014C8  3  85 rr        	sta skptr+1
0014CA  3               
0014CA  3  18           	clc					; don't return with zero flag set.
0014CB  3  60           	rts 					; didn't find one.
0014CC  3               
0014CC  3               ;skptr:	.word 0					; search pointer.
0014CC  3               ;sktptr:	.byte 0
0014CC  3               
0014CC  3               coltyp:
0014CC  3  A0 00        	ldy #0
0014CE  3  B1 68        	lda (z80_ix),y				; current sprite type.
0014D0  3  C5 63        	cmp z80_b				; seeking sprite of same type?
0014D2  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
0014D4  3               colty0:
0014D4  3  A0 09        	ldy #9					; distance to x position in table.
0014D6  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
0014D8  3  85 64        	sta z80_e
0014DA  3  88           	dey
0014DB  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
0014DD  3  85 65        	sta z80_d
0014DF  3               
0014DF  3               ; Drop into collision detection.
0014DF  3               
0014DF  3               colc16:
0014DF  3  A0 09        	ldy #9
0014E1  3  B1 68        	lda (z80_ix),y			 	; x coord.
0014E3  3  38           	sec					; subtract x.
0014E4  3  E5 64        	sbc z80_e
0014E6  3  B0 05        	bcs  colc1a 				; result is positive.
0014E8  3  49 FF        	eor #$ff				; make negative positive.
0014EA  3  18           	clc
0014EB  3  69 01        	adc #1
0014ED  3               colc1a:
0014ED  3  C9 10        	cmp #16 				; within x range?
0014EF  3  B0 BE        	bcs sktyp1				; no - they"ve missed.
0014F1  3  85 62        	sta z80_c				; store difference.
0014F3  3               
0014F3  3  A0 08        	ldy #8
0014F5  3  B1 68        	lda (z80_ix),y				; y coord.
0014F7  3  38           	sec
0014F8  3  E5 65        	sbc z80_d				; subtract y.
0014FA  3  B0 05        	bcs colc1b				; result is positive.
0014FC  3  49 FF        	eor #$ff				; make negative positive.
0014FE  3  18           	clc
0014FF  3  69 01        	adc #1
001501  3               colc1b:
001501  3  C9 10        	cmp #16					; within y range?
001503  3  B0 AA        	bcs sktyp1 				; no - they've missed.
001505  3  18           	clc					; add x difference.
001506  3  65 62        	adc z80_c
001508  3  C9 1A        	cmp #26					; only 5 corner pixels touching?
00150A  3  B0 02        	bcs :+
00150C  3  38           	sec
00150D  3  60           	rts 					; carry set if there's a collision.
00150E  3               :
00150E  3  4C AF 14     	jmp sktyp1				; try next sprite in table.
001511  3               colty1:
001511  3  A5 68        	lda z80_x  				; compare the two.
001513  3  C5 66        	cmp z80_l
001515  3  D0 09        	bne end_col
001517  3  A5 69        	lda z80_i
001519  3  C5 67        	cmp z80_h
00151B  3  D0 03        	bne end_col
00151D  3  4C AF 14     	jmp sktyp1 				; addresses are identical.
001520  3               end_col:
001520  3  4C D4 14     	jmp colty0
001523  3               
001523  3               ;-----------------------------------------------------------
001523  3               ; Display number, left aligned
001523  3               ;
001523  3               ; Input:
001523  3               ;  a		= number
001523  3               ;
001523  3               ; global:	-
001523  3               ; local:	a,y,bc,hl,displ0
001523  3               ; calls:	num2ch,dmsg3
001523  3               ;-----------------------------------------------------------
001523  3               
001523  3               disply:
001523  3  85 61        	sta z80_a
001525  3  A9 4B        	lda #<displ0				; display workspace.
001527  3  85 62        	sta z80_c
001529  3  A9 15        	lda #>displ0
00152B  3  85 63        	sta z80_b
00152D  3  A5 61        	lda z80_a
00152F  3  20 23 07     	jsr num2ch				; convert accumulator to string.
001532  3               displ1:
001532  3  C6 62        	dec z80_c				; back one character.
001534  3  D0 02        	bne :+
001536  3  C6 63        	dec z80_b
001538  3               :
001538  3  A0 00        	ldy #0
00153A  3  B1 62        	lda (z80_bc),y				; fetch digit.
00153C  3  09 80        	ora #128				; insert end marker.
00153E  3  91 62        	sta (z80_bc),y				; new value.
001540  3               
001540  3  A9 4B        	lda #<displ0				; display space.
001542  3  85 66        	sta z80_l
001544  3  A9 15        	lda #>displ0
001546  3  85 67        	sta z80_h
001548  3  4C 4A 10     	jmp dmsg3				; display the string.
00154B  3               
00154B  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
00154F  3               
00154F  3               ;----------------------------------------------------------------
00154F  3               ; Initialise screen.
00154F  3               ;
00154F  3               ; global:	roomtb,scno
00154F  3               ; local:	-
00154F  3               ; calls:	tstcs
00154F  3               ;----------------------------------------------------------------
00154F  3               
00154F  3               initsc:
00154F  3  AD 67 19     	lda roomtb 			; whereabouts in the map are we?
001552  3  20 5C 15     	jsr tstsc 			; find displacement.
001555  3  C9 FF        	cmp #255 			; is it valid?
001557  3  F0 02        	beq init_end 			; no, it's rubbish.
001559  3  85 rr        	sta scno			; store new room number.
00155B  3               init_end:
00155B  3  60           	rts
00155C  3               
00155C  3               ;----------------------------------------------------------------
00155C  3               ; Test screen.
00155C  3               ;
00155C  3               ; global:	-
00155C  3               ; local:	x
00155C  3               ; calls:	-
00155C  3               ;----------------------------------------------------------------
00155C  3               
00155C  3               tstsc:
00155C  3  85 rr        	sta tmproom
00155E  3  18           	clc
00155F  3  69 0A        	adc #MAPWID 			; add width in case we"re negative.
001561  3  AA           	tax 				; add displacement to map data.
001562  3  BD 69 19     	lda mapdat-MAPWID,x 		; find room number there.
001565  3  60           	rts
001566  3               
001566  3               ;tmproom:	.byte 0
001566  3               
001566  3               ;--------------------------
001566  3               ; Screen left.
001566  3               ;--------------------------
001566  3               
001566  3               scrl:
001566  3  AD 67 19     	lda roomtb 			; present room table pointer.
001569  3  38           	sec
00156A  3  E9 01        	sbc #1				; room left.
00156C  3               scrl0:
00156C  3  20 5C 15     	jsr tstsc			; test screen.
00156F  3  C9 FF        	cmp #255			; is there a screen this way?
001571  3  D0 01        	bne :+
001573  3  60           	rts				; no, return to loop.
001574  3               :
001574  3  A5 rr        	lda tmproom			; restore room displacement.
001576  3  8D 67 19     	sta roomtb			; new room table position.
001579  3               scrl1:
001579  3  20 4F 15     	jsr initsc 			; set new screen.
00157C  3  A9 02        	lda #2
00157E  3  85 rr        	sta restfl 			; set it.
001580  3  60           	rts
001581  3               scrr:
001581  3  AD 67 19     	lda roomtb 			; room table pointer.
001584  3  18           	clc
001585  3  69 01        	adc #1				; room right.
001587  3  4C 6C 15     	jmp scrl0
00158A  3               scru:
00158A  3  AD 67 19     	lda roomtb 			; room table pointer.
00158D  3  38           	sec
00158E  3  E9 0A        	sbc #MAPWID 			; room up.
001590  3  4C 6C 15     	jmp scrl0
001593  3               scrd:
001593  3  AD 67 19     	lda roomtb 			; room table pointer.
001596  3  18           	clc
001597  3  69 0A        	adc #MAPWID 			; room down.
001599  3  4C 6C 15     	jmp scrl0
00159C  3               
00159C  3               ;-----------------------------------------
00159C  3               ; Jump to new screen.
00159C  3               ;-----------------------------------------
00159C  3               
00159C  3               nwscr:
00159C  3  A2 00        	ldx #0				; start of map data.
00159E  3               nwscr0:
00159E  3  DD 73 19     	cmp mapdat,x
0015A1  3  F0 06        	beq nwscr1			; have we found a match for screen?
0015A3  3  E8           	inx 				; next room.
0015A4  3  E0 50        	cpx #80				; zero room count, 80 to search.
0015A6  3  D0 F6        	bne nwscr0			; keep looking.
0015A8  3  60           	rts
0015A9  3               nwscr1:
0015A9  3  8E 67 19     	stx roomtb			; set the map position.
0015AC  3  4C 79 15     	jmp scrl1			; draw new room.
0015AF  3               
0015AF  3               
0015AF  3               ;----------------------------------------------------------
0015AF  3               ; Gravity processing.
0015AF  3               ;----------------------------------------------------------
0015AF  3               
0015AF  3               grav:
0015AF  3  A0 0D        	ldy #13
0015B1  3  B1 68        	lda (z80_ix),y			; jump pointer low.
0015B3  3  85 66        	sta z80_l
0015B5  3  A0 0E        	ldy #14
0015B7  3  B1 68        	lda (z80_ix),y			; jump pointer high.
0015B9  3  85 67        	sta z80_h
0015BB  3  05 66        	ora z80_l			; merge in low byte.
0015BD  3  D0 01        	bne :+
0015BF  3  60           	rts				; if neither is set, we're not in the air.
0015C0  3               :
0015C0  3  A0 00        	ldy #0
0015C2  3  B1 66        	lda (z80_hl),y			; pixels to move.
0015C4  3  85 61        	sta z80_a
0015C6  3  C9 63        	cmp #99				; reached the end?
0015C8  3  D0 0C        	bne grav0			; no, continue.
0015CA  3               grav2:
0015CA  3  C6 66        	dec z80_l			; go back to previous value.
0015CC  3  C9 FF        	cmp #$ff
0015CE  3  D0 02        	bne :+
0015D0  3  C6 67        	dec z80_h
0015D2  3               :
0015D2  3  B1 66        	lda (z80_hl),y			; fetch that from table.
0015D4  3  85 61        	sta z80_a
0015D6  3               grav0:
0015D6  3  E6 66        	inc z80_l			; point to next table entry.
0015D8  3  D0 02        	bne :+
0015DA  3  E6 67        	inc z80_h
0015DC  3               :
0015DC  3  A5 66        	lda z80_l
0015DE  3  A0 0D        	ldy #13
0015E0  3  91 68        	sta (z80_ix),y			; store new pointer low.
0015E2  3  A5 67        	lda z80_h
0015E4  3  A0 0E        	ldy #14
0015E6  3  91 68        	sta (z80_ix),y			; store new pointer high.
0015E8  3               grav1:
0015E8  3  A5 61        	lda z80_a
0015EA  3  D0 01        	bne :+				; any movement required?
0015EC  3  60           	rts				; no, not this time.
0015ED  3               :
0015ED  3  A5 61        	lda z80_a
0015EF  3  C9 80        	cmp #128			; is it up or down?
0015F1  3  B0 15        	bcs gravu			; it's up.
0015F3  3               gravd:
0015F3  3  85 63        	sta z80_b			; set pixels to move.
0015F5  3               gravd0:
0015F5  3  20 7E 0D     	jsr cangd			; can we go down?
0015F8  3  D0 28        	bne gravst			; can't move down, so stop.
0015FA  3  A0 08        	ldy #8
0015FC  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
0015FE  3  18           	clc
0015FF  3  69 01        	adc #1
001601  3  91 68        	sta (z80_ix),y
001603  3  C6 63        	dec z80_b
001605  3  D0 EE        	bne gravd0
001607  3  60           	rts
001608  3               gravu:
001608  3  49 FF        	eor #$ff			; flip the sign so it's positive.
00160A  3  18           	clc
00160B  3  69 01        	adc #1
00160D  3  85 63        	sta z80_b			; set pixels to move.
00160F  3               gravu0:
00160F  3  20 49 0D     	jsr cangu			; can we go up?
001612  3  D0 6E        	bne ifalls			; can't move up, go down next.
001614  3  A0 08        	ldy #8
001616  3  B1 68        	lda (z80_ix),y
001618  3  38           	sec
001619  3  E9 01        	sbc #1
00161B  3  91 68        	sta (z80_ix),y			; adjust new x coord.
00161D  3  C6 63        	dec z80_b
00161F  3  D0 EE        	bne gravu0
001621  3  60           	rts
001622  3               gravst:
001622  3  A0 0D        	ldy #13
001624  3  B1 68        	lda (z80_ix),y			; jump pointer low.
001626  3  85 66        	sta z80_l
001628  3  A0 0E        	ldy #14
00162A  3  B1 68        	lda (z80_ix),y			; jump pointer high.
00162C  3  85 67        	sta z80_h
00162E  3               
00162E  3  A9 00        	lda #0				; null value in pointer.
001630  3  A0 0D        	ldy #13
001632  3  91 68        	sta (z80_ix),y			; store new pointer low.
001634  3  C8           	iny
001635  3  91 68        	sta (z80_ix),y			; store new pointer high.
001637  3               
001637  3  A0 00        	ldy #0
001639  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
00163B  3  C9 63        	cmp #99				; is it the end marker?
00163D  3               evftf:
00163D  3  F0 01        	beq :+				; yes, fallen too far.
00163F  3  60           	rts
001640  3               :
001640  3  4C E2 28     	jmp evnt15			; EVENT FELLTOOFAR
001643  3               
001643  3               ;------------------------------------------------
001643  3               ; Initiate fall check.
001643  3               ;------------------------------------------------
001643  3               
001643  3               ifall:
001643  3  A0 0D        	ldy #13
001645  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
001647  3  85 66        	sta z80_l
001649  3  A0 0E        	ldy #14
00164B  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
00164D  3  85 67        	sta z80_h			; high byte in accumulator.
00164F  3  05 66        	ora z80_l			; merge in low byte.
001651  3  F0 01        	beq :+
001653  3  60           	rts				; if either is set, we're already in the air.
001654  3               :
001654  3  A0 09        	ldy #9
001656  3  B1 68        	lda (z80_ix),y			; y coordinate.
001658  3  85 rr        	sta dispx
00165A  3               numsp7:
00165A  3  A0 08        	ldy #8
00165C  3  B1 68        	lda (z80_ix),y			; look x coordinate.
00165E  3  18           	clc
00165F  3  69 10        	adc #16				; add 16 pixels.
001661  3  85 rr        	sta dispy			; set up test coordinates.
001663  3  20 F5 0E     	jsr tstbl			; get map address.
001666  3  20 10 0E     	jsr plchk			; block, platform check.
001669  3  F0 01        	beq :+
00166B  3  60           	rts				; it's solid, don't fall.
00166C  3               :
00166C  3  E6 rr        	inc bufaddr			; look right one cell.
00166E  3  20 10 0E     	jsr plchk			; block, platform check.
001671  3  F0 01        	beq :+
001673  3  60           	rts				; it's solid, don't fall.
001674  3               :
001674  3  A5 rr        	lda dispx			; y coordinate.
001676  3  29 07        	and #7				; position straddling block cells.
001678  3  F0 08        	beq ifalls			; no more checks needed.
00167A  3  E6 rr        	inc bufaddr			; look to third cell.
00167C  3  20 10 0E     	jsr plchk			; block, platform check.
00167F  3  F0 01        	beq :+
001681  3  60           	rts				; it's solid, don't fall.
001682  3               :
001682  3               ifalls:
001682  3  A9 6C        	lda #<jtab			; jump table start.
001684  3  85 66        	sta z80_l
001686  3  A9 6E        	lda #>jtab
001688  3  85 67        	sta z80_h
00168A  3               ifal0:
00168A  3  E6 66        	inc z80_l			; point to next value.
00168C  3  D0 02        	bne :+
00168E  3  E6 67        	inc z80_h
001690  3               :
001690  3  A0 00        	ldy #0
001692  3  B1 66        	lda (z80_hl),y			; fetch value.
001694  3  F0 F4        	beq ifal0			; no, get next value.
001696  3  C9 63        	cmp #99				; reached end of table?
001698  3  D0 01        	bne :+
00169A  3  60           	rts				; yes, don't fall.
00169B  3               :
00169B  3  C9 80        	cmp #128			; is it going up?
00169D  3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
00169F  3               
00169F  3  A0 0D        	ldy #13
0016A1  3  A5 66        	lda z80_l
0016A3  3  91 68        	sta (z80_ix),y 			; set jump low.
0016A5  3  A0 0E        	ldy #14
0016A7  3  A5 67        	lda z80_h
0016A9  3  91 68        	sta (z80_ix),y 			; set jump high.
0016AB  3  60           	rts
0016AC  3               
0016AC  3               
0016AC  3               ;----------------------------------------------------
0016AC  3               ; Get frame data for a particular sprite.
0016AC  3               ; Input:
0016AC  3               ;  a		= framenumer
0016AC  3               ; Output:
0016AC  3               ;  hl		= frame address
0016AC  3               ;
0016AC  3               ; global:	hl,frmptr
0016AC  3               ; local:	-
0016AC  3               ; calls:	-
0016AC  3               ;----------------------------------------------------
0016AC  3               
0016AC  3               gfrm:
0016AC  3  0A           	asl a	 		 	; multiple of 2.
0016AD  3  18           	clc
0016AE  3  6D 31 02     	adc frmptr 			; frames used by game.
0016B1  3  85 66        	sta z80_l
0016B3  3  AD 32 02     	lda frmptr+1
0016B6  3  69 00        	adc #0
0016B8  3  85 67        	sta z80_h 			; point to frame start.
0016BA  3  60           	rts
0016BB  3               
0016BB  3               ;----------------------------------------------------
0016BB  3               ; Find sprite list for current room.
0016BB  3               ;
0016BB  3               ; global:	hl
0016BB  3               ; local:	x,y
0016BB  3               ; calls:	-
0016BB  3               ;----------------------------------------------------
0016BB  3               
0016BB  3               sprlst:
0016BB  3  A9 98        	lda #<nmedat 			; list of enemy sprites.
0016BD  3  85 66        	sta z80_l
0016BF  3  A9 66        	lda #>nmedat
0016C1  3  85 67        	sta z80_h
0016C3  3  A6 rr        	ldx scno 			; screen number.
0016C5  3  D0 01        	bne sprls2 			; is it the first screen?
0016C7  3  60           	rts 				; yes, don't need to search data.
0016C8  3               sprls2:
0016C8  3  A0 00        	ldy #0
0016CA  3               sprls1:
0016CA  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
0016CC  3  C9 FF        	cmp #255			; is it an end marker?
0016CE  3  F0 0E        	beq sprls0 			; yes, end of this room.
0016D0  3               
0016D0  3  18           	clc 				; point to next sprite in list.
0016D1  3  A5 66        	lda z80_l
0016D3  3  69 04        	adc #NMESIZ
0016D5  3  85 66        	sta z80_l
0016D7  3  90 02        	bcc :+
0016D9  3  E6 67        	inc z80_h
0016DB  3               :
0016DB  3  4C CA 16     	jmp sprls1 			; continue until end of room.
0016DE  3               sprls0:
0016DE  3  E6 66        	inc z80_l 			; point to start of next screen.s
0016E0  3  D0 02        	bne :+
0016E2  3  E6 67        	inc z80_h
0016E4  3               :
0016E4  3  CA           	dex
0016E5  3  D0 E3        	bne sprls1 			; continue until room found.
0016E7  3  60           	rts
0016E8  3               
0016E8  3               
0016E8  3               ;----------------------------------------------------
0016E8  3               ; Clear all but a single player sprite.
0016E8  3               ;
0016E8  3               ; global:	-
0016E8  3               ; local:	x,y,ix
0016E8  3               ; calls:	-
0016E8  3               ;----------------------------------------------------
0016E8  3               
0016E8  3               nspr:
0016E8  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0016EA  3  85 rr        	sta sprcnt
0016EC  3  A9 8A        	lda #<sprtab 			; sprite table.
0016EE  3  85 68        	sta z80_x
0016F0  3  A9 18        	lda #>sprtab
0016F2  3  85 69        	sta z80_i
0016F4  3               nspr0:
0016F4  3  A0 00        	ldy #0 				; fetch sprite type.
0016F6  3  B1 68        	lda (z80_ix),y 			; is it a player?
0016F8  3  F0 1A        	beq nspr1 			; yes, keep this one.
0016FA  3               
0016FA  3  A9 FF        	lda #255
0016FC  3  A0 00        	ldy #0 				; fetch sprite type.
0016FE  3  91 68        	sta (z80_ix),y 			; delete sprite.
001700  3  A0 05        	ldy #5
001702  3  91 68        	sta (z80_ix),y 			; remove next type.
001704  3               
001704  3  18           	clc	 			; next sprite.
001705  3  A5 68        	lda z80_x
001707  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
001709  3  85 68        	sta z80_x
00170B  3  90 02        	bcc :+
00170D  3  E6 69        	inc z80_i
00170F  3               :
00170F  3  C6 rr        	dec sprcnt	 			; one less space in the table.
001711  3  D0 E1        	bne nspr0
001713  3  60           	rts
001714  3               nspr1:
001714  3  A9 FF        	lda #255
001716  3  A0 00        	ldy #0
001718  3  91 68        	sta (z80_ix),y 			; delete sprite.
00171A  3               
00171A  3  18           	clc	 			; point to next sprite.
00171B  3  A5 68        	lda z80_x
00171D  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00171F  3  85 68        	sta z80_x
001721  3  90 02        	bcc :+
001723  3  E6 69        	inc z80_i
001725  3               :
001725  3  C6 rr        	dec sprcnt	 			; one less to do.
001727  3  D0 01        	bne nspr2
001729  3  60           	rts
00172A  3               nspr2:
00172A  3  A9 FF        	lda #255
00172C  3  A0 00        	ldy #0
00172E  3  91 68        	sta (z80_ix),y 			; delete sprite.
001730  3  A0 05        	ldy #5
001732  3  91 68        	sta (z80_ix),y 			; remove next type.
001734  3               
001734  3  18           	clc	 			; next sprite.
001735  3  A5 68        	lda z80_x
001737  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
001739  3  85 68        	sta z80_x
00173B  3  90 02        	bcc :+
00173D  3  E6 69        	inc z80_i
00173F  3               :
00173F  3  C6 rr        	dec sprcnt	 			; one less space in table.
001741  3  D0 E7        	bne nspr2
001743  3  60           	rts
001744  3               
001744  3               ;----------------------------------------------------------
001744  3               ; Two initialisation routines.
001744  3               ; Initialise sprites - copy everything from list to table.
001744  3               ;
001744  3               ; global:	-
001744  3               ; local:	x,y,ix
001744  3               ; calls:	cpsp
001744  3               ;----------------------------------------------------------
001744  3               
001744  3               ispr:
001744  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
001746  3  85 rr        	sta sprcnt
001748  3  A9 8A        	lda #<sprtab			; sprite table.
00174A  3  85 68        	sta z80_x
00174C  3  A9 18        	lda #>sprtab
00174E  3  85 69        	sta z80_i
001750  3               ispr2:
001750  3  A0 00        	ldy #0
001752  3  B1 66        	lda (z80_hl),y 			; fetch byte.
001754  3  C9 FF        	cmp #255 			; is it an end marker?
001756  3  D0 01        	bne :+
001758  3  60           	rts 				; yes, no more to do.
001759  3               :
001759  3               ispr1:
001759  3  A0 00        	ldy #0
00175B  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
00175D  3  C9 FF        	cmp #255 			; is it enabled yet?
00175F  3  D0 08        	bne ispr4			; yes, try another slot.
001761  3               
001761  3  A0 05        	ldy #5
001763  3  B1 68        	lda (z80_ix),y		 	; next type.
001765  3  C9 FF        	cmp #255 			; is it enabled yet?
001767  3  F0 10        	beq ispr3 			; no, process this one.
001769  3               ispr4:
001769  3  18           	clc 				; next sprite.
00176A  3  A5 68        	lda z80_x
00176C  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
00176E  3  85 68        	sta z80_x
001770  3  90 02        	bcc :+
001772  3  E6 69        	inc z80_i
001774  3               :
001774  3  C6 rr        	dec sprcnt
001776  3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
001778  3  60           	rts  				; no more room in table.
001779  3               ispr3:
001779  3  20 CC 17     	jsr cpsp			; initialise a sprite.
00177C  3  C6 rr        	dec sprcnt			; one less space in the table.
00177E  3  D0 D0        	bne ispr2
001780  3  60           	rts
001781  3               
001781  3               
001781  3               ;-----------------------------------------------------------------------
001781  3               ; Initialise sprites - but not player, we're keeping the old one.
001781  3               ;
001781  3               ; global:	-
001781  3               ; local:	x,y,ix
001781  3               ; calls:	cpsp
001781  3               ;-----------------------------------------------------------------------
001781  3               
001781  3               kspr:
001781  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
001783  3  A9 8A        	lda #<sprtab 			; sprite table.
001785  3  85 68        	sta z80_x
001787  3  A9 18        	lda #>sprtab
001789  3  85 69        	sta z80_i
00178B  3               kspr2:
00178B  3  A0 00        	ldy #0
00178D  3  B1 66        	lda (z80_hl),y 			; fetch byte.
00178F  3  C9 FF        	cmp #255 			; is it an end marker?
001791  3  D0 01        	bne :+
001793  3  60           	rts 				; yes, no more to do.
001794  3               :
001794  3  C9 00        	cmp #0
001796  3  D0 0E        	bne kspr1 			; no, add to table as normal.
001798  3               
001798  3  18           	clc 				; next sprite.
001799  3  A5 66        	lda z80_l
00179B  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
00179D  3  85 66        	sta z80_l
00179F  3  90 02        	bcc :+
0017A1  3  E6 67        	inc z80_h
0017A3  3               :
0017A3  3  4C 8B 17     	jmp kspr2
0017A6  3               kspr1:
0017A6  3  A0 00        	ldy #0 				; fetch sprite type.
0017A8  3  B1 68        	lda (z80_ix),y
0017AA  3  C9 FF        	cmp #255 			; is it enabled yet?
0017AC  3  D0 08        	bne kspr4 			; yes, try another slot.
0017AE  3               
0017AE  3  A0 05        	ldy #5 				; next type.
0017B0  3  B1 68        	lda (z80_ix),y
0017B2  3  C9 FF        	cmp #255 			; is it enabled yet?
0017B4  3  F0 0F        	beq kspr3 			; no, process this one.
0017B6  3               kspr4:
0017B6  3  18           	clc 				; next sprite.
0017B7  3  A5 68        	lda z80_x
0017B9  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0017BB  3  85 68        	sta z80_x
0017BD  3  90 02        	bcc :+
0017BF  3  E6 69        	inc z80_i
0017C1  3               :
0017C1  3  CA           	dex	 			; repeat for remaining sprites.
0017C2  3  D0 E2        	bne kspr1
0017C4  3  60           	rts  				; no more room in table.
0017C5  3               kspr3:
0017C5  3  20 CC 17     	jsr cpsp 			; copy sprite to table.
0017C8  3  CA           	dex	 			; one less space in the table.
0017C9  3  D0 C0        	bne kspr2
0017CB  3  60           	rts
0017CC  3               
0017CC  3               ;----------------------------------------------
0017CC  3               ; Copy sprite from list to table.
0017CC  3               ;
0017CC  3               ; global:	hl,ix
0017CC  3               ; local:	y
0017CC  3               ; calls:	evnt09
0017CC  3               ;----------------------------------------------
0017CC  3               
0017CC  3               cpsp:
0017CC  3  A0 00        	ldy #0				; fetch byte from table.
0017CE  3  B1 66        	lda (z80_hl),y
0017D0  3  91 68        	sta (z80_ix),y			; set up type.
0017D2  3  A0 05        	ldy #PAM1ST
0017D4  3  91 68        	sta (z80_ix),y 			; set up type.
0017D6  3               
0017D6  3  E6 66        	inc z80_l 			; move to next byte.
0017D8  3  D0 02        	bne :+
0017DA  3  E6 67        	inc z80_h
0017DC  3               :
0017DC  3  A0 00        	ldy #0 				; fetch byte from table.
0017DE  3  B1 66        	lda (z80_hl),y
0017E0  3  A0 06        	ldy #6
0017E2  3  91 68        	sta (z80_ix),y			; set up image.
0017E4  3               
0017E4  3  E6 66        	inc z80_l 			; move to next byte.
0017E6  3  D0 02        	bne :+
0017E8  3  E6 67        	inc z80_h
0017EA  3               :
0017EA  3  A0 00        	ldy #0
0017EC  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
0017EE  3  A0 08        	ldy #8
0017F0  3  91 68        	sta (z80_ix),y 			; set up coordinate.
0017F2  3               
0017F2  3  A9 C8        	lda #200 			; set initial coordinate off screen.
0017F4  3  A0 03        	ldy #3
0017F6  3  91 68        	sta (z80_ix),y
0017F8  3               
0017F8  3  E6 66        	inc z80_l 			; move to next byte.
0017FA  3  D0 02        	bne :+
0017FC  3  E6 67        	inc z80_h
0017FE  3               :
0017FE  3  A0 00        	ldy #0 				; fetch byte from table.
001800  3  B1 66        	lda (z80_hl),y
001802  3  A0 09        	ldy #9
001804  3  91 68        	sta (z80_ix),y 			; set up coordinate.
001806  3               
001806  3  E6 66        	inc z80_l 			; move to next byte.
001808  3  D0 02        	bne :+
00180A  3  E6 67        	inc z80_h
00180C  3               :
00180C  3  A9 00        	lda #0				; zeroes in accumulator.
00180E  3  A0 07        	ldy #7 				; reset frame number.
001810  3  91 68        	sta (z80_ix),y
001812  3  A0 0A        	ldy #10 			; reset direction.
001814  3  91 68        	sta (z80_ix),y
001816  3  A0 0D        	ldy #13				; reset jump pointer low.
001818  3  91 68        	sta (z80_ix),y
00181A  3  A0 0E        	ldy #14	 			; reset jump pointer high.
00181C  3  91 68        	sta (z80_ix),y
00181E  3               
00181E  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
001820  3  A0 10        	ldy #16
001822  3  91 68        	sta (z80_ix),y
001824  3               evis0:
001824  3  A5 69        	lda z80_i
001826  3  48           	pha
001827  3  A5 68        	lda z80_x
001829  3  48           	pha
00182A  3  A5 67        	lda z80_h
00182C  3  48           	pha
00182D  3  A5 66        	lda z80_l
00182F  3  48           	pha
001830  3               
001830  3  20 E3 25     	jsr evnt09 			; perform event.
001833  3               
001833  3  68           	pla
001834  3  85 66        	sta z80_l
001836  3  68           	pla
001837  3  85 67        	sta z80_h
001839  3  68           	pla
00183A  3  85 68        	sta z80_x
00183C  3  68           	pla
00183D  3  85 69        	sta z80_i
00183F  3               
00183F  3  18           	clc
001840  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
001842  3  69 11        	adc #TABSIZ		 	; next sprite.
001844  3  85 68        	sta z80_x
001846  3  90 02        	bcc :+
001848  3  E6 69        	inc z80_i
00184A  3               :
00184A  3  60           	rts
00184B  3               
00184B  3               
00184B  3               ;-------------------------------------
00184B  3               ; Clear the play area window.
00184B  3               ;-------------------------------------
00184B  3               
00184B  3               clw:
00184B  3  AD 28 02     	lda wintop			; get coordinates of window.
00184E  3  85 rr        	sta dispy			; put into dispx for calculation.
001850  3  AD 29 02     	lda winlft
001853  3  85 rr        	sta dispx
001855  3               
001855  3  AD 2A 02     	lda winhgt			; height of window.
001858  3  85 rr        	sta rrow			; copy to b register.
00185A  3               clw3:
00185A  3  AD 2B 02     	lda winwid 			; width of window.
00185D  3  85 rr        	sta rcol
00185F  3               clw2:
00185F  3  20 DA 0A     	jsr gprad 			; get print address.
001862  3  A9 00        	lda #0				; zero byte to write.
001864  3  A2 07        	ldx #7				; pixel height of each cell.
001866  3               clw1:
001866  3  BC 4A 0B     	ldy scrtab,x
001869  3  91 rr        	sta (scraddr),y 			; copy to screen.
00186B  3  CA           	dex				; next screen row down.
00186C  3  10 F8        	bpl clw1
00186E  3               
00186E  3  E6 rr        	inc dispx			; next column.
001870  3  C6 rr        	dec rcol			; one less to do.
001872  3  D0 EB        	bne clw2			; repeat for remaining columns.
001874  3               
001874  3  AD 29 02     	lda winlft			; get left edge.
001877  3  85 rr        	sta dispx 			; reset x.
001879  3  E6 rr        	inc dispy 			; next line down.
00187B  3               
00187B  3  C6 rr        	dec rrow
00187D  3  D0 DB        	bne clw3			; repeat down the screen.
00187F  3               
00187F  3  AD 28 02     	lda wintop			; get coordinates of window.
001882  3  85 rr        	sta chary			; put into display position.
001884  3  AD 29 02     	lda winlft
001887  3  85 rr        	sta charx
001889  3  60           	rts
00188A  3               
00188A  3               
00188A  3               ;----------------------------------------------------------
00188A  3               ; Effects code.
00188A  3               ; Ticker routine is called 25 times per second.
00188A  3               ;
00188A  3               ; HL = txtscr = left text screen address
00188A  3               ; DE = txtscr+txtwid-1 = right text screen address
00188A  3               ; BC = txtpos = text scroller position
00188A  3               ;
00188A  3               ;----------------------------------------------------------
00188A  3               
00188A  3               .if sflag
00188A  3               scrly:
00188A  3               	rts
00188A  3               	.word txtscr         	; get left screen address.
00188A  3               	sta scr_l
00188A  3               	lda txtscr+1
00188A  3               	sta scr_l+1
00188A  3               	sta scr_r+1
00188A  3               
00188A  3               	stx xtmp
00188A  3               
00188A  3               	clc         		; get right screen address.
00188A  3               	lda scr_l
00188A  3               	adc txtwid
00188A  3               	sta scr_r
00188A  3               	dec scr_r
00188A  3               scrly1:
00188A  3               	ldy txtwid		; set txtwide
00188A  3               	dey
00188A  3               	clc
00188A  3               scrly0:
00188A  3               	lda (scr_l),y		; scroll 1 line
00188A  3               	rol a
00188A  3               	sta (scr_l),y
00188A  3               	dey
00188A  3               	bpl scrly0
00188A  3               
00188A  3               	clc			; point to next line
00188A  3               	lda scr_l
00188A  3               	adc #32
00188A  3               	sta scr_l
00188A  3               	bcc scrly1		; repeat 8 times
00188A  3               
00188A  3               	lda txtpos 		; get text pointer.
00188A  3               	sta scr_txt
00188A  3               	lda txtpos+1
00188A  3               	sta scr_txt+1
00188A  3               
00188A  3               	ldy #0
00188A  3               	lda (scr_txt),y 		; find character we're displaying.
00188A  3               	and #127 		; remove end marker bit if applicable.
00188A  3               	cmp #13			; is it newline?
00188A  3               	bne scrly5 		; no, it's okay.
00188A  3               	lda #32			; convert to a space instead.
00188A  3               scrly5:
00188A  3               	sta fntaddr		; calculate char address
00188A  3               	lda #0
00188A  3               	sta fntaddr+1
00188A  3               	asl fntaddr  		; multiply char by 8.
00188A  3               	rol fntaddr+1
00188A  3               	asl fntaddr
00188A  3               	rol fntaddr+1
00188A  3               	asl fntaddr
00188A  3               	rol fntaddr+1
00188A  3               	lda fntaddr
00188A  3               	clc
00188A  3               	adc #<(FONT-256)
00188A  3               	sta scrly3+1		; that's the low byte.
00188A  3               	lda fntaddr+1
00188A  3               	adc #>(FONT-256)
00188A  3               	sta scrly3+2		; add displacement.
00188A  3               
00188A  3               	ldx #0
00188A  3               scrly3:
00188A  3               	lda $3333,x		; get image of char line.
00188A  3               	and txtbit
00188A  3               	beq scrly2		; don't plot pixel
00188A  3               	ldy scrline,x
00188A  3               	lda (scr_r),y
00188A  3               	clc
00188A  3               	ora #1
00188A  3               	sta (scr_r),y		; plot pixel
00188A  3               scrly2:
00188A  3               	inx			; next line of char.
00188A  3               	cpx #8
00188A  3               	bne scrly3
00188A  3               
00188A  3               	lsr txtbit		; bit of text to display.
00188A  3               	bcs :+
00188A  3               	rts
00188A  3               :
00188A  3               	ldy #0
00188A  3               	lda (scr_txt),y 	; what was the character?
00188A  3               	asl a	  		; end of message?
00188A  3               	bcs scrly4
00188A  3               	inc txtpos
00188A  3               	bne :+
00188A  3               	inc txtpos+1
00188A  3               :
00188A  3               	jmp scrly6 		; not yet - continue.
00188A  3               scrly4:
00188A  3               	lda txtini 		; start of scrolling message.
00188A  3               	sta txtpos
00188A  3               	lda txtini+1
00188A  3               	sta txtpos+1
00188A  3               scrly6:
00188A  3               	lda #128
00188A  3               	sta txtbit
00188A  3               	ldx xtmp
00188A  3               	rts
00188A  3               
00188A  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
00188A  3               
00188A  3               ;-------------------------------------------------------
00188A  3               ; Entry TICKER command
00188A  3               ;
00188A  3               ; Entry:
00188A  3               ;  z80_b = message nr
00188A  3               ;  z80_c = width
00188A  3               ;-------------------------------------------------------
00188A  3               
00188A  3               iscrly:
00188A  3               	jsr prescr 		; set up display position.
00188A  3               
00188A  3               	lda #<msgdat 		; text messages.
00188A  3               	sta z80_l
00188A  3               	lda #>msgdat
00188A  3               	sta z80_h
00188A  3               
00188A  3               	lda z80_c 		; width.
00188A  3               	sec
00188A  3               	sbc #1			; subtract one.
00188A  3               	cmp #32 		; is it between 1 and 32?
00188A  3               	bcc :+
00188A  3               	lda #$60
00188A  3               	jmp iscrl0		; no, disable messages.
00188A  3               :
00188A  3               	ldx z80_b		; message number.
00188A  3               	jsr getwrd 		; find message start.
00188A  3               
00188A  3               	lda z80_l		; set initial text position.
00188A  3               	sta txtini
00188A  3               	lda z80_h
00188A  3               	sta txtini+1
00188A  3               
00188A  3               	lda #$ad		; code for lda adrr
00188A  3               iscrl0:
00188A  3               	sta scrly		; enable/disable scrolling routine.
00188A  3               
00188A  3               	jsr prescr 		; set up display position.
00188A  3               	jsr gprad 		; get print address.
00188A  3               
00188A  3               	lda scraddr 		; set text screen address.
00188A  3               	sta txtscr
00188A  3               	lda scraddr+1
00188A  3               	sta txtscr+1
00188A  3               
00188A  3               	lda z80_c		; width.
00188A  3               	sta txtwid		; set width in working storage.
00188A  3               
00188A  3               	lda #128 		; start with leftmost bit.
00188A  3               	sta txtbit
00188A  3               
00188A  3               	jmp scrly4
00188A  3               .endif
00188A  3               
00188A  3               ;------------------------------------------------------------------
00188A  3               ; Dig routine, conditional assembly depending on dflag
00188A  3               ;------------------------------------------------------------------
00188A  3               .if dflag
00188A  3               dig:
00188A  3               	and #3
00188A  3               	beq digr		; dig right
00188A  3               	cmp #1
00188A  3               	beq digl		; dig left
00188A  3               	cmp #2
00188A  3               	beq digd		; dig down
00188A  3               
00188A  3               ; Dig up.
00188A  3               
00188A  3               digu:				; dig up
00188A  3               	ldy #8
00188A  3               	lda (z80_ix),y
00188A  3               	sec
00188A  3               	sbc #2
00188A  3               	sta dispy		; set y
00188A  3               
00188A  3               	iny
00188A  3               	lda (z80_ix),y
00188A  3               	sta dispx		; set x
00188A  3               	jmp digv
00188A  3               
00188A  3               ; Dig down.
00188A  3               
00188A  3               digd:
00188A  3               	ldy #9
00188A  3               	lda (z80_ix),y
00188A  3               	sta dispx		; set y
00188A  3               
00188A  3               	dey
00188A  3               	clc
00188A  3               	lda (z80_ix),y
00188A  3               	adc #16
00188A  3               	sta dispy		; set y
00188A  3               	jmp digv
00188A  3               
00188A  3               ; Dig left.
00188A  3               
00188A  3               digl:
00188A  3               	ldy #8
00188A  3               	lda (z80_ix),y
00188A  3               	sta dispy		; set y
00188A  3               
00188A  3               	iny
00188A  3               	lda (z80_ix),y
00188A  3               	sec
00188A  3               	sbc #2			; x=x-2
00188A  3               	sta dispx		; set x
00188A  3               	jmp digh
00188A  3               
00188A  3               ; Dig right.
00188A  3               
00188A  3               digr:
00188A  3               	ldy #8
00188A  3               	lda (z80_ix),y
00188A  3               	sta dispy		; set y
00188A  3               
00188A  3               	iny
00188A  3               	lda (z80_ix),y
00188A  3               	clc
00188A  3               	adc #16
00188A  3               	sta dispx		; set x+16
00188A  3               	jmp digh
00188A  3               
00188A  3               ; Vertical digging
00188A  3               
00188A  3               digv:
00188A  3               	jsr tstbl		; check blocktype in MAP
00188A  3               	jsr fdchk		; test if FODDER
00188A  3               
00188A  3               	clc
00188A  3               	lda dispx		; look 1 cell down
00188A  3               	adc #8
00188A  3               	sta dispx
00188A  3               	jsr tstbl		; check blocktype in MAP
00188A  3               	jsr fdchk
00188A  3               	lda dispx
00188A  3               	and #7
00188A  3               	bne :+
00188A  3               	rts
00188A  3               :
00188A  3               	clc
00188A  3               	lda dispx		; look 1 cell down
00188A  3               	adc #8
00188A  3               	sta dispx
00188A  3               	jsr tstbl		; check blocktype in MAP
00188A  3               	jmp fdchk
00188A  3               
00188A  3               ; Horizontal digging
00188A  3               
00188A  3               digh:
00188A  3               	jsr tstbl		; check blocktype in MAP
00188A  3               	jsr fdchk		; test if FODDER
00188A  3               
00188A  3               	clc
00188A  3               	lda dispy		; look 1 cell down
00188A  3               	adc #8
00188A  3               	sta dispy
00188A  3               	jsr tstbl		; check blocktype in MAP
00188A  3               	jsr fdchk
00188A  3               	lda dispy
00188A  3               	and #7
00188A  3               	bne :+
00188A  3               	rts
00188A  3               :
00188A  3               	clc
00188A  3               	lda dispy		; look 1 cell down
00188A  3               	adc #8
00188A  3               	sta dispy
00188A  3               	jsr tstbl		; check blocktype in MAP
00188A  3               	jmp fdchk
00188A  3               
00188A  3               digcnt:	.byte 0
00188A  3               
00188A  3               .endif
00188A  3               
00188A  3               ;------------------------------------------------------------------
00188A  3               ; Sprite table
00188A  3               ;------------------------------------------------------------------
00188A  3               
00188A  3               
00188A  3               ; ix+0  = type.
00188A  3               ; ix+1  = sprite image number.
00188A  3               ; ix+2  = frame.
00188A  3               ; ix+3  = y coord.
00188A  3               ; ix+4  = x coord.
00188A  3               
00188A  3               ; ix+5  = new type.
00188A  3               ; ix+6  = new image number.
00188A  3               ; ix+7  = new frame.
00188A  3               ; ix+8  = new y coord.
00188A  3               ; ix+9  = new x coord.
00188A  3               
00188A  3               ; ix+10 = direction.
00188A  3               ; ix+11 = parameter 1.
00188A  3               ; ix+12 = parameter 2.
00188A  3               ; ix+13 = jump pointer low.
00188A  3               ; ix+14 = jump pointer high.
00188A  3               ; ix+15 = data pointer low.
00188A  3               ; ix+16 = data pointer high.
00188A  3               
00188A  3               ; block NUMSPR * TABSIZ,255
00188A  3               
00188A  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
00188E  3  FF FF FF FF  
001892  3  FF FF FF FF  
001956  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
00195A  3  FF FF FF 00  
00195E  3  C0 78 00 00  
001967  3  07           roomtb:	.byte 7                      ; start room map offset.
001968  3               
001968  3               ; User routine.  Put your own code in here to be called with USER instruction.
001968  3               ; if USER has an argument it will be passed in the accumulator.
001968  3               
001968  3               user:
001968  3  60           	rts
001969  3               
001969  3               ;----------------------------------------------------
001969  3               ; Missing vars
001969  3               ;----------------------------------------------------
001969  3               
001969  3               MAP 		= $9800			; properties map buffer (3x256 bytes)
001969  3               SCADTB_lb 	= MAP+3*256		; screen address table lo-byte (256 bytes)
001969  3               SCADTB_hb 	= SCADTB_lb+256		; screen address table hi-byte (256 bytes)
001969  3               SHRAPN 		= SCADTB_hb+256		; shrapnel table (55x6 bytes)
001969  3               
001969  3               ;Fontpointer:	.byte 0,0
001969  3               ;TmpAddr:	.byte 0,0
001969  3               
001969  3               ;loopa:		.byte 0
001969  3               ;loopb:		.byte 0
001969  3               ;loopc:		.byte 0
001969  3               
001969  3               ; Everything below here will be generated by the editors.
001969  3               
001969  3               WINDOWTOP = 0
001969  3               WINDOWLFT = 2
001969  3               WINDOWHGT = 20
001969  3               WINDOWWID = 28 ;"
001969  3               MAPWID = 10
001969  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255
00196D  3  FF FF FF FF  
001971  3  FF FF        
001973  3               mapdat:
001973  3  FF 1B FF 14          .byte 255,27,255,20,255,23,255,255,255,255,255,255,255,19,21,22,24,25,26,255,255,255,14,13,12,11,10,18,17,255,255,255,255,15,3,0,4,6,8,255,255,255,255,16,2,1,5,7,9,255
001977  3  FF 17 FF FF  
00197B  3  FF FF FF FF  
0019A5  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255
0019A9  3  FF FF FF FF  
0019AD  3  FF FF        
0019AF  3  23           stmap:  .byte 35
0019B0  3               
0019B0  3               evnt00:
0019B0  3  20 7E 0D             jsr cangd
0019B3  3  F0 03                beq :+
0019B5  3  4C BB 19             jmp a00020
0019B8  3               :
0019B8  3  20 43 16             jsr ifall
0019BB  3  20 96 08     a00020: jsr skobj
0019BE  3  85 rr                sta varobj
0019C0  3  A9 FF                lda #255
0019C2  3  C5 rr                cmp varobj
0019C4  3  D0 03                bne *+5
0019C6  3  4C 95 1A             jmp a00453
0019C9  3  A5 rr                lda varobj
0019CB  3  20 15 08             jsr getob
0019CE  3  A9 32                lda #50
0019D0  3  0A                   asl a
0019D1  3  8D 24 05             sta sndtyp
0019D4  3  A9 01                lda #1
0019D6  3  C5 rr                cmp scno
0019D8  3  F0 03                beq *+5
0019DA  3  4C F1 19             jmp a00126
0019DD  3  A5 rr                lda vark
0019DF  3  18                   clc
0019E0  3  69 01                adc #1
0019E2  3  85 rr                sta vark
0019E4  3  A9 14                lda #20
0019E6  3  85 rr                sta chary
0019E8  3  A9 1D                lda #29
0019EA  3  85 rr                sta charx
0019EC  3  A5 rr                lda vark
0019EE  3  20 23 15             jsr disply
0019F1  3  A9 10        a00126: lda #16
0019F3  3  C5 rr                cmp scno
0019F5  3  F0 03                beq *+5
0019F7  3  4C 0E 1A             jmp a00184
0019FA  3  A5 rr                lda vark
0019FC  3  18                   clc
0019FD  3  69 01                adc #1
0019FF  3  85 rr                sta vark
001A01  3  A9 14                lda #20
001A03  3  85 rr                sta chary
001A05  3  A9 1D                lda #29
001A07  3  85 rr                sta charx
001A09  3  A5 rr                lda vark
001A0B  3  20 23 15             jsr disply
001A0E  3  A9 07        a00184: lda #7
001A10  3  C5 rr                cmp scno
001A12  3  F0 03                beq *+5
001A14  3  4C 37 1A             jmp a00264
001A17  3  A9 03                lda #3
001A19  3  20 44 08             jsr gotob
001A1C  3  C9 FF                cmp #255
001A1E  3  F0 03                beq :+
001A20  3  4C 37 1A             jmp a00264
001A23  3               :
001A23  3  A5 rr                lda vark
001A25  3  18                   clc
001A26  3  69 01                adc #1
001A28  3  85 rr                sta vark
001A2A  3  A9 14                lda #20
001A2C  3  85 rr                sta chary
001A2E  3  A9 1D                lda #29
001A30  3  85 rr                sta charx
001A32  3  A5 rr                lda vark
001A34  3  20 23 15             jsr disply
001A37  3  A9 0D        a00264: lda #13
001A39  3  C5 rr                cmp scno
001A3B  3  F0 03                beq *+5
001A3D  3  4C 53 1A             jmp a00318
001A40  3  A9 09                lda #9
001A42  3  20 44 08             jsr gotob
001A45  3  C9 FF                cmp #255
001A47  3  F0 03                beq :+
001A49  3  4C 53 1A             jmp a00318
001A4C  3               :
001A4C  3  A5 rr                lda varc
001A4E  3  18                   clc
001A4F  3  69 01                adc #1
001A51  3  85 rr                sta varc
001A53  3  A9 11        a00318: lda #17
001A55  3  C5 rr                cmp scno
001A57  3  F0 03                beq *+5
001A59  3  4C 74 1A             jmp a00385
001A5C  3  A5 rr                lda numlif
001A5E  3  18                   clc
001A5F  3  69 01                adc #1
001A61  3  85 rr                sta numlif
001A63  3  A9 15                lda #21
001A65  3  85 rr                sta chary
001A67  3  A9 1D                lda #29
001A69  3  85 rr                sta charx
001A6B  3  A5 rr                lda numlif
001A6D  3  20 23 15             jsr disply
001A70  3  A9 01                lda #1
001A72  3  85 rr                sta varh
001A74  3  A9 13        a00385: lda #19
001A76  3  C5 rr                cmp scno
001A78  3  F0 03                beq *+5
001A7A  3  4C 95 1A             jmp a00453
001A7D  3  A5 rr                lda numlif
001A7F  3  18                   clc
001A80  3  69 01                adc #1
001A82  3  85 rr                sta numlif
001A84  3  A9 15                lda #21
001A86  3  85 rr                sta chary
001A88  3  A9 1D                lda #29
001A8A  3  85 rr                sta charx
001A8C  3  A5 rr                lda numlif
001A8E  3  20 23 15             jsr disply
001A91  3  A9 01                lda #1
001A93  3  85 rr                sta vari
001A95  3  A9 DF        a00453: lda #223
001A97  3  A0 09                ldy #9
001A99  3  D1 68                cmp (z80_ix),y
001A9B  3  90 03                bcc *+5
001A9D  3  4C B5 1A             jmp a00521
001AA0  3  20 81 15             jsr scrr
001AA3  3  A9 20                lda #32
001AA5  3  A0 09                ldy #9
001AA7  3  91 68                sta (z80_ix),y
001AA9  3  A0 08                ldy #8
001AAB  3  B1 68                lda (z80_ix),y
001AAD  3  85 rr                sta varo
001AAF  3  A0 09                ldy #9
001AB1  3  B1 68                lda (z80_ix),y
001AB3  3  85 rr                sta varp
001AB5  3  A9 10        a00521: lda #16
001AB7  3  A0 09                ldy #9
001AB9  3  D1 68                cmp (z80_ix),y
001ABB  3  B0 03                bcs *+5
001ABD  3  4C D5 1A             jmp a00589
001AC0  3  20 66 15             jsr scrl
001AC3  3  A9 D0                lda #208
001AC5  3  A0 09                ldy #9
001AC7  3  91 68                sta (z80_ix),y
001AC9  3  A0 08                ldy #8
001ACB  3  B1 68                lda (z80_ix),y
001ACD  3  85 rr                sta varo
001ACF  3  A0 09                ldy #9
001AD1  3  B1 68                lda (z80_ix),y
001AD3  3  85 rr                sta varp
001AD5  3  A9 02        a00589: lda #2
001AD7  3  A0 08                ldy #8
001AD9  3  D1 68                cmp (z80_ix),y
001ADB  3  B0 03                bcs *+5
001ADD  3  4C F5 1A             jmp a00656
001AE0  3  20 8A 15             jsr scru
001AE3  3  A9 8C                lda #140
001AE5  3  A0 08                ldy #8
001AE7  3  91 68                sta (z80_ix),y
001AE9  3  A0 08                ldy #8
001AEB  3  B1 68                lda (z80_ix),y
001AED  3  85 rr                sta varo
001AEF  3  A0 09                ldy #9
001AF1  3  B1 68                lda (z80_ix),y
001AF3  3  85 rr                sta varp
001AF5  3  A9 8C        a00656: lda #140
001AF7  3  A0 08                ldy #8
001AF9  3  D1 68                cmp (z80_ix),y
001AFB  3  90 03                bcc *+5
001AFD  3  4C 15 1B             jmp a00724
001B00  3  20 93 15             jsr scrd
001B03  3  A9 08                lda #8
001B05  3  A0 08                ldy #8
001B07  3  91 68                sta (z80_ix),y
001B09  3  A0 08                ldy #8
001B0B  3  B1 68                lda (z80_ix),y
001B0D  3  85 rr                sta varo
001B0F  3  A0 09                ldy #9
001B11  3  B1 68                lda (z80_ix),y
001B13  3  85 rr                sta varp
001B15  3  20 FA 0C     a00724: jsr laddd
001B18  3  F0 03                beq :+
001B1A  3  4C 30 1B             jmp a00771
001B1D  3               :
001B1D  3  A9 02                lda #2
001B1F  3  85 rr                sta varl
001B21  3  20 10 0D             jsr laddu
001B24  3  F0 03                beq :+
001B26  3  4C 2D 1B             jmp a00767
001B29  3               :
001B29  3  A9 01                lda #1
001B2B  3  85 rr                sta varl
001B2D  3  4C 34 1B     a00767: jmp a00779
001B30  3  A9 00        a00771: lda #0
001B32  3  85 rr                sta varl
001B34  3  A5 rr        a00779: lda joyval
001B36  3  29 01                and #1
001B38  3  F0 03                beq :+
001B3A  3  4C DF 1B             jmp a01115
001B3D  3               :
001B3D  3  20 C5 0D             jsr cangr
001B40  3  F0 03                beq :+
001B42  3  4C DF 1B             jmp a01115
001B45  3               :
001B45  3  A5 rr                lda joyval
001B47  3  29 04                and #4
001B49  3  F0 03                beq :+
001B4B  3  4C 79 1B             jmp a00911
001B4E  3               :
001B4E  3  20 FA 0C             jsr laddd
001B51  3  F0 03                beq :+
001B53  3  4C 59 1B             jmp a00846
001B56  3               :
001B56  3  4C 76 1B             jmp a00907
001B59  3  A9 00        a00846: lda #0
001B5B  3  C5 rr                cmp vara
001B5D  3  F0 03                beq *+5
001B5F  3  4C 67 1B             jmp a00871
001B62  3  A9 00                lda #0
001B64  3  20 48 14             jsr animsp
001B67  3  A9 00        a00871: lda #0
001B69  3  A0 06                ldy #6
001B6B  3  91 68                sta (z80_ix),y
001B6D  3  A0 09                ldy #9
001B6F  3  B1 68                lda (z80_ix),y
001B71  3  18                   clc
001B72  3  69 02                adc #2
001B74  3  91 68                sta (z80_ix),y
001B76  3  4C DF 1B     a00907: jmp a01115
001B79  3  A5 rr        a00911: lda joyval
001B7B  3  29 08                and #8
001B7D  3  F0 03                beq :+
001B7F  3  4C AD 1B             jmp a01012
001B82  3               :
001B82  3  20 10 0D             jsr laddu
001B85  3  F0 03                beq :+
001B87  3  4C 8D 1B             jmp a00947
001B8A  3               :
001B8A  3  4C AA 1B             jmp a01008
001B8D  3  A9 00        a00947: lda #0
001B8F  3  A0 06                ldy #6
001B91  3  91 68                sta (z80_ix),y
001B93  3  A9 00                lda #0
001B95  3  C5 rr                cmp vara
001B97  3  F0 03                beq *+5
001B99  3  4C A1 1B             jmp a00986
001B9C  3  A9 00                lda #0
001B9E  3  20 48 14             jsr animsp
001BA1  3  A0 09        a00986: ldy #9
001BA3  3  B1 68                lda (z80_ix),y
001BA5  3  18                   clc
001BA6  3  69 02                adc #2
001BA8  3  91 68                sta (z80_ix),y
001BAA  3  4C DF 1B     a01008: jmp a01115
001BAD  3  A9 01        a01012: lda #1
001BAF  3  85 rr                sta vard
001BB1  3  A9 00                lda #0
001BB3  3  A0 06                ldy #6
001BB5  3  91 68                sta (z80_ix),y
001BB7  3  A9 00                lda #0
001BB9  3  C5 rr                cmp vara
001BBB  3  F0 03                beq *+5
001BBD  3  4C D6 1B             jmp a01093
001BC0  3  A9 00                lda #0
001BC2  3  20 48 14             jsr animsp
001BC5  3  A9 00                lda #0
001BC7  3  A0 07                ldy #7
001BC9  3  D1 68                cmp (z80_ix),y
001BCB  3  F0 03                beq *+5
001BCD  3  4C D6 1B             jmp a01093
001BD0  3  A9 14                lda #20
001BD2  3  0A                   asl a
001BD3  3  8D 24 05             sta sndtyp
001BD6  3  A0 09        a01093: ldy #9
001BD8  3  B1 68                lda (z80_ix),y
001BDA  3  18                   clc
001BDB  3  69 02                adc #2
001BDD  3  91 68                sta (z80_ix),y
001BDF  3  A5 rr        a01115: lda joyval
001BE1  3  29 02                and #2
001BE3  3  F0 03                beq :+
001BE5  3  4C 8A 1C             jmp a01451
001BE8  3               :
001BE8  3  20 B3 0D             jsr cangl
001BEB  3  F0 03                beq :+
001BED  3  4C 8A 1C             jmp a01451
001BF0  3               :
001BF0  3  A5 rr                lda joyval
001BF2  3  29 04                and #4
001BF4  3  F0 03                beq :+
001BF6  3  4C 24 1C             jmp a01247
001BF9  3               :
001BF9  3  20 FA 0C             jsr laddd
001BFC  3  F0 03                beq :+
001BFE  3  4C 04 1C             jmp a01182
001C01  3               :
001C01  3  4C 21 1C             jmp a01242
001C04  3  A9 00        a01182: lda #0
001C06  3  C5 rr                cmp vara
001C08  3  F0 03                beq *+5
001C0A  3  4C 12 1C             jmp a01207
001C0D  3  A9 00                lda #0
001C0F  3  20 48 14             jsr animsp
001C12  3  A9 01        a01207: lda #1
001C14  3  A0 06                ldy #6
001C16  3  91 68                sta (z80_ix),y
001C18  3  A0 09                ldy #9
001C1A  3  B1 68                lda (z80_ix),y
001C1C  3  38                   sec
001C1D  3  E9 02                sbc #2
001C1F  3  91 68                sta (z80_ix),y
001C21  3  4C 8A 1C     a01242: jmp a01451
001C24  3  A5 rr        a01247: lda joyval
001C26  3  29 08                and #8
001C28  3  F0 03                beq :+
001C2A  3  4C 58 1C             jmp a01348
001C2D  3               :
001C2D  3  20 10 0D             jsr laddu
001C30  3  F0 03                beq :+
001C32  3  4C 38 1C             jmp a01283
001C35  3               :
001C35  3  4C 55 1C             jmp a01343
001C38  3  A9 01        a01283: lda #1
001C3A  3  A0 06                ldy #6
001C3C  3  91 68                sta (z80_ix),y
001C3E  3  A9 00                lda #0
001C40  3  C5 rr                cmp vara
001C42  3  F0 03                beq *+5
001C44  3  4C 4C 1C             jmp a01321
001C47  3  A9 00                lda #0
001C49  3  20 48 14             jsr animsp
001C4C  3  A0 09        a01321: ldy #9
001C4E  3  B1 68                lda (z80_ix),y
001C50  3  38                   sec
001C51  3  E9 02                sbc #2
001C53  3  91 68                sta (z80_ix),y
001C55  3  4C 8A 1C     a01343: jmp a01451
001C58  3  A9 02        a01348: lda #2
001C5A  3  85 rr                sta vard
001C5C  3  A9 01                lda #1
001C5E  3  A0 06                ldy #6
001C60  3  91 68                sta (z80_ix),y
001C62  3  A9 00                lda #0
001C64  3  C5 rr                cmp vara
001C66  3  F0 03                beq *+5
001C68  3  4C 81 1C             jmp a01429
001C6B  3  A9 00                lda #0
001C6D  3  20 48 14             jsr animsp
001C70  3  A9 00                lda #0
001C72  3  A0 07                ldy #7
001C74  3  D1 68                cmp (z80_ix),y
001C76  3  F0 03                beq *+5
001C78  3  4C 81 1C             jmp a01429
001C7B  3  A9 14                lda #20
001C7D  3  0A                   asl a
001C7E  3  8D 24 05             sta sndtyp
001C81  3  A0 09        a01429: ldy #9
001C83  3  B1 68                lda (z80_ix),y
001C85  3  38                   sec
001C86  3  E9 02                sbc #2
001C88  3  91 68                sta (z80_ix),y
001C8A  3  A5 rr        a01451: lda joyval
001C8C  3  29 08                and #8
001C8E  3  F0 03                beq :+
001C90  3  4C BC 1C             jmp a01550
001C93  3               :
001C93  3  A9 03                lda #3
001C95  3  85 rr                sta vard
001C97  3  20 10 0D             jsr laddu
001C9A  3  F0 03                beq :+
001C9C  3  4C BC 1C             jmp a01550
001C9F  3               :
001C9F  3  A9 02                lda #2
001CA1  3  A0 06                ldy #6
001CA3  3  91 68                sta (z80_ix),y
001CA5  3  A9 00                lda #0
001CA7  3  C5 rr                cmp vara
001CA9  3  F0 03                beq *+5
001CAB  3  4C B3 1C             jmp a01528
001CAE  3  A9 00                lda #0
001CB0  3  20 48 14             jsr animsp
001CB3  3  A0 08        a01528: ldy #8
001CB5  3  B1 68                lda (z80_ix),y
001CB7  3  38                   sec
001CB8  3  E9 02                sbc #2
001CBA  3  91 68                sta (z80_ix),y
001CBC  3  A5 rr        a01550: lda joyval
001CBE  3  29 04                and #4
001CC0  3  F0 03                beq :+
001CC2  3  4C EE 1C             jmp a01650
001CC5  3               :
001CC5  3  A9 03                lda #3
001CC7  3  85 rr                sta vard
001CC9  3  20 FA 0C             jsr laddd
001CCC  3  F0 03                beq :+
001CCE  3  4C EE 1C             jmp a01650
001CD1  3               :
001CD1  3  A9 02                lda #2
001CD3  3  A0 06                ldy #6
001CD5  3  91 68                sta (z80_ix),y
001CD7  3  A9 00                lda #0
001CD9  3  C5 rr                cmp vara
001CDB  3  F0 03                beq *+5
001CDD  3  4C E5 1C             jmp a01628
001CE0  3  A9 00                lda #0
001CE2  3  20 48 14             jsr animsp
001CE5  3  A0 08        a01628: ldy #8
001CE7  3  B1 68                lda (z80_ix),y
001CE9  3  18                   clc
001CEA  3  69 02                adc #2
001CEC  3  91 68                sta (z80_ix),y
001CEE  3  A5 rr        a01650: lda joyval
001CF0  3  29 10                and #16
001CF2  3  F0 03                beq :+
001CF4  3  4C 17 1D             jmp a01724
001CF7  3               :
001CF7  3  A9 01                lda #1
001CF9  3  C5 rr                cmp varl
001CFB  3  F0 03                beq *+5
001CFD  3  4C 03 1D             jmp a01689
001D00  3  4C 17 1D             jmp a01724
001D03  3  20 7E 0D     a01689: jsr cangd
001D06  3  F0 03                beq :+
001D08  3  4C 0E 1D             jmp a01707
001D0B  3               :
001D0B  3  4C 17 1D             jmp a01724
001D0E  3  A9 28        a01707: lda #40
001D10  3  0A                   asl a
001D11  3  8D 24 05             sta sndtyp
001D14  3  20 2F 0F             jsr jump
001D17  3  A9 05        a01724: lda #DEADLY
001D19  3  85 63                sta z80_b
001D1B  3  20 3A 0E             jsr tded
001D1E  3  C5 63                cmp z80_b
001D20  3  F0 03                beq :+
001D22  3  4C 31 1D             jmp a01779
001D25  3               :
001D25  3  A5 rr                lda varo
001D27  3  A0 08                ldy #8
001D29  3  91 68                sta (z80_ix),y
001D2B  3  A5 rr                lda varp
001D2D  3  A0 09                ldy #9
001D2F  3  91 68                sta (z80_ix),y
001D31  3  4C AF 15     a01779: jmp grav
001D34  3               evnt01:
001D34  3  A9 00                lda #0
001D36  3  C5 rr                cmp vara
001D38  3  F0 03                beq *+5
001D3A  3  4C 42 1D             jmp b00027
001D3D  3  A9 00                lda #0
001D3F  3  20 48 14             jsr animsp
001D42  3  60           b00027: rts
001D43  3               evnt02:
001D43  3  A9 00                lda #0
001D45  3  C5 rr                cmp vara
001D47  3  F0 03                beq *+5
001D49  3  4C 51 1D             jmp c00027
001D4C  3  A9 00                lda #0
001D4E  3  20 48 14             jsr animsp
001D51  3  A9 00        c00027: lda #0
001D53  3  85 63                sta z80_b
001D55  3  20 93 14             jsr sktyp
001D58  3  B0 03                bcs :+
001D5A  3  4C 8C 22             jmp c02804
001D5D  3               :
001D5D  3  A5 rr                lda joyval
001D5F  3  29 40                and #64
001D61  3  F0 03                beq :+
001D63  3  4C 8C 22             jmp c02804
001D66  3               :
001D66  3  A9 09                lda #9
001D68  3  AA                   tax
001D69  3  20 33 02             jsr minve
001D6C  3  A0 08                ldy #8
001D6E  3  B1 68                lda (z80_ix),y
001D70  3  85 rr                sta vare
001D72  3  A0 09                ldy #9
001D74  3  B1 68                lda (z80_ix),y
001D76  3  85 rr                sta varf
001D78  3  A9 00                lda #0
001D7A  3  C5 rr                cmp scno
001D7C  3  F0 03                beq *+5
001D7E  3  4C DA 1D             jmp c00304
001D81  3  A9 00                lda #0
001D83  3  C5 rr                cmp varopt
001D85  3  F0 03                beq *+5
001D87  3  4C DA 1D             jmp c00304
001D8A  3  A9 08                lda #8
001D8C  3  85 rr                sta chary
001D8E  3  A9 1C                lda #28
001D90  3  85 rr                sta charx
001D92  3  A5 rr                lda charx
001D94  3  85 rr                sta dispx
001D96  3  A5 rr                lda chary
001D98  3  85 rr                sta dispy
001D9A  3  A9 00                lda #0
001D9C  3  20 53 0B             jsr pattr
001D9F  3  A5 rr                lda charx
001DA1  3  85 rr                sta dispx
001DA3  3  A5 rr                lda chary
001DA5  3  85 rr                sta dispy
001DA7  3  A9 00                lda #0
001DA9  3  20 53 0B             jsr pattr
001DAC  3  A9 09                lda #9
001DAE  3  85 rr                sta chary
001DB0  3  A9 1C                lda #28
001DB2  3  85 rr                sta charx
001DB4  3  A5 rr                lda charx
001DB6  3  85 rr                sta dispx
001DB8  3  A5 rr                lda chary
001DBA  3  85 rr                sta dispy
001DBC  3  A9 00                lda #0
001DBE  3  20 53 0B             jsr pattr
001DC1  3  A5 rr                lda charx
001DC3  3  85 rr                sta dispx
001DC5  3  A5 rr                lda chary
001DC7  3  85 rr                sta dispy
001DC9  3  A9 00                lda #0
001DCB  3  20 53 0B             jsr pattr
001DCE  3  A9 50                lda #80
001DD0  3  0A                   asl a
001DD1  3  8D 24 05             sta sndtyp
001DD4  3  A9 FF                lda #255
001DD6  3  A0 05                ldy #5
001DD8  3  91 68                sta (z80_ix),y
001DDA  3  A9 0B        c00304: lda #11
001DDC  3  C5 rr                cmp scno
001DDE  3  F0 03                beq *+5
001DE0  3  4C 3C 1E             jmp c00502
001DE3  3  A9 05                lda #5
001DE5  3  C5 rr                cmp varopt
001DE7  3  F0 03                beq *+5
001DE9  3  4C 3C 1E             jmp c00502
001DEC  3  A9 02                lda #2
001DEE  3  85 rr                sta chary
001DF0  3  A9 14                lda #20
001DF2  3  85 rr                sta charx
001DF4  3  A5 rr                lda charx
001DF6  3  85 rr                sta dispx
001DF8  3  A5 rr                lda chary
001DFA  3  85 rr                sta dispy
001DFC  3  A9 00                lda #0
001DFE  3  20 53 0B             jsr pattr
001E01  3  A5 rr                lda charx
001E03  3  85 rr                sta dispx
001E05  3  A5 rr                lda chary
001E07  3  85 rr                sta dispy
001E09  3  A9 00                lda #0
001E0B  3  20 53 0B             jsr pattr
001E0E  3  A9 03                lda #3
001E10  3  85 rr                sta chary
001E12  3  A9 14                lda #20
001E14  3  85 rr                sta charx
001E16  3  A5 rr                lda charx
001E18  3  85 rr                sta dispx
001E1A  3  A5 rr                lda chary
001E1C  3  85 rr                sta dispy
001E1E  3  A9 00                lda #0
001E20  3  20 53 0B             jsr pattr
001E23  3  A5 rr                lda charx
001E25  3  85 rr                sta dispx
001E27  3  A5 rr                lda chary
001E29  3  85 rr                sta dispy
001E2B  3  A9 00                lda #0
001E2D  3  20 53 0B             jsr pattr
001E30  3  A9 3C                lda #60
001E32  3  0A                   asl a
001E33  3  8D 24 05             sta sndtyp
001E36  3  A9 FF                lda #255
001E38  3  A0 05                ldy #5
001E3A  3  91 68                sta (z80_ix),y
001E3C  3  A9 04        c00502: lda #4
001E3E  3  C5 rr                cmp scno
001E40  3  F0 03                beq *+5
001E42  3  4C BB 1E             jmp c00765
001E45  3  A9 06                lda #6
001E47  3  C5 rr                cmp varopt
001E49  3  F0 03                beq *+5
001E4B  3  4C BB 1E             jmp c00765
001E4E  3  A9 02                lda #2
001E50  3  85 rr                sta chary
001E52  3  A9 0B                lda #11
001E54  3  85 rr                sta charx
001E56  3  A5 rr                lda charx
001E58  3  85 rr                sta dispx
001E5A  3  A5 rr                lda chary
001E5C  3  85 rr                sta dispy
001E5E  3  A9 15                lda #21
001E60  3  20 53 0B             jsr pattr
001E63  3  A5 rr                lda charx
001E65  3  85 rr                sta dispx
001E67  3  A5 rr                lda chary
001E69  3  85 rr                sta dispy
001E6B  3  A9 16                lda #22
001E6D  3  20 53 0B             jsr pattr
001E70  3  A9 03                lda #3
001E72  3  85 rr                sta chary
001E74  3  A9 0B                lda #11
001E76  3  85 rr                sta charx
001E78  3  A5 rr                lda charx
001E7A  3  85 rr                sta dispx
001E7C  3  A5 rr                lda chary
001E7E  3  85 rr                sta dispy
001E80  3  A9 15                lda #21
001E82  3  20 53 0B             jsr pattr
001E85  3  A5 rr                lda charx
001E87  3  85 rr                sta dispx
001E89  3  A5 rr                lda chary
001E8B  3  85 rr                sta dispy
001E8D  3  A9 16                lda #22
001E8F  3  20 53 0B             jsr pattr
001E92  3  A9 3C                lda #60
001E94  3  0A                   asl a
001E95  3  8D 24 05             sta sndtyp
001E98  3  A9 FF                lda #255
001E9A  3  A0 05                ldy #5
001E9C  3  91 68                sta (z80_ix),y
001E9E  3  A9 88                lda #136
001EA0  3  A0 08                ldy #8
001EA2  3  91 68                sta (z80_ix),y
001EA4  3  A9 18                lda #24
001EA6  3  A0 09                ldy #9
001EA8  3  91 68                sta (z80_ix),y
001EAA  3  A0 09                ldy #9
001EAC  3  B1 68                lda (z80_ix),y
001EAE  3  85 rr                sta dispx
001EB0  3  A0 08                ldy #8
001EB2  3  B1 68                lda (z80_ix),y
001EB4  3  85 rr                sta dispy
001EB6  3  A9 06                lda #6
001EB8  3  20 75 08             jsr drpob
001EBB  3  A9 09        c00765: lda #9
001EBD  3  C5 rr                cmp scno
001EBF  3  F0 03                beq *+5
001EC1  3  4C 3A 1F             jmp c01027
001EC4  3  A9 08                lda #8
001EC6  3  C5 rr                cmp varopt
001EC8  3  F0 03                beq *+5
001ECA  3  4C 3A 1F             jmp c01027
001ECD  3  A9 04                lda #4
001ECF  3  85 rr                sta chary
001ED1  3  A9 02                lda #2
001ED3  3  85 rr                sta charx
001ED5  3  A5 rr                lda charx
001ED7  3  85 rr                sta dispx
001ED9  3  A5 rr                lda chary
001EDB  3  85 rr                sta dispy
001EDD  3  A9 00                lda #0
001EDF  3  20 53 0B             jsr pattr
001EE2  3  A5 rr                lda charx
001EE4  3  85 rr                sta dispx
001EE6  3  A5 rr                lda chary
001EE8  3  85 rr                sta dispy
001EEA  3  A9 00                lda #0
001EEC  3  20 53 0B             jsr pattr
001EEF  3  A9 05                lda #5
001EF1  3  85 rr                sta chary
001EF3  3  A9 02                lda #2
001EF5  3  85 rr                sta charx
001EF7  3  A5 rr                lda charx
001EF9  3  85 rr                sta dispx
001EFB  3  A5 rr                lda chary
001EFD  3  85 rr                sta dispy
001EFF  3  A9 00                lda #0
001F01  3  20 53 0B             jsr pattr
001F04  3  A5 rr                lda charx
001F06  3  85 rr                sta dispx
001F08  3  A5 rr                lda chary
001F0A  3  85 rr                sta dispy
001F0C  3  A9 00                lda #0
001F0E  3  20 53 0B             jsr pattr
001F11  3  A9 2D                lda #45
001F13  3  0A                   asl a
001F14  3  8D 24 05             sta sndtyp
001F17  3  A9 FF                lda #255
001F19  3  A0 05                ldy #5
001F1B  3  91 68                sta (z80_ix),y
001F1D  3  A9 88                lda #136
001F1F  3  A0 08                ldy #8
001F21  3  91 68                sta (z80_ix),y
001F23  3  A9 18                lda #24
001F25  3  A0 09                ldy #9
001F27  3  91 68                sta (z80_ix),y
001F29  3  A0 09                ldy #9
001F2B  3  B1 68                lda (z80_ix),y
001F2D  3  85 rr                sta dispx
001F2F  3  A0 08                ldy #8
001F31  3  B1 68                lda (z80_ix),y
001F33  3  85 rr                sta dispy
001F35  3  A9 08                lda #8
001F37  3  20 75 08             jsr drpob
001F3A  3  A9 14        c01027: lda #20
001F3C  3  C5 rr                cmp scno
001F3E  3  F0 03                beq *+5
001F40  3  4C 9F 1F             jmp c01237
001F43  3  A9 0F                lda #15
001F45  3  C5 rr                cmp varopt
001F47  3  F0 03                beq *+5
001F49  3  4C 9F 1F             jmp c01237
001F4C  3  A9 04                lda #4
001F4E  3  85 rr                sta chary
001F50  3  A9 08                lda #8
001F52  3  85 rr                sta charx
001F54  3  A5 rr                lda charx
001F56  3  85 rr                sta dispx
001F58  3  A5 rr                lda chary
001F5A  3  85 rr                sta dispy
001F5C  3  A9 3C                lda #60
001F5E  3  20 53 0B             jsr pattr
001F61  3  A9 05                lda #5
001F63  3  85 rr                sta chary
001F65  3  A9 08                lda #8
001F67  3  85 rr                sta charx
001F69  3  A5 rr                lda charx
001F6B  3  85 rr                sta dispx
001F6D  3  A5 rr                lda chary
001F6F  3  85 rr                sta dispy
001F71  3  A9 3D                lda #61
001F73  3  20 53 0B             jsr pattr
001F76  3  A9 50                lda #80
001F78  3  0A                   asl a
001F79  3  8D 24 05             sta sndtyp
001F7C  3  A9 FF                lda #255
001F7E  3  A0 05                ldy #5
001F80  3  91 68                sta (z80_ix),y
001F82  3  A9 08                lda #8
001F84  3  A0 08                ldy #8
001F86  3  91 68                sta (z80_ix),y
001F88  3  A9 D8                lda #216
001F8A  3  A0 09                ldy #9
001F8C  3  91 68                sta (z80_ix),y
001F8E  3  A0 09                ldy #9
001F90  3  B1 68                lda (z80_ix),y
001F92  3  85 rr                sta dispx
001F94  3  A0 08                ldy #8
001F96  3  B1 68                lda (z80_ix),y
001F98  3  85 rr                sta dispy
001F9A  3  A9 0F                lda #15
001F9C  3  20 75 08             jsr drpob
001F9F  3  A9 0D        c01237: lda #13
001FA1  3  C5 rr                cmp scno
001FA3  3  F0 03                beq *+5
001FA5  3  4C FC 1F             jmp c01430
001FA8  3  A9 07                lda #7
001FAA  3  C5 rr                cmp varopt
001FAC  3  F0 03                beq *+5
001FAE  3  4C FC 1F             jmp c01430
001FB1  3  A9 11                lda #17
001FB3  3  85 rr                sta chary
001FB5  3  A9 0E                lda #14
001FB7  3  85 rr                sta charx
001FB9  3  A5 rr                lda charx
001FBB  3  85 rr                sta dispx
001FBD  3  A5 rr                lda chary
001FBF  3  85 rr                sta dispy
001FC1  3  A9 00                lda #0
001FC3  3  20 53 0B             jsr pattr
001FC6  3  A5 rr                lda charx
001FC8  3  85 rr                sta dispx
001FCA  3  A5 rr                lda chary
001FCC  3  85 rr                sta dispy
001FCE  3  A9 00                lda #0
001FD0  3  20 53 0B             jsr pattr
001FD3  3  A9 2D                lda #45
001FD5  3  0A                   asl a
001FD6  3  8D 24 05             sta sndtyp
001FD9  3  A9 FF                lda #255
001FDB  3  A0 05                ldy #5
001FDD  3  91 68                sta (z80_ix),y
001FDF  3  A9 30                lda #48
001FE1  3  A0 08                ldy #8
001FE3  3  91 68                sta (z80_ix),y
001FE5  3  A9 D8                lda #216
001FE7  3  A0 09                ldy #9
001FE9  3  91 68                sta (z80_ix),y
001FEB  3  A0 09                ldy #9
001FED  3  B1 68                lda (z80_ix),y
001FEF  3  85 rr                sta dispx
001FF1  3  A0 08                ldy #8
001FF3  3  B1 68                lda (z80_ix),y
001FF5  3  85 rr                sta dispy
001FF7  3  A9 07                lda #7
001FF9  3  20 75 08             jsr drpob
001FFC  3  A9 0E        c01430: lda #14
001FFE  3  C5 rr                cmp scno
002000  3  F0 03                beq *+5
002002  3  4C 4C 20             jmp c01598
002005  3  A9 0B                lda #11
002007  3  C5 rr                cmp varopt
002009  3  F0 03                beq *+5
00200B  3  4C 4C 20             jmp c01598
00200E  3  A9 0F                lda #15
002010  3  85 rr                sta chary
002012  3  A9 07                lda #7
002014  3  85 rr                sta charx
002016  3  A5 rr                lda charx
002018  3  85 rr                sta dispx
00201A  3  A5 rr                lda chary
00201C  3  85 rr                sta dispy
00201E  3  A9 38                lda #56
002020  3  20 53 0B             jsr pattr
002023  3  A9 50                lda #80
002025  3  0A                   asl a
002026  3  8D 24 05             sta sndtyp
002029  3  A9 FF                lda #255
00202B  3  A0 05                ldy #5
00202D  3  91 68                sta (z80_ix),y
00202F  3  A9 88                lda #136
002031  3  A0 08                ldy #8
002033  3  91 68                sta (z80_ix),y
002035  3  A9 18                lda #24
002037  3  A0 09                ldy #9
002039  3  91 68                sta (z80_ix),y
00203B  3  A0 09                ldy #9
00203D  3  B1 68                lda (z80_ix),y
00203F  3  85 rr                sta dispx
002041  3  A0 08                ldy #8
002043  3  B1 68                lda (z80_ix),y
002045  3  85 rr                sta dispy
002047  3  A9 0B                lda #11
002049  3  20 75 08             jsr drpob
00204C  3  A9 05        c01598: lda #5
00204E  3  C5 rr                cmp scno
002050  3  F0 03                beq *+5
002052  3  4C D0 20             jmp c01883
002055  3  A9 0A                lda #10
002057  3  C5 rr                cmp varopt
002059  3  F0 03                beq *+5
00205B  3  4C D0 20             jmp c01883
00205E  3  A0 08                ldy #8
002060  3  B1 68                lda (z80_ix),y
002062  3  85 rr                sta vare
002064  3  A0 09                ldy #9
002066  3  B1 68                lda (z80_ix),y
002068  3  85 rr                sta varf
00206A  3  A9 48                lda #72
00206C  3  A0 08                ldy #8
00206E  3  91 68                sta (z80_ix),y
002070  3  A9 B0                lda #176
002072  3  A0 09                ldy #9
002074  3  91 68                sta (z80_ix),y
002076  3  A0 09                ldy #9
002078  3  B1 68                lda (z80_ix),y
00207A  3  85 rr                sta dispx
00207C  3  A0 08                ldy #8
00207E  3  B1 68                lda (z80_ix),y
002080  3  85 rr                sta dispy
002082  3  A9 0A                lda #10
002084  3  20 75 08             jsr drpob
002087  3  A9 3C                lda #60
002089  3  0A                   asl a
00208A  3  8D 24 05             sta sndtyp
00208D  3  A9 FF                lda #255
00208F  3  A0 05                ldy #5
002091  3  91 68                sta (z80_ix),y
002093  3  A5 rr                lda varf
002095  3  A0 09                ldy #9
002097  3  91 68                sta (z80_ix),y
002099  3  A5 rr                lda vare
00209B  3  A0 08                ldy #8
00209D  3  91 68                sta (z80_ix),y
00209F  3  A9 4B                lda #75
0020A1  3  20 90 04             jsr delay
0020A4  3  A9 18                lda #24
0020A6  3  85 62                sta z80_c
0020A8  3  A0 09                ldy #9
0020AA  3  B1 68                lda (z80_ix),y
0020AC  3  18                   clc
0020AD  3  65 62                adc z80_c
0020AF  3  A0 09                ldy #9
0020B1  3  91 68                sta (z80_ix),y
0020B3  3  A0 09                ldy #9
0020B5  3  B1 68                lda (z80_ix),y
0020B7  3  85 rr                sta dispx
0020B9  3  A0 08                ldy #8
0020BB  3  B1 68                lda (z80_ix),y
0020BD  3  85 rr                sta dispy
0020BF  3  A9 0E                lda #14
0020C1  3  20 75 08             jsr drpob
0020C4  3  A5 rr                lda varf
0020C6  3  A0 09                ldy #9
0020C8  3  91 68                sta (z80_ix),y
0020CA  3  A9 46                lda #70
0020CC  3  0A                   asl a
0020CD  3  8D 24 05             sta sndtyp
0020D0  3  A9 0E        c01883: lda #14
0020D2  3  C5 rr                cmp scno
0020D4  3  F0 03                beq *+5
0020D6  3  4C 3A 21             jmp c02103
0020D9  3  A9 0E                lda #14
0020DB  3  C5 rr                cmp varopt
0020DD  3  F0 03                beq *+5
0020DF  3  4C 3A 21             jmp c02103
0020E2  3  A9 09                lda #9
0020E4  3  85 rr                sta chary
0020E6  3  A9 0B                lda #11
0020E8  3  85 rr                sta charx
0020EA  3  A5 rr                lda charx
0020EC  3  85 rr                sta dispx
0020EE  3  A5 rr                lda chary
0020F0  3  85 rr                sta dispy
0020F2  3  A9 37                lda #55
0020F4  3  20 53 0B             jsr pattr
0020F7  3  A5 rr                lda charx
0020F9  3  85 rr                sta dispx
0020FB  3  A5 rr                lda chary
0020FD  3  85 rr                sta dispy
0020FF  3  A9 48                lda #72
002101  3  20 53 0B             jsr pattr
002104  3  A5 rr                lda charx
002106  3  85 rr                sta dispx
002108  3  A5 rr                lda chary
00210A  3  85 rr                sta dispy
00210C  3  A9 49                lda #73
00210E  3  20 53 0B             jsr pattr
002111  3  A9 3C                lda #60
002113  3  0A                   asl a
002114  3  8D 24 05             sta sndtyp
002117  3  A9 FF                lda #255
002119  3  A0 05                ldy #5
00211B  3  91 68                sta (z80_ix),y
00211D  3  A9 88                lda #136
00211F  3  A0 08                ldy #8
002121  3  91 68                sta (z80_ix),y
002123  3  A9 18                lda #24
002125  3  A0 09                ldy #9
002127  3  91 68                sta (z80_ix),y
002129  3  A0 09                ldy #9
00212B  3  B1 68                lda (z80_ix),y
00212D  3  85 rr                sta dispx
00212F  3  A0 08                ldy #8
002131  3  B1 68                lda (z80_ix),y
002133  3  85 rr                sta dispy
002135  3  A9 0E                lda #14
002137  3  20 75 08             jsr drpob
00213A  3  A9 10        c02103: lda #16
00213C  3  C5 rr                cmp scno
00213E  3  F0 03                beq *+5
002140  3  4C 9D 21             jmp c02311
002143  3  A9 09                lda #9
002145  3  C5 rr                cmp varopt
002147  3  F0 03                beq *+5
002149  3  4C 9D 21             jmp c02311
00214C  3  A9 48                lda #72
00214E  3  A0 08                ldy #8
002150  3  91 68                sta (z80_ix),y
002152  3  A9 78                lda #120
002154  3  A0 09                ldy #9
002156  3  91 68                sta (z80_ix),y
002158  3  A0 09                ldy #9
00215A  3  B1 68                lda (z80_ix),y
00215C  3  85 rr                sta dispx
00215E  3  A0 08                ldy #8
002160  3  B1 68                lda (z80_ix),y
002162  3  85 rr                sta dispy
002164  3  A9 09                lda #9
002166  3  20 75 08             jsr drpob
002169  3  A9 3C                lda #60
00216B  3  0A                   asl a
00216C  3  8D 24 05             sta sndtyp
00216F  3  A9 FF                lda #255
002171  3  A0 05                ldy #5
002173  3  91 68                sta (z80_ix),y
002175  3  A9 32                lda #50
002177  3  20 90 04             jsr delay
00217A  3  A9 50                lda #80
00217C  3  0A                   asl a
00217D  3  8D 24 05             sta sndtyp
002180  3  A9 80                lda #128
002182  3  A0 08                ldy #8
002184  3  91 68                sta (z80_ix),y
002186  3  A9 A8                lda #168
002188  3  A0 09                ldy #9
00218A  3  91 68                sta (z80_ix),y
00218C  3  A0 09                ldy #9
00218E  3  B1 68                lda (z80_ix),y
002190  3  85 rr                sta dispx
002192  3  A0 08                ldy #8
002194  3  B1 68                lda (z80_ix),y
002196  3  85 rr                sta dispy
002198  3  A9 02                lda #2
00219A  3  20 75 08             jsr drpob
00219D  3  A9 0F        c02311: lda #15
00219F  3  C5 rr                cmp scno
0021A1  3  F0 03                beq *+5
0021A3  3  4C FA 21             jmp c02506
0021A6  3  A9 11                lda #17
0021A8  3  C5 rr                cmp varopt
0021AA  3  F0 03                beq *+5
0021AC  3  4C FA 21             jmp c02506
0021AF  3  A9 0F                lda #15
0021B1  3  85 rr                sta chary
0021B3  3  A9 14                lda #20
0021B5  3  85 rr                sta charx
0021B7  3  A5 rr                lda charx
0021B9  3  85 rr                sta dispx
0021BB  3  A5 rr                lda chary
0021BD  3  85 rr                sta dispy
0021BF  3  A9 34                lda #52
0021C1  3  20 53 0B             jsr pattr
0021C4  3  A5 rr                lda charx
0021C6  3  85 rr                sta dispx
0021C8  3  A5 rr                lda chary
0021CA  3  85 rr                sta dispy
0021CC  3  A9 34                lda #52
0021CE  3  20 53 0B             jsr pattr
0021D1  3  A9 3C                lda #60
0021D3  3  0A                   asl a
0021D4  3  8D 24 05             sta sndtyp
0021D7  3  A9 FF                lda #255
0021D9  3  A0 05                ldy #5
0021DB  3  91 68                sta (z80_ix),y
0021DD  3  A9 88                lda #136
0021DF  3  A0 08                ldy #8
0021E1  3  91 68                sta (z80_ix),y
0021E3  3  A9 18                lda #24
0021E5  3  A0 09                ldy #9
0021E7  3  91 68                sta (z80_ix),y
0021E9  3  A0 09                ldy #9
0021EB  3  B1 68                lda (z80_ix),y
0021ED  3  85 rr                sta dispx
0021EF  3  A0 08                ldy #8
0021F1  3  B1 68                lda (z80_ix),y
0021F3  3  85 rr                sta dispy
0021F5  3  A9 11                lda #17
0021F7  3  20 75 08             jsr drpob
0021FA  3  A9 17        c02506: lda #23
0021FC  3  C5 rr                cmp scno
0021FE  3  F0 03                beq *+5
002200  3  4C 4D 22             jmp c02673
002203  3  A9 12                lda #18
002205  3  C5 rr                cmp varopt
002207  3  F0 03                beq *+5
002209  3  4C 4D 22             jmp c02673
00220C  3  A9 05                lda #5
00220E  3  85 rr                sta chary
002210  3  A9 18                lda #24
002212  3  85 rr                sta charx
002214  3  A5 rr                lda charx
002216  3  85 rr                sta dispx
002218  3  A5 rr                lda chary
00221A  3  85 rr                sta dispy
00221C  3  A9 00                lda #0
00221E  3  20 53 0B             jsr pattr
002221  3  A9 2D                lda #45
002223  3  0A                   asl a
002224  3  8D 24 05             sta sndtyp
002227  3  A9 32                lda #50
002229  3  20 90 04             jsr delay
00222C  3  A9 06                lda #6
00222E  3  85 rr                sta chary
002230  3  A9 18                lda #24
002232  3  85 rr                sta charx
002234  3  A5 rr                lda charx
002236  3  85 rr                sta dispx
002238  3  A5 rr                lda chary
00223A  3  85 rr                sta dispy
00223C  3  A9 00                lda #0
00223E  3  20 53 0B             jsr pattr
002241  3  A9 2D                lda #45
002243  3  0A                   asl a
002244  3  8D 24 05             sta sndtyp
002247  3  A9 FF                lda #255
002249  3  A0 05                ldy #5
00224B  3  91 68                sta (z80_ix),y
00224D  3  A9 0A        c02673: lda #10
00224F  3  C5 rr                cmp scno
002251  3  F0 03                beq *+5
002253  3  4C 80 22             jmp c02776
002256  3  A9 10                lda #16
002258  3  C5 rr                cmp varopt
00225A  3  F0 03                beq *+5
00225C  3  4C 80 22             jmp c02776
00225F  3  A9 04                lda #4
002261  3  85 rr                sta chary
002263  3  A9 11                lda #17
002265  3  85 rr                sta charx
002267  3  A5 rr                lda charx
002269  3  85 rr                sta dispx
00226B  3  A5 rr                lda chary
00226D  3  85 rr                sta dispy
00226F  3  A9 00                lda #0
002271  3  20 53 0B             jsr pattr
002274  3  A9 2D                lda #45
002276  3  0A                   asl a
002277  3  8D 24 05             sta sndtyp
00227A  3  A9 FF                lda #255
00227C  3  A0 05                ldy #5
00227E  3  91 68                sta (z80_ix),y
002280  3  A5 rr        c02776: lda vare
002282  3  A0 08                ldy #8
002284  3  91 68                sta (z80_ix),y
002286  3  A5 rr                lda varf
002288  3  A0 09                ldy #9
00228A  3  91 68                sta (z80_ix),y
00228C  3  60           c02804: rts
00228D  3               evnt03:
00228D  3  A9 00                lda #0
00228F  3  C5 rr                cmp varc
002291  3  F0 03                beq *+5
002293  3  4C 30 23             jmp d00347
002296  3  A9 00                lda #0
002298  3  A0 0B                ldy #11
00229A  3  D1 68                cmp (z80_ix),y
00229C  3  F0 03                beq *+5
00229E  3  4C EA 22             jmp d00196
0022A1  3  20 B3 0D             jsr cangl
0022A4  3  F0 03                beq :+
0022A6  3  4C E1 22             jmp d00178
0022A9  3               :
0022A9  3  A0 09                ldy #9
0022AB  3  B1 68                lda (z80_ix),y
0022AD  3  38                   sec
0022AE  3  E9 02                sbc #2
0022B0  3  91 68                sta (z80_ix),y
0022B2  3  A9 10                lda #16
0022B4  3  85 62                sta z80_c
0022B6  3  A0 09                ldy #9
0022B8  3  B1 68                lda (z80_ix),y
0022BA  3  38                   sec
0022BB  3  E5 62                sbc z80_c
0022BD  3  A0 09                ldy #9
0022BF  3  91 68                sta (z80_ix),y
0022C1  3  20 7E 0D             jsr cangd
0022C4  3  F0 03                beq :+
0022C6  3  4C CF 22             jmp d00138
0022C9  3               :
0022C9  3  A9 01                lda #1
0022CB  3  A0 0B                ldy #11
0022CD  3  91 68                sta (z80_ix),y
0022CF  3  A9 10        d00138: lda #16
0022D1  3  85 62                sta z80_c
0022D3  3  A0 09                ldy #9
0022D5  3  B1 68                lda (z80_ix),y
0022D7  3  18                   clc
0022D8  3  65 62                adc z80_c
0022DA  3  A0 09                ldy #9
0022DC  3  91 68                sta (z80_ix),y
0022DE  3  4C E7 22             jmp d00191
0022E1  3  A9 01        d00178: lda #1
0022E3  3  A0 0B                ldy #11
0022E5  3  91 68                sta (z80_ix),y
0022E7  3  4C 30 23     d00191: jmp d00347
0022EA  3  20 C5 0D     d00196: jsr cangr
0022ED  3  F0 03                beq :+
0022EF  3  4C 2A 23             jmp d00333
0022F2  3               :
0022F2  3  A0 09                ldy #9
0022F4  3  B1 68                lda (z80_ix),y
0022F6  3  18                   clc
0022F7  3  69 02                adc #2
0022F9  3  91 68                sta (z80_ix),y
0022FB  3  A9 10                lda #16
0022FD  3  85 62                sta z80_c
0022FF  3  A0 09                ldy #9
002301  3  B1 68                lda (z80_ix),y
002303  3  18                   clc
002304  3  65 62                adc z80_c
002306  3  A0 09                ldy #9
002308  3  91 68                sta (z80_ix),y
00230A  3  20 7E 0D             jsr cangd
00230D  3  F0 03                beq :+
00230F  3  4C 18 23             jmp d00294
002312  3               :
002312  3  A9 00                lda #0
002314  3  A0 0B                ldy #11
002316  3  91 68                sta (z80_ix),y
002318  3  A9 10        d00294: lda #16
00231A  3  85 62                sta z80_c
00231C  3  A0 09                ldy #9
00231E  3  B1 68                lda (z80_ix),y
002320  3  38                   sec
002321  3  E5 62                sbc z80_c
002323  3  A0 09                ldy #9
002325  3  91 68                sta (z80_ix),y
002327  3  4C 30 23             jmp d00347
00232A  3  A9 00        d00333: lda #0
00232C  3  A0 0B                ldy #11
00232E  3  91 68                sta (z80_ix),y
002330  3  A9 00        d00347: lda #0
002332  3  20 48 14             jsr animsp
002335  3  A9 00                lda #0
002337  3  85 63                sta z80_b
002339  3  20 93 14             jsr sktyp
00233C  3  B0 03                bcs :+
00233E  3  4C 41 23             jmp d00377
002341  3               :
002341  3  60           d00377: rts
002342  3               evnt04:
002342  3  A9 00                lda #0
002344  3  A0 0B                ldy #11
002346  3  D1 68                cmp (z80_ix),y
002348  3  F0 03                beq *+5
00234A  3  4C 7E 23             jmp e00120
00234D  3  20 7E 0D             jsr cangd
002350  3  F0 03                beq :+
002352  3  4C 6F 23             jmp e00089
002355  3               :
002355  3  A0 08                ldy #8
002357  3  B1 68                lda (z80_ix),y
002359  3  18                   clc
00235A  3  69 02                adc #2
00235C  3  91 68                sta (z80_ix),y
00235E  3  A9 00                lda #0
002360  3  C5 rr                cmp vara
002362  3  F0 03                beq *+5
002364  3  4C 6C 23             jmp e00085
002367  3  A9 00                lda #0
002369  3  20 48 14             jsr animsp
00236C  3  4C 7B 23     e00085: jmp e00115
00236F  3  A9 01        e00089: lda #1
002371  3  A0 0B                ldy #11
002373  3  91 68                sta (z80_ix),y
002375  3  A9 23                lda #35
002377  3  0A                   asl a
002378  3  8D 24 05             sta sndtyp
00237B  3  4C AC 23     e00115: jmp e00211
00237E  3  20 49 0D     e00120: jsr cangu
002381  3  F0 03                beq :+
002383  3  4C A0 23             jmp e00185
002386  3               :
002386  3  A0 08                ldy #8
002388  3  B1 68                lda (z80_ix),y
00238A  3  38                   sec
00238B  3  E9 02                sbc #2
00238D  3  91 68                sta (z80_ix),y
00238F  3  A9 00                lda #0
002391  3  C5 rr                cmp vara
002393  3  F0 03                beq *+5
002395  3  4C 9D 23             jmp e00181
002398  3  A9 00                lda #0
00239A  3  20 48 14             jsr animsp
00239D  3  4C AC 23     e00181: jmp e00211
0023A0  3  A9 00        e00185: lda #0
0023A2  3  A0 0B                ldy #11
0023A4  3  91 68                sta (z80_ix),y
0023A6  3  A9 23                lda #35
0023A8  3  0A                   asl a
0023A9  3  8D 24 05             sta sndtyp
0023AC  3  A9 00        e00211: lda #0
0023AE  3  85 63                sta z80_b
0023B0  3  20 93 14             jsr sktyp
0023B3  3  B0 03                bcs :+
0023B5  3  4C B8 23             jmp e00233
0023B8  3               :
0023B8  3  A9 03        e00233: lda #3
0023BA  3  A0 06                ldy #6
0023BC  3  D1 68                cmp (z80_ix),y
0023BE  3  F0 03                beq *+5
0023C0  3  4C C3 23             jmp e00255
0023C3  3  A9 06        e00255: lda #6
0023C5  3  A0 06                ldy #6
0023C7  3  D1 68                cmp (z80_ix),y
0023C9  3  F0 03                beq *+5
0023CB  3  4C CE 23             jmp e00277
0023CE  3  60           e00277: rts
0023CF  3               evnt05:
0023CF  3  A9 00                lda #0
0023D1  3  C5 rr                cmp vara
0023D3  3  F0 03                beq *+5
0023D5  3  4C DD 23             jmp f00027
0023D8  3  A9 00                lda #0
0023DA  3  20 48 14             jsr animsp
0023DD  3  A9 00        f00027: lda #0
0023DF  3  85 63                sta z80_b
0023E1  3  20 93 14             jsr sktyp
0023E4  3  B0 03                bcs :+
0023E6  3  4C F6 24             jmp f00594
0023E9  3               :
0023E9  3  A5 rr                lda joyval
0023EB  3  29 40                and #64
0023ED  3  F0 03                beq :+
0023EF  3  4C F6 24             jmp f00594
0023F2  3               :
0023F2  3  A9 09                lda #9
0023F4  3  AA                   tax
0023F5  3  20 33 02             jsr minve
0023F8  3  A0 08                ldy #8
0023FA  3  B1 68                lda (z80_ix),y
0023FC  3  85 rr                sta vare
0023FE  3  A0 09                ldy #9
002400  3  B1 68                lda (z80_ix),y
002402  3  85 rr                sta varf
002404  3  A9 19                lda #25
002406  3  C5 rr                cmp scno
002408  3  F0 03                beq *+5
00240A  3  4C 66 24             jmp f00304
00240D  3  A9 04                lda #4
00240F  3  C5 rr                cmp varopt
002411  3  F0 03                beq *+5
002413  3  4C 66 24             jmp f00304
002416  3  A9 09                lda #9
002418  3  85 rr                sta chary
00241A  3  A9 0E                lda #14
00241C  3  85 rr                sta charx
00241E  3  A5 rr                lda charx
002420  3  85 rr                sta dispx
002422  3  A5 rr                lda chary
002424  3  85 rr                sta dispy
002426  3  A9 00                lda #0
002428  3  20 53 0B             jsr pattr
00242B  3  A5 rr                lda charx
00242D  3  85 rr                sta dispx
00242F  3  A5 rr                lda chary
002431  3  85 rr                sta dispy
002433  3  A9 00                lda #0
002435  3  20 53 0B             jsr pattr
002438  3  A9 0A                lda #10
00243A  3  85 rr                sta chary
00243C  3  A9 0E                lda #14
00243E  3  85 rr                sta charx
002440  3  A5 rr                lda charx
002442  3  85 rr                sta dispx
002444  3  A5 rr                lda chary
002446  3  85 rr                sta dispy
002448  3  A9 00                lda #0
00244A  3  20 53 0B             jsr pattr
00244D  3  A5 rr                lda charx
00244F  3  85 rr                sta dispx
002451  3  A5 rr                lda chary
002453  3  85 rr                sta dispy
002455  3  A9 00                lda #0
002457  3  20 53 0B             jsr pattr
00245A  3  A9 32                lda #50
00245C  3  0A                   asl a
00245D  3  8D 24 05             sta sndtyp
002460  3  A9 FF                lda #255
002462  3  A0 05                ldy #5
002464  3  91 68                sta (z80_ix),y
002466  3  A9 01        f00304: lda #1
002468  3  C5 rr                cmp scno
00246A  3  F0 03                beq *+5
00246C  3  4C C8 24             jmp f00503
00246F  3  A9 04                lda #4
002471  3  C5 rr                cmp varopt
002473  3  F0 03                beq *+5
002475  3  4C C8 24             jmp f00503
002478  3  A9 0F                lda #15
00247A  3  85 rr                sta chary
00247C  3  A9 16                lda #22
00247E  3  85 rr                sta charx
002480  3  A5 rr                lda charx
002482  3  85 rr                sta dispx
002484  3  A5 rr                lda chary
002486  3  85 rr                sta dispy
002488  3  A9 00                lda #0
00248A  3  20 53 0B             jsr pattr
00248D  3  A5 rr                lda charx
00248F  3  85 rr                sta dispx
002491  3  A5 rr                lda chary
002493  3  85 rr                sta dispy
002495  3  A9 00                lda #0
002497  3  20 53 0B             jsr pattr
00249A  3  A9 10                lda #16
00249C  3  85 rr                sta chary
00249E  3  A9 16                lda #22
0024A0  3  85 rr                sta charx
0024A2  3  A5 rr                lda charx
0024A4  3  85 rr                sta dispx
0024A6  3  A5 rr                lda chary
0024A8  3  85 rr                sta dispy
0024AA  3  A9 00                lda #0
0024AC  3  20 53 0B             jsr pattr
0024AF  3  A5 rr                lda charx
0024B1  3  85 rr                sta dispx
0024B3  3  A5 rr                lda chary
0024B5  3  85 rr                sta dispy
0024B7  3  A9 00                lda #0
0024B9  3  20 53 0B             jsr pattr
0024BC  3  A9 32                lda #50
0024BE  3  0A                   asl a
0024BF  3  8D 24 05             sta sndtyp
0024C2  3  A9 FF                lda #255
0024C4  3  A0 05                ldy #5
0024C6  3  91 68                sta (z80_ix),y
0024C8  3  A9 05        f00503: lda #5
0024CA  3  C5 rr                cmp scno
0024CC  3  F0 03                beq *+5
0024CE  3  4C F6 24             jmp f00594
0024D1  3  A9 03                lda #3
0024D3  3  C5 rr                cmp vark
0024D5  3  F0 03                beq *+5
0024D7  3  4C EA 24             jmp f00567
0024DA  3  A9 13                lda #19
0024DC  3  C5 rr                cmp varopt
0024DE  3  F0 03                beq *+5
0024E0  3  4C EA 24             jmp f00567
0024E3  3  A9 1B                lda #27
0024E5  3  85 rr                sta scno
0024E7  3  20 9C 15             jsr nwscr
0024EA  3  A5 rr        f00567: lda vare
0024EC  3  A0 08                ldy #8
0024EE  3  91 68                sta (z80_ix),y
0024F0  3  A5 rr                lda varf
0024F2  3  A0 09                ldy #9
0024F4  3  91 68                sta (z80_ix),y
0024F6  3  60           f00594: rts
0024F7  3               evnt06:
0024F7  3  A9 00                lda #0
0024F9  3  A0 0B                ldy #11
0024FB  3  D1 68                cmp (z80_ix),y
0024FD  3  F0 03                beq *+5
0024FF  3  4C 3D 25             jmp g00152
002502  3  20 B3 0D             jsr cangl
002505  3  F0 03                beq :+
002507  3  4C 34 25             jmp g00134
00250A  3               :
00250A  3  A0 09                ldy #9
00250C  3  B1 68                lda (z80_ix),y
00250E  3  38                   sec
00250F  3  E9 02                sbc #2
002511  3  91 68                sta (z80_ix),y
002513  3  A9 10                lda #16
002515  3  85 62                sta z80_c
002517  3  A0 09                ldy #9
002519  3  B1 68                lda (z80_ix),y
00251B  3  38                   sec
00251C  3  E5 62                sbc z80_c
00251E  3  A0 09                ldy #9
002520  3  91 68                sta (z80_ix),y
002522  3  A9 10                lda #16
002524  3  85 62                sta z80_c
002526  3  A0 09                ldy #9
002528  3  B1 68                lda (z80_ix),y
00252A  3  18                   clc
00252B  3  65 62                adc z80_c
00252D  3  A0 09                ldy #9
00252F  3  91 68                sta (z80_ix),y
002531  3  4C 3A 25             jmp g00148
002534  3  A9 01        g00134: lda #1
002536  3  A0 0B                ldy #11
002538  3  91 68                sta (z80_ix),y
00253A  3  4C 75 25     g00148: jmp g00276
00253D  3  20 C5 0D     g00152: jsr cangr
002540  3  F0 03                beq :+
002542  3  4C 6F 25             jmp g00263
002545  3               :
002545  3  A0 09                ldy #9
002547  3  B1 68                lda (z80_ix),y
002549  3  18                   clc
00254A  3  69 02                adc #2
00254C  3  91 68                sta (z80_ix),y
00254E  3  A9 10                lda #16
002550  3  85 62                sta z80_c
002552  3  A0 09                ldy #9
002554  3  B1 68                lda (z80_ix),y
002556  3  18                   clc
002557  3  65 62                adc z80_c
002559  3  A0 09                ldy #9
00255B  3  91 68                sta (z80_ix),y
00255D  3  A9 10                lda #16
00255F  3  85 62                sta z80_c
002561  3  A0 09                ldy #9
002563  3  B1 68                lda (z80_ix),y
002565  3  38                   sec
002566  3  E5 62                sbc z80_c
002568  3  A0 09                ldy #9
00256A  3  91 68                sta (z80_ix),y
00256C  3  4C 75 25             jmp g00276
00256F  3  A9 00        g00263: lda #0
002571  3  A0 0B                ldy #11
002573  3  91 68                sta (z80_ix),y
002575  3  A9 01        g00276: lda #1
002577  3  A0 0B                ldy #11
002579  3  D1 68                cmp (z80_ix),y
00257B  3  F0 03                beq *+5
00257D  3  4C 9F 25             jmp g00358
002580  3  A9 00                lda #0
002582  3  C5 rr                cmp vara
002584  3  F0 03                beq *+5
002586  3  4C 9F 25             jmp g00358
002589  3  A9 00                lda #0
00258B  3  20 48 14             jsr animsp
00258E  3  A9 03                lda #3
002590  3  A0 07                ldy #7
002592  3  D1 68                cmp (z80_ix),y
002594  3  F0 03                beq *+5
002596  3  4C 9F 25             jmp g00358
002599  3  A9 23                lda #35
00259B  3  0A                   asl a
00259C  3  8D 24 05             sta sndtyp
00259F  3  A9 00        g00358: lda #0
0025A1  3  A0 0B                ldy #11
0025A3  3  D1 68                cmp (z80_ix),y
0025A5  3  F0 03                beq *+5
0025A7  3  4C C9 25             jmp g00440
0025AA  3  A9 00                lda #0
0025AC  3  C5 rr                cmp vara
0025AE  3  F0 03                beq *+5
0025B0  3  4C C9 25             jmp g00440
0025B3  3  A9 00                lda #0
0025B5  3  20 6E 14             jsr animbk
0025B8  3  A9 03                lda #3
0025BA  3  A0 07                ldy #7
0025BC  3  D1 68                cmp (z80_ix),y
0025BE  3  F0 03                beq *+5
0025C0  3  4C C9 25             jmp g00440
0025C3  3  A9 23                lda #35
0025C5  3  0A                   asl a
0025C6  3  8D 24 05             sta sndtyp
0025C9  3  A9 00        g00440: lda #0
0025CB  3  85 63                sta z80_b
0025CD  3  20 93 14             jsr sktyp
0025D0  3  B0 03                bcs :+
0025D2  3  4C D5 25             jmp g00461
0025D5  3               :
0025D5  3  A9 08        g00461: lda #8
0025D7  3  A0 06                ldy #6
0025D9  3  D1 68                cmp (z80_ix),y
0025DB  3  F0 03                beq *+5
0025DD  3  4C E0 25             jmp g00483
0025E0  3  60           g00483: rts
0025E1  3               evnt07:
0025E1  3  60                   rts
0025E2  3               evnt08:
0025E2  3  60                   rts
0025E3  3               evnt09:
0025E3  3  A9 04                lda #4
0025E5  3  A0 05                ldy #5
0025E7  3  D1 68                cmp (z80_ix),y
0025E9  3  F0 03                beq *+5
0025EB  3  4C F4 25             jmp j00037
0025EE  3  A9 01                lda #1
0025F0  3  A0 0B                ldy #11
0025F2  3  91 68                sta (z80_ix),y
0025F4  3  A9 00        j00037: lda #0
0025F6  3  A0 05                ldy #5
0025F8  3  D1 68                cmp (z80_ix),y
0025FA  3  F0 03                beq *+5
0025FC  3  4C 16 26             jmp j00112
0025FF  3  A5 rr                lda varo
002601  3  A0 08                ldy #8
002603  3  91 68                sta (z80_ix),y
002605  3  A5 rr                lda varp
002607  3  A0 09                ldy #9
002609  3  91 68                sta (z80_ix),y
00260B  3  A0 08                ldy #8
00260D  3  B1 68                lda (z80_ix),y
00260F  3  18                   clc
002610  3  69 01                adc #1
002612  3  A0 08                ldy #8
002614  3  91 68                sta (z80_ix),y
002616  3  60           j00112: rts
002617  3               evnt10:
002617  3  A5 rr                lda vara
002619  3  18                   clc
00261A  3  69 01                adc #1
00261C  3  85 rr                sta vara
00261E  3  A9 02                lda #2
002620  3  C5 rr                cmp vara
002622  3  90 03                bcc *+5
002624  3  4C 2B 26             jmp k00042
002627  3  A9 00                lda #0
002629  3  85 rr                sta vara
00262B  3  A9 01        k00042: lda #1
00262D  3  C5 rr                cmp varh
00262F  3  F0 03                beq *+5
002631  3  4C 7C 26             jmp k00214
002634  3  A9 0C                lda #12
002636  3  20 44 08             jsr gotob
002639  3  C9 FF                cmp #255
00263B  3  F0 03                beq :+
00263D  3  4C 7C 26             jmp k00214
002640  3               :
002640  3  A0 08                ldy #8
002642  3  B1 68                lda (z80_ix),y
002644  3  85 rr                sta vare
002646  3  A0 09                ldy #9
002648  3  B1 68                lda (z80_ix),y
00264A  3  85 rr                sta varf
00264C  3  A9 28                lda #40
00264E  3  A0 08                ldy #8
002650  3  91 68                sta (z80_ix),y
002652  3  A9 58                lda #88
002654  3  A0 09                ldy #9
002656  3  91 68                sta (z80_ix),y
002658  3  A0 09                ldy #9
00265A  3  B1 68                lda (z80_ix),y
00265C  3  85 rr                sta dispx
00265E  3  A0 08                ldy #8
002660  3  B1 68                lda (z80_ix),y
002662  3  85 rr                sta dispy
002664  3  A9 0C                lda #12
002666  3  20 75 08             jsr drpob
002669  3  A5 rr                lda vare
00266B  3  A0 08                ldy #8
00266D  3  91 68                sta (z80_ix),y
00266F  3  A5 rr                lda varf
002671  3  A0 09                ldy #9
002673  3  91 68                sta (z80_ix),y
002675  3  A5 rr                lda varh
002677  3  18                   clc
002678  3  69 01                adc #1
00267A  3  85 rr                sta varh
00267C  3  A9 01        k00214: lda #1
00267E  3  C5 rr                cmp vari
002680  3  F0 03                beq *+5
002682  3  4C CD 26             jmp k00386
002685  3  A9 0D                lda #13
002687  3  20 44 08             jsr gotob
00268A  3  C9 FF                cmp #255
00268C  3  F0 03                beq :+
00268E  3  4C CD 26             jmp k00386
002691  3               :
002691  3  A0 08                ldy #8
002693  3  B1 68                lda (z80_ix),y
002695  3  85 rr                sta vare
002697  3  A0 09                ldy #9
002699  3  B1 68                lda (z80_ix),y
00269B  3  85 rr                sta varf
00269D  3  A9 08                lda #8
00269F  3  A0 08                ldy #8
0026A1  3  91 68                sta (z80_ix),y
0026A3  3  A9 18                lda #24
0026A5  3  A0 09                ldy #9
0026A7  3  91 68                sta (z80_ix),y
0026A9  3  A0 09                ldy #9
0026AB  3  B1 68                lda (z80_ix),y
0026AD  3  85 rr                sta dispx
0026AF  3  A0 08                ldy #8
0026B1  3  B1 68                lda (z80_ix),y
0026B3  3  85 rr                sta dispy
0026B5  3  A9 0D                lda #13
0026B7  3  20 75 08             jsr drpob
0026BA  3  A5 rr                lda vare
0026BC  3  A0 08                ldy #8
0026BE  3  91 68                sta (z80_ix),y
0026C0  3  A5 rr                lda varf
0026C2  3  A0 09                ldy #9
0026C4  3  91 68                sta (z80_ix),y
0026C6  3  A5 rr                lda vari
0026C8  3  18                   clc
0026C9  3  69 01                adc #1
0026CB  3  85 rr                sta vari
0026CD  3  A9 1B        k00386: lda #27
0026CF  3  C5 rr                cmp scno
0026D1  3  F0 03                beq *+5
0026D3  3  4C 05 27             jmp k00493
0026D6  3  A9 00                lda #0
0026D8  3  C5 rr                cmp varg
0026DA  3  F0 03                beq *+5
0026DC  3  4C 05 27             jmp k00493
0026DF  3  A9 02                lda #2
0026E1  3  85 rr                sta chary
0026E3  3  A9 03                lda #3
0026E5  3  85 rr                sta charx
0026E7  3  A9 0B                lda #11
0026E9  3  20 3E 10             jsr dmsg
0026EC  3  A9 12                lda #18
0026EE  3  85 rr                sta chary
0026F0  3  A9 0C                lda #12
0026F2  3  85 rr                sta charx
0026F4  3  A9 14                lda #20
0026F6  3  20 3E 10             jsr dmsg
0026F9  3  A5 rr                lda varg
0026FB  3  18                   clc
0026FC  3  69 01                adc #1
0026FE  3  85 rr                sta varg
002700  3  A9 19                lda #25
002702  3  20 90 04             jsr delay
002705  3  A9 1B        k00493: lda #27
002707  3  C5 rr                cmp scno
002709  3  F0 03                beq *+5
00270B  3  4C 15 27             jmp k00524
00270E  3  20 81 04             jsr prskey
002711  3  A9 01                lda #1
002713  3  85 rr                sta gamwon
002715  3  60           k00524: rts
002716  3               evnt11:
002716  3  60                   rts
002717  3               evnt12:
002717  3  20 69 05             jsr cls
00271A  3  A9 02                lda #2
00271C  3  85 rr                sta chary
00271E  3  A9 0A                lda #10
002720  3  85 rr                sta charx
002722  3  A9 00                lda #0
002724  3  20 3E 10             jsr dmsg
002727  3  A9 01                lda #1
002729  3  85 rr                sta chary
00272B  3  A9 12                lda #18
00272D  3  20 3E 10             jsr dmsg
002730  3  A9 04                lda #4
002732  3  85 rr                sta chary
002734  3  A9 00                lda #0
002736  3  85 rr                sta charx
002738  3  A9 0C                lda #12
00273A  3  20 3E 10             jsr dmsg
00273D  3  A9 12                lda #18
00273F  3  85 rr                sta chary
002741  3  A9 00                lda #0
002743  3  85 rr                sta charx
002745  3  A9 0D                lda #13
002747  3  20 3E 10             jsr dmsg
00274A  3  A9 01                lda #1
00274C  3  85 rr                sta chary
00274E  3  A9 0F                lda #15
002750  3  85 rr                sta charx
002752  3  A9 0E                lda #14
002754  3  20 3E 10             jsr dmsg
002757  3  A9 08                lda #8
002759  3  85 rr                sta chary
00275B  3  A9 02                lda #2
00275D  3  85 rr                sta charx
00275F  3  A9 0F                lda #15
002761  3  20 3E 10             jsr dmsg
002764  3  A9 04                lda #4
002766  3  85 rr                sta chary
002768  3  A9 1D                lda #29
00276A  3  85 rr                sta charx
00276C  3  A9 10                lda #16
00276E  3  20 3E 10             jsr dmsg
002771  3  A9 06                lda #6
002773  3  85 rr                sta chary
002775  3  A9 08                lda #8
002777  3  85 rr                sta charx
002779  3  A9 0A                lda #10
00277B  3  20 3E 10             jsr dmsg
00277E  3  A9 0A                lda #10
002780  3  85 rr                sta chary
002782  3  A9 08                lda #8
002784  3  85 rr                sta charx
002786  3  A9 0A                lda #10
002788  3  20 3E 10             jsr dmsg
00278B  3  A9 08                lda #8
00278D  3  85 rr                sta chary
00278F  3  A9 17                lda #23
002791  3  85 rr                sta charx
002793  3  A9 0A                lda #10
002795  3  20 3E 10             jsr dmsg
002798  3  A9 09                lda #9
00279A  3  85 rr                sta chary
00279C  3  A9 17                lda #23
00279E  3  85 rr                sta charx
0027A0  3  A9 0A                lda #10
0027A2  3  20 3E 10             jsr dmsg
0027A5  3  A9 04                lda #4
0027A7  3  85 rr                sta chary
0027A9  3  A9 14                lda #20
0027AB  3  85 rr                sta charx
0027AD  3  A9 08                lda #8
0027AF  3  20 3E 10             jsr dmsg
0027B2  3  A9 0C                lda #12
0027B4  3  85 rr                sta chary
0027B6  3  A9 0A                lda #10
0027B8  3  85 rr                sta charx
0027BA  3  A9 08                lda #8
0027BC  3  20 3E 10             jsr dmsg
0027BF  3  A9 0C                lda #12
0027C1  3  85 rr                sta chary
0027C3  3  A9 0C                lda #12
0027C5  3  85 rr                sta charx
0027C7  3  A9 08                lda #8
0027C9  3  20 3E 10             jsr dmsg
0027CC  3  A9 0C                lda #12
0027CE  3  85 rr                sta chary
0027D0  3  A9 0B                lda #11
0027D2  3  85 rr                sta charx
0027D4  3  A9 08                lda #8
0027D6  3  20 3E 10             jsr dmsg
0027D9  3  A9 15                lda #21
0027DB  3  85 rr                sta chary
0027DD  3  A9 11                lda #17
0027DF  3  20 3E 10             jsr dmsg
0027E2  3               
0027E2  3               rtcon:
0027E2  3  20 E4 04             jsr vsync
0027E5  3  A9 00                lda #0
0027E7  3  85 rr                sta contrl
0027E9  3  AD 89 6E             lda keys+7
0027EC  3  20 61 0F             jsr ktest
0027EF  3  90 18                bcc rtcon1
0027F1  3  A9 01                lda #1
0027F3  3  85 rr                sta contrl
0027F5  3  AD 8A 6E             lda keys+8
0027F8  3  20 61 0F             jsr ktest
0027FB  3  90 0C                bcc rtcon1
0027FD  3  A9 02                lda #2
0027FF  3  85 rr                sta contrl
002801  3  AD 8B 6E             lda keys+9
002804  3  20 61 0F             jsr ktest
002807  3  B0 D9                bcs rtcon
002809  3                       rtcon1:
002809  3  60                   rts
00280A  3               evnt13:
00280A  3  20 69 05             jsr cls
00280D  3  A9 14                lda #20
00280F  3  85 rr                sta chary
002811  3  A9 02                lda #2
002813  3  85 rr                sta charx
002815  3  A9 00                lda #0
002817  3  20 3E 10             jsr dmsg
00281A  3  A9 00                lda #0
00281C  3  85 rr                sta varc
00281E  3  A9 00                lda #0
002820  3  85 rr                sta varg
002822  3  A9 80                lda #128
002824  3  85 rr                sta varo
002826  3  A9 20                lda #32
002828  3  85 rr                sta varp
00282A  3  A9 03                lda #3
00282C  3  85 rr                sta numlif
00282E  3  A9 00                lda #0
002830  3  85 rr                sta vark
002832  3  A9 00                lda #0
002834  3  85 rr                sta vare
002836  3  A9 00                lda #0
002838  3  85 rr                sta varf
00283A  3  A9 00                lda #0
00283C  3  85 rr                sta chary
00283E  3  A9 01                lda #1
002840  3  85 rr                sta charx
002842  3  A9 03                lda #3
002844  3  20 3E 10             jsr dmsg
002847  3  A9 15                lda #21
002849  3  85 rr                sta loopa
00284B  3  A9 01        n00129: lda #1
00284D  3  85 rr                sta charx
00284F  3  A9 03                lda #3
002851  3  20 3E 10             jsr dmsg
002854  3  C6 rr                dec loopa
002856  3  F0 03                beq :+
002858  3  4C 4B 28             jmp n00129
00285B  3               :
00285B  3  A9 01                lda #1
00285D  3  85 rr                sta charx
00285F  3  A9 04                lda #4
002861  3  20 3E 10             jsr dmsg
002864  3  A9 00                lda #0
002866  3  85 rr                sta chary
002868  3  A9 1E                lda #30
00286A  3  85 rr                sta charx
00286C  3  A9 03                lda #3
00286E  3  20 3E 10             jsr dmsg
002871  3  A9 15                lda #21
002873  3  85 rr                sta loopa
002875  3  A9 1E        n00208: lda #30
002877  3  85 rr                sta charx
002879  3  A9 03                lda #3
00287B  3  20 3E 10             jsr dmsg
00287E  3  C6 rr                dec loopa
002880  3  F0 03                beq :+
002882  3  4C 75 28             jmp n00208
002885  3               :
002885  3  A9 16                lda #22
002887  3  85 rr                sta chary
002889  3  A9 02                lda #2
00288B  3  85 rr                sta charx
00288D  3  A9 05                lda #5
00288F  3  20 3E 10             jsr dmsg
002892  3  A9 16                lda #22
002894  3  85 rr                sta chary
002896  3  A9 1E                lda #30
002898  3  85 rr                sta charx
00289A  3  A9 06                lda #6
00289C  3  20 3E 10             jsr dmsg
00289F  3  A9 15                lda #21
0028A1  3  85 rr                sta chary
0028A3  3  A9 16                lda #22
0028A5  3  85 rr                sta charx
0028A7  3  A9 01                lda #1
0028A9  3  20 3E 10             jsr dmsg
0028AC  3  A9 15                lda #21
0028AE  3  85 rr                sta chary
0028B0  3  A9 1D                lda #29
0028B2  3  85 rr                sta charx
0028B4  3  A5 rr                lda numlif
0028B6  3  20 23 15             jsr disply
0028B9  3  A9 15                lda #21
0028BB  3  85 rr                sta chary
0028BD  3  A9 02                lda #2
0028BF  3  85 rr                sta charx
0028C1  3  A9 07                lda #7
0028C3  3  20 3E 10             jsr dmsg
0028C6  3  A9 14                lda #20
0028C8  3  85 rr                sta chary
0028CA  3  A9 13                lda #19
0028CC  3  85 rr                sta charx
0028CE  3  A9 02                lda #2
0028D0  3  20 3E 10             jsr dmsg
0028D3  3  A9 14                lda #20
0028D5  3  85 rr                sta chary
0028D7  3  A9 1D                lda #29
0028D9  3  85 rr                sta charx
0028DB  3  A5 rr                lda vark
0028DD  3  20 23 15             jsr disply
0028E0  3  60                   rts
0028E1  3               evnt14:
0028E1  3  60                   rts
0028E2  3               evnt15:
0028E2  3  60                   rts
0028E3  3               evnt16:
0028E3  3  A9 3C                lda #60
0028E5  3  0A                   asl a
0028E6  3  8D 24 05             sta sndtyp
0028E9  3  85 63                sta z80_b
0028EB  3  20 90 04             jsr delay
0028EE  3  A5 rr                lda numlif
0028F0  3  38                   sec
0028F1  3  E9 01                sbc #1
0028F3  3  85 rr                sta numlif
0028F5  3  A5 rr                lda varo
0028F7  3  A0 08                ldy #8
0028F9  3  91 68                sta (z80_ix),y
0028FB  3  A5 rr                lda varp
0028FD  3  A0 09                ldy #9
0028FF  3  91 68                sta (z80_ix),y
002901  3  A9 15                lda #21
002903  3  85 rr                sta chary
002905  3  A9 1D                lda #29
002907  3  85 rr                sta charx
002909  3  A5 rr                lda numlif
00290B  3  20 23 15             jsr disply
00290E  3  60                   rts
00290F  3               evnt17:
00290F  3  A9 32                lda #50
002911  3  20 90 04             jsr delay
002914  3  20 69 05             jsr cls
002917  3  A9 0A                lda #10
002919  3  85 rr                sta chary
00291B  3  A9 0A                lda #10
00291D  3  85 rr                sta charx
00291F  3  A9 00                lda #0
002921  3  20 3E 10             jsr dmsg
002924  3  A9 09                lda #9
002926  3  85 rr                sta chary
002928  3  A9 12                lda #18
00292A  3  20 3E 10             jsr dmsg
00292D  3  A9 0C                lda #12
00292F  3  85 rr                sta chary
002931  3  A9 0C                lda #12
002933  3  85 rr                sta charx
002935  3  A9 15                lda #21
002937  3  20 3E 10             jsr dmsg
00293A  3  A9 0E                lda #14
00293C  3  85 rr                sta chary
00293E  3  A9 0F                lda #15
002940  3  85 rr                sta charx
002942  3  A9 0E                lda #14
002944  3  20 3E 10             jsr dmsg
002947  3  A9 C8                lda #200
002949  3  20 90 04             jsr delay
00294C  3  60                   rts
00294D  3               evnt18:
00294D  3  20 69 05             jsr cls
002950  3  A9 32                lda #50
002952  3  20 90 04             jsr delay
002955  3  A9 01                lda #1
002957  3  85 rr                sta chary
002959  3  A9 00                lda #0
00295B  3  85 rr                sta charx
00295D  3  A9 13                lda #19
00295F  3  20 3E 10             jsr dmsg
002962  3  A9 15                lda #21
002964  3  85 rr                sta chary
002966  3  A9 0B                lda #11
002968  3  85 rr                sta charx
00296A  3  A9 14                lda #20
00296C  3  20 3E 10             jsr dmsg
00296F  3  20 81 04             jsr prskey
002972  3  60                   rts
002973  3               evnt19:
002973  3  60                   rts
002974  3               evnt20:
002974  3  60                   rts
002975  3  60           ptcusr: rts
002976  3               msgdat:
002976  3  46 4F 47 47          .byte "FOGGYS;QUEST",141
00297A  3  59 53 3B 51  
00297E  3  55 45 53 54  
002983  3  4C 49 56 45          .byte "LIVES:",141
002987  3  53 3A 8D     
00298A  3  43 52 59 53          .byte "CRYSTALS:",141
00298E  3  54 41 4C 53  
002992  3  3A 8D        
002994  3  40 8D                .byte "@",141
002996  3  60 8D                .byte "`",141
002998  3  5F 5F 5F 5F          .byte "____________________________",141
00299C  3  5F 5F 5F 5F  
0029A0  3  5F 5F 5F 5F  
0029B5  3  24 8D                .byte "$",141
0029B7  3  42 59 3A 3B          .byte "BY:;J.BLYTHE",141
0029BB  3  4A 2E 42 4C  
0029BF  3  59 54 48 45  
0029C4  3  78 8D                .byte "x",141
0029C6  3  3B 4B 45 59          .byte ";KEY;BLUE;;",13
0029CA  3  3B 42 4C 55  
0029CE  3  45 3B 3B 0D  
0029D2  3  43 52 59 53          .byte "CRYSTAL;BLU",13
0029D6  3  54 41 4C 3B  
0029DA  3  42 4C 55 0D  
0029DE  3  43 52 59 53          .byte "CRYSTAL;RED",13
0029E2  3  54 41 4C 3B  
0029E6  3  52 45 44 0D  
0029EA  3  43 52 59 53          .byte "CRYSTAL;GRN",13
0029EE  3  54 41 4C 3B  
0029F2  3  47 52 4E 0D  
0029F6  3  3B 3B 4B 45          .byte ";;KEY;RED;;",13
0029FA  3  59 3B 52 45  
0029FE  3  44 3B 3B 0D  
002A02  3  3B 4B 45 59          .byte ";KEY;PINK;;",13
002A06  3  3B 50 49 4E  
002A0A  3  4B 3B 3B 0D  
002A0E  3  3B 3B 4C 41          .byte ";;LADDER;;;",13
002A12  3  44 44 45 52  
002A16  3  3B 3B 3B 0D  
002A1A  3  3B 3B 3B 42          .byte ";;;BOMB;;;;",13
002A1E  3  4F 4D 42 3B  
002A22  3  3B 3B 3B 0D  
002A26  3  3B 54 48 45          .byte ";THE;CUBE;;",13
002A2A  3  3B 43 55 42  
002A2E  3  45 3B 3B 0D  
002A32  3  3B 54 48 45          .byte ";THE;SKULL;",13
002A36  3  3B 53 4B 55  
002A3A  3  4C 4C 3B 0D  
002A3E  3  3B 50 49 54          .byte ";PIT;PLANT;",13
002A42  3  3B 50 4C 41  
002A46  3  4E 54 3B 0D  
002A4A  3  3B 3B 3B 52          .byte ";;;ROCK;;;;",13
002A4E  3  4F 43 4B 3B  
002A52  3  3B 3B 3B 0D  
002A56  3  45 58 54 52          .byte "EXTRA;LIFE;",13
002A5A  3  41 3B 4C 49  
002A5E  3  46 45 3B 0D  
002A62  3  45 58 54 52          .byte "EXTRA;LIFE;",13
002A66  3  41 3B 4C 49  
002A6A  3  46 45 3B 0D  
002A6E  3  3B 3B 41 3B          .byte ";;A;SEED;;;",13
002A72  3  53 45 45 44  
002A76  3  3B 3B 3B 0D  
002A7A  3  3B 3B 42 41          .byte ";;BALLOON;;",13
002A7E  3  4C 4C 4F 4F  
002A82  3  4E 3B 3B 0D  
002A86  3  3B 50 49 43          .byte ";PICK;AXE;;",13
002A8A  3  4B 3B 41 58  
002A8E  3  45 3B 3B 0D  
002A92  3  3B 3B 42 52          .byte ";;BRICKS;;;",13
002A96  3  49 43 4B 53  
002A9A  3  3B 3B 3B 0D  
002A9E  3  3B 49 43 45          .byte ";ICE;DRILL;",13
002AA2  3  3B 44 52 49  
002AA6  3  4C 4C 3B 0D  
002AAA  3  3B 3B 53 50          .byte ";;SPLICER;;",141
002AAE  3  4C 49 43 45  
002AB2  3  52 3B 3B 8D  
002AB6  3  7A 8D                .byte "z",141
002AB8  3  57 45 4C 4C          .byte "WELL;DONE;FOGGY!!",141
002ABC  3  3B 44 4F 4E  
002AC0  3  45 3B 46 4F  
002ACA  3  3B 3B 3B 3B          .byte ";;;;;;;;w___________x__y;;;.",13
002ACE  3  3B 3B 3B 3B  
002AD2  3  77 5F 5F 5F  
002AE7  3  3B 2E 3B 3B          .byte ";.;;;;;;@;;;;;;;;;;;;;;@",13
002AEB  3  3B 3B 3B 3B  
002AEF  3  40 3B 3B 3B  
002B00  3  3B 3B 3B 3B          .byte ";;;;;;;;z;;;CONTROLS;;;@;.",13
002B04  3  3B 3B 3B 3B  
002B08  3  7A 3B 3B 3B  
002B1B  3  3B 3B 3B 3B          .byte ";;;;;.;;@;;;;;;;;;;;;;;@;;;;;;.",13
002B1F  3  3B 2E 3B 3B  
002B23  3  40 3B 3B 3B  
002B3B  3  3B 3B 3B 3B          .byte ";;;;.;;;@;;1;KEYBOARD;;z",13
002B3F  3  2E 3B 3B 3B  
002B43  3  40 3B 3B 31  
002B54  3  3B 3B 3B 3B          .byte ";;;;;;;;@;;2;KEMPSTON;;@",13
002B58  3  3B 3B 3B 3B  
002B5C  3  40 3B 3B 32  
002B6D  3  3B 3B 3B 3B          .byte ";;;;;;;;z;;3;SINCLAIR;;@;;;;.",13
002B71  3  3B 3B 3B 3B  
002B75  3  7A 3B 3B 33  
002B8B  3  3B 3B 3B 3B          .byte ";;;;;;.;@;;;;;;;;;;;;;;@;;;;;.",13
002B8F  3  3B 3B 2E 3B  
002B93  3  40 3B 3B 3B  
002BAA  3  3B 3B 2E 3B          .byte ";;.;;;;;`_xx___________$;;.",13
002BAE  3  3B 3B 3B 3B  
002BB2  3  60 5F 78 78  
002BC6  3  0D                   .byte 13
002BC7  3  3B 3B 3B 3B          .byte ";;;;;;;;;;KEYS:O,P,Q,A",13
002BCB  3  3B 3B 3B 3B  
002BCF  3  3B 3B 4B 45  
002BDE  3  3B 3B 3B 3B          .byte ";;;;;;;;;;;;;;;I-INV.",13
002BE2  3  3B 3B 3B 3B  
002BE6  3  3B 3B 3B 3B  
002BF4  3  3B 3B 3B 3B          .byte ";;;;;;;;;;;;;;;SPC-JUMP",141
002BF8  3  3B 3B 3B 3B  
002BFC  3  3B 3B 3B 3B  
002C0C  3  3B 3B 3B 3B          .byte ";;;;;;;;;RUCKSACK;GAMES",13
002C10  3  3B 3B 3B 3B  
002C14  3  3B 52 55 43  
002C24  3  3B 3B 3B 3B          .byte ";;;;;;;c;2017;JOHN;BLYTHE",141
002C28  3  3B 3B 3B 63  
002C2C  3  3B 32 30 31  
002C3E  3  2F 2B 8D             .byte "/+",141
002C41  3  3E 8D                .byte ">",141
002C43  3  3F 8D                .byte "?",141
002C45  3  3B 3B 3B 3B          .byte ";;;;;;;;;POWERED;BY;AGD",141
002C49  3  3B 3B 3B 3B  
002C4D  3  3B 50 4F 57  
002C5D  3  3B 3B 3B 3B          .byte ";;;;;;;;;;v",13
002C61  3  3B 3B 3B 3B  
002C65  3  3B 3B 76 0D  
002C69  3  3B 3B 3B 3B          .byte ";;;;;;;;;;u",141
002C6D  3  3B 3B 3B 3B  
002C71  3  3B 3B 75 8D  
002C75  3  3B 3B 3B 48          .byte ";;;HOME;AT;LAST.;FOGGY;TAKES;A",13
002C79  3  4F 4D 45 3B  
002C7D  3  41 54 3B 4C  
002C94  3  3B 0D                .byte ";",13
002C96  3  3B 57 45 4C          .byte ";WELL;EARNED;REST;FROM;HOLIDAYS.",13
002C9A  3  4C 3B 45 41  
002C9E  3  52 4E 45 44  
002CB7  3  3B 0D                .byte ";",13
002CB9  3  3B 3B 3B 3B          .byte ";;;;TIME;FOR;BIT;OF;TREASURE",13
002CBD  3  54 49 4D 45  
002CC1  3  3B 46 4F 52  
002CD6  3  3B 0D                .byte ";",13
002CD8  3  3B 3B 3B 3B          .byte ";;;;;;;;HUNTING;INSTEAD!!!",13
002CDC  3  3B 3B 3B 3B  
002CE0  3  48 55 4E 54  
002CF3  3  3B 0D                .byte ";",13
002CF5  3  3B 0D                .byte ";",13
002CF7  3  3B 3B 3B 3B          .byte ";;;;;;;THANKS;FOR;PLAYING!",13
002CFB  3  3B 3B 3B 54  
002CFF  3  48 41 4E 4B  
002D12  3  3B 0D                .byte ";",13
002D14  3  3B 43 52 45          .byte ";CREDITS..",13
002D18  3  44 49 54 53  
002D1C  3  2E 2E 0D     
002D1F  3  3B 0D                .byte ";",13
002D21  3  3B 43 4F 44          .byte ";CODING;AND;GFX;-;JOHN;BLYTHE",13
002D25  3  49 4E 47 3B  
002D29  3  41 4E 44 3B  
002D3F  3  3B 41 44 44          .byte ";ADDITIONAL;CODE;-;ANDY;JOHNS",13
002D43  3  49 54 49 4F  
002D47  3  4E 41 4C 3B  
002D5D  3  3B 0D                .byte ";",13
002D5F  3  3B 4D 41 4E          .byte ";MANY;THANKS;TO..",13
002D63  3  59 3B 54 48  
002D67  3  41 4E 4B 53  
002D71  3  3B 4A 4F 4E          .byte ";JONATHAN CAULDWELL;FOR;AGD",141
002D75  3  41 54 48 41  
002D79  3  4E 20 43 41  
002D8D  3  50 52 45 53          .byte "PRESS;A;KEY",141
002D91  3  53 3B 41 3B  
002D95  3  4B 45 59 8D  
002D99  3  49 53 3B 4F          .byte "IS;OVER..",141
002D9D  3  56 45 52 2E  
002DA1  3  2E 8D        
002DA3  3               nummsg:
002DA3  3  16                   .byte 22
002DA4  3               chgfx:
002DA4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002DA8  3  00 00 00 00  
002DAC  3  0C 6C 61 80          .byte 12,108,97,128,30,222,222,32
002DB0  3  1E DE DE 20  
002DB4  3  46 06 66 61          .byte 70,6,102,97,0,51,179,48
002DB8  3  00 33 B3 30  
002DBC  3  00 08 41 00          .byte 0,8,65,0,16,0,130,32
002DC0  3  10 00 82 20  
002DC4  3  7E 81 8D 8D          .byte 126,129,141,141,129,161,129,126
002DC8  3  81 A1 81 7E  
002DCC  3  FF 7E BD 5A          .byte 255,126,189,90,165,66,129,0
002DD0  3  A5 42 81 00  
002DD4  3  FF 7E BD 5A          .byte 255,126,189,90,165,66,129,0
002DD8  3  A5 42 81 00  
002DDC  3  FF 7E BD 5A          .byte 255,126,189,90,165,66,129,0
002DE0  3  A5 42 81 00  
002DE4  3  FF 7E BD 5A          .byte 255,126,189,90,165,66,129,0
002DE8  3  A5 42 81 00  
002DEC  3  EF EF AA 45          .byte 239,239,170,69,170,0,239,0
002DF0  3  AA 00 EF 00  
002DF4  3  F8 FE AE 57          .byte 248,254,174,87,171,23,139,87
002DF8  3  AB 17 8B 57  
002DFC  3  4B 57 4B 57          .byte 75,87,75,87,0,87,75,87
002E00  3  00 57 4B 57  
002E04  3  4B 57 4A 45          .byte 75,87,74,69,34,48,15,0
002E08  3  22 30 0F 00  
002E0C  3  7E FF AA 55          .byte 126,255,170,85,3,187,56,66
002E10  3  03 BB 38 42  
002E14  3  B7 B7 00 F8          .byte 183,183,0,248,240,0,192,128
002E18  3  F0 00 C0 80  
002E1C  3  D7 D7 00 1D          .byte 215,215,0,29,13,0,3,1
002E20  3  0D 00 03 01  
002E24  3  0C 19 1E 4C          .byte 12,25,30,76,56,28,14,24
002E28  3  38 1C 0E 18  
002E2C  3  0C 58 30 26          .byte 12,88,48,38,72,68,36,24
002E30  3  48 44 24 18  
002E34  3  EF EF AA 45          .byte 239,239,170,69,170,0,239,0
002E38  3  AA 00 EF 00  
002E3C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002E40  3  00 00 00 00  
002E44  3  B5 00 60 06          .byte 181,0,96,6,0,85,170,255
002E48  3  00 55 AA FF  
002E4C  3  60 60 60 FF          .byte 96,96,96,255,170,0,64,96
002E50  3  AA 00 40 60  
002E54  3  06 06 06 FF          .byte 6,6,6,255,170,0,4,6
002E58  3  AA 00 04 06  
002E5C  3  84 29 10 5A          .byte 132,41,16,90,32,148,1,40
002E60  3  20 94 01 28  
002E64  3  4F 9F 00 4F          .byte 79,159,0,79,0,159,149,79
002E68  3  00 9F 95 4F  
002E6C  3  FA FD 00 FA          .byte 250,253,0,250,0,253,85,250
002E70  3  00 FD 55 FA  
002E74  3  7E 81 8D 8D          .byte 126,129,141,141,129,161,129,126
002E78  3  81 A1 81 7E  
002E7C  3  7E 81 8D 8D          .byte 126,129,141,141,129,161,129,126
002E80  3  81 A1 81 7E  
002E84  3  A8 82 2A A2          .byte 168,130,42,162,136,42,162,42
002E88  3  88 2A A2 2A  
002E8C  3  A8 82 2A A2          .byte 168,130,42,162,136,42,162,42
002E90  3  88 2A A2 2A  
002E94  3  A8 82 2A A2          .byte 168,130,42,162,136,42,162,42
002E98  3  88 2A A2 2A  
002E9C  3  00 00 00 00          .byte 0,0,0,0,66,16,36,255
002EA0  3  42 10 24 FF  
002EA4  3  DB FF 55 AA          .byte 219,255,85,170,255,0,30,12
002EA8  3  FF 00 1E 0C  
002EAC  3  6D FF 55 AA          .byte 109,255,85,170,255,0,120,48
002EB0  3  FF 00 78 30  
002EB4  3  3F 40 B4 A0          .byte 63,64,180,160,128,133,255,0
002EB8  3  80 85 FF 00  
002EBC  3  FC 02 01 05          .byte 252,2,1,5,13,161,255,0
002EC0  3  0D A1 FF 00  
002EC4  3  F0 FC 57 AC          .byte 240,252,87,172,240,44,5,14
002EC8  3  F0 2C 05 0E  
002ECC  3  0D 3F F5 3A          .byte 13,63,245,58,15,26,160,112
002ED0  3  0F 1A A0 70  
002ED4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002ED8  3  00 00 00 00  
002EDC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002EE0  3  00 00 00 00  
002EE4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002EE8  3  00 00 00 00  
002EEC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002EF0  3  00 00 00 00  
002EF4  3  FE 7C B8 50          .byte 254,124,184,80,160,64,128,0
002EF8  3  A0 40 80 00  
002EFC  3  7F 3E 1D 0A          .byte 127,62,29,10,5,2,1,0
002F00  3  05 02 01 00  
002F04  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002F08  3  00 00 00 00  
002F0C  3  00 00 00 00          .byte 0,0,0,0,32,0,0,0
002F10  3  20 00 00 00  
002F14  3  00 00 00 08          .byte 0,0,0,8,0,0,0,0
002F18  3  00 00 00 00  
002F1C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002F20  3  00 00 00 00  
002F24  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002F28  3  00 00 00 00  
002F2C  3  80 40 A0 D0          .byte 128,64,160,208,232,244,250,253
002F30  3  E8 F4 FA FD  
002F34  3  08 00 08 FF          .byte 8,0,8,255,128,0,128,0
002F38  3  80 00 80 00  
002F3C  3  01 02 05 0B          .byte 1,2,5,11,23,47,95,191
002F40  3  17 2F 5F BF  
002F44  3  00 6A 40 00          .byte 0,106,64,0,64,0,66,0
002F48  3  40 00 42 00  
002F4C  3  18 18 24 24          .byte 24,24,36,36,102,126,231,255
002F50  3  66 7E E7 FF  
002F54  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002F58  3  00 00 00 00  
002F5C  3  36 6F DD DD          .byte 54,111,221,221,122,50,1,0
002F60  3  7A 32 01 00  
002F64  3  7C D6 BF FF          .byte 124,214,191,255,235,213,170,124
002F68  3  EB D5 AA 7C  
002F6C  3  38 FE FF DD          .byte 56,254,255,221,243,127,157,98
002F70  3  F3 7F 9D 62  
002F74  3  00 70 EC DE          .byte 0,112,236,222,254,251,223,62
002F78  3  FE FB DF 3E  
002F7C  3  00 0F 3F 6F          .byte 0,15,63,111,254,249,239,112
002F80  3  FE F9 EF 70  
002F84  3  3C 4E BF FF          .byte 60,78,191,255,245,106,52,24
002F88  3  F5 6A 34 18  
002F8C  3  08 08 04 08          .byte 8,8,4,8,16,32,16,8
002F90  3  10 20 10 08  
002F94  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255
002F98  3  FF FF FF FF  
002F9C  3  55 AB 57 AF          .byte 85,171,87,175,95,191,127,255
002FA0  3  5F BF 7F FF  
002FA4  3  01 02 05 0A          .byte 1,2,5,10,21,42,85,170
002FA8  3  15 2A 55 AA  
002FAC  3  3D 68 D0 A8          .byte 61,104,208,168,208,128,192,128
002FB0  3  D0 80 C0 80  
002FB4  3  BC 16 0B 15          .byte 188,22,11,21,11,1,3,1
002FB8  3  0B 01 03 01  
002FBC  3  FF 75 AA 10          .byte 255,117,170,16,66,0,0,0
002FC0  3  42 00 00 00  
002FC4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002FC8  3  00 00 00 00  
002FCC  3  8B C5 E3 F1          .byte 139,197,227,241,185,221,175,151
002FD0  3  B9 DD AF 97  
002FD4  3  FF FA D2 52          .byte 255,250,210,82,64,64,0,0
002FD8  3  40 40 00 00  
002FDC  3  00 00 00 00          .byte 0,0,0,0,0,0,76,255
002FE0  3  00 00 4C FF  
002FE4  3  5A A5 DB 66          .byte 90,165,219,102,189,102,60,90
002FE8  3  BD 66 3C 5A  
002FEC  3  4C F6 FB BB          .byte 76,246,251,187,95,70,128,0
002FF0  3  5F 46 80 00  
002FF4  3  0E 17 2D 2C          .byte 14,23,45,44,44,88,224,0
002FF8  3  2C 58 E0 00  
002FFC  3  66 5B A4 5A          .byte 102,91,164,90,219,25,100,154
003000  3  DB 19 64 9A  
003004  3  01 83 67 5A          .byte 1,131,103,90,38,28,0,0
003008  3  26 1C 00 00  
00300C  3  B0 B0 B0 B0          .byte 176,176,176,176,176,176,176,176
003010  3  B0 B0 B0 B0  
003014  3  0D 15 0D 15          .byte 13,21,13,21,13,21,13,21
003018  3  0D 15 0D 15  
00301C  3               bprop:
00301C  3  00                   .byte 0
00301D  3  02                   .byte 2
00301E  3  02                   .byte 2
00301F  3  02                   .byte 2
003020  3  02                   .byte 2
003021  3  02                   .byte 2
003022  3  02                   .byte 2
003023  3  02                   .byte 2
003024  3  02                   .byte 2
003025  3  00                   .byte 0
003026  3  00                   .byte 0
003027  3  00                   .byte 0
003028  3  00                   .byte 0
003029  3  02                   .byte 2
00302A  3  00                   .byte 0
00302B  3  00                   .byte 0
00302C  3  00                   .byte 0
00302D  3  00                   .byte 0
00302E  3  00                   .byte 0
00302F  3  00                   .byte 0
003030  3  05                   .byte 5
003031  3  03                   .byte 3
003032  3  03                   .byte 3
003033  3  02                   .byte 2
003034  3  02                   .byte 2
003035  3  02                   .byte 2
003036  3  02                   .byte 2
003037  3  02                   .byte 2
003038  3  02                   .byte 2
003039  3  02                   .byte 2
00303A  3  02                   .byte 2
00303B  3  00                   .byte 0
00303C  3  02                   .byte 2
00303D  3  02                   .byte 2
00303E  3  02                   .byte 2
00303F  3  02                   .byte 2
003040  3  02                   .byte 2
003041  3  02                   .byte 2
003042  3  00                   .byte 0
003043  3  00                   .byte 0
003044  3  00                   .byte 0
003045  3  00                   .byte 0
003046  3  00                   .byte 0
003047  3  00                   .byte 0
003048  3  02                   .byte 2
003049  3  00                   .byte 0
00304A  3  00                   .byte 0
00304B  3  00                   .byte 0
00304C  3  02                   .byte 2
00304D  3  00                   .byte 0
00304E  3  02                   .byte 2
00304F  3  00                   .byte 0
003050  3  03                   .byte 3
003051  3  00                   .byte 0
003052  3  00                   .byte 0
003053  3  01                   .byte 1
003054  3  02                   .byte 2
003055  3  01                   .byte 1
003056  3  01                   .byte 1
003057  3  01                   .byte 1
003058  3  02                   .byte 2
003059  3  00                   .byte 0
00305A  3  00                   .byte 0
00305B  3  00                   .byte 0
00305C  3  00                   .byte 0
00305D  3  02                   .byte 2
00305E  3  02                   .byte 2
00305F  3  02                   .byte 2
003060  3  02                   .byte 2
003061  3  02                   .byte 2
003062  3  00                   .byte 0
003063  3  00                   .byte 0
003064  3  01                   .byte 1
003065  3  01                   .byte 1
003066  3  00                   .byte 0
003067  3  00                   .byte 0
003068  3  00                   .byte 0
003069  3  00                   .byte 0
00306A  3  00                   .byte 0
00306B  3               sprgfx:
00306B  3  00 00 0C 00          .byte 0,0,12,0,23,0,7,192,15,224,30,112,61,168,61,36,125,36,126,32,255,252,198,252,187,4,125,250,125,247,60,15
00306F  3  17 00 07 C0  
003073  3  0F E0 1E 70  
00308B  3  00 00 03 00          .byte 0,0,3,0,5,192,1,240,3,248,7,156,15,106,15,73,31,73,31,136,63,255,49,191,46,193,159,126,223,125,207,3
00308F  3  05 C0 01 F0  
003093  3  03 F8 07 9C  
0030AB  3  00 00 00 C0          .byte 0,0,0,192,1,112,0,124,0,254,1,231,131,218,67,210,71,210,7,226,207,255,204,111,75,176,167,223,119,223,243,192
0030AF  3  01 70 00 7C  
0030B3  3  00 FE 01 E7  
0030CB  3  00 00 00 30          .byte 0,0,0,48,0,92,0,31,128,63,192,121,160,246,144,244,145,244,129,248,243,255,243,27,18,236,233,247,221,247,60,240
0030CF  3  00 5C 00 1F  
0030D3  3  80 3F C0 79  
0030EB  3  00 00 1E 00          .byte 0,0,30,0,7,128,7,192,15,224,31,48,62,212,62,144,126,144,127,16,241,252,238,252,95,4,31,120,15,116,0,12
0030EF  3  07 80 07 C0  
0030F3  3  0F E0 1F 30  
00310B  3  00 00 07 80          .byte 0,0,7,128,1,224,1,240,3,248,7,204,15,181,15,164,31,164,31,196,60,127,59,191,23,193,7,222,3,221,0,3
00310F  3  01 E0 01 F0  
003113  3  03 F8 07 CC  
00312B  3  00 00 01 E0          .byte 0,0,1,224,0,120,0,124,0,254,1,243,67,237,3,233,7,233,7,241,207,31,206,239,69,240,129,247,64,247,192,0
00312F  3  00 78 00 7C  
003133  3  00 FE 01 F3  
00314B  3  00 00 00 78          .byte 0,0,0,120,0,30,0,31,128,63,192,124,80,251,64,250,65,250,65,252,243,199,243,187,17,124,224,125,208,61,48,0
00314F  3  00 1E 00 1F  
003153  3  80 3F C0 7C  
00316B  3  10 00 0E 00          .byte 16,0,14,0,7,128,7,192,15,224,31,144,63,104,63,72,127,72,127,136,255,252,252,124,123,132,55,216,7,208,27,192
00316F  3  07 80 07 C0  
003173  3  0F E0 1F 90  
00318B  3  04 00 03 80          .byte 4,0,3,128,1,224,1,240,3,248,7,228,15,218,15,210,31,210,31,226,63,255,63,31,30,225,13,246,1,244,6,240
00318F  3  01 E0 01 F0  
003193  3  03 F8 07 E4  
0031AB  3  01 00 00 E0          .byte 1,0,0,224,0,120,0,124,0,254,1,249,131,246,131,244,135,244,135,248,207,255,207,199,71,184,131,125,0,125,1,188
0031AF  3  00 78 00 7C  
0031B3  3  00 FE 01 F9  
0031CB  3  00 40 00 38          .byte 0,64,0,56,0,30,0,31,128,63,64,126,160,253,32,253,33,253,33,254,243,255,243,241,17,238,96,223,64,31,0,111
0031CF  3  00 1E 00 1F  
0031D3  3  80 3F 40 7E  
0031EB  3  00 00 1E 00          .byte 0,0,30,0,7,128,7,192,15,224,31,48,62,212,62,144,126,144,127,16,255,252,241,252,110,4,95,120,31,116,15,12
0031EF  3  07 80 07 C0  
0031F3  3  0F E0 1F 30  
00320B  3  00 00 07 80          .byte 0,0,7,128,1,224,1,240,3,248,7,204,15,181,15,164,31,164,31,196,63,255,60,127,27,129,23,222,7,221,3,195
00320F  3  01 E0 01 F0  
003213  3  03 F8 07 CC  
00322B  3  00 00 01 E0          .byte 0,0,1,224,0,120,0,124,0,254,1,243,67,237,3,233,7,233,7,241,207,255,207,31,70,224,133,247,65,247,192,240
00322F  3  00 78 00 7C  
003233  3  00 FE 01 F3  
00324B  3  00 00 00 78          .byte 0,0,0,120,0,30,0,31,128,63,192,124,80,251,64,250,65,250,65,252,243,255,243,199,17,184,225,125,208,125,48,60
00324F  3  00 1E 00 1F  
003253  3  80 3F C0 7C  
00326B  3  00 00 00 30          .byte 0,0,0,48,0,232,3,224,7,240,14,120,21,188,36,188,36,190,4,126,63,255,63,99,32,221,95,190,239,190,240,60
00326F  3  00 E8 03 E0  
003273  3  07 F0 0E 78  
00328B  3  00 00 00 0C          .byte 0,0,0,12,0,58,0,248,1,252,3,158,5,111,9,47,137,47,129,31,207,255,207,216,72,55,151,239,187,239,60,15
00328F  3  00 3A 00 F8  
003293  3  01 FC 03 9E  
0032AB  3  00 00 00 03          .byte 0,0,0,3,128,14,0,62,0,127,128,231,193,91,194,75,226,75,224,71,243,255,51,246,210,13,229,251,238,251,207,3
0032AF  3  80 0E 00 3E  
0032B3  3  00 7F 80 E7  
0032CB  3  00 00 C0 00          .byte 0,0,192,0,160,3,128,15,192,31,224,57,240,86,240,146,248,146,248,17,252,255,140,253,116,131,249,126,251,190,243,192
0032CF  3  A0 03 80 0F  
0032D3  3  C0 1F E0 39  
0032EB  3  00 00 00 78          .byte 0,0,0,120,1,224,3,224,7,240,12,248,43,124,9,124,9,126,8,254,63,143,63,119,32,250,30,248,46,240,48,0
0032EF  3  01 E0 03 E0  
0032F3  3  07 F0 0C F8  
00330B  3  00 00 00 1E          .byte 0,0,0,30,0,120,0,248,1,252,3,62,10,223,2,95,130,95,130,63,207,227,207,221,136,62,7,190,11,188,12,0
00330F  3  00 78 00 F8  
003313  3  01 FC 03 3E  
00332B  3  00 00 80 07          .byte 0,0,128,7,0,30,0,62,0,127,128,207,194,183,192,151,224,151,224,143,243,248,115,247,162,15,129,239,2,239,3,0
00332F  3  00 1E 00 3E  
003333  3  00 7F 80 CF  
00334B  3  00 00 E0 01          .byte 0,0,224,1,128,7,128,15,192,31,224,51,240,173,240,37,248,37,248,35,60,254,220,253,232,131,224,123,192,187,0,192
00334F  3  80 07 80 0F  
003353  3  C0 1F E0 33  
00336B  3  00 08 00 70          .byte 0,8,0,112,1,224,3,224,7,240,9,248,22,252,18,252,18,254,17,254,63,255,62,63,33,222,27,236,11,224,3,216
00336F  3  01 E0 03 E0  
003373  3  07 F0 09 F8  
00338B  3  00 02 00 1C          .byte 0,2,0,28,0,120,0,248,1,252,2,126,5,191,4,191,132,191,132,127,207,255,207,143,136,119,6,251,2,248,0,246
00338F  3  00 78 00 F8  
003393  3  01 FC 02 7E  
0033AB  3  80 00 00 07          .byte 128,0,0,7,0,30,0,62,0,127,128,159,193,111,193,47,225,47,225,31,243,255,243,227,226,29,193,190,0,190,128,61
0033AF  3  00 1E 00 3E  
0033B3  3  00 7F 80 9F  
0033CB  3  20 00 C0 01          .byte 32,0,192,1,128,7,128,15,192,31,224,39,240,91,240,75,248,75,248,71,252,255,252,248,120,135,176,111,128,47,96,15
0033CF  3  80 07 80 0F  
0033D3  3  C0 1F E0 27  
0033EB  3  00 00 00 78          .byte 0,0,0,120,1,224,3,224,7,240,12,248,43,124,9,124,9,126,8,254,63,255,63,143,32,118,30,250,46,248,48,240
0033EF  3  01 E0 03 E0  
0033F3  3  07 F0 0C F8  
00340B  3  00 00 00 1E          .byte 0,0,0,30,0,120,0,248,1,252,3,62,10,223,2,95,130,95,130,63,207,255,207,227,136,29,135,190,11,190,12,60
00340F  3  00 78 00 F8  
003413  3  01 FC 03 3E  
00342B  3  00 00 80 07          .byte 0,0,128,7,0,30,0,62,0,127,128,207,194,183,192,151,224,151,224,143,243,255,243,248,98,7,161,239,130,239,3,15
00342F  3  00 1E 00 3E  
003433  3  00 7F 80 CF  
00344B  3  00 00 E0 01          .byte 0,0,224,1,128,7,128,15,192,31,224,51,240,173,240,37,248,37,248,35,252,255,60,254,216,129,232,123,224,187,192,195
00344F  3  80 07 80 0F  
003453  3  C0 1F E0 33  
00346B  3  03 C0 05 A0          .byte 3,192,5,160,14,112,14,240,31,248,31,248,63,252,63,252,63,252,127,254,127,235,23,87,106,173,245,91,247,224,240,0
00346F  3  0E 70 0E F0  
003473  3  1F F8 1F F8  
00348B  3  00 F0 01 68          .byte 0,240,1,104,3,156,3,188,7,254,7,254,15,255,15,255,15,255,159,255,223,250,197,213,90,171,253,86,61,248,60,0
00348F  3  03 9C 03 BC  
003493  3  07 FE 07 FE  
0034AB  3  00 3C 00 5A          .byte 0,60,0,90,0,231,0,239,129,255,129,255,195,255,195,255,195,255,231,255,183,254,113,117,214,170,191,85,15,126,15,0
0034AF  3  00 E7 00 EF  
0034B3  3  81 FF 81 FF  
0034CB  3  00 0F 80 16          .byte 0,15,128,22,192,57,192,59,224,127,224,127,240,255,240,255,240,255,249,255,173,255,92,93,181,170,111,213,131,223,3,192
0034CF  3  C0 39 C0 3B  
0034D3  3  E0 7F E0 7F  
0034EB  3  03 C0 05 A0          .byte 3,192,5,160,13,112,12,240,31,248,31,248,63,252,63,252,63,252,127,254,111,238,151,215,234,173,245,91,103,231,0,0
0034EF  3  0D 70 0C F0  
0034F3  3  1F F8 1F F8  
00350B  3  00 F0 01 68          .byte 0,240,1,104,3,92,3,60,7,254,7,254,15,255,15,255,15,255,159,255,155,251,229,245,122,171,253,86,217,249,0,0
00350F  3  03 5C 03 3C  
003513  3  07 FE 07 FE  
00352B  3  00 3C 00 5A          .byte 0,60,0,90,0,215,0,207,129,255,129,255,195,255,195,255,195,255,231,255,230,254,121,125,222,170,191,85,118,126,0,0
00352F  3  00 D7 00 CF  
003533  3  81 FF 81 FF  
00354B  3  00 0F 80 16          .byte 0,15,128,22,192,53,192,51,224,127,224,127,240,255,240,255,240,255,249,255,185,191,94,95,183,170,111,213,157,159,0,0
00354F  3  C0 35 C0 33  
003553  3  E0 7F E0 7F  
00356B  3  03 C0 05 A0          .byte 3,192,5,160,14,112,14,240,31,248,31,248,63,252,63,252,63,252,127,254,239,254,213,216,170,166,213,79,7,239,0,15
00356F  3  0E 70 0E F0  
003573  3  1F F8 1F F8  
00358B  3  00 F0 01 68          .byte 0,240,1,104,3,156,3,188,7,254,7,254,15,255,15,255,15,255,159,255,187,255,53,118,170,169,245,83,193,251,192,3
00358F  3  03 9C 03 BC  
003593  3  07 FE 07 FE  
0035AB  3  00 3C 00 5A          .byte 0,60,0,90,0,231,0,239,129,255,129,255,195,255,195,255,195,255,231,255,238,255,141,93,106,170,253,84,240,126,240,0
0035AF  3  00 E7 00 EF  
0035B3  3  81 FF 81 FF  
0035CB  3  00 0F 80 16          .byte 0,15,128,22,192,57,192,59,224,127,224,127,240,255,240,255,240,255,249,255,251,191,99,87,154,170,63,85,188,31,60,0
0035CF  3  C0 39 C0 3B  
0035D3  3  E0 7F E0 7F  
0035EB  3  03 C0 05 A0          .byte 3,192,5,160,14,176,15,48,31,248,31,248,63,252,63,252,63,252,127,254,111,238,151,215,234,173,245,91,103,231,0,0
0035EF  3  0E B0 0F 30  
0035F3  3  1F F8 1F F8  
00360B  3  00 F0 01 68          .byte 0,240,1,104,3,172,3,204,7,254,7,254,15,255,15,255,15,255,159,255,155,251,229,245,122,171,253,86,217,249,0,0
00360F  3  03 AC 03 CC  
003613  3  07 FE 07 FE  
00362B  3  00 3C 00 5A          .byte 0,60,0,90,0,235,0,243,129,255,129,255,195,255,195,255,195,255,231,255,230,254,121,125,222,170,191,85,118,126,0,0
00362F  3  00 EB 00 F3  
003633  3  81 FF 81 FF  
00364B  3  00 0F 80 16          .byte 0,15,128,22,192,58,192,60,224,127,224,127,240,255,240,255,240,255,249,255,185,191,94,95,183,170,111,213,157,159,0,0
00364F  3  C0 3A C0 3C  
003653  3  E0 7F E0 7F  
00366B  3  66 66 FF FF          .byte 102,102,255,255,128,1,179,205,189,189,191,253,183,237,179,205,179,205,179,205,191,253,191,253,166,101,128,1,255,255,102,102
00366F  3  80 01 B3 CD  
003673  3  BD BD BF FD  
00368B  3  99 99 FF FF          .byte 153,153,255,255,96,0,108,243,111,111,111,255,109,251,108,243,108,243,108,243,111,255,111,255,105,153,96,0,255,255,153,153
00368F  3  60 00 6C F3  
003693  3  6F 6F 6F FF  
0036AB  3  66 66 FF FF          .byte 102,102,255,255,24,0,219,60,219,219,219,255,219,126,219,60,219,60,219,60,219,255,219,255,90,102,24,0,255,255,102,102
0036AF  3  18 00 DB 3C  
0036B3  3  DB DB DB FF  
0036CB  3  99 99 FF FF          .byte 153,153,255,255,6,0,54,207,246,246,246,255,182,223,54,207,54,207,54,207,246,255,246,255,150,153,6,0,255,255,153,153
0036CF  3  06 00 36 CF  
0036D3  3  F6 F6 F6 FF  
0036EB  3  66 66 FF FF          .byte 102,102,255,255,128,1,191,253,179,205,189,189,191,253,183,237,179,205,179,205,191,253,166,101,160,5,128,1,255,255,102,102
0036EF  3  80 01 BF FD  
0036F3  3  B3 CD BD BD  
00370B  3  99 99 FF FF          .byte 153,153,255,255,96,0,111,255,108,243,111,111,111,255,109,251,108,243,108,243,111,255,105,153,104,1,96,0,255,255,153,153
00370F  3  60 00 6F FF  
003713  3  6C F3 6F 6F  
00372B  3  66 66 FF FF          .byte 102,102,255,255,24,0,219,255,219,60,219,219,219,255,219,126,219,60,219,60,219,255,90,102,90,0,24,0,255,255,102,102
00372F  3  18 00 DB FF  
003733  3  DB 3C DB DB  
00374B  3  99 99 FF FF          .byte 153,153,255,255,6,0,246,255,54,207,246,246,246,255,182,223,54,207,54,207,246,255,150,153,22,128,6,0,255,255,153,153
00374F  3  06 00 F6 FF  
003753  3  36 CF F6 F6  
00376B  3  66 66 FF FF          .byte 102,102,255,255,128,1,191,253,183,237,187,221,189,189,167,229,187,221,191,253,182,109,160,5,160,5,128,1,255,255,102,102
00376F  3  80 01 BF FD  
003773  3  B7 ED BB DD  
00378B  3  99 99 FF FF          .byte 153,153,255,255,96,0,111,255,109,251,110,247,111,111,105,249,110,247,111,255,109,155,104,1,104,1,96,0,255,255,153,153
00378F  3  60 00 6F FF  
003793  3  6D FB 6E F7  
0037AB  3  66 66 FF FF          .byte 102,102,255,255,24,0,219,255,219,126,219,189,219,219,90,126,219,189,219,255,219,102,90,0,90,0,24,0,255,255,102,102
0037AF  3  18 00 DB FF  
0037B3  3  DB 7E DB BD  
0037CB  3  99 99 FF FF          .byte 153,153,255,255,6,0,246,255,182,223,118,239,246,246,150,159,118,239,246,255,182,217,22,128,22,128,6,0,255,255,153,153
0037CF  3  06 00 F6 FF  
0037D3  3  B6 DF 76 EF  
0037EB  3  30 00 30 00          .byte 48,0,48,0,31,251,56,31,55,236,47,244,47,244,47,52,46,84,46,20,47,52,47,244,240,12,223,248,0,12,0,12
0037EF  3  1F FB 38 1F  
0037F3  3  37 EC 2F F4  
00380B  3  0C 00 0C 00          .byte 12,0,12,0,199,254,206,7,13,251,11,253,11,253,11,205,11,149,11,133,11,205,11,253,60,3,55,254,0,3,0,3
00380F  3  C7 FE CE 07  
003813  3  0D FB 0B FD  
00382B  3  03 00 03 00          .byte 3,0,3,0,177,255,243,129,195,126,66,255,66,255,66,243,66,229,66,225,66,243,66,255,207,0,141,255,192,0,192,0
00382F  3  B1 FF F3 81  
003833  3  C3 7E 42 FF  
00384B  3  00 C0 00 C0          .byte 0,192,0,192,236,127,124,224,176,223,208,191,208,191,208,188,80,185,80,184,208,188,208,191,51,192,227,127,48,0,48,0
00384F  3  EC 7F 7C E0  
003853  3  B0 DF D0 BF  
00386B  3  03 00 03 00          .byte 3,0,3,0,31,248,56,28,55,236,47,244,47,247,46,119,236,180,236,52,46,116,47,244,48,12,31,248,0,192,0,192
00386F  3  1F F8 38 1C  
003873  3  37 EC 2F F4  
00388B  3  00 C0 00 C0          .byte 0,192,0,192,7,254,14,7,13,251,11,253,203,253,203,157,59,45,59,13,11,157,11,253,12,3,7,254,0,48,0,48
00388F  3  07 FE 0E 07  
003893  3  0D FB 0B FD  
0038AB  3  00 30 00 30          .byte 0,48,0,48,129,255,195,129,195,126,66,255,114,255,114,231,78,203,78,195,66,231,66,255,195,0,129,255,0,12,0,12
0038AF  3  81 FF C3 81  
0038B3  3  C3 7E 42 FF  
0038CB  3  00 0C 00 0C          .byte 0,12,0,12,224,127,112,224,176,223,208,191,220,191,220,185,211,178,211,176,208,185,208,191,48,192,224,127,0,3,0,3
0038CF  3  E0 7F 70 E0  
0038D3  3  B0 DF D0 BF  
0038EB  3  00 30 00 30          .byte 0,48,0,48,31,248,56,28,247,236,239,244,47,244,44,244,41,116,40,116,44,247,47,247,48,12,31,248,12,0,12,0
0038EF  3  1F F8 38 1C  
0038F3  3  F7 EC EF F4  
00390B  3  00 0C 00 0C          .byte 0,12,0,12,7,254,14,7,61,251,59,253,11,253,11,61,10,93,10,29,203,61,203,253,12,3,7,254,3,0,3,0
00390F  3  07 FE 0E 07  
003913  3  3D FB 3B FD  
00392B  3  00 03 00 03          .byte 0,3,0,3,129,255,195,129,207,126,78,255,66,255,66,207,66,151,66,135,114,207,114,255,195,0,129,255,0,192,0,192
00392F  3  81 FF C3 81  
003933  3  CF 7E 4E FF  
00394B  3  C0 00 C0 00          .byte 192,0,192,0,224,127,112,224,179,223,211,191,208,191,208,179,208,165,208,161,220,179,220,191,48,192,224,127,0,48,0,48
00394F  3  E0 7F 70 E0  
003953  3  B3 DF D3 BF  
00396B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,255,255
00396F  3  00 00 00 00  
003973  3  00 00 00 00  
00398B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,255,255
00398F  3  00 00 00 00  
003993  3  00 00 00 00  
0039AB  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,255,255
0039AF  3  00 00 00 00  
0039B3  3  00 00 00 00  
0039CB  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,255,255
0039CF  3  00 00 00 00  
0039D3  3  00 00 00 00  
0039EB  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,170,170,255,255
0039EF  3  00 00 00 00  
0039F3  3  00 00 00 00  
003A0B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,170,170,255,255
003A0F  3  00 00 00 00  
003A13  3  00 00 00 00  
003A2B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,170,170,255,255
003A2F  3  00 00 00 00  
003A33  3  00 00 00 00  
003A4B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,170,170,255,255
003A4F  3  00 00 00 00  
003A53  3  00 00 00 00  
003A6B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,0,0,0,0,0,0,0,0,0,0,85,85,255,255
003A6F  3  00 00 00 00  
003A73  3  00 00 00 00  
003A8B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,0,0,0,0,0,0,0,0,0,0,85,85,255,255
003A8F  3  00 00 00 00  
003A93  3  00 00 00 00  
003AAB  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,0,0,0,0,0,0,0,0,0,0,85,85,255,255
003AAF  3  00 00 00 00  
003AB3  3  00 00 00 00  
003ACB  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,0,0,0,0,0,0,0,0,0,0,85,85,255,255
003ACF  3  00 00 00 00  
003AD3  3  00 00 00 00  
003AEB  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,255,255
003AEF  3  00 00 00 00  
003AF3  3  00 00 55 55  
003B0B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,255,255
003B0F  3  00 00 00 00  
003B13  3  00 00 55 55  
003B2B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,255,255
003B2F  3  00 00 00 00  
003B33  3  00 00 55 55  
003B4B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,255,255
003B4F  3  00 00 00 00  
003B53  3  00 00 55 55  
003B6B  3  00 00 38 1C          .byte 0,0,56,28,103,230,92,58,91,218,58,92,58,92,60,60,63,252,56,28,59,220,91,218,92,58,103,230,56,28,0,0
003B6F  3  67 E6 5C 3A  
003B73  3  5B DA 3A 5C  
003B8B  3  00 00 0E 07          .byte 0,0,14,7,153,249,151,14,150,246,14,151,14,151,15,15,15,255,14,7,14,247,150,246,151,14,153,249,14,7,0,0
003B8F  3  99 F9 97 0E  
003B93  3  96 F6 0E 97  
003BAB  3  00 00 C3 81          .byte 0,0,195,129,102,126,165,195,165,189,195,165,195,165,195,195,195,255,195,129,195,189,165,189,165,195,102,126,195,129,0,0
003BAF  3  66 7E A5 C3  
003BB3  3  A5 BD C3 A5  
003BCB  3  00 00 70 E0          .byte 0,0,112,224,153,159,233,112,105,111,112,233,112,233,240,240,240,255,112,224,112,239,105,111,233,112,153,159,112,224,0,0
003BCF  3  99 9F E9 70  
003BD3  3  69 6F 70 E9  
003BEB  3  06 00 18 00          .byte 6,0,24,0,7,224,28,58,27,218,59,29,59,29,60,60,63,252,191,252,184,28,91,216,92,56,7,224,0,24,0,96
003BEF  3  07 E0 1C 3A  
003BF3  3  1B DA 3B 1D  
003C0B  3  01 80 06 00          .byte 1,128,6,0,1,248,135,14,134,246,78,199,78,199,15,15,15,255,47,255,46,7,22,246,23,14,1,248,0,6,0,24
003C0F  3  01 F8 87 0E  
003C13  3  86 F6 4E C7  
003C2B  3  00 60 01 80          .byte 0,96,1,128,0,126,161,195,161,189,211,177,211,177,195,195,195,255,203,255,203,129,133,189,133,195,0,126,128,1,0,6
003C2F  3  00 7E A1 C3  
003C33  3  A1 BD D3 B1  
003C4B  3  00 18 00 60          .byte 0,24,0,96,128,31,232,112,104,111,116,236,116,236,240,240,240,255,242,255,114,224,97,111,225,112,128,31,96,0,128,1
003C4F  3  80 1F E8 70  
003C53  3  68 6F 74 EC  
003C6B  3  01 E0 00 00          .byte 1,224,0,0,7,224,28,56,27,216,184,220,184,220,188,61,191,253,63,253,59,221,28,56,31,248,7,224,0,0,7,128
003C6F  3  07 E0 1C 38  
003C73  3  1B D8 B8 DC  
003C8B  3  00 78 00 00          .byte 0,120,0,0,1,248,7,14,6,246,46,55,46,55,111,15,111,255,79,255,78,247,7,14,7,254,1,248,0,0,1,224
003C8F  3  01 F8 07 0E  
003C93  3  06 F6 2E 37  
003CAB  3  00 1E 00 00          .byte 0,30,0,0,0,126,129,195,129,189,203,141,203,141,219,195,219,255,211,255,211,189,129,195,129,255,0,126,0,0,0,120
003CAF  3  00 7E 81 C3  
003CB3  3  81 BD CB 8D  
003CCB  3  80 07 00 00          .byte 128,7,0,0,128,31,224,112,96,111,114,227,114,227,246,240,246,255,244,255,116,239,224,112,224,127,128,31,0,0,0,30
003CCF  3  80 1F E0 70  
003CD3  3  60 6F 72 E3  
003CEB  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255
003CEF  3  00 00 00 00  
003CF3  3  00 00 00 00  
003D0B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255
003D0F  3  00 00 00 00  
003D13  3  00 00 00 00  
003D2B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255
003D2F  3  00 00 00 00  
003D33  3  00 00 00 00  
003D4B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255
003D4F  3  00 00 00 00  
003D53  3  00 00 00 00  
003D6B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,222,255,255
003D6F  3  00 00 00 00  
003D73  3  00 00 00 00  
003D8B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,159,247,255,255
003D8F  3  00 00 00 00  
003D93  3  00 00 00 00  
003DAB  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,253,255,255
003DAF  3  00 00 00 00  
003DB3  3  00 00 00 00  
003DCB  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,255,255,255
003DCF  3  00 00 00 00  
003DD3  3  00 00 00 00  
003DEB  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,128,95,222,255,255
003DEF  3  00 00 00 00  
003DF3  3  00 00 00 00  
003E0B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,224,151,247,255,255
003E0F  3  00 00 00 00  
003E13  3  00 00 00 00  
003E2B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,248,229,253,255,255
003E2F  3  00 00 00 00  
003E33  3  00 00 00 00  
003E4B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,121,127,255,255
003E4F  3  00 00 00 00  
003E53  3  00 00 00 00  
003E6B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,128,79,204,127,222,255,255
003E6F  3  00 00 00 00  
003E73  3  00 00 00 00  
003E8B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,224,19,243,159,247,255,255
003E8F  3  00 00 00 00  
003E93  3  00 00 00 00  
003EAB  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,248,196,252,231,253,255,255
003EAF  3  00 00 00 00  
003EB3  3  00 00 00 00  
003ECB  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,49,63,121,255,255,255
003ECF  3  00 00 00 00  
003ED3  3  00 00 00 00  
003EEB  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,63,128,79,204,79,214,63,158,255,255
003EEF  3  00 00 00 00  
003EF3  3  00 00 00 00  
003F0B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,128,15,224,19,243,147,245,143,231,255,255
003F0F  3  00 00 00 00  
003F13  3  00 00 00 00  
003F2B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,3,248,196,252,100,253,227,249,255,255
003F2F  3  00 00 00 00  
003F33  3  00 00 00 00  
003F4B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,254,49,63,89,63,120,254,255,255
003F4F  3  00 00 00 00  
003F53  3  00 00 00 00  
003F6B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,128,17,128,145,32,72,64,72,204,109,214,127,222,63,140,255,255
003F6F  3  00 00 00 00  
003F73  3  00 00 00 00  
003F8B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,32,4,96,36,72,18,16,18,51,155,117,159,247,15,227,255,255
003F8F  3  00 00 00 00  
003F93  3  00 00 00 00  
003FAB  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,8,1,24,9,18,4,132,196,140,102,221,231,253,195,248,255,255
003FAF  3  00 00 00 00  
003FB3  3  00 00 00 00  
003FCB  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,70,130,68,1,33,49,35,89,183,121,255,48,254,255,255
003FCF  3  00 00 00 00  
003FD3  3  00 00 00 00  
003FEB  3  00 00 00 00          .byte 0,0,0,0,128,0,0,0,0,64,0,64,0,0,0,12,0,4,0,33,0,17,0,19,128,90,113,158,63,140,255,255
003FEF  3  80 00 00 00  
003FF3  3  00 40 00 40  
00400B  3  00 00 00 00          .byte 0,0,0,0,32,0,0,0,0,16,0,16,0,0,0,3,0,1,64,8,64,4,192,4,160,22,156,103,15,227,255,255
00400F  3  20 00 00 00  
004013  3  00 10 00 10  
00402B  3  00 00 00 00          .byte 0,0,0,0,8,0,0,0,0,4,0,4,0,0,192,0,64,0,16,2,16,1,48,1,168,5,231,25,195,248,255,255
00402F  3  08 00 00 00  
004033  3  00 04 00 04  
00404B  3  00 00 00 00          .byte 0,0,0,0,2,0,0,0,0,1,0,1,0,0,48,0,16,0,132,0,68,0,76,0,106,1,121,198,48,254,255,255
00404F  3  02 00 00 00  
004053  3  00 01 00 01  
00406B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,4,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,19,127,222,255,255
00406F  3  00 00 00 00  
004073  3  00 04 00 08  
00408B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,4,159,247,255,255
00408F  3  00 00 00 00  
004093  3  00 01 00 02  
0040AB  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,64,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,48,1,231,253,255,255
0040AF  3  00 00 00 00  
0040B3  3  40 00 80 00  
0040CB  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,16,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,76,0,121,255,255,255
0040CF  3  00 00 00 00  
0040D3  3  10 00 20 00  
0040EB  3  7F FE C0 03          .byte 127,254,192,3,160,153,176,77,152,37,172,1,150,65,171,33,181,145,186,201,189,101,158,177,175,89,183,173,192,3,127,254
0040EF  3  A0 99 B0 4D  
0040F3  3  98 25 AC 01  
00410B  3  9F FF F0 00          .byte 159,255,240,0,104,38,108,19,102,9,107,0,101,144,106,200,109,100,110,178,111,89,103,172,107,214,109,235,240,0,159,255
00410F  3  68 26 6C 13  
004113  3  66 09 6B 00  
00412B  3  E7 FF 3C 00          .byte 231,255,60,0,154,9,219,4,89,130,26,192,25,100,26,178,27,89,155,172,91,214,25,235,154,245,219,122,60,0,231,255
00412F  3  9A 09 DB 04  
004133  3  59 82 1A C0  
00414B  3  F9 FF 0F 00          .byte 249,255,15,0,102,130,54,193,150,96,6,176,6,89,134,172,70,214,38,235,150,245,198,122,102,189,182,222,15,0,249,255
00414F  3  66 82 36 C1  
004153  3  96 60 06 B0  
00416B  3  00 00 00 00          .byte 0,0,0,0,0,8,0,0,0,8,0,4,0,8,0,4,0,2,0,5,0,2,0,33,0,66,0,36,0,66,0,36
00416F  3  00 08 00 00  
004173  3  00 08 00 04  
00418B  3  00 00 00 00          .byte 0,0,0,0,0,2,0,0,0,2,0,1,0,2,0,1,128,0,64,1,128,0,64,8,128,16,0,9,128,16,0,9
00418F  3  00 02 00 00  
004193  3  00 02 00 01  
0041AB  3  00 00 00 00          .byte 0,0,0,0,128,0,0,0,128,0,64,0,128,0,64,0,32,0,80,0,32,0,16,2,32,4,64,2,32,4,64,2
0041AF  3  80 00 00 00  
0041B3  3  80 00 40 00  
0041CB  3  00 00 00 00          .byte 0,0,0,0,32,0,0,0,32,0,16,0,32,0,16,0,8,0,20,0,8,0,132,0,8,1,144,0,8,1,144,0
0041CF  3  20 00 00 00  
0041D3  3  20 00 10 00  
0041EB  3  00 00 00 00          .byte 0,0,0,0,0,2,0,0,0,2,0,4,0,2,0,4,0,10,0,84,0,8,0,84,0,136,0,68,0,34,0,68
0041EF  3  00 02 00 00  
0041F3  3  00 02 00 04  
00420B  3  00 00 00 00          .byte 0,0,0,0,128,0,0,0,128,0,0,1,128,0,0,1,128,2,0,21,0,2,0,21,0,34,0,17,128,8,0,17
00420F  3  80 00 00 00  
004213  3  80 00 00 01  
00422B  3  00 00 00 00          .byte 0,0,0,0,32,0,0,0,32,0,64,0,32,0,64,0,160,0,64,5,128,0,64,5,128,8,64,4,32,2,64,4
00422F  3  20 00 00 00  
004233  3  20 00 40 00  
00424B  3  00 00 00 00          .byte 0,0,0,0,8,0,0,0,8,0,16,0,8,0,16,0,40,0,80,1,32,0,80,1,32,2,16,1,136,0,16,1
00424F  3  08 00 00 00  
004253  3  08 00 10 00  
00426B  3  03 80 03 80          .byte 3,128,3,128,1,128,3,128,3,128,3,128,3,0,3,0,3,128,3,128,3,128,3,128,1,128,3,128,3,128,3,128
00426F  3  01 80 03 80  
004273  3  03 80 03 80  
00428B  3  00 E0 00 E0          .byte 0,224,0,224,0,96,0,224,0,224,0,224,0,192,0,192,0,224,0,224,0,224,0,224,0,96,0,224,0,224,0,224
00428F  3  00 60 00 E0  
004293  3  00 E0 00 E0  
0042AB  3  00 38 00 38          .byte 0,56,0,56,0,24,0,56,0,56,0,56,0,48,0,48,0,56,0,56,0,56,0,56,0,24,0,56,0,56,0,56
0042AF  3  00 18 00 38  
0042B3  3  00 38 00 38  
0042CB  3  00 0E 00 0E          .byte 0,14,0,14,0,6,0,14,0,14,0,14,0,12,0,12,0,14,0,14,0,14,0,14,0,6,0,14,0,14,0,14
0042CF  3  00 06 00 0E  
0042D3  3  00 0E 00 0E  
0042EB  3  07 E0 07 E0          .byte 7,224,7,224,7,224,3,224,3,224,7,224,7,224,7,224,7,224,7,224,7,224,7,224,7,224,7,192,7,224,7,224
0042EF  3  07 E0 03 E0  
0042F3  3  03 E0 07 E0  
00430B  3  01 F8 01 F8          .byte 1,248,1,248,1,248,0,248,0,248,1,248,1,248,1,248,1,248,1,248,1,248,1,248,1,248,1,240,1,248,1,248
00430F  3  01 F8 00 F8  
004313  3  00 F8 01 F8  
00432B  3  00 7E 00 7E          .byte 0,126,0,126,0,126,0,62,0,62,0,126,0,126,0,126,0,126,0,126,0,126,0,126,0,126,0,124,0,126,0,126
00432F  3  00 7E 00 3E  
004333  3  00 3E 00 7E  
00434B  3  80 1F 80 1F          .byte 128,31,128,31,128,31,128,15,128,15,128,31,128,31,128,31,128,31,128,31,128,31,128,31,128,31,0,31,128,31,128,31
00434F  3  80 1F 80 0F  
004353  3  80 0F 80 1F  
00436B  3  1F F8 1F F0          .byte 31,248,31,240,31,240,31,248,31,248,15,248,31,248,31,248,31,248,31,240,31,248,31,248,15,248,15,248,31,248,31,248
00436F  3  1F F0 1F F8  
004373  3  1F F8 0F F8  
00438B  3  07 FE 07 FC          .byte 7,254,7,252,7,252,7,254,7,254,3,254,7,254,7,254,7,254,7,252,7,254,7,254,3,254,3,254,7,254,7,254
00438F  3  07 FC 07 FE  
004393  3  07 FE 03 FE  
0043AB  3  81 FF 01 FF          .byte 129,255,1,255,1,255,129,255,129,255,128,255,129,255,129,255,129,255,1,255,129,255,129,255,128,255,128,255,129,255,129,255
0043AF  3  01 FF 81 FF  
0043B3  3  81 FF 80 FF  
0043CB  3  E0 7F C0 7F          .byte 224,127,192,127,192,127,224,127,224,127,224,63,224,127,224,127,224,127,192,127,224,127,224,127,224,63,224,63,224,127,224,127
0043CF  3  C0 7F E0 7F  
0043D3  3  E0 7F E0 3F  
0043EB  3               frmlst:
0043EB  3  00 04                .byte 0,4
0043ED  3  04 04                .byte 4,4
0043EF  3  08 04                .byte 8,4
0043F1  3  0C 03                .byte 12,3
0043F3  3  0F 03                .byte 15,3
0043F5  3  12 04                .byte 18,4
0043F7  3  16 03                .byte 22,3
0043F9  3  19 08                .byte 25,8
0043FB  3  21 01                .byte 33,1
0043FD  3  22 02                .byte 34,2
0043FF  3  24 03 27 00          .byte 36,3,39,0
004403  3               scdat:
004403  3  A9 01 D7 01          .word 425,471,436,372,323,381,312,298,276,343,255,305,230,299,292,268,350,320,349,203,222,352,366,303,202,225
004407  3  B4 01 74 01  
00440B  3  43 01 7D 01  
004437  3  EC 00 7E 01          .word 236,382
00443B  3  02 02 01 01          .byte 2,2,1,1,1,3,1,3,3,2,255,1,4,2,2,1,1,6,2,1,1,1,2,1,3,3,2,1,14,16,16,15,1
00443F  3  01 03 01 03  
004443  3  03 02 FF 01  
00445C  3  FF 03 04 01          .byte 255,3,4,1,14,16,16,0,16,0,16,255,0,5,15,1,2,8,3,2,0,17,16,0,15,2,3,1,14,16,0,17,16
004460  3  0E 10 10 00  
004464  3  10 00 10 FF  
00447D  3  4A 10 00 4B          .byte 74,16,0,75,255,0,6,16,15,1,3,0,0,0,17,0,0,15,1,14,0,75,0,0,16,0,17,255,0,7,74,16,76
004481  3  FF 00 06 10  
004485  3  0F 01 03 00  
00449E  3  02 02 FF 00          .byte 2,2,255,0,7,16,255,0,5,17,255,0,10,17,0,1,3,255,13,4,0,0,0,16,76,255,0,17,1,1,1,14,255,0,4
0044A2  3  07 10 FF 00  
0044A6  3  05 11 FF 00  
0044C1  3  4A 10 FF 00          .byte 74,16,255,0,18,2,1,1,255,0,6,17,255,0,8,13,13,255,0,7,4,24,25,1,255,0,8,13,13,13,21,22,0,0
0044C5  3  12 02 01 01  
0044C9  3  FF 00 06 11  
0044E3  3  02 01 10 FF          .byte 2,1,16,255,0,7,28,28,1,255,0,8,17,0,0,21,22,0,0,1,3,2,0,0,0,19,19,0,0,28,28,1,13,13,13
0044E7  3  00 07 1C 1C  
0044EB  3  01 FF 00 08  
004506  3  FF 00 08 15          .byte 255,0,8,21,22,0,0,1,3,1,0,0,0,13,13,13,4,24,25,3,8,1,1,13,13,255,0,6,21,22,0,0,2
00450A  3  16 00 00 01  
00450E  3  03 01 00 00  
004527  3  03 01 FF 00          .byte 3,1,255,0,5,16,15,7,3,2,14,17,16,255,0,8,21,22,0,13,1,3,1,255,0,5,17,0,15,1,1,0,0
00452B  3  05 10 0F 07  
00452F  3  03 02 0E 11  
004548  3  11 FF 00 05          .byte 17,255,0,5,255,13,6,2,1,3,2,255,0,8,1,1,255,0,8,15,1,2,5,1,2,1,3,1,14,255,0,8,1
00454C  3  FF 0D 06 02  
004550  3  01 03 02 FF  
004569  3  02 FF 00 0A          .byte 2,255,0,10,6,1,24,25,18,6,18,9,10,255,0,7,2,1,255,0,5,13,13,13,6,0,15,2,77,78,1,14,0,0
00456D  3  06 01 18 19  
004571  3  12 06 12 09  
00458B  3  0B FF 00 04          .byte 11,255,0,4,19,19,0,1,1,255,0,4,13,7,2,1,13,54,54,2,77,78,2,18,10,0,11,255,0,4,19,19,13
00458F  3  13 13 00 01  
004593  3  01 FF 00 04  
0045AC  3  01 01 00 0D          .byte 1,1,0,13,13,13,1,2,3,3,2,54,54,2,24,25,1,0,11,0,11,255,0,4,13,13,5,3,1,13,1,2,1
0045B0  3  0D 0D 01 02  
0045B4  3  03 03 02 36  
0045CD  3  03 03 03 02          .byte 3,3,3,2,2,0,0,1,77,78,1,0,11,0,11,0,0,13,13,1,3,3,1
0045D1  3  02 00 00 01  
0045D5  3  4D 4E 01 00  
0045E4  3  FF 03 05 01          .byte 255,3,5,1,3,1,1,17,0,0,1,77,78,2,0,11,0,11,0,0,6,1,1,8,255,3,4,1,23,23,3,3,3
0045E8  3  03 01 01 11  
0045EC  3  00 00 01 4D  
004605  3  02 10 4C 11          .byte 2,16,76,17,2,24,25,1,0,12,18,11,0,0,0,2,1,3,23,23,1,3,3,3,23,23,23,3,1,16,75,1,3
004609  3  02 18 19 01  
00460D  3  00 0C 12 0B  
004626  3  0C 0A 01 00          .byte 12,10,1,0,0,0,11,0,0,0,2,3,23,23,0,1,2,1,1,23,0,23,1,3,1,16,2,3,3,11,14,0,0,0
00462A  3  00 00 0B 00  
00462E  3  00 00 02 03  
004648  3  0B 00 00 00          .byte 11,0,0,0,1,3,23,255,0,4,15,1,2,23,23,23,3,1,2,2,3,1,11,255,0,4,11,13,13,13,2,3,23,23
00464C  3  01 03 17 FF  
004650  3  00 04 0F 01  
00466A  3  FF 00 04 11          .byte 255,0,4,17,1,3,3,23,2,3,3,1,3,1,12,9,9,9,18,13,2,1,1,3,23,23,255,0,6,15,1,255,3,6
00466E  3  01 03 03 17  
004672  3  02 03 03 01  
00468C  3  07 02 FF 00          .byte 7,2,255,0,5,1,1,3,3,23,0,0,23,255,0,6,19,19,3,3,3,1,1,1,14,255,0,5,2,3,3,23,0
004690  3  05 01 01 03  
004694  3  03 17 00 00  
0046AD  3  36 36 FF 00          .byte 54,54,255,0,9,1,1,1,14,17,16,76,255,0,5,1,3,23,0,23,54,54,23,0,255,13,5,8,1,1,0,16,0,0
0046B1  3  09 01 01 01  
0046B5  3  0E 11 10 4C  
0046CF  3  10 FF 00 06          .byte 16,255,0,6,2,3,23,0,0,23,23,3,23,1,2,2,2,1,1,2,0,0,16,0,0,17,255,0,5,17,1,1,23,23,23
0046D3  3  02 03 17 00  
0046D7  3  00 17 17 03  
0046F2  3  03 03 01 03          .byte 3,3,1,3,3,2,1,1,14,16,16,76,0,17,255,0,6,13,13,13,1,3,3,23,3,1,255,3,4,1,1,14,74
0046F6  3  03 02 01 01  
0046FA  3  0E 10 10 4C  
004713  3  10 4B FF 00          .byte 16,75,255,0,9,15,1,2,1,3,1,3,1,1,2,1,2,3,6,1,0,0,17,255,0,4,13,13,13,255,0,4,11
004717  3  09 0F 01 02  
00471B  3  01 03 01 03  
004734  3  07 01 02 01          .byte 7,1,2,1,1,0,17,11,0,0,1,2,14,255,0,7,2,1,1,255,0,4,12,9,26,24,25,26,9,18,11,18,9
004738  3  01 00 11 0B  
00473C  3  00 00 01 02  
004755  3  FF 00 08 0D          .byte 255,0,8,13,13,1,5,2,13,17,255,0,5,29,29,0,0,0,11,255,0,9,17,2,1,2,3,3,1,13,13,19,19
004759  3  0D 01 05 02  
00475D  3  0D 11 FF 00  
004776  3  00 00 1D 1D          .byte 0,0,29,29,0,0,0,11,255,0,8,13,13,1,255,3,5,2,1,13,13,13,26,24,25,26,255,13,11,2,1,1,255,3,6
00477A  3  00 00 00 0B  
00477E  3  FF 00 08 0D  
004799  3  07 FF 01 04          .byte 7,255,1,4,2,2,255,1,5,2,1,2,2,1,2,1,1,3,3,6,255,3,6,2,255,3,4,1,3,3,3,2,1
00479D  3  02 02 FF 01  
0047A1  3  05 02 01 02  
0047BA  3  03                   .byte 3
0047BB  3  FF 00 05 17          .byte 255,0,5,23,3,3,2,1,1,21,22,1,1,2,1,1,21,22,1,1,1,2,3,23,5,23,255,0,4,23,23,3,1
0047BF  3  03 03 02 01  
0047C3  3  01 15 16 01  
0047DC  3  0E 00 00 15          .byte 14,0,0,21,22,15,14,16,15,1,21,22,17,16,15,1,1,3,23,3,255,0,4,23,3,3,1,0,0,0,21,22,0
0047E0  3  16 0F 0E 10  
0047E4  3  0F 01 15 16  
0047FD  3  4A 10 00 02          .byte 74,16,0,2,21,22,0,16,76,15,2,1,3,1,255,0,5,23,3,2,0,0,0,21,22,0,0,17,0,1,21,22,74
004801  3  15 16 00 10  
004805  3  4C 0F 02 01  
00481E  3  10 00 00 10          .byte 16,0,0,16,15,1,2,255,0,4,23,23,1,14,0,0,0,21,22,255,0,4,8,21,22,0,17,0,0,17,0,16,255,0,5
004822  3  0F 01 02 FF  
004826  3  00 04 17 17  
004841  3  17 03 01 4B          .byte 23,3,1,75,0,0,0,21,22,255,0,4,2,21,22,255,0,6,75,255,0,4,23,3,3,2,1,0,0,0,21,22,255,0,4
004845  3  00 00 00 15  
004849  3  16 FF 00 04  
004864  3  01 15 16 FF          .byte 1,21,22,255,0,12,23,3,1,14,0,0,0,21,22,255,0,4,1,13,13,17,255,0,11,23,3,1,17,0,0,0,21
004868  3  00 0C 17 03  
00486C  3  01 0E 00 00  
004885  3  16 FF 00 05          .byte 22,255,0,5,2,1,13,13,255,0,9,23,23,3,8,1,13,21,22,13,13,255,0,5,16,1,1,2,255,13,6,0,0,0
004889  3  02 01 0D 0D  
00488D  3  FF 00 09 17  
0048A7  3  17 03 03 03          .byte 23,3,3,3,2,1,21,22,16,76,255,0,5,16,15,1,7,1,2,1,1,2,1,255,0,4,23,3,1,1,14,21,22
0048AB  3  02 01 15 16  
0048AF  3  10 4C FF 00  
0048C8  3  11 FF 00 06          .byte 17,255,0,6,17,0,0,1,3,3,1,3,3,3,255,0,4,23,3,1,14,0,21,22,255,0,10,15,1,1,23,23,23
0048CC  3  11 00 00 01  
0048D0  3  03 03 01 03  
0048E9  3  03 00 00 00          .byte 3,0,0,0,23,3,3,2,0,0,21,22,255,0,12,15,5,3,1,3,255,0,4,23,3,1,17,0,21,22,255,0,13
0048ED  3  17 03 03 02  
0048F1  3  00 00 15 16  
00490A  3  0F 01 01 01          .byte 15,1,1,1,255,0,4,23,3,1,16,0,21,22,255,0,21,23,3,1,2,0,21,22,0,38,38,255,0,4,38,38,255,0,11
00490E  3  FF 00 04 17  
004912  3  03 01 10 00  
00492D  3  17 17 03 07          .byte 23,23,3,7,1,17,21,22,31,38,38,31,0,0,0,38,38,31,31,255,0,9,23,3,23,3,1,13,13,13,255,20,4
004931  3  01 11 15 16  
004935  3  1F 26 26 1F  
00494E  3  0D 0D 0D FF          .byte 13,13,13,255,20,4,255,13,6,255,0,4,23,23,3,3,1,2,255,1,5,2,1,1,8,255,1,4,2,7,1,2,1
004952  3  14 04 FF 0D  
004956  3  06 FF 00 04  
00496F  3  17 03 01 01          .byte 23,3,1,1,3,1,3,3,1,2,2,1,1,2,1,1,7,1,1,255,3,4,1,2,1,1,3,23,1,1,16,1,3,3
004973  3  03 01 03 03  
004977  3  01 02 02 01  
004991  3  01 01 0E 00          .byte 1,1,14,0,16,0,0,16,76,0,0,0,1,2,1,8,1,14,15,2,1,3,2,14,16,15,2,1,14,0,0,74,16
004995  3  10 00 00 10  
004999  3  4C 00 00 00  
0049B2  3  00 00 11 FF          .byte 0,0,17,255,0,4,16,15,1,17,16,76,0,15,1,1,1,0,16,76,16,255,0,5,75,255,0,7,17,0,1,0,17
0049B6  3  00 04 10 0F  
0049BA  3  01 11 10 4C  
0049D3  3  FF 00 04 01          .byte 255,0,4,1,14,74,16,0,17,255,0,15,1,255,0,6,1,0,0,17,255,0,17,2,1,21,22,13,13,13,1,255,0,13
0049D7  3  0E 4A 10 00  
0049DB  3  11 FF 00 0F  
0049F5  3  0D 0D 0D FF          .byte 13,13,13,255,0,6,21,22,15,2,3,2,255,0,13,7,1,1,255,0,6,21,22,0,1,7,1,255,0,6,13,13,13
0049F9  3  00 06 15 16  
0049FD  3  0F 02 03 02  
004A16  3  FF 00 04 01          .byte 255,0,4,1,3,1,255,0,6,21,22,0,15,1,1,255,0,13,1,3,8,255,0,6,21,22,0,0,1,1,13,13,255,0,11
004A1A  3  03 01 FF 00  
004A1E  3  06 15 16 00  
004A39  3  02 03 01 FF          .byte 2,3,1,255,0,6,21,22,0,0,1,1,14,255,0,12,1,3,1,255,0,8,13,13,1,2,255,0,13,1,1,1,255,0,9
004A3D  3  00 06 15 16  
004A41  3  00 00 01 01  
004A5C  3  0F 02 07 FF          .byte 15,2,7,255,13,6,255,0,7,1,2,1,13,13,255,0,8,1,1,17,6,0,0,6,255,0,8,1,3,2,14,255,0,9
004A60  3  0D 06 FF 00  
004A64  3  07 01 02 01  
004A7E  3  01 01 0D FF          .byte 1,1,13,255,0,9,13,13,13,1,3,1,255,0,7,13,13,13,2,3,8,13,255,0,10,15,8,1,1,255,0,9,15
004A82  3  00 09 0D 0D  
004A86  3  0D 01 03 01  
004A9F  3  01 17 03 01          .byte 1,23,3,1,13,17,255,0,9,1,3,2,17,255,0,8,17,1,0,23,3,1,255,13,4,255,0,5,17,1,3,1,16
004AA3  3  0D 11 FF 00  
004AA7  3  09 01 03 02  
004AC0  3  00 00 00 11          .byte 0,0,0,17,255,13,5,1,0,23,23,3,1,5,1,2,13,13,13,21,22,13,1,23,3,13,21,22,13,13,255,1,4
004AC4  3  FF 0D 05 01  
004AC8  3  00 17 17 03  
004AE1  3  02 01                .byte 2,1
004AE3  3  FF 00 07 03          .byte 255,0,7,3,1,21,22,1,3,23,255,0,21,3,1,21,22,1,3,23,255,0,20,23,3,1,21,0,2,3,3,23,255,0,18
004AE7  3  01 15 16 01  
004AEB  3  03 17 FF 00  
004B06  3  17 03 01 0E          .byte 23,3,1,14,0,0,15,1,2,1,3,23,23,255,0,14,23,3,1,1,255,0,4,74,16,15,2,1,7,3,3,23,255,0,8
004B0A  3  00 00 0F 01  
004B0E  3  02 01 03 17  
004B29  3  17 17 03 02          .byte 23,23,3,2,1,2,14,255,0,5,16,76,0,15,1,2,1,1,3,23,23,0,23,0,0,3,1,1,2,14,16,0,0,0
004B2D  3  01 02 0E FF  
004B31  3  00 05 10 4C  
004B4B  3  13 13 00 00          .byte 19,19,0,0,17,255,0,4,16,15,1,2,1,1,3,3,23,23,1,14,0,17,0,17,0,0,0,13,13,255,0,7,17
004B4F  3  11 FF 00 04  
004B53  3  10 0F 01 02  
004B6C  3  00 00 00 0F          .byte 0,0,0,15,1,1,2,2,1,255,0,42,13,13,255,0,12,255,13,8,17,255,0,19,3,5,1,1,2,1,1,2,13,13
004B70  3  01 01 02 02  
004B74  3  01 FF 00 2A  
004B8E  3  FF 00 12 17          .byte 255,0,18,23,255,3,7,5,2,13,13,13,0,0,0,21,22,255,13,10,255,0,4,23,0,0,23,23,3,3,3,2,0,0,0
004B92  3  FF 03 07 05  
004B96  3  02 0D 0D 0D  
004BB1  3  15 16 FF 01          .byte 21,22,255,1,5,2,1,1,2,1,255,0,9,23,23,3,1,0,0,0,21,22,2,3,3,3,23,3,3,23,23,3,255,0,10
004BB5  3  05 02 01 01  
004BB9  3  02 01 FF 00  
004BD4  3  17 03 01 00          .byte 23,3,1,0,0,0,21,22,1,3,23,23,0,0,23,0,0,23,255,0,11,3,2,13,13,0,21,22,1,8,23,255,0,8
004BD8  3  00 00 15 16  
004BDC  3  01 03 17 17  
004BF6  3  36 36 FF 00          .byte 54,54,255,0,7,23,3,1,14,0,0,21,22,1,3,255,0,9,54,54,255,0,8,3,1,0,0,0,21,22,2,3,23
004BFA  3  07 17 03 01  
004BFE  3  0E 00 00 15  
004C17  3  FF 00 12 03          .byte 255,0,18,3,1,21,22,13,13,13,1,3,255,0,8
004C1B  3  01 15 16 0D  
004C1F  3  0D 0D 01 03  
004C26  3  FF 00 0A 17          .byte 255,0,10,23,3,1,21,22,1,1,1,3,3,23,23,0,0,3,3,23,3,255,0,11,3,1,21,22,0,15,255,1,5
004C2A  3  03 01 15 16  
004C2E  3  01 01 01 03  
004C47  3  08 FF 01 05          .byte 8,255,1,5,18,9,9,10,255,0,7,23,1,21,22,0,0,0,16,17,255,0,4,16,76,255,0,5,11,255,0,7,23
004C4B  3  12 09 09 0A  
004C4F  3  FF 00 07 17  
004C68  3  01 15 16 00          .byte 1,21,22,0,0,0,17,255,0,5,17,255,0,6,11,255,0,8,1,21,22,255,0,16,11,255,0,7,23,1,13,13,19,19
004C6C  3  00 00 11 FF  
004C70  3  00 05 11 FF  
004C8A  3  11 FF 00 07          .byte 17,255,0,7,17,255,0,5,11,255,0,7,23,3,1,1,255,13,6,0,255,13,6,0,0,0,11,255,0,9,23,3,1,1
004C8E  3  11 FF 00 05  
004C92  3  0B FF 00 07  
004CAC  3  07 01 01 10          .byte 7,1,1,16,0,15,1,1,3,3,1,0,0,0,12,255,9,5,10,255,0,6,23,23,3,1,17,0,75,1,3,255,23,4
004CB0  3  00 0F 01 01  
004CB4  3  03 03 01 00  
004CCE  3  FF 00 08 0B          .byte 255,0,8,11,0,0,23,255,0,5,1,17,40,39,16,17,1,23,0,0,23,23,0,23,0,0,23,23,3,11,24,25,1
004CD2  3  00 00 17 FF  
004CD6  3  00 05 01 11  
004CEF  3  03 00 17 00          .byte 3,0,23,0,23,1,16,40,40,16,16,1,0,0,0,255,3,4,2,1,1,3,1,12,77,78,15,1,3,0,0,0,3
004CF3  3  17 01 10 28  
004CF7  3  28 10 10 01  
004D10  3  01 0D 0D 01          .byte 1,13,13,1,1,3,0,0,0,1,2,1,1,14,16,16,1,14,17,24,25,0,16,1,255,0,4,23,3,3,23,23,255,0,5
004D14  3  01 03 00 00  
004D18  3  00 01 02 01  
004D33  3  10 00 00 4A          .byte 16,0,0,74,16,17,0,0,0,38,38,0,17,1,23,255,0,12,18,17,18,10,0,17,255,0,4,38,38,0,0,2,23
004D37  3  10 11 00 00  
004D3B  3  00 26 26 00  
004D54  3  FF 00 0F 0B          .byte 255,0,15,11,255,0,6,34,35,0,0,1,23,255,0,15,11,0,0,0,19,19,37,32,33,36,0,7,255,0,13,255,13,14
004D58  3  FF 00 06 22  
004D5C  3  23 00 00 01  
004D76  3  17 17 FF 00          .byte 23,23,255,0,9,54,54,0,2,1,1,3,3,1,5,2,1,3,1,1,3,0,23,255,0,10,54,54,0,23,23,3,3
004D7A  3  09 36 36 00  
004D7E  3  02 01 01 03  
004D97  3  17 00 17 17          .byte 23,0,23,23,3,23,23,0,23,255,0,15
004D9B  3  03 17 17 00  
004D9F  3  17 FF 00 0F  
004DA3  3  00 00 00 17          .byte 0,0,0,23,3,1,0,0,45,255,0,7,8,255,5,5,8,255,0,8,3,1,14,255,0,12,43,6,42,255,0,6,45
004DA7  3  03 01 00 00  
004DAB  3  2D FF 00 07  
004DC4  3  00 00 00 03          .byte 0,0,0,3,1,75,255,0,4,46,255,0,8,5,0,46,255,0,10,8,1,255,0,25,23,3,1,19,19,255,0,11,5
004DC8  3  01 4B FF 00  
004DCC  3  04 2E FF 00  
004DE5  3  FF 00 08 17          .byte 255,0,8,23,23,0,23,3,1,255,5,4,8,0,46,255,0,15,3,3,23,3,1,14,0,0,0,43,5,255,0,8,7
004DE9  3  17 00 17 03  
004DED  3  01 FF 05 04  
004E06  3  FF 00 08 FF          .byte 255,0,8,255,1,4,14,0,0,0,45,0,5,255,0,18,16,15,14,0,0,0,46,0,0,5,255,0,18,17,255,0,8
004E0A  3  01 04 0E 00  
004E0E  3  00 00 2D 00  
004E27  3  05 05 07 FF          .byte 5,5,7,255,0,13,46,255,0,11,5,42,255,0,26,5,45,255,0,7,7,5,5,5,255,0,5,255,13,4,5,5,7
004E2B  3  00 0D 2E FF  
004E2F  3  00 0B 05 2A  
004E48  3  00 00 00 07          .byte 0,0,0,7,255,0,5,7,5,5,42,0,43,7,255,0,5,1,2,1,255,0,17,41,19,8,8,255,0,4,3,7,1
004E4C  3  FF 00 05 07  
004E50  3  05 05 2A 00  
004E69  3  FF 00 11 29          .byte 255,0,17,41,41,7,42,255,0,4,23,3,3,13,0,0,7,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,5
004E6D  3  29 07 2A FF  
004E71  3  00 04 17 03  
004E8A  3  00 00 00 11          .byte 0,0,0,17,0,0,23,3,1,0,0,38,38,255,0,12,38,38,0,0,17,1,1,2,0,0,3,2,31,31,38,38,255,31,12
004E8E  3  00 00 17 03  
004E92  3  01 00 00 26  
004EAD  3  26 26 1F 1F          .byte 38,38,31,31,2,2,7,3,0,3,3,1,255,20,20,1,3,23,23,0,23,3,1,1,1,2,1,2,1,1,2,255,1,4
004EB1  3  02 02 07 03  
004EB5  3  00 03 03 01  
004ECF  3  02 01 01 05          .byte 2,1,1,5,1,1,1,2,1,3,23,0
004ED3  3  01 01 01 02  
004ED7  3  01 03 17 00  
004EDB  3  03 17 03 17          .byte 3,23,3,23,23,3,3,23,23,3,23,255,0,8,23,3,3,23,23,3,8,3,23,1,1,2,2,1,8,1,1,1,2
004EDF  3  17 03 03 17  
004EE3  3  17 03 17 FF  
004EFC  3  01 03 17 FF          .byte 1,3,23,255,0,4,23,3,255,1,4,2,1,1,2,1,0,16,0,17,0,0,0,16,76,0,15,1,3,255,0,4,3
004F00  3  00 04 17 03  
004F04  3  FF 01 04 02  
004F1D  3  02 0E 10 00          .byte 2,14,16,0,0,74,16,17,15,1,0,17,255,0,5,17,0,0,0,15,1,23,0,0,0,1,14,0,75,0,0,0,17
004F21  3  00 4A 10 11  
004F25  3  0F 01 00 11  
004F3E  3  00 00 01 FF          .byte 0,0,1,255,0,11,17,1,3,23,0,23,1,0,40,40,255,0,7,17,255,0,8,38,0,13,1,23,0,0,0,1,17
004F42  3  00 0B 11 01  
004F46  3  03 17 00 17  
004F5F  3  FF 00 07 11          .byte 255,0,7,17,0,255,13,5,0,0,255,13,4,1,3,255,0,4,23,1,13,13,0,0,255,13,5,1,1,2,1,1,0,0
004F63  3  00 FF 0D 05  
004F67  3  00 00 FF 0D  
004F81  3  02 01 03 01          .byte 2,1,3,1,3,23,255,0,5,3,7,2,0,0,1,1,2,3,1,3,23,3,3,2,0,0,1,3,23,23,255,0,8
004F85  3  03 17 FF 00  
004F89  3  05 03 07 02  
004FA2  3  17 01 00 00          .byte 23,1,0,0,2,3,3,23,3,0,0,23,3,1,0,0,1,3,255,0,11,1,0,0,1,3,23,255,0,5,1,2,0,0
004FA6  3  02 03 03 17  
004FAA  3  03 00 00 17  
004FC4  3  01 17 FF 00          .byte 1,23,255,0,11,2,0,0,1,23,255,0,6,23,1,0,0,1,3,255,0,10,23,3,1,1,3,23,255,0,6,5,1
004FC8  3  0B 02 00 00  
004FCC  3  01 17 FF 00  
004FE5  3  00 00 01 17          .byte 0,0,1,23,255,0,11,23,3,0,23,255,0,6,23,3,1,1,2,3,0,23,255,0,21,23,3,3,23,255,0,161
004FE9  3  FF 00 0B 17  
004FED  3  03 00 17 FF  
005005  3  00 00 00 2D          .byte 0,0,0,45,255,0,10,44,255,0,8,7,5,21,22,5,255,0,25,21,22,255,0,12,46,255,0,10,45,0,0,21,22
005009  3  FF 00 0A 2C  
00500D  3  FF 00 08 07  
005026  3  08 FF 00 19          .byte 8,255,0,25,21,22,255,0,28,5,255,0,16,46,255,0,38,7,255,0,5,46,255,0,13,7,5,5,7,255,0,14,8
00502A  3  15 16 FF 00  
00502E  3  1C 05 FF 00  
005047  3  05 05 08 FF          .byte 5,5,8,255,0,6,12,10,255,0,6,5,255,0,10,11,255,0,9,11,255,0,4,46,255,0,12,11,255,0,9,11,255,0,6
00504B  3  00 06 0C 0A  
00504F  3  FF 00 06 05  
00506A  3  FF 05 05 07          .byte 255,5,5,7,255,0,5,11,255,0,9,11,0,0,53,255,0,7,12,255,9,5,18,12,10,255,0,5,45,0,0,11,255,0,6
00506E  3  FF 00 05 0B  
005072  3  FF 00 09 0B  
00508D  3  08 FF 00 09          .byte 8,255,0,9,45,0,11,255,0,6,46,0,11,255,0,10,17,255,0,7,11,255,0,8,11,0,0,53,0,0,0,7,0,0,0
005091  3  2D 00 0B FF  
005095  3  00 06 2E 00  
0050B0  3  10 FF 00 07          .byte 16,255,0,7,11,255,0,8,11,255,0,7,255,13,5,17,0,0,7,255,5,5,7,255,0,5,11,255,0,6,5,1,1
0050B4  3  0B FF 00 08  
0050B8  3  0B FF 00 07  
0050D1  3  02 01 01 0D          .byte 2,1,1,13,21,22,5,42,0,11,0,43,5,255,0,5,11,0,0,53,255,0,4,3,23,23,3,1,2,21,22,5,0,0
0050D5  3  15 16 05 2A  
0050D9  3  00 0B 00 2B  
0050F3  3  0C 09 09 05          .byte 12,9,9,5,18,9,9,10,0,11,255,0,6,6,0,0,0,23,3,1,21,22,8,255,0,5,8,21,22,7,5,5,5
0050F7  3  12 09 09 0A  
0050FB  3  00 0B FF 00  
005114  3  07 FF 00 05          .byte 7,255,0,5,5
005118  3  05           
005119  3  17 17 03 17          .byte 23,23,3,23,3,1,21,22,8,5,0,5,0,5,7,21,22,7,255,0,9,8,3,2,1,1,2,14,21,22,255,0,5
00511D  3  03 01 15 16  
005121  3  08 05 00 05  
00513A  3  2B 05 15 16          .byte 43,5,21,22,255,0,11,2,1,14,16,0,0,21,22,255,0,6,5,21,22,255,0,5,45,255,0,4,5,1,2,0,17
00513E  3  FF 00 0B 02  
005142  3  01 0E 10 00  
00515B  3  00 2B 07 05          .byte 0,43,7,5,0,5,0,5,5,5,8,21,22,255,0,7,46,0,0,0,7,6,255,0,10,46,43,5,21,22,255,0,10
00515F  3  00 05 00 05  
005163  3  05 05 08 15  
00517C  3  05 08 05 00          .byte 5,8,5,0,0,0,19,19,255,0,7,5,21,22,0,45,255,0,9,255,13,7,255,0,8,21,22,255,0,9,45,5,255,1,5
005180  3  00 00 13 13  
005184  3  FF 00 07 05  
00519F  3  02 05 05 05          .byte 2,5,5,5,7,255,0,4,5,0,22,255,0,11,3,23,3,23,3,1,14,255,0,20,5,0,0,0,23,3,1,0,0
0051A3  3  07 FF 00 04  
0051A7  3  05 00 16 FF  
0051C0  3  2D FF 00 05          .byte 45,255,0,5,5,255,0,5,7,5,0,0,0,21,22,255,0,5,3,2,0,46,255,0,5,5,7,255,0,10,21,22,5
0051C4  3  05 FF 00 05  
0051C8  3  07 05 00 00  
0051E1  3  00 00 00 17          .byte 0,0,0,23,1,14,255,0,6,5,42,255,0,7,46,0,0,0,21,22,255,0,4,3,1,255,0,20,21,22,5,0,0
0051E5  3  01 0E FF 00  
0051E9  3  06 05 2A FF  
005202  3  17 01 0E FF          .byte 23,1,14,255,0,10,45,255,0,9,21,0,0,0,23,3,2,17,255,0,4,8,255,0,17,5,0,0,3,1,16,76,255,0,24
005206  3  00 0A 2D FF  
00520A  3  00 09 15 00  
005225  3  17 01 0D 00          .byte 23,1,13,0,0,0,38,38,0,0,7,0,5,0,5,0,5,0,5,7,38,38,0,0,0,5,0,54,54,1,1,31,31,31
005229  3  00 00 26 26  
00522D  3  00 00 07 00  
005247  3  26 26 FF 1F          .byte 38,38,255,31,12,38,38,31,31,31,5,0,54,54,3,2,255,20,22,13,0,0,0,23,3,2,255,1,7,2,255,1,6
00524B  3  0C 26 26 1F  
00524F  3  1F 1F 05 00  
005268  3  02 02 01 01          .byte 2,2,1,1,1,2,1,1
00526C  3  01 02 01 01  
005270  3  FF 2C 1C FF          .byte 255,44,28,255,0,33,46,255,0,26,45,255,0,7,19,19,255,0,10,46,0,0,0,8,7,5,5,0,8,0,5,8,0
005274  3  00 21 2E FF  
005278  3  00 1A 2D FF  
005291  3  05 00 07 05          .byte 5,0,7,5,0,6,0,8,5,0,5,0,7,5,0,5,0,8,43,54,54,42,255,0,11,39,38,255,0,10,44,0,54,54
005295  3  00 06 00 08  
005299  3  05 00 05 00  
0052B3  3  FF 00 0B 2D          .byte 255,0,11,45,40,40,255,0,10,17,255,0,24,45,0,0,13,255,0,13,11,255,0,13,1,255,0,8,46,255,0,4,11
0052B7  3  28 28 FF 00  
0052BB  3  0A 11 FF 00  
0052D4  3  00 00 00 2D          .byte 0,0,0,45,255,0,5,46,0,0,0,1,255,0,13,11,255,0,13,1,255,0,13,11,255,0,13,1,255,0,12,11,11
0052D8  3  FF 00 05 2E  
0052DC  3  00 00 00 01  
0052F5  3  FF 00 0D 08          .byte 255,0,13,8,255,0,12,11,11,255,0,13,1,255,0,12,11,12,10,255,0,11,75,2,0,0,0,17,255,0,8,12,18
0052F9  3  FF 00 0C 0B  
0052FD  3  0B FF 00 0D  
005316  3  0B 0A FF 00          .byte 11,10,255,0,9,74,16,1,0,0,0,16,76,255,0,9,11,11,0,0,0,17,255,0,5,17,1,3,255,13,9,21,22
00531A  3  09 4A 10 01  
00531E  3  00 00 00 10  
005337  3  0D 0D 0D 18          .byte 13,13,13,24,25,255,13,10,1,3,1,2,1,1,1,5,1,1,1,21,22,2,1,1,77,78,1,2,1,1,7,1,1
00533B  3  19 FF 0D 0A  
00533F  3  01 03 01 02  
005358  3  02 02 01 03          .byte 2,2,1,3,3,255,0,4,23,0,23,3,2,21,22,2,3,23,32,33,255,0,12
00535C  3  03 FF 00 04  
005360  3  17 00 17 03  
00536F  3  0E FF 00 09          .byte 14,255,0,9,6,21,22,5,44,44,44,24,77,78,25,255,44,7,255,0,5,46,0,54,54,54,5,21,22,255,0,4,27
005373  3  06 15 16 05  
005377  3  2C 2C 2C 18  
005390  3  18 19 1B 00          .byte 24,25,27,0,0,0,45,255,0,5,45,255,0,4,54,54,54,5,21,22,255,0,5,30,30,255,0,15,54,54,54,7,21
005394  3  00 00 2D FF  
005398  3  00 05 2D FF  
0053B1  3  16 FF 00 05          .byte 22,255,0,5,30,30,0,0,19,19,255,0,14,43,5,5,7,0,0,7,27,24,25,27,7,5,5,7,5,8,5,255,0,7
0053B5  3  1E 1E 00 00  
0053B9  3  13 13 FF 00  
0053D3  3  2D 00 00 00          .byte 45,0,0,0,43,0,42,0,0,43,0,77,78,0,42,43,0,42,43,0,42,255,0,6,46,255,0,11,77,78,255,0,26
0053D7  3  2B 00 2A 00  
0053DB  3  00 2B 00 4D  
0053F4  3  18 19 00 00          .byte 24,25,0,0,45,255,0,18,46,0,0,0,37,32,33,36,255,0,4,46,255,0,17,44,0,0,38,38,255,0,16,75,255,0,9
0053F8  3  2D FF 00 12  
0053FC  3  2E 00 00 00  
005417  3  26 26 FF 00          .byte 38,38,255,0,16,16,76,255,0,8,38,38,255,0,15,74,16,255,0,9,38,38,255,0,15,17,16,255,0,9,38,38,255,0,15
00541B  3  10 10 4C FF  
00541F  3  00 08 26 26  
00543A  3  10 10 4C FF          .byte 16,16,76,255,0,8,38,38,0,0,17,255,0,12,16,16,0,17,255,0,7,38,38,0,0,16,76,255,0,10,17,13,13
00543E  3  00 08 26 26  
005442  3  00 00 11 FF  
00545B  3  11 10 FF 00          .byte 17,16,255,0,7,38,38,0,17,16,255,0,5,255,13,7,1,1,255,13,8,66,67,67,65,255,13,7,1,1,1,3,1
00545F  3  07 26 26 00  
005463  3  11 10 FF 00  
00547C  3  07 01 0E 0F          .byte 7,1,14,15,1,3,1,1,1,2,1,2,1,66,65,255,1,7,2,0,0,23,255,0,6,23,23,255,0,6,23,0,23
005480  3  01 03 01 01  
005484  3  01 02 01 02  
00549D  3  FF 00 08             .byte 255,0,8
0054A0  3  FF 2C 04 0F          .byte 255,44,4,15,255,1,4,2,1,14,0,44,0,15,2,1,3,23,0,0,0,23,23,3,3,1,255,0,6,15,14,0,16
0054A4  3  FF 01 04 02  
0054A8  3  01 0E 00 2C  
0054C1  3  11 FF 00 06          .byte 17,255,0,6,16,1,3,3,23,3,3,1,1,2,14,255,0,9,75,0,46,255,0,5,17,15,1,2,1,1,2,14,16,16
0054C5  3  10 01 03 03  
0054C9  3  17 03 03 01  
0054E3  3  FF 00 04 2E          .byte 255,0,4,46,255,0,16,17,16,45,0,0,17,16,76,255,0,5,46,255,0,15,17,255,0,4,75,255,0,25,46,255,0,12
0054E7  3  FF 00 10 11  
0054EB  3  10 2D 00 00  
005505  3  2D FF 00 0C          .byte 45,255,0,12,45,255,0,26,45,255,0,23,46,255,0,11,45,255,0,89,75,255,0,27,17,255,0,26,74,16,17,255,0,4
005509  3  2D FF 00 1A  
00550D  3  2D FF 00 17  
005527  3  0D FF 00 15          .byte 13,255,0,21,16,16,76,0,38,38,5,38,38,255,0,16,17,0,0,13,13,31,31,38,38,5,38,38,31,31,13,13,255,0,4
00552B  3  10 10 4C 00  
00552F  3  26 26 05 26  
00554A  3  11 00 00 00          .byte 17,0,0,0,255,13,7,1,1,255,20,4,5,255,20,4,1,2,255,13,8,1,1,1,3,1,7,1,14,15,1,3,1,1
00554E  3  FF 0D 07 01  
005552  3  01 FF 14 04  
00556C  3  06 02 01 02          .byte 6,2,1,2,1,3,8,255,1,7,2,0,0,23,255,0,6,23,23,255,0,8,23,255,0,8
005570  3  01 03 08 FF  
005574  3  01 07 02 00  
005586  3  2C 2C 15 16          .byte 44,44,21,22,0,255,44,4,255,0,4,44,255,0,13,44,0,0,21,22,255,0,26,21,22,255,0,7,46,255,0,18,21
00558A  3  00 FF 2C 04  
00558E  3  FF 00 04 2C  
0055A7  3  16 FF 00 12          .byte 22,255,0,18,45,0,40,19,255,0,4,21,22,0,46,255,0,18,40,19,255,0,4,21,22,255,0,19,59,57,57,57,58
0055AB  3  2D 00 28 13  
0055AF  3  FF 00 04 15  
0055C8  3  3B 39 3A 3B          .byte 59,57,58,59,58,255,0,4,45,255,0,12,45,0,54,54,54,0,0,59,57,58,255,0,17,45,0,0,54,54,54,255,0,12
0055CC  3  3A FF 00 04  
0055D0  3  2D FF 00 0C  
0055EA  3  33 18 19 31          .byte 51,24,25,49,0,0,46,255,0,11,45,255,0,8,51,48,48,48,50,49,255,0,21,51,50,50,255,48,4,49,255,0,19
0055EE  3  00 00 2E FF  
0055F2  3  00 0B 2D FF  
00560B  3  33 30 30 32          .byte 51,48,48,50,255,48,5,49,255,0,17,51,255,47,9,48,49,255,0,15,51,48,255,47,9,50,48,49,255,0,7,17,255,0,5
00560F  3  FF 30 05 31  
005613  3  FF 00 11 33  
00562E  3  33 30 30 2F          .byte 51,48,48,47,47,47,48,48,48,50,255,47,5,49,255,0,5,74,16,0,17,0,0,51,50,50,48,48,47,47,47,42,43
005632  3  2F 2F 30 30  
005636  3  30 32 FF 2F  
00564F  3  30 FF 2F 06          .byte 48,255,47,6,49,255,0,5,16,0,16,0,51,48,48,50,48,48,47,47,47,0,0,50,48,48,48,50,48,48,48,49,0
005653  3  31 FF 00 05  
005657  3  10 00 10 00  
005670  3  11 00 00 10          .byte 17,0,0,16,255,13,10,50,50,5,5,50,50,255,13,12,1,1,1,3,1,7,1,2,1,1,3,50,52,52,50,1,2
005674  3  FF 0D 0A 32  
005678  3  32 05 05 32  
005691  3  01 03 02 01          .byte 1,3,2,1,7,1,1,8,1,1,2,0,0,23,255,0,6,23,1,50,52,52,50,2,23,0,0,23,23,255,0,7
005695  3  07 01 01 08  
005699  3  01 01 02 00  
0056B1  3  0D FF 2C 1B          .byte 13,255,44,27,1,17,255,0,7,59,57,57,58,255,0,15,1,16,75,255,0,25,1,16,16,76,255,0,18,45,255,0,5
0056B5  3  01 11 FF 00  
0056B9  3  07 3B 39 39  
0056D2  3  02 0D 0D 11          .byte 2,13,13,17,255,0,24,1,2,1,13,61,255,0,19,46,0,0,0,3,23,3,1,13,255,0,4,45,255,0,10,59,57
0056D6  3  FF 00 18 01  
0056DA  3  02 01 0D 3D  
0056F3  3  3A 00 00 3B          .byte 58,0,0,59,57,58,23,0,23,3,1,255,0,11,59,58,0,0,0,45,255,0,8,3,1,255,0,6,40,39,0,0,59
0056F7  3  39 3A 17 00  
0056FB  3  17 03 01 FF  
005714  3  39 3A 2E FF          .byte 57,58,46,255,0,12,23,1,255,0,6,40,40,255,0,19,2,255,0,6,17,255,0,20,1,17,255,0,4,74,16,255,0,20
005718  3  00 0C 17 01  
00571C  3  FF 00 06 28  
005736  3  03 0D FF 00          .byte 3,13,255,0,5,16,76,255,0,5,75,255,0,13,3,1,255,0,4,17,16,0,0,17,0,0,74,16,255,0,5,17,255,0,7
00573A  3  05 10 4C FF  
00573E  3  00 05 4B FF  
005759  3  17 02 00 00          .byte 23,2,0,0,0,74,16,16,76,0,16,76,0,0,16,76,17,0,0,0,16,0,75,255,0,5,23,1,0,0,17,0,16,16
00575D  3  00 4A 10 10  
005761  3  4C 00 10 4C  
00577B  3  00 11 10 00          .byte 0,17,16,0,0,17,16,0,16,0,0,74,16,17,16,255,0,5,3,2,13,61,16,0,16,16,0,16,16,19,61,16,16
00577F  3  00 11 10 00  
005783  3  10 00 00 4A  
00579C  3  00 10 00 00          .byte 0,16,0,0,61,16,16,16,76,0,0,54,54,23,3,1,255,13,22,0,54,54,0,23,7,255,1,4,3,1,1,1,2
0057A0  3  3D 10 10 10  
0057A4  3  4C 00 00 36  
0057BD  3  01 02 01 03          .byte 1,2,1,3,1,1,1,8,255,1,4,2,255,0,9,23,23,255,0,8,23,255,0,8
0057C1  3  01 01 01 08  
0057C5  3  FF 01 04 02  
0057D5  3  FF 00 0B 32          .byte 255,0,11,50,52,52,50,255,0,24,50,52,52,50,23,255,0,22,23,50,52,52,48,23,23,255,0,19,50,50,50,48,52,52
0057D9  3  34 34 32 FF  
0057DD  3  00 18 32 34  
0057F7  3  FF 32 04 FF          .byte 255,50,4,255,0,17,23,50,255,0,8,50,255,0,18,50,255,0,8,50,23,255,0,17,48,50,50,50,52,52,50,50,50
0057FB  3  00 11 17 32  
0057FF  3  FF 00 08 32  
005818  3  30 FF 00 13          .byte 48,255,0,19,23,23,50,52,52,50,23,255,0,6,23,255,0,16,48,52,52,50,255,0,4,23,0,23,23,23,255,0,14
00581C  3  17 17 32 34  
005820  3  34 32 17 FF  
005839  3  17 32 34 34          .byte 23,50,52,52,48,0,0,255,50,4,48,255,50,4,255,0,13,50,52,52,50,23,0,50,255,0,4,39,39,17,50,255,0,13
00583D  3  30 00 00 FF  
005841  3  32 04 30 FF  
00585B  3  32 34 34 32          .byte 50,52,52,50,0,0,50,255,0,4,39,39,0,48,23,255,0,9,255,50,4,52,52,50,23,23,48,0,0,255,50,4,48,48
00585F  3  00 00 32 FF  
005863  3  00 04 27 27  
00587D  3  FF 00 09 17          .byte 255,0,9,23,50,0,0,0,52,52,50,48,50,50,0,0,50,23,23,255,0,12,23,48,0,0,0,52,52,255,0,6,50
005881  3  32 00 00 00  
005885  3  34 34 32 30  
00589E  3  17 FF 00 0E          .byte 23,255,0,14,50,19,19,0,52,52,255,0,6,48,255,0,15,255,50,4,52,52,0,0,17,255,50,4,255,0,8,54,54
0058A2  3  32 13 13 00  
0058A6  3  34 34 FF 00  
0058BF  3  FF 00 08 30          .byte 255,0,8,48,52,52,255,50,4,255,0,11,54,54,255,0,7,23,50,52,52,50,255,0,23,50,50,52,52,50,48,255,0,12
0058C3  3  34 34 FF 32  
0058C7  3  04 FF 00 0B  
0058E1  3  FF 00 0B 32          .byte 255,0,11,50,52,52,50,23,255,0,21,23,48,50,52,52,50,48,255,0,20,23,48,50,0,52,52,0,50,48,23,255,0,14
0058E5  3  34 34 32 17  
0058E9  3  FF 00 15 17  
005903  3  17 00 17 17          .byte 23,0,23,23,48,50,0,0,52,52,0,0,50,48,23,0,0,0,23,255,0,8,255,50,4,48,50,0,0,0,52,52,0,0,0
005907  3  30 32 00 00  
00590B  3  34 34 00 00  
005926  3  FF 32 04 30          .byte 255,50,4,48,50,50,50,255,0,6,50,255,0,20,50,255,0,6,48,255,0,20,50,255,0,5,23,50,52,52,50,48,255,50,7
00592A  3  32 32 32 FF  
00592E  3  00 06 32 FF  
005949  3  30 32 30 FF          .byte 48,50,48,255,50,4,52,52,48,23,255,0,5,50,52,52,50,50,50,48,50,42,255,0,4,43,50,50,48,48,50,52,52
00594D  3  32 04 34 34  
005951  3  30 17 FF 00  
00596A  3  32 FF 00 06          .byte 50,255,0,6,50,255,0,8,44,39,38,44,255,0,8,48,255,0,6,50,255,0,8,51,39,38,49,255,0,8,50,23,255,0,5
00596E  3  32 FF 00 08  
005972  3  2C 27 26 2C  
00598D  3  32 34 34 32          .byte 50,52,52,50,48,50,50,42,0,255,50,4,0,43,48,50,50,50,52,52,50,23,255,0,5,50,52,52,50,42,255,0,12
005991  3  30 32 32 2A  
005995  3  00 FF 32 04  
0059AE  3  2B 32 34 34          .byte 43,50,52,52,50,255,0,5,23,48,52,52,255,0,16,52,52,50,255,0,6,50,52,52,255,0,5,51,0,38,38,0,49
0059B2  3  32 FF 00 05  
0059B6  3  17 30 34 34  
0059CF  3  FF 00 05 34          .byte 255,0,5,52,52,50,255,0,5,23,50,52,52,255,0,5,50,31,38,38,31,50,255,0,5,52,52,48,255,0,6,50,52,52
0059D3  3  34 32 FF 00  
0059D7  3  05 17 32 34  
0059F1  3  FF 00 05 32          .byte 255,0,5,50,255,20,4,50,17,0,38,38,0,52,52,50,255,0,4,54,54,48,52,52,0,0,19,19,0,50,255,68,4
0059F5  3  FF 14 04 32  
0059F9  3  11 00 26 26  
005A12  3  32 10 4C 00          .byte 50,16,76,0,0,0,52,52,50,23,0,0,0,54,54,255,50,4,48,255,50,7,48,50,50,50,48,48,255,50,4,255,0,13
005A16  3  00 00 34 34  
005A1A  3  32 17 00 00  
005A34  3  17 00 17 FF          .byte 23,0,23,255,0,6,23,23,255,0,7
005A38  3  00 06 17 17  
005A3C  3  FF 00 07     
005A3F  3  FF 2C 1C 00          .byte 255,44,28,0,0,0,45,255,0,5,46,255,0,15,45,0,46,255,0,27,44,255,0,18,7,5,5,5,57,58,0,0,46
005A43  3  00 00 2D FF  
005A47  3  00 05 2E FF  
005A60  3  2C 07 05 05          .byte 44,7,5,5,7,0,6,0,0,8,5,5,7,0,0,5,7,255,0,5,8,255,0,5,44,5,0,0,45,255,0,5,54,54
005A64  3  07 00 06 00  
005A68  3  00 08 05 05  
005A82  3  FF 00 06 2D          .byte 255,0,6,45,255,0,7,59,57,57,5,38,38,0,0,5,0,0,5,54,54,5,0,0,5,255,0,12,44,5,38,38,0
005A86  3  FF 00 07 3B  
005A8A  3  39 39 05 26  
005AA3  3  3B 3A FF 00          .byte 59,58,255,0,14,59,7,255,0,5,44,8,57,58,0,0,5,0,0,5,45,0,5,0,0,5,255,0,6,5,57,58,0,0
005AA7  3  0E 3B 07 FF  
005AAB  3  00 05 2C 08  
005AC5  3  2E 2C 05 FF          .byte 46,44,5,255,0,4,8,5,5,8,0,0,8,5,5,7,255,0,6,5,45,255,0,4,44,7,59,58,255,0,8,45,0,0,0
005AC9  3  00 04 08 05  
005ACD  3  05 08 00 00  
005AE8  3  3B 39 3A 00          .byte 59,57,58,0,0,0,7,0,0,0,59,57,57,255,0,27,44,255,0,27,44,7,57,58,255,0,4,59,57,57,58,0,0,0
005AEC  3  00 00 07 00  
005AF0  3  00 00 3B 39  
005B0A  3  3B 39 39 3A          .byte 59,57,57,58,59,57,57,7,57,58,0,0,0,44,5,0,45,255,0,7,46,255,0,11,46,255,0,4,44,5,255,0,5
005B0E  3  3B 39 39 07  
005B12  3  39 3A 00 00  
005B2B  3  3B 39 3A FF          .byte 59,57,58,255,0,8,59,58,0,0,5,0,0,59,57,57,58,6,255,0,14,46,255,0,11,44,5,17,0,59,58,255,0,16
005B2F  3  00 08 3B 3A  
005B33  3  00 00 05 00  
005B4D  3  08 FF 00 05          .byte 8,255,0,5,44,5,16,17,255,0,13,19,19,255,0,4,17,0,0,21,22,44,5,5,8,0,8,0,5,0,5,0,8
005B51  3  2C 05 10 11  
005B55  3  FF 00 0D 13  
005B6E  3  00 08 00 08          .byte 0,8,0,8,0,5,0,7,0,7,5,5,5,7,21,22,8
005B72  3  00 05 00 07  
005B76  3  00 07 05 05  
005B7F  3  FF 2C 0B 18          .byte 255,44,11,24,25,24,25,24,25,255,44,11,0,0,45,255,0,4,46,0,0,0,255,47,6,0,0,45,46,0,0,0,45
005B83  3  19 18 19 18  
005B87  3  19 FF 2C 0B  
005BA0  3  FF 00 0E FF          .byte 255,0,14,255,47,6,255,0,22,255,47,6,255,0,11,8,5,5,7,255,0,4,45,38,38,24,25,24,25,24,25,38,38
005BA4  3  2F 06 FF 00  
005BA8  3  16 FF 2F 06  
005BC1  3  FF 00 05 07          .byte 255,0,5,7,5,8,5,7,42,0,43,5,7,0,0,31,38,38,43,42,43,42,43,42,38,38,31,0,0,7,5,42,0
005BC5  3  05 08 05 07  
005BC9  3  2A 00 2B 05  
005BE2  3  2E 05 4B 00          .byte 46,5,75,0,0,45,0,43,8,5,255,20,12,5,5,42,0,0,45,0,5,13,0,0,0,46,0,43,255,5,14,42,255,0,5
005BE6  3  00 2D 00 2B  
005BEA  3  08 05 FF 14  
005C05  3  08 01 0D FF          .byte 8,1,13,255,0,25,5,3,2,255,0,25,5,23,1,17,5,5,21,22,5,7,0,0,0,8,5,5,7,0,0,0,7
005C09  3  00 19 05 03  
005C0D  3  02 FF 00 19  
005C26  3  05 05 07 15          .byte 5,5,7,21,22,7,5,8,23,1,16,76,0,21,22,43,5,0,0,0,5,42,43,5,0,0,0,5,42,43,5,21,22
005C2A  3  16 07 05 08  
005C2E  3  17 01 10 4C  
005C47  3  00 00 00 03          .byte 0,0,0,3,1,13,0,0,21,22,0,43,5,0,5,42,0,0,43,5,0,5,42,0,0,5,21,22,0,0,0,1,14
005C4B  3  01 0D 00 00  
005C4F  3  15 16 00 2B  
005C68  3  00 00 00 15          .byte 0,0,0,21,22,255,0,15,255,5,5,7,1,17,0,0,0,21,22,255,0,20,5,1,255,13,4,5,0,6,0,5,255,0,17
005C6C  3  16 FF 00 0F  
005C70  3  FF 05 05 07  
005C8B  3  07 03 01 01          .byte 7,3,1,1,1,2,17,0,0,0,43,5,0,5,0,7,0,5,0,5,0,7,0,5,0,8,21,22,5,0,23,3,3
005C8F  3  01 02 11 00  
005C93  3  00 00 2B 05  
005CAC  3  01 0D FF 00          .byte 1,13,255,0,19,21,22,5,0,0,0,23,3,2,255,0,19,21,22,6,0,0,23,23,3,1,0,5,0,53,0,7,0
005CB0  3  13 15 16 05  
005CB4  3  00 00 00 17  
005CCD  3  05 00 08 00          .byte 5,0,8,0,7,0,5,0,5,0,8,0,5,0,5
005CD1  3  07 00 05 00  
005CD5  3  05 00 08 00  
005CDC  3  FF 2C 10 00          .byte 255,44,16,0,0,0,255,44,10,54,54,255,0,9,46,255,0,14,44,44,54,54,45,255,0,20,46,0,0,44,44,255,0,15
005CE0  3  00 00 FF 2C  
005CE4  3  0A 36 36 FF  
005CFE  3  3B 39 3A FF          .byte 59,57,58,255,0,6,45,0,44,44,255,0,18,46,255,0,7,44,44,255,0,20,59,58,255,0,4,44,44,255,0,6,59
005D02  3  00 06 2D 00  
005D06  3  2C 2C FF 00  
005D1F  3  39 39 3A FF          .byte 57,57,58,255,0,16,44,44,38,38,255,0,24,44,44,38,38,255,0,21,59,57,58,44,44,255,0,6,45,255,0,6,59
005D23  3  00 10 2C 2C  
005D27  3  26 26 FF 00  
005D40  3  3A FF 00 0B          .byte 58,255,0,11,44,44,255,0,26,44,44,255,0,17,45,255,0,5,59,58,0,44,44,255,0,8,59,57,58,255,0,15,44,44
005D44  3  2C 2C FF 00  
005D48  3  1A 2C 2C FF  
005D62  3  2E FF 00 19          .byte 46,255,0,25,44,44,255,0,21,59,58,0,0,0,44,44,255,0,12,59,57,57,58,255,0,10,44,44,255,0,5,59,57
005D66  3  2C 2C FF 00  
005D6A  3  15 3B 3A 00  
005D83  3  3A 00 2E FF          .byte 58,0,46,255,0,14,45,0,44,44,255,0,26,44,59,58,21,22,255,0,8,53,255,0,14,44,44,59,21,22,57,58,255,0,21
005D87  3  00 0E 2D 00  
005D8B  3  2C 2C FF 00  
005DA6  3  2C                   .byte 44
005DA7  3  FF 2C 0F FF          .byte 255,44,15,255,0,12,44,44,255,0,6,46,255,0,16,54,54,54,44,44,0,0,40,39,255,0,11,45,255,0,7,54,54,54
005DAB  3  00 0C 2C 2C  
005DAF  3  FF 00 06 2E  
005DC9  3  2C 2C 00 00          .byte 44,44,0,0,38,41,255,0,22,44,44,59,57,57,57,58,255,0,21,44,44,255,0,24,46,0,44,44,255,0,6,45,0,0,0
005DCD  3  26 29 FF 00  
005DD1  3  16 2C 2C 3B  
005DEC  3  3B 3A FF 00          .byte 59,58,255,0,7,45,255,0,6,44,44,255,0,26,44,44,255,0,20,19,19,255,0,4,44,44,0,0,45,255,0,10,59
005DF0  3  07 2D FF 00  
005DF4  3  06 2C 2C FF  
005E0D  3  3A FF 00 04          .byte 58,255,0,4,59,57,57,58,0,0,0,44,44,255,0,26,44,44,255,0,26,44,44,255,0,5,46,255,0,4,59,58,255,0,10
005E11  3  3B 39 39 3A  
005E15  3  00 00 00 2C  
005E30  3  2D 00 00 00          .byte 45,0,0,0,44,44,255,0,26,44,44,0,0,0,59,57,57,58,255,0,19,44,44,255,0,26,44,44,0,0,46,255,0,9
005E34  3  2C 2C FF 00  
005E38  3  1A 2C 2C 00  
005E52  3  3B 39 39 3A          .byte 59,57,57,58,255,0,4,45,255,0,5,44,44,255,0,26,44,44,255,0,8,53,0,0,53,255,0,9,53,0,0,53,0
005E56  3  FF 00 04 2D  
005E5A  3  FF 00 05 2C  
005E73  3  2C 3B 39 39          .byte 44,59,57,57,58,59,57,58,255,0,9,59,57,58,255,0,8,44
005E77  3  3A 3B 39 3A  
005E7B  3  FF 00 09 3B  
005E85  3  FF 2C 0B 17          .byte 255,44,11,23,3,2,68,62,2,3,23,255,44,10,54,54,41,41,44,255,41,6,64,63,62,42,255,41,9,54,54,44,44
005E89  3  03 02 44 3E  
005E8D  3  02 03 17 FF  
005EA6  3  36 36 FF 29          .byte 54,54,255,41,8,64,63,62,42,255,41,10,54,54,44,44,44,255,41,8,64,63,1,3,23,255,44,6,41,41,41,255,44,5
005EAA  3  08 40 3F 3E  
005EAE  3  2A FF 29 0A  
005EC8  3  FF 29 08 40          .byte 255,41,8,64,3,1,44,0,0,44,255,41,8,44,0,0,44,44,255,41,4,44,44,44,23,23,44,255,0,4,44,255,41,8
005ECC  3  03 01 2C 00  
005ED0  3  00 2C FF 29  
005EEA  3  2C 00 00 2C          .byte 44,0,0,44,44,255,41,4,44,255,0,9,44,41,41,41,255,44,6,0,0,44,44,41,41,41,44,44,255,0,9,44,41,41,41
005EEE  3  2C FF 29 04  
005EF2  3  2C FF 00 09  
005F0D  3  2C FF 00 07          .byte 44,255,0,7,44,44,255,41,4,44,0,255,44,9,41,41,41,44,23,44,23,23,3,1,1,2,44,255,41,4,44,0,66
005F11  3  2C 2C FF 29  
005F15  3  04 2C 00 FF  
005F2E  3  29 26 26 FF          .byte 41,38,38,255,41,12,64,63,62,62,62,44,44,41,41,41,44,0,66,38,38,38,31,38,255,41,9,64,63,255,62,4,44
005F32  3  29 0C 40 3F  
005F36  3  3E 3E 3E 2C  
005F4F  3  FF 29 04 2C          .byte 255,41,4,44,0,44,66,47,47,47,65,41,41,41,255,44,4,23,44,23,23,3,1,1,2,44,255,41,4,44,0,0,44
005F53  3  00 2C 42 2F  
005F57  3  2F 2F 41 29  
005F70  3  43 43 43 2C          .byte 67,67,67,44,44,41,41,44,255,0,11,44,41,41,41,44,44,0,255,44,6,41,41,41,255,44,10,0,0,44,255,41,4
005F74  3  2C 29 29 2C  
005F78  3  FF 00 0B 2C  
005F91  3  2C 00 2C FF          .byte 44,0,44,255,41,15,54,54,44,0,0,44,255,41,4,44,0,44,255,41,15,54,54,44,0,0,44,66,38,38,38,44,44,44
005F95  3  29 0F 36 36  
005F99  3  2C 00 00 2C  
005FB3  3  26 26 26 41          .byte 38,38,38,65,255,44,6,255,41,5,44,44,44,0,0,66,31,31,38,38,255,31,5,38,65,255,0,5,255,44,7,255,0,4
005FB7  3  FF 2C 06 FF  
005FBB  3  29 05 2C 2C  
005FD5  3  42 FF 2F 09          .byte 66,255,47,9,65,44,255,0,16,44,255,67,9,255,0,18
005FD9  3  41 2C FF 00  
005FDD  3  10 2C FF 43  
005FE5  3  03 01 0D 00          .byte 3,1,13,0,71,0,255,71,4,6,21,22,6,71,71,255,0,12,23,3,1,13,255,9,6,18,21,22,18,9,10,255,0,13
005FE9  3  47 00 FF 47  
005FED  3  04 06 15 16  
006007  3  17 03 01 00          .byte 23,3,1,0,6,0,0,6,0,7,21,22,5,0,11,71,71,46,71,71,71,255,0,8,3,2,255,0,4,70,0,0,21
00600B  3  06 00 00 06  
00600F  3  00 07 15 16  
006028  3  16 00 00 0C          .byte 22,0,0,12,255,9,6,10,255,0,7,1,1,0,0,0,45,0,0,0,21,22,7,255,0,5,44,44,0,11,255,0,6
00602C  3  FF 09 06 0A  
006030  3  FF 00 07 01  
006049  3  17 01 0E FF          .byte 23,1,14,255,0,7,21,22,255,0,9,11,255,0,5,23,3,2,0,45,255,0,6,21,22,5,0,8,0,8,0,0,0
00604D  3  00 07 15 16  
006051  3  FF 00 09 0B  
00606A  3  05 0B 08 00          .byte 5,11,8,0,5,0,26,3,3,1,255,0,8,21,22,0,45,255,0,7,11,255,0,4,53,2,1,14,255,0,8,21,22
00606E  3  05 00 1A 03  
006072  3  03 01 FF 00  
00608B  3  FF 00 08 2E          .byte 255,0,8,46,11,255,0,27,11,255,0,10,17,255,0,16,11,255,0,4,53,255,13,4,5,16,8,0,5,0,7,21,22
00608F  3  0B FF 00 1B  
006093  3  0B FF 00 0A  
0060AC  3  07 00 08 00          .byte 7,0,8,0,7,0,8,0,8,11,7,0,5,0,26,1,2,1,1,13,16,255,0,4,5,21,22,255,0,9,12,255,9,5
0060B0  3  07 00 08 00  
0060B4  3  08 0B 07 00  
0060CE  3  03 03 03 02          .byte 3,3,3,2,1,16,76,0,0,0,7,21,22,5,255,0,14,23,0,23,3,1,13,255,0,5,21,22,255,0,6,46,0,0,0
0060D2  3  01 10 4C 00  
0060D6  3  00 00 07 15  
0060F1  3  2D FF 00 07          .byte 45,255,0,7,23,3,1,255,0,4,7,21,22,8,255,0,15,23,3,2,1,14,255,0,4,5,21,22,255,0,4,45,255,0,10
0060F5  3  17 03 01 FF  
0060F9  3  00 04 07 15  
006114  3  17 03 01 0E          .byte 23,3,1,14,0,0,0,46,0,0,0,21,22,5,255,0,4,45,34,35,255,0,7,3,2,14,0,0,0,45,0,0,0
006118  3  00 00 00 2E  
00611C  3  00 00 00 15  
006135  3  08 15 16 FF          .byte 8,21,22,255,0,5,24,77,78,25,255,0,6,1,14,255,0,8,5,21,22,5,255,0,5,77,78,255,0,7
006139  3  00 05 18 4D  
00613D  3  4E 19 FF 00  
006153  3  FF 00 04 2D          .byte 255,0,4,45,255,0,37,46,255,0,7,255,6,5,255,0,21,46,0,6,70,70,19,6,255,0,7,46,0,0,0,71,0,0,0
006157  3  FF 00 25 2E  
00615B  3  FF 00 07 FF  
006176  3  47 00 00 00          .byte 71,0,0,0,71,0,71,71,6,19,19,0,6,255,0,11,6,0,6,0,6,0,6,0,6,0,6,24,25,19,19,19,6
00617A  3  47 00 47 47  
00617E  3  06 13 13 00  
006197  3  FF 00 0B 46          .byte 255,0,11,70,255,0,11,69,38,38,19,6,255,0,11,6,0,0,71,71,0,71,0,19,19,71,0,69,38,38,71,6,0,0,0
00619B  3  FF 00 0B 45  
00619F  3  26 26 13 06  
0061BA  3  2E FF 00 08          .byte 46,255,0,8,21,22,6,6,0,6,0,6,6,6,24,25,255,6,4,255,0,11,6,21,22,6,0,0,70,0,0,0,70
0061BE  3  15 16 06 06  
0061C2  3  00 06 00 06  
0061DB  3  0B 0B 00 00          .byte 11,11,0,0,70,255,0,9,45,0,0,0,21,22,255,0,7,45,12,11,18,9,10,255,0,8,71,0,71,0,6,21,22
0061DF  3  46 FF 00 09  
0061E3  3  2D 00 00 00  
0061FC  3  06 00 47 FF          .byte 6,0,71,255,0,6,12,255,9,5,255,0,6,255,6,5,21,22,6,6,6,255,0,6,46,0,0,12,9,9,255,0,6
006200  3  00 06 0C FF  
006204  3  09 05 FF 00  
00621D  3  06 00 00 46          .byte 6,0,0,70,255,0,4,70,6,255,0,13,45,255,0,4,6,255,71,4,0,0,71,71,6,255,0,18,255,6,5,21,22
006221  3  FF 00 04 46  
006225  3  06 FF 00 0D  
00623E  3  06 06 06 FF          .byte 6,6,6,255,0,19,70,0,0,6,21,22,6,0,70,255,0,10,45,255,0,5,46,255,0,6,21,22,70,0,0,46,255,0,12
006242  3  00 13 46 00  
006246  3  00 06 15 16  
006261  3  36 36 FF 00          .byte 54,54,255,0,7,6,21,22,6,255,0,6,46,255,0,8,54,54,255,0,8,21,22,255,0,25,6,21,22,6,255,0,14
006265  3  07 06 15 16  
006269  3  06 FF 00 06  
006282  3  FF 00 17 0B          .byte 255,0,23,11,255,0,9,46,255,0,17,11,255,0,21,45,255,0,5,11,255,0,9,44,0,44,0,44,0,44,0,44,0
006286  3  FF 00 09 2E  
00628A  3  FF 00 11 0B  
0062A3  3  2C 00 2C 00          .byte 44,0,44,0,44,0,0,0,11,255,0,27,11,255,0,27,11,255,0,4,5,0,7,0,5,255,0,15,7,0,5,11,5
0062A7  3  2C 00 00 00  
0062AB  3  0B FF 00 1B  
0062C4  3  00 05 FF 00          .byte 0,5,255,0,24,12,10,255,0,27,11,255,0,27,11,255,0,27,12,10,0,0,5,0,59,57,58,0,5,0,5,0,5
0062C8  3  18 0C 0A FF  
0062CC  3  00 1B 0B FF  
0062E5  3  00 08 00 06          .byte 0,8,0,6,0,7,0,5,0,5,0,0,0,7,11,5,0,18,255,9,12,10,255,0,11,12,9,9,7,0,59,58,255,0,9
0062E9  3  00 07 00 05  
0062ED  3  00 05 00 00  
006308  3  0C FF 09 09          .byte 12,255,9,9,18,5,18,9,9,255,0,4,45,255,0,18,6,45,0,0,0,5,0,59,58,255,0,20,5,255,0,13,45
00630C  3  12 05 12 09  
006310  3  09 FF 00 04  
006329  3  FF 00 11 08          .byte 255,0,17,8,0,5,0,7,0,5,0,5,0,8,0,5,0,7,0,5,0,7,0,5,0,8,0,7,255,0,17,46,255,0,41
00632D  3  00 05 00 07  
006331  3  00 05 00 05  
00634C  3  FF 00 19 0B          .byte 255,0,25,11,255,0,4,45,255,0,19,46,0,0,11,255,0,27,11,255,0,27,11,255,0,8,44,255,0,8,45,255,0,4
006350  3  FF 00 04 2D  
006354  3  FF 00 13 2E  
00636E  3  2C FF 00 04          .byte 44,255,0,4,11,255,0,14,34,35,255,0,11,11,0,0,5,0,7,0,5,0,0,0,5,0,5,8,24,25,5,0,5
006372  3  0B FF 00 0E  
006376  3  22 23 FF 00  
00638F  3  00 05 00 00          .byte 0,5,0,0,0,5,0,5,11,5,255,0,5,53,0,0,0,53,0,0,5,24,25,8,0,0,0,53,0,0,0,53,0,0
006393  3  00 05 00 05  
006397  3  0B 05 FF 00  
0063B1  3  0B FF 00 0D          .byte 11,255,0,13,26,24,25,26,255,0,10,11,255,0,14,29,29,255,0,11,11,255,0,10,19,19,0,0,29,29,255,0,11
0063B5  3  1A 18 19 1A  
0063B9  3  FF 00 0A 0B  
0063D2  3  0B 00 00 05          .byte 11,0,0,5,0,5,0,7,0,5,0,5,7,5,26,24,25,26,0,7,0,5,0,5,0,8,0,7,11,5,0,255,9,12
0063D6  3  00 05 00 07  
0063DA  3  00 05 00 05  
0063F4  3  12 0B FF 00          .byte 18,11,255,0,11,12,9,9,9,10,255,0,11,12,255,9,14,0,11,255,0,13,45,255,0,13,11,0,0,45,255,0,24
0063F8  3  0B 0C 09 09  
0063FC  3  09 0A FF 00  
006415  3  0B FF 00 0B          .byte 11,255,0,11,46,255,0,15,11,255,0,22,45,255,0,4,11,255,0,27,11,255,0,26
006419  3  2E FF 00 0F  
00641D  3  0B FF 00 16  
00642D  3  FF 00 15 18          .byte 255,0,21,24,25,255,0,14,45,255,0,11,77,78,255,0,15,46,0,0,0,44,255,0,6,24,25,255,0,7,45,255,0,18
006431  3  19 FF 00 0E  
006435  3  2D FF 00 0B  
00644F  3  27 26 00 00          .byte 39,38,0,0,0,45,255,0,22,39,38,255,0,24,7,7,24,25,7,7,0,0,0,48,0,48,0,48,0,68,0,48,0
006453  3  00 2D FF 00  
006457  3  16 27 26 FF  
006470  3  44 00 44 00          .byte 68,0,68,0,0,8,255,7,4,42,77,78,0,7,255,0,24,43,42,0,26,255,0,24,38,0,0,4,255,0,27,27,255,0,24
006474  3  00 08 FF 07  
006478  3  04 2A 4D 4E  
006493  3  22 23 00 07          .byte 34,35,0,7,0,0,0,48,0,48,0,48,0,68,0,48,0,68,0,68,0,0,8,255,7,5,24,25,7,42,0,0,0
006497  3  00 00 00 30  
00649B  3  00 30 00 30  
0064B4  3  FF 09 0C 0A          .byte 255,9,12,10,0,0,0,12,9,9,9,18,11,11,255,0,5,9,9,10,255,0,9,11,255,0,8,11,11,0,0,0,45
0064B8  3  00 00 00 0C  
0064BC  3  09 09 09 12  
0064D5  3  00 00 00 0B          .byte 0,0,0,11,255,0,14,46,0,0,0,12,11,10,0,45,255,0,4,11,255,0,11,44,255,0,7,11,11,255,0,6,11
0064D9  3  FF 00 0E 2E  
0064DD  3  00 00 00 0C  
0064F6  3  FF 00 13 0B          .byte 255,0,19,11,11,255,0,20,45,255,0,5,11,11,255,0,10,46,255,0,15,11,12,9,9,10,255,0,23,11,0,0,0
0064FA  3  0B FF 00 14  
0064FE  3  2D FF 00 05  
006517  3  0B 00                .byte 11,0
006519  3  FF 00 05 2E          .byte 255,0,5,46,255,0,6,45,0,45,255,0,5,39,255,0,27,39,0,0,46,255,0,24,11,255,0,6,45,57,58,255,0,15
00651D  3  FF 00 06 2D  
006521  3  00 2D FF 00  
00653B  3  2E 00 00 0B          .byte 46,0,0,11,0,71,71,71,34,35,71,0,0,0,59,57,57,58,0,45,0,0,55,75,73,255,0,6,11,71,1,1,1
00653F  3  00 47 47 47  
006543  3  22 23 47 00  
00655C  3  18 19 01 FF          .byte 24,25,1,255,0,12,17,0,0,0,46,0,0,0,11,1,14,0,0,77,78,255,0,4,46,255,0,7,55,16,0,0,59
006560  3  00 0C 11 00  
006564  3  00 00 2E 00  
00657D  3  3A 00 00 47          .byte 58,0,0,71,1,14,23,23,0,77,78,0,72,73,255,0,5,45,55,72,73,0,16,255,0,5,71,1,12,9,9,10,0
006581  3  01 0E 17 17  
006585  3  00 4D 4E 00  
00659E  3  18 19 17 11          .byte 24,25,23,17,255,0,8,17,0,74,16,73,255,0,4,1,14,0,23,0,11,0,15,14,0,16,73,255,0,6,74,16,0,0
0065A2  3  FF 00 08 11  
0065A6  3  00 4A 10 49  
0065C0  3  10 00 2D 4B          .byte 16,0,45,75,0,64,1,0,23,0,0,11,255,0,4,16,255,0,6,61,0,16,73,0,16,76,0,61,0,15,1,255,0,4
0065C4  3  00 40 01 00  
0065C8  3  17 00 00 0B  
0065E2  3  0B FF 00 04          .byte 11,255,0,4,16,61,0,34,35,0,0,61,13,16,0,0,16,0,0,17,0,0,69,255,0,4,11,255,0,4,16,61,37
0065E6  3  10 3D 00 22  
0065EA  3  23 00 00 3D  
006603  3  20 21 24 0D          .byte 32,33,36,13,13,1,13,17,61,16,0,0,16,61,0,69,255,0,4,11,0,0,21,22,13,13,24,25,24,25,1,1,3
006607  3  0D 01 0D 11  
00660B  3  3D 10 00 00  
006624  3  01 FF 0D 10          .byte 1,255,13,16,21,22,1,1,1,2,1,1,3,3,23,3,1,1,2,1,1,1,2,2,255,1,6,2,1,21,22,3,3
006628  3  15 16 01 01  
00662C  3  01 02 01 01  
006645  3  01 01 03 FF          .byte 1,1,3,255,54,4,255,3,14,11,3,1,21,22,23,23,3,3,44,255,54,4,44,23,23,23,0,0,23,0,23,23,0
006649  3  36 04 FF 03  
00664D  3  0E 0B 03 01  
006666  3  17 00 17 0B          .byte 23,0,23,11,3,2,21,22,0,0,23,23,255,44,6,255,0,4,23,255,0,8,11,3,2,21,22,255,0,6,23,255,0,14
00666A  3  03 02 15 16  
00666E  3  00 00 17 17  
006688  3  17 00 0B 03          .byte 23,0,11,3,2,21,22,255,0,23,11,3,1,21,22
00668C  3  02 15 16 FF  
006690  3  00 17 0B 03  
006697  3               numsc:
006697  3  1C                   .byte 28
006698  3               nmedat:
006698  3  00 5A 70 48          .byte 0,90,112,72,4,3,72,176,6,4,40,208,2,5,64,192,255
00669C  3  04 03 48 B0  
0066A0  3  06 04 28 D0  
0066A9  3  06 04 48 98          .byte 6,4,72,152,0,0,16,176,5,5,120,144,255
0066AD  3  00 00 10 B0  
0066B1  3  05 05 78 90  
0066B6  3  06 04 20 88          .byte 6,4,32,136,4,6,120,144,0,0,56,80,1,7,128,112,1,7,128,160,255
0066BA  3  04 06 78 90  
0066BE  3  00 00 38 50  
0066CB  3  00 00 88 58          .byte 0,0,136,88,4,3,72,152,4,6,96,112,255
0066CF  3  04 03 48 98  
0066D3  3  04 06 60 70  
0066D8  3  00 00 40 18          .byte 0,0,64,24,6,4,80,152,2,5,40,88,255
0066DC  3  06 04 50 98  
0066E0  3  02 05 28 58  
0066E5  3  00 00 20 A8          .byte 0,0,32,168,2,5,32,136,5,5,120,72,1,10,104,96,255
0066E9  3  02 05 20 88  
0066ED  3  05 05 78 48  
0066F6  3  00 00 50 20          .byte 0,0,80,32,6,6,104,168,4,3,8,192,4,6,72,144,1,7,128,64,1,7,128,176,255
0066FA  3  06 06 68 A8  
0066FE  3  04 03 08 C0  
00670F  3  00 00 20 20          .byte 0,0,32,32,4,3,88,56,4,3,24,184,255
006713  3  04 03 58 38  
006717  3  04 03 18 B8  
00671C  3  00 00 48 20          .byte 0,0,72,32,6,4,32,104,4,6,16,128,255
006720  3  06 04 20 68  
006724  3  04 06 10 80  
006729  3  00 00 08 50          .byte 0,0,8,80,2,5,32,56,1,7,128,80,1,7,128,192,6,4,56,136,255
00672D  3  02 05 20 38  
006731  3  01 07 80 50  
00673E  3  00 00 78 40          .byte 0,0,120,64,2,5,16,112,1,9,80,104,1,9,48,112,255
006742  3  02 05 10 70  
006746  3  01 09 50 68  
00674F  3  00 00 78 D8          .byte 0,0,120,216,4,3,24,128,2,5,16,192,1,10,72,160,1,10,88,160,1,10,104,160,1,10,120,160,255
006753  3  04 03 18 80  
006757  3  02 05 10 C0  
00676C  3  00 00 78 D8          .byte 0,0,120,216,1,7,120,104,1,7,120,128,4,6,16,120,255
006770  3  01 07 78 68  
006774  3  01 07 78 80  
00677D  3  00 00 78 D8          .byte 0,0,120,216,4,3,48,112,2,5,120,96,255
006781  3  04 03 30 70  
006785  3  02 05 78 60  
00678A  3  00 00 78 B0          .byte 0,0,120,176,2,5,120,128,255
00678E  3  02 05 78 80  
006792  3  FF           
006793  3  00 00 08 70          .byte 0,0,8,112,3,3,32,88,3,3,32,136,2,5,112,88,255
006797  3  03 03 20 58  
00679B  3  03 03 20 88  
0067A4  3  00 00 10 70          .byte 0,0,16,112,6,3,40,48,1,7,112,120,2,5,128,80,6,8,72,80,6,8,72,160,255
0067A8  3  06 03 28 30  
0067AC  3  01 07 70 78  
0067BD  3  00 00 80 D8          .byte 0,0,128,216,2,5,136,144,6,4,88,112,4,3,8,64,4,6,40,112,255
0067C1  3  02 05 88 90  
0067C5  3  06 04 58 70  
0067D2  3  00 00 10 D8          .byte 0,0,16,216,1,7,32,88,1,7,32,152,6,6,8,80,6,8,64,120,6,4,104,168,255
0067D6  3  01 07 20 58  
0067DA  3  01 07 20 98  
0067EB  3  00 00 50 60          .byte 0,0,80,96,6,4,56,184,6,6,104,160,255
0067EF  3  06 04 38 B8  
0067F3  3  06 06 68 A0  
0067F8  3  00 00 88 90          .byte 0,0,136,144,2,5,56,184,6,3,80,128,255
0067FC  3  02 05 38 B8  
006800  3  06 03 50 80  
006805  3  00 00 48 D0          .byte 0,0,72,208,1,7,72,88,1,7,128,40,255
006809  3  01 07 48 58  
00680D  3  01 07 80 28  
006812  3  00 00 48 70          .byte 0,0,72,112,4,3,72,160,255
006816  3  04 03 48 A0  
00681A  3  FF           
00681B  3  00 00 28 68          .byte 0,0,40,104,6,3,96,104,2,5,40,160,255
00681F  3  06 03 60 68  
006823  3  02 05 28 A0  
006828  3  00 00 48 20          .byte 0,0,72,32,4,8,40,56,4,8,56,72,4,8,72,88,4,8,40,128,4,8,56,144,4,8,72,160,255
00682C  3  04 08 28 38  
006830  3  04 08 38 48  
006845  3  00 00 48 20          .byte 0,0,72,32,5,5,72,80,4,8,40,56,4,8,40,168,255
006849  3  05 05 48 50  
00684D  3  04 08 28 38  
006856  3  00 00 48 20          .byte 0,0,72,32,4,8,24,120,4,8,104,120,1,10,24,184,255
00685A  3  04 08 18 78  
00685E  3  04 08 68 78  
006867  3  00 00 78 40          .byte 0,0,120,64,1,9,0,168,1,1,88,176,255
00686B  3  01 09 00 A8  
00686F  3  01 01 58 B0  
006874  3               NUMOBJ = 20
006874  3               objdta:
006874  3  3F C0 40 20          .byte 63,192,64,32,95,208,95,232,95,244,81,244,84,20,81,148,95,244,95,244,64,4,127,252,42,168,127,252,127,252,0,0,0,128,208,0,128,208
006878  3  5F D0 5F E8  
00687C  3  5F F4 51 F4  
00689A  3  01 80 02 C0          .byte 1,128,2,192,7,96,14,208,31,248,30,200,31,72,30,200,39,252,79,254,79,234,37,84,0,0,79,254,155,109,159,255,1,56,56,1,56,56
00689E  3  07 60 0E D0  
0068A2  3  1F F8 1E C8  
0068C0  3  01 80 02 C0          .byte 1,128,2,192,7,96,14,208,31,248,30,200,31,72,30,200,39,252,79,254,79,234,37,84,0,0,79,254,155,109,159,255,254,0,16,254,0,16
0068C4  3  07 60 0E D0  
0068C8  3  1F F8 1E C8  
0068E6  3  01 80 02 C0          .byte 1,128,2,192,7,96,14,208,31,248,30,200,31,72,30,200,39,252,79,254,79,234,37,84,0,0,79,254,155,109,159,255,7,32,168,7,32,168
0068EA  3  07 60 0E D0  
0068EE  3  1F F8 1E C8  
00690C  3  3F C0 40 20          .byte 63,192,64,32,95,208,95,232,95,244,81,244,84,20,81,148,95,244,95,244,64,4,127,252,42,168,127,252,127,252,0,0,23,40,200,23,40,200
006910  3  5F D0 5F E8  
006914  3  5F F4 51 F4  
006932  3  3F C0 40 20          .byte 63,192,64,32,95,208,95,232,95,244,81,244,84,20,81,148,95,244,95,244,64,4,127,252,42,168,127,252,127,252,0,0,15,80,192,15,80,192
006936  3  5F D0 5F E8  
00693A  3  5F F4 51 F4  
006958  3  00 04 00 0C          .byte 0,4,0,12,0,0,1,254,0,170,0,0,64,12,96,12,96,12,96,12,0,0,255,254,170,170,0,0,96,12,96,12,9,8,104,9,8,104
00695C  3  00 00 01 FE  
006960  3  00 AA 00 00  
00697E  3  0F 00 11 80          .byte 15,0,17,128,0,0,2,192,2,192,7,224,27,248,39,252,88,126,121,62,120,122,121,54,121,42,56,84,30,184,7,224,6,104,176,6,104,176
006982  3  00 00 02 C0  
006986  3  02 C0 07 E0  
0069A4  3  01 00 03 80          .byte 1,0,3,128,7,64,11,160,23,80,47,168,127,84,255,250,85,84,43,168,21,80,11,160,5,64,2,128,1,0,0,0,20,16,40,20,16,40
0069A8  3  07 40 0B A0  
0069AC  3  17 50 2F A8  
0069CA  3  07 C0 1B B0          .byte 7,192,27,176,61,120,102,204,99,140,97,12,83,148,46,232,20,80,77,100,111,236,53,88,112,28,5,64,123,188,252,126,13,24,208,13,24,208
0069CE  3  3D 78 66 CC  
0069D2  3  63 8C 61 0C  
0069F0  3  07 00 34 00          .byte 7,0,52,0,119,4,244,8,174,12,232,26,238,112,245,192,214,133,187,85,221,223,174,112,87,142,74,250,53,84,15,248,14,64,96,14,64,96
0069F4  3  77 04 F4 08  
0069F8  3  AE 0C E8 1A  
006A16  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,46,0,126,0,93,0,235,0,209,0,170,0,124,0,7,32,88,7,32,88
006A1A  3  00 00 00 00  
006A1E  3  00 00 00 00  
006A3C  3  00 00 00 00          .byte 0,0,0,0,3,192,7,224,1,128,63,252,76,50,93,186,113,142,119,238,119,238,113,142,93,186,76,50,63,252,0,0,17,48,24,17,48,24
006A40  3  03 C0 07 E0  
006A44  3  01 80 3F FC  
006A62  3  00 00 00 00          .byte 0,0,0,0,3,192,7,224,1,128,63,252,76,50,93,186,113,142,119,238,119,238,113,142,93,186,76,50,63,252,0,0,19,56,24,19,56,24
006A66  3  03 C0 07 E0  
006A6A  3  01 80 3F FC  
006A88  3  00 00 01 80          .byte 0,0,1,128,7,224,9,112,19,248,19,152,63,188,57,244,121,190,79,254,94,226,127,194,95,194,43,196,149,91,98,166,254,0,16,254,0,16
006A8C  3  07 E0 09 70  
006A90  3  13 F8 13 98  
006AAE  3  07 C0 09 E0          .byte 7,192,9,224,25,240,23,240,31,240,31,176,15,32,7,192,1,0,1,0,0,128,0,128,0,64,2,32,5,32,0,192,10,40,136,10,40,136
006AB2  3  19 F0 17 F0  
006AB6  3  1F F0 1F B0  
006AD4  3  00 00 78 00          .byte 0,0,120,0,30,0,7,0,3,160,1,80,0,224,1,80,3,184,7,28,14,12,20,6,40,6,80,2,160,2,64,0,21,8,216,21,8,216
006AD8  3  1E 00 07 00  
006ADC  3  03 A0 01 50  
006AFA  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,254,234,234,212,212,170,170,212,212,170,170,212,212,14,16,24,14,16,24
006AFE  3  00 00 00 00  
006B02  3  00 00 00 00  
006B20  3  00 00 00 00          .byte 0,0,0,0,0,0,0,8,55,228,85,122,79,245,86,122,53,164,3,200,4,32,13,176,16,8,53,172,49,140,31,248,6,24,64,6,24,64
006B24  3  00 00 00 08  
006B28  3  37 E4 55 7A  
006B46  3  78 00 84 00          .byte 120,0,132,0,165,80,133,88,132,0,120,26,128,2,192,127,199,201,207,201,204,127,205,89,204,111,237,217,109,239,12,127,26,64,184,26,64,184
006B4A  3  A5 50 85 58  
006B4E  3  84 00 78 1A  
006B6C  3               font:
006B6C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
006B70  3  00 00 00 00  
006B74  3  00 30 78 78          .byte 0,48,120,120,48,48,0,48
006B78  3  30 30 00 30  
006B7C  3  00 18 06 06          .byte 0,24,6,6,9,17,32,64
006B80  3  09 11 20 40  
006B84  3  18 34 3C 5E          .byte 24,52,60,94,126,114,114,60
006B88  3  7E 72 72 3C  
006B8C  3  00 5E 7E 7E          .byte 0,94,126,126,42,82,4,120
006B90  3  2A 52 04 78  
006B94  3  02 02 0E 42          .byte 2,2,14,66,126,66,126,66
006B98  3  7E 42 7E 42  
006B9C  3  7E BD 99 5A          .byte 126,189,153,90,36,60,0,24
006BA0  3  24 3C 00 18  
006BA4  3  7C B9 F6 E8          .byte 124,185,246,232,213,239,189,126
006BA8  3  D5 EF BD 7E  
006BAC  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
006BB0  3  18 18 0C 00  
006BB4  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
006BB8  3  30 30 60 00  
006BBC  3  18 34 72 FF          .byte 24,52,114,255,149,90,52,24
006BC0  3  95 5A 34 18  
006BC4  3  1C 3E 7F 7F          .byte 28,62,127,127,87,71,71,62
006BC8  3  57 47 47 3E  
006BCC  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
006BD0  3  00 18 18 30  
006BD4  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
006BD8  3  7E 00 00 00  
006BDC  3  00 00 00 00          .byte 0,0,0,0,0,0,16,0
006BE0  3  00 00 10 00  
006BE4  3  38 7C FE FE          .byte 56,124,254,254,234,226,226,124
006BE8  3  EA E2 E2 7C  
006BEC  3  7C FE CE D6          .byte 124,254,206,214,230,254,124,0
006BF0  3  E6 FE 7C 00  
006BF4  3  18 78 78 18          .byte 24,120,120,24,24,126,126,0
006BF8  3  18 7E 7E 00  
006BFC  3  FC FE 06 7C          .byte 252,254,6,124,192,254,254,0
006C00  3  C0 FE FE 00  
006C04  3  FC FE 06 3E          .byte 252,254,6,62,6,254,252,0
006C08  3  06 FE FC 00  
006C0C  3  D8 D8 D8 D8          .byte 216,216,216,216,254,254,24,0
006C10  3  FE FE 18 00  
006C14  3  FE FE C0 FC          .byte 254,254,192,252,6,254,252,0
006C18  3  06 FE FC 00  
006C1C  3  7C FC C0 FC          .byte 124,252,192,252,198,254,124,0
006C20  3  C6 FE 7C 00  
006C24  3  FE FE 06 0E          .byte 254,254,6,14,28,24,24,0
006C28  3  1C 18 18 00  
006C2C  3  7C FE C6 7C          .byte 124,254,198,124,198,254,124,0
006C30  3  C6 FE 7C 00  
006C34  3  7C FE C6 FE          .byte 124,254,198,254,126,6,6,0
006C38  3  7E 06 06 00  
006C3C  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
006C40  3  00 00 30 00  
006C44  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
006C48  3  00 00 00 00  
006C4C  3  78 7C 7E 7E          .byte 120,124,126,126,126,66,66,126
006C50  3  7E 42 42 7E  
006C54  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
006C58  3  00 00 00 00  
006C5C  3  00 18 34 24          .byte 0,24,52,36,126,171,126,36
006C60  3  7E AB 7E 24  
006C64  3  3C 0E 07 07          .byte 60,14,7,7,7,7,14,60
006C68  3  07 07 0E 3C  
006C6C  3  00 4E 56 4E          .byte 0,78,86,78,86,78,86,74
006C70  3  56 4E 56 4A  
006C74  3  3C 7E 06 7E          .byte 60,126,6,126,126,102,102,0
006C78  3  7E 66 66 00  
006C7C  3  78 7E 06 7C          .byte 120,126,6,124,102,126,124,0
006C80  3  66 7E 7C 00  
006C84  3  3E 7E 00 60          .byte 62,126,0,96,96,126,62,0
006C88  3  60 7E 3E 00  
006C8C  3  7C 7E 06 66          .byte 124,126,6,102,102,126,124,0
006C90  3  66 7E 7C 00  
006C94  3  3E 7E 00 7C          .byte 62,126,0,124,96,126,62,0
006C98  3  60 7E 3E 00  
006C9C  3  3E 7E 00 7C          .byte 62,126,0,124,96,96,96,0
006CA0  3  60 60 60 00  
006CA4  3  3E 7E 00 6E          .byte 62,126,0,110,102,126,62,0
006CA8  3  66 7E 3E 00  
006CAC  3  66 66 06 7E          .byte 102,102,6,126,102,102,102,0
006CB0  3  66 66 66 00  
006CB4  3  7E 7E 00 18          .byte 126,126,0,24,24,126,126,0
006CB8  3  18 7E 7E 00  
006CBC  3  06 06 00 06          .byte 6,6,0,6,6,126,124,0
006CC0  3  06 7E 7C 00  
006CC4  3  66 6E 1C 78          .byte 102,110,28,120,124,110,102,0
006CC8  3  7C 6E 66 00  
006CCC  3  60 60 00 60          .byte 96,96,0,96,96,126,62,0
006CD0  3  60 7E 3E 00  
006CD4  3  63 77 1F 6B          .byte 99,119,31,107,99,99,99,0
006CD8  3  63 63 63 00  
006CDC  3  7C 7E 06 66          .byte 124,126,6,102,102,102,102,0
006CE0  3  66 66 66 00  
006CE4  3  3C 7E 06 66          .byte 60,126,6,102,102,126,60,0
006CE8  3  66 7E 3C 00  
006CEC  3  7C 7E 06 7E          .byte 124,126,6,126,124,96,96,0
006CF0  3  7C 60 60 00  
006CF4  3  3C 7E 06 66          .byte 60,126,6,102,102,112,54,6
006CF8  3  66 70 36 06  
006CFC  3  7C 7E 06 7E          .byte 124,126,6,126,124,110,102,0
006D00  3  7C 6E 66 00  
006D04  3  3E 7E 00 3C          .byte 62,126,0,60,14,126,124,0
006D08  3  0E 7E 7C 00  
006D0C  3  7E 7E 00 18          .byte 126,126,0,24,24,24,24,0
006D10  3  18 18 18 00  
006D14  3  66 66 06 66          .byte 102,102,6,102,102,126,62,0
006D18  3  66 7E 3E 00  
006D1C  3  66 66 06 66          .byte 102,102,6,102,126,60,24,0
006D20  3  7E 3C 18 00  
006D24  3  63 63 03 6B          .byte 99,99,3,107,127,119,99,0
006D28  3  7F 77 63 00  
006D2C  3  63 77 2E 1C          .byte 99,119,46,28,62,119,99,0
006D30  3  3E 77 63 00  
006D34  3  66 66 06 7E          .byte 102,102,6,126,6,62,60,0
006D38  3  06 3E 3C 00  
006D3C  3  7E 7E 00 0C          .byte 126,126,0,12,24,62,126,0
006D40  3  18 3E 7E 00  
006D44  3  1E 0C 0C 0C          .byte 30,12,12,12,12,12,12,30
006D48  3  0C 0C 0C 1E  
006D4C  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
006D50  3  30 18 0C 00  
006D54  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
006D58  3  30 30 F0 00  
006D5C  3  3C 4E 5E 7E          .byte 60,78,94,126,122,60,8,24
006D60  3  7A 3C 08 18  
006D64  3  00 00 7F 7F          .byte 0,0,127,127,42,85,0,127
006D68  3  2A 55 00 7F  
006D6C  3  00 56 4B 55          .byte 0,86,75,85,74,69,32,31
006D70  3  4A 45 20 1F  
006D74  3  00 00 3C 06          .byte 0,0,60,6,62,102,62,0
006D78  3  3E 66 3E 00  
006D7C  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
006D80  3  66 66 7C 00  
006D84  3  3C 42 99 A1          .byte 60,66,153,161,161,153,66,60
006D88  3  A1 99 42 3C  
006D8C  3  00 06 06 3E          .byte 0,6,6,62,102,102,62,0
006D90  3  66 66 3E 00  
006D94  3  00 00 3C 66          .byte 0,0,60,102,124,96,60,0
006D98  3  7C 60 3C 00  
006D9C  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
006DA0  3  30 30 30 00  
006DA4  3  00 00 38 6C          .byte 0,0,56,108,108,60,12,120
006DA8  3  6C 3C 0C 78  
006DAC  3  00 60 60 7C          .byte 0,96,96,124,102,102,102,0
006DB0  3  66 66 66 00  
006DB4  3  00 18 00 38          .byte 0,24,0,56,24,24,60,0
006DB8  3  18 18 3C 00  
006DBC  3  00 06 00 06          .byte 0,6,0,6,6,6,102,60
006DC0  3  06 06 66 3C  
006DC4  3  00 60 6C 78          .byte 0,96,108,120,120,108,102,0
006DC8  3  78 6C 66 00  
006DCC  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
006DD0  3  30 30 1C 00  
006DD4  3  00 00 36 7F          .byte 0,0,54,127,127,107,99,0
006DD8  3  7F 6B 63 00  
006DDC  3  00 00 7C 66          .byte 0,0,124,102,102,102,102,0
006DE0  3  66 66 66 00  
006DE4  3  00 00 3C 66          .byte 0,0,60,102,102,102,60,0
006DE8  3  66 66 3C 00  
006DEC  3  00 00 7C 66          .byte 0,0,124,102,102,124,96,96
006DF0  3  66 7C 60 60  
006DF4  3  00 00 3E 66          .byte 0,0,62,102,102,62,6,7
006DF8  3  66 3E 06 07  
006DFC  3  00 00 1E 33          .byte 0,0,30,51,48,48,48,0
006E00  3  30 30 30 00  
006E04  3  00 00 3E 60          .byte 0,0,62,96,60,6,124,0
006E08  3  3C 06 7C 00  
006E0C  3  00 30 7C 30          .byte 0,48,124,48,48,48,28,0
006E10  3  30 30 1C 00  
006E14  3  D4 E0 E0 E0          .byte 212,224,224,224,224,224,224,192
006E18  3  E0 E0 E0 C0  
006E1C  3  7F FE D5 E0          .byte 127,254,213,224,224,224,252,248
006E20  3  E0 E0 FC F8  
006E24  3  00 00 1F 27          .byte 0,0,31,39,74,85,72,87
006E28  3  4A 55 48 57  
006E2C  3  7E 81 B1 B1          .byte 126,129,177,177,129,133,129,126
006E30  3  81 85 81 7E  
006E34  3  00 00 78 7C          .byte 0,0,120,124,46,86,14,86
006E38  3  2E 56 0E 56  
006E3C  3  00 28 28 5C          .byte 0,40,40,92,92,92,0,40
006E40  3  5C 5C 00 28  
006E44  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
006E48  3  18 18 1E 00  
006E4C  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
006E50  3  18 18 18 00  
006E54  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
006E58  3  30 30 F0 00  
006E5C  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
006E60  3  00 00 00 00  
006E64  3  3C 42 99 A1          .byte 60,66,153,161,161,153,66,60
006E68  3  A1 99 42 3C  
006E6C  3               jtab:
006E6C  3  F9 FA FB FE          .byte 249,250,251,254,254,255,255,255,0,0,0,1,1,1,2,2,6,7,6,15,16,99
006E70  3  FE FF FF FF  
006E74  3  00 00 00 01  
006E82  3  35 15 93 22  keys:   .byte 53,21,147,34,144,4,20,33,17,1,146
006E86  3  90 04 14 21  
006E8A  3  11 01 92     
006E8D  3               
006E8D  2               
006E8D  1               	.include "z80.asm"
006E8D  2               ;------------------------------------------------------
006E8D  2               ; z80.asm
006E8D  2               ; spectrum stuff
006E8D  2               ; adresses
006E8D  2               
006E8D  2               ;ws	 = $60
006E8D  2               
006E8D  2               ;z80_f	 = ws+$00
006E8D  2               ;z80_a	 = ws+$01
006E8D  2               ;z80_af	 = z80_f
006E8D  2               
006E8D  2               ;z80_c	 = ws+$02
006E8D  2               ;z80_b	 = ws+$03
006E8D  2               ;z80_bc	 = z80_c
006E8D  2               
006E8D  2               ;z80_e	 = ws+$04
006E8D  2               ;z80_d	 = ws+$05
006E8D  2               ;z80_de	 = z80_e
006E8D  2               
006E8D  2               ;z80_l	 = ws+$06
006E8D  2               ;z80_h	 = ws+$07
006E8D  2               ;z80_hl	 = z80_l
006E8D  2               
006E8D  2               ;z80_x    = ws+$08
006E8D  2               ;z80_i    = ws+$09
006E8D  2               ;z80_ix	 = z80_x
006E8D  2               
006E8D  2               ;z80_iy	 = ws+$0a
006E8D  2               
006E8D  2               ;z80_fp	 = ws+$0c
006E8D  2               ;z80_ap	 = ws+$0d
006E8D  2               
006E8D  2               ;z80_cp	 = ws+$0e
006E8D  2               ;z80_bp	 = ws+$0f
006E8D  2               ;z80_bcp = z80_cp
006E8D  2               
006E8D  2               ;z80_ep	 = ws+$10
006E8D  2               ;z80_dp	 = ws+$11
006E8D  2               ;z80_dep = z80_ep
006E8D  2               
006E8D  2               ;z80_lp	 = ws+$12
006E8D  2               ;z80_hp	 = ws+$13
006E8D  2               ;z80_hlp = z80_lp
006E8D  2               
006E8D  2               ;z80_sp   = ws+$14
006E8D  2               
006E8D  2               ;z80_reg0 = ws+$16
006E8D  2               ;z80_reg1 = ws+$17
006E8D  2               ;z80_reg2 = ws+$18
006E8D  2               ;z80_reg3 = ws+$19
006E8D  2               
006E8D  2               ;z80_r	 = ws+$1a
006E8D  2               
006E8D  2               ; Contains seperatly 1 bit set
006E8D  2               
006E8D  2               _bitmem0	= $f8
006E8D  2               _bitmem1	= $f9
006E8D  2               _bitmem2	= $fa
006E8D  2               _bitmem3	= $fb
006E8D  2               _bitmem4	= $fc
006E8D  2               _bitmem5	= $fd
006E8D  2               _bitmem6	= $fe
006E8D  2               _bitmem7	= $ff
006E8D  2               
006E8D  2               ; constants
006E8D  2               _bitvalue0	= $01
006E8D  2               _bitvalue1	= $02
006E8D  2               _bitvalue2	= $04
006E8D  2               _bitvalue3	= $08
006E8D  2               _bitvalue4	= $10
006E8D  2               _bitvalue5	= $20
006E8D  2               _bitvalue6	= $40
006E8D  2               _bitvalue7	= $80
006E8D  2               
006E8D  2               _notbitvalue0	= $fe
006E8D  2               _notbitvalue1	= $fd
006E8D  2               _notbitvalue2	= $fb
006E8D  2               _notbitvalue3	= $f7
006E8D  2               _notbitvalue4	= $ef
006E8D  2               _notbitvalue5	= $df
006E8D  2               _notbitvalue6	= $bf
006E8D  2               _notbitvalue7	= $7f
006E8D  2               
006E8D  2               
006E8D  2               ;add_hl_bc:
006E8D  2               ;		lda z80_l
006E8D  2               ;		clc
006E8D  2               ;		adc z80_c
006E8D  2               ;		sta z80_l
006E8D  2               ;		lda z80_h
006E8D  2               ;		adc z80_b
006E8D  2               ;		sta z80_h
006E8D  2               ;		rts
006E8D  2               ;
006E8D  2               ;add_ix_de:
006E8D  2               ;		lda z80_ix
006E8D  2               ;		clc
006E8D  2               ;		adc z80_e
006E8D  2               ;		sta z80_ix
006E8D  2               ;		lda z80_ix+1
006E8D  2               ;		adc z80_d
006E8D  2               ;		sta z80_ix+1
006E8D  2               ;		rts
006E8D  2               ;
006E8D  2               ;add_iy_de:
006E8D  2               ;		lda z80_iy
006E8D  2               ;		clc
006E8D  2               ;		adc z80_e
006E8D  2               ;		sta z80_iy
006E8D  2               ;		lda z80_iy+1
006E8D  2               ;		adc z80_d
006E8D  2               ;		sta z80_iy+1
006E8D  2               ;		rts
006E8D  2               ;
006E8D  2               ;add_hl_de:
006E8D  2               ;		lda z80_l
006E8D  2               ;		clc
006E8D  2               ;		adc z80_e
006E8D  2               ;		sta z80_l
006E8D  2               ;		lda z80_h
006E8D  2               ;		adc z80_d
006E8D  2               ;		sta z80_h
006E8D  2               ;		rts
006E8D  2               ;
006E8D  2               ;add_ix_bc:
006E8D  2               ;		lda z80_ix
006E8D  2               ;		clc
006E8D  2               ;		adc z80_c
006E8D  2               ;		sta z80_ix
006E8D  2               ;		lda z80_ix+1
006E8D  2               ;		adc z80_b
006E8D  2               ;		sta z80_ix+1
006E8D  2               ;		rts
006E8D  2               ;
006E8D  2               ;add_iy_bc:
006E8D  2               ;		lda z80_iy
006E8D  2               ;		clc
006E8D  2               ;		adc z80_c
006E8D  2               ;		sta z80_iy
006E8D  2               ;		lda z80_iy+1
006E8D  2               ;		adc z80_b
006E8D  2               ;		sta z80_iy+1
006E8D  2               ;		rts
006E8D  2               ;
006E8D  2               ;sbc_hl_de:
006E8D  2               ;		lda z80_l
006E8D  2               ;		sbc z80_e
006E8D  2               ;		sta z80_l
006E8D  2               ;		lda z80_h
006E8D  2               ;		sbc z80_d
006E8D  2               ;		sta z80_h
006E8D  2               ;		rts
006E8D  2               ;
006E8D  2               ;sbc_hl_bc:
006E8D  2               ;		lda z80_l
006E8D  2               ;		sbc z80_c
006E8D  2               ;		sta z80_l
006E8D  2               ;		lda z80_h
006E8D  2               ;		sbc z80_b
006E8D  2               ;		sta z80_h
006E8D  2               ;		rts
006E8D  2               ;
006E8D  2               ;cmp_hl_bc:
006E8D  2               ;		lda z80_l
006E8D  2               ;		cmp z80_c
006E8D  2               ;		bne cmp_hl_bc_end
006E8D  2               ;		lda z80_h
006E8D  2               ;		cmp z80_b
006E8D  2               ;cmp_hl_bc_end:
006E8D  2               ;		rts
006E8D  2               ;
006E8D  2               ;cmp_iy_ix:
006E8D  2               ;		lda z80_iy
006E8D  2               ;		cmp z80_ix
006E8D  2               ;		bne cmp_iy_ix_end
006E8D  2               ;		lda z80_iy+1
006E8D  2               ;		cmp z80_ix+1
006E8D  2               ;cmp_iy_ix_end:
006E8D  2               ;		rts
006E8D  2               ;
006E8D  2               ;dec_hl:
006E8D  2               ;		lda z80_l
006E8D  2               ;		bne dec_hl_no_dec_h
006E8D  2               ;		dec z80_h
006E8D  2               ;dec_hl_no_dec_h:
006E8D  2               ;		dec z80_l
006E8D  2               ;		rts
006E8D  2               ;
006E8D  2               ;dec_ix:
006E8D  2               ;		lda z80_ix
006E8D  2               ;		bne dec_ix_no_dec_h
006E8D  2               ;		dec z80_ix+1
006E8D  2               ;dec_ix_no_dec_h:
006E8D  2               ;		dec z80_ix
006E8D  2               ;		rts
006E8D  2               ;
006E8D  2               ;dec_bc:
006E8D  2               ;		lda z80_c
006E8D  2               ;		bne dec_bc_no_dec_b
006E8D  2               ;		dec z80_b
006E8D  2               ;dec_bc_no_dec_b:
006E8D  2               ;		dec z80_c
006E8D  2               ;		rts
006E8D  2               ;
006E8D  2               ;dec_de:
006E8D  2               ;		lda z80_e
006E8D  2               ;		bne dec_de_no_dec_d
006E8D  2               ;		dec z80_d
006E8D  2               ;dec_de_no_dec_d:
006E8D  2               ;		dec z80_e
006E8D  2               ;		rts
006E8D  2               ;
006E8D  2               ;ex_af_afs:
006E8D  2               ;	rts
006E8D  2               ;ex_de_hl:
006E8D  2               ;		lda z80_e
006E8D  2               ;		ldx z80_l
006E8D  2               ;		stx z80_e
006E8D  2               ;		sta z80_l
006E8D  2               ;		lda z80_d
006E8D  2               ;		ldx z80_h
006E8D  2               ;		stx z80_d
006E8D  2               ;		sta z80_h
006E8D  2               ;		rts
006E8D  2               ;
006E8D  2               exx:
006E8D  2  A5 62        		lda z80_c
006E8F  2  A4 6E        		ldy z80_cp
006E91  2  84 62        		sty z80_c
006E93  2  85 6E        		sta z80_cp
006E95  2  A5 63        		lda z80_b
006E97  2  A4 6F        		ldy z80_bp
006E99  2  84 63        		sty z80_b
006E9B  2  85 6F        		sta z80_bp
006E9D  2  A5 64        		lda z80_e
006E9F  2  A4 70        		ldy z80_ep
006EA1  2  84 64        		sty z80_e
006EA3  2  85 70        		sta z80_ep
006EA5  2  A5 65        		lda z80_d
006EA7  2  A4 71        		ldy z80_dp
006EA9  2  84 65        		sty z80_d
006EAB  2  85 71        		sta z80_dp
006EAD  2  A5 rr        		lda scraddr
006EAF  2  A4 72        		ldy z80_lp
006EB1  2  84 rr        		sty scraddr
006EB3  2  85 72        		sta z80_lp
006EB5  2  A5 rr        		lda scraddr+1
006EB7  2  A4 73        		ldy z80_hp
006EB9  2  84 rr        		sty scraddr+1
006EBB  2  85 73        		sta z80_hp
006EBD  2  60           		rts
006EBE  2               
006EBE  2               ;ex_sp_hl:
006EBE  2               ;		tsx
006EBE  2               ;		lda $0103,x
006EBE  2               ;		ldy z80_h
006EBE  2               ;		sta z80_h
006EBE  2               ;		tya
006EBE  2               ;		sta $0103,x
006EBE  2               ;		lda $0104,x
006EBE  2               ;		ldy z80_l
006EBE  2               ;		sta z80_l
006EBE  2               ;		tya
006EBE  2               ;		sta $104,x
006EBE  2               ;		rts
006EBE  2               ;
006EBE  2               ;ldi:
006EBE  2               ;	rts
006EBE  2               ;ldir:
006EBE  2               ;		ldy #$00
006EBE  2               ;		ldx z80_b
006EBE  2               ;		beq ldir_last_page
006EBE  2               ;ldir_loop:
006EBE  2               ;		lda (z80_hl),y
006EBE  2               ;		sta (z80_de),y
006EBE  2               ;		iny
006EBE  2               ;		bne ldir_loop
006EBE  2               ;		inc z80_h
006EBE  2               ;		inc z80_d
006EBE  2               ;		dex
006EBE  2               ;		bne ldir_loop
006EBE  2               ;ldir_last_page:
006EBE  2               ;		lda z80_c
006EBE  2               ;		beq ldir_end
006EBE  2               ;ldir_last_page_loop:
006EBE  2               ;		lda (z80_hl),y
006EBE  2               ;		sta (z80_de),y
006EBE  2               ;		iny
006EBE  2               ;		cpy z80_c
006EBE  2               ;		bne ldir_last_page_loop
006EBE  2               ;ldir_end:
006EBE  2               ;		stx z80_c
006EBE  2               ;		stx z80_b
006EBE  2               ;		tya
006EBE  2               ;		clc
006EBE  2               ;		adc z80_l
006EBE  2               ;		sta z80_l
006EBE  2               ;		bcc *+4
006EBE  2               ;		inc z80_h
006EBE  2               ;		tya
006EBE  2               ;		clc
006EBE  2               ;		adc z80_e
006EBE  2               ;		sta z80_e
006EBE  2               ;		bcc *+4
006EBE  2               ;		inc z80_d
006EBE  2               ;		rts
006EBE  2               ;
006EBE  2               ;lddr:		ldy #$00
006EBE  2               ;lddr_loop:
006EBE  2               ;		lda (z80_hl),y
006EBE  2               ;		sta (z80_de),y
006EBE  2               ;		jsr dec_hl
006EBE  2               ;		jsr dec_de
006EBE  2               ;		jsr dec_bc
006EBE  2               ;		lda z80_b
006EBE  2               ;		ora z80_c
006EBE  2               ;		bne lddr_loop
006EBE  2               ;		rts
006EBE  2               ;ei:
006EBE  2               ;		rts
006EBE  2               ;di:
006EBE  2               ;		rts
006EBE  2               
006EBE  2               ;-------------------------------------------------------------
006EBE  2               ; Set bits in bitmem
006EBE  2               ;-------------------------------------------------------------
006EBE  2               
006EBE  2               ;z80_init:
006EBE  2               ;	ldx #$00
006EBE  2               ;	lda #$01
006EBE  2               ;z80_init_loop:
006EBE  2               ;	sta _bitmem0,x
006EBE  2               ;	inx
006EBE  2               ;	asl a
006EBE  2               ;	bne z80_init_loop
006EBE  2               ;	rts
006EBE  2               
006EBE  2               push_af:
006EBE  2               push_bc:
006EBE  2               push_de:
006EBE  2               push_hl:
006EBE  2               
006EBE  2               pop_af:
006EBE  2               pop_bc:
006EBE  2               pop_de:
006EBE  2               pop_ix:
006EBE  2               pop_hl:
006EBE  2               
006EBE  2               add_hl_hl:
006EBE  2               
006EBE  2               inc_bc:
006EBE  2               inc_de:
006EBE  2               inc_hl:
006EBE  2               inc_ix:
006EBE  2               inc_sp:
006EBE  2               
006EBE  2               cpir:
006EBE  2               
006EBE  2               ex_af_af:
006EBE  2               ;	rts
006EBE  2               
006EBE  1               eind_asm:
006EBE  1               eop:					; End Of Program
006EBE  1               
