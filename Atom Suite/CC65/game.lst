ca65 V2.17 - Git d13d068
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2017
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $0220
000000r 1               	.DEFINE header   1		; Header Wouter Ras emulator
000000r 1               	.DEFINE filenaam "AGD"
000000r 1               
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               mflag = 0 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               cflag = 0 ;
000000r 2               oflag = 1 ;
000000r 2               lflag = 1 ;
000000r 2               
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "z80-zp.inc"
000000r 2               ;.segment "ZEROPAGE"
000000r 2               
000000r 2               ws	 = $60
000000r 2               
000000r 2               z80_f	 = ws+$00
000000r 2               z80_a	 = ws+$01
000000r 2               z80_af	 = z80_f
000000r 2               
000000r 2               z80_c	 = ws+$02
000000r 2               z80_b	 = ws+$03
000000r 2               z80_bc	 = z80_c
000000r 2               
000000r 2               z80_e	 = ws+$04
000000r 2               z80_d	 = ws+$05
000000r 2               z80_de	 = z80_e
000000r 2               
000000r 2               z80_l	 = ws+$06
000000r 2               z80_h	 = ws+$07
000000r 2               z80_hl	 = z80_l
000000r 2               
000000r 2               z80_x    = ws+$08
000000r 2               z80_i    = ws+$09
000000r 2               z80_ix	 = z80_x
000000r 2               
000000r 2               z80_iy	 = ws+$0a
000000r 2               
000000r 2               z80_fp	 = ws+$0c
000000r 2               z80_ap	 = ws+$0d
000000r 2               
000000r 2               z80_cp	 = ws+$0e
000000r 2               z80_bp	 = ws+$0f
000000r 2               z80_bcp	 = z80_cp
000000r 2               
000000r 2               z80_ep	 = ws+$10
000000r 2               z80_dp	 = ws+$11
000000r 2               z80_dep	 = z80_ep
000000r 2               
000000r 2               z80_lp	 = ws+$12
000000r 2               z80_hp	 = ws+$13
000000r 2               z80_hlp	 = z80_lp
000000r 2               
000000r 2               z80_sp   = ws+$14
000000r 2               
000000r 2               z80_reg0 = ws+$16
000000r 2               z80_reg1 = ws+$17
000000r 2               z80_reg2 = ws+$18
000000r 2               z80_reg3 = ws+$19
000000r 2               
000000r 2               z80_r	 = ws+$1a
000000r 2               
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        	; last random number.
00001Er 2  xx           varobj:	.res 1  	   	; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:	    .res 1
00002Br 2  xx           loopb:	    .res 1
00002Cr 2  xx           loopc:	    .res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2               
000037r 2  xx xx        tmp:        .res 2
000039r 2  xx xx        scr_l:      .res 2
00003Br 2  xx xx        scr_r:      .res 2
00003Dr 2  xx xx        scr_txt:    .res 2
00003Fr 2               
00003Fr 2  xx           xtmp:	    .res 1
000040r 2  xx           ytmp:	    .res 1
000041r 2  xx           spcnt:	    .res 1
000042r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000044r 2  xx           seed:	    .res 1		; seed for random numbers.
000045r 2               
000045r 2  xx           ccnt:       .res 1
000046r 2  xx           flag:	    .res 1
000047r 2  xx           rcol:	    .res 1
000048r 2  xx           rrow:	    .res 1
000049r 2               
000049r 2  xx           combyt:	    .res 1		; byte type compressed.
00004Ar 2  xx           comcnt:	    .res 1		; compression counter.
00004Br 2  xx           prtmod:	    .res 1      	; print mode, 0 = standard, 1 = double-height.
00004Cr 2  xx           qscnt:	    .res 1
00004Dr 2               
00004Dr 2  xx           sprptr:	    .res 1      	; not a ptr
00004Er 2  xx           sprcnt:	    .res 1
00004Fr 2               
00004Fr 2  xx xx        skptr:	    .res 2		; search pointer.
000051r 2  xx           sktptr:	    .res 1      	; not a ptr
000052r 2  xx           tmproom:    .res 1
000053r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000055r 2               
000055r 2               .if mflag
000055r 2               TmpAddr:    .res 2
000055r 2               bwid:	    .res 1     		; box/menu width.
000055r 2               blen:	    .res 1     		; box/menu height.
000055r 2               btop:	    .res 1    	 	; box coordinates.
000055r 2               blft:	    .res 1
000055r 2               .endif
000055r 2               
000055r 2               .if pflag
000055r 2               shrctr:	    .res 1
000055r 2               explcnt:    .res 1
000055r 2               seed3:	    .res 1
000055r 2               .endif
000055r 2               
000055r 2               .if aflag
000055r 2               pbptr:       .res 2
000055r 2               .endif
000055r 2               
000055r 1               
000055r 1               .segment "CODE"
000000r 1               
000000r 1               .if header
000000r 1               ;********************************************************************
000000r 1               ; ATM Header for Atom emulator Wouter Ras
000000r 1               
000000r 1               .org asm_code-22*header
00020A  1               name_start:
00020A  1  41 47 44     	.byte filenaam			; Filename
00020D  1               name_end:
00020D  1  00 00 00 00  	.repeat 16-name_end+name_start	; Fill with 0 till 16 chars
000211  1  00 00 00 00  
000215  1  00 00 00 00  
00021A  1               	  .byte $0
00021A  1               	.endrep
00021A  1               
00021A  1  20 02        	.word asm_code			; 2 bytes startaddress
00021C  1  20 02        	.word exec			; 2 bytes linkaddress
00021E  1  EE 7C        	.word eind_asm-start_asm	; 2 bytes filelength
000220  1               
000220  1               ;********************************************************************
000220  1               .else
000220  1               .org asm_code
000220  1               .endif
000220  1               
000220  1               exec:
000220  1               start_asm:
000220  1               	.include "game.inc"
000220  2               .include "nixy.inc"
000220  3               ;--------------------------------------------------------------
000220  3               ; Arcade Game Designer.
000220  3               ; (C) 2008 Jonathan Cauldwell.
000220  3               ; ZX Spectrum Next Engine v0.7.
000220  3               ; Acorn Atom port by K.v.Oss 2018
000220  3               ;--------------------------------------------------------------
000220  3               
000220  3               ; Conditional compilation flags
000220  3               ; Code is installed if flag is set
000220  3               ; Flags are set in commandline assembly or by the compiler
000220  3               
000220  3               ; Flags set by AGD compiler
000220  3               ;	mflag  			; MENU + INV
000220  3               ;	pflag 			; particle engine
000220  3               ;	sflag 			; scrollytext
000220  3               ;	dflag 			; digging mode
000220  3               ;	cflag			; collectable blocks
000220  3               ;	oflag			; objects
000220  3               ;	lflag			; ladders
000220  3               ;
000220  3               ; Flags set manually
000220  3               ;	aflag			; adventure mode
000220  3               ;	bflag			; big sprites (16x24)
000220  3               ;	gflag			; graphic colour mode
000220  3               ;	hflag			; hidden sprite mode
000220  3               ;	iflag			; invert mode
000220  3               
000220  3               .if mflag
000220  3               	.out "- MEN/INV enabled"
000220  3               .endif
000220  3               .if pflag
000220  3               	.out "- Particles enabled"
000220  3               .endif
000220  3               .if sflag
000220  3               	.out "- Scrolling enabled"
000220  3               .endif
000220  3               .if dflag
000220  3               	.out "- Digging enabled"
000220  3               .endif
000220  3               .if cflag
000220  3               	.out "- Collectable blocks enabled"
000220  3               .endif
000220  3               .if oflag
000220  3               	.out "- Objects enabled"
000220  3               .endif
000220  3               .if lflag
000220  3               	.out "- Ladders enabled"
000220  3               .endif
000220  3               .if aflag
000220  3               	.out "- Adventure mode enabled"
000220  3               .endif
000220  3               .if bflag
000220  3               	.out "- Big Sprites (16x24) enabled"
000220  3               .endif
000220  3               .if gflag
000220  3               	.out "- Colourmode enabled"
000220  3               .endif
000220  3               .if hflag
000220  3               	.out "- Hidden sprites/foregroundblocks enabled"
000220  3               .endif
000220  3               .if iflag
000220  3               	.out "- Invert mode enabled"
000220  3               .endif
000220  3               
000220  3               ; Global definitions ------------------------------------------------------------
000220  3               
000220  3               	FONT = font		; Font address
000220  3               
000220  3               	green	= $00		; Colour definition filters
000220  3               	yellow	= $55
000220  3               	blue	= $aa
000220  3               	red	= $ff
000220  3               
000220  3               ; Block characteristics.
000220  3               
000220  3               	PLATFM	= 1		; platform.
000220  3               	WALL	= PLATFM + 1	; solid wall.
000220  3               	LADDER	= WALL + 1	; ladder.
000220  3               	FODDER	= LADDER + 1	; fodder block.
000220  3               	DEADLY	= FODDER + 1	; deadly block.
000220  3               	CUSTOM	= DEADLY + 1	; custom block.
000220  3               	WATER	= CUSTOM + 1	; water block.
000220  3                       COLECT	= WATER + 1	; collectable block.
000220  3                       NUMTYP	= COLECT + 1	; number of types.
000220  3               
000220  3               ; Sprites.
000220  3               
000220  3               .if bflag
000220  3               	SPR_HGT	= 24		; Sprite height
000220  3               	SPR_WID = 16		; Sprite width
000220  3               	NUMSPR	= 8		; number of sprites.
000220  3               .else				; 16x16 sprites
000220  3               	SPR_HGT = 16		; Sprite height
000220  3               	SPR_WID = 16		; Sprite width
000220  3               	NUMSPR	= 12		; number of sprites.
000220  3               .endif
000220  3               
000220  3               	TABSIZ = 17		; size of each entry.
000220  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
000220  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
000220  3               	var_X  = 8		; new x coordinate of sprite.
000220  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
000220  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
000220  3               
000220  3               ; Particle engine.
000220  3               
000220  3               	NUMSHR = 55		; pieces of shrapnel.
000220  3               	SHRSIZ = 6		; bytes per particle.
000220  3               
000220  3               ; System constants
000220  3               
000220  3               	ScreenAddr  = $8000	; Startaddress video RAM
000220  3               	ScrSelAddr  = $b000	; Screen selection address
000220  3               	KeyRowAddr  = $b000	; PIA key matrix row
000220  3               	KeyColAddr  = $b001	; PIA key matrix column
000220  3               	SpeakerBit  = $b002	; Speaker bit
000220  3               	CmdReg      = $b400	; Command register AtoMMC
000220  3               	DatReg      = $b401	; Data register AtoMMC
000220  3               	Timer2_Low  = $b808	; Timer 2 low byte
000220  3               	Timer2_High = $b809	; Timer 2 high byte
000220  3               
000220  3               ; System calls
000220  3               
000220  3               	SCRSYNC	 = $fe66	; wait for next CRT field flyback 60 Hz
000220  3               	SCRSYNC1 = $fe6b	; wait for CRT field flyback 60 Hz
000220  3               	OSRDCH   = $fe94	; get key subroutine
000220  3                       READKEY  = $fe71	; scan key matrix subroutine
000220  3               	OSWRCH	 = $fff4	; write character
000220  3               
000220  3               
000220  3               .if iflag
000220  3               	TxtInvert   = $ff	; Invert byte for character printing
000220  3               	ScrFillByte = $ff	; Screen fill byte for CLS
000220  3               .else
000220  3               	TxtInvert   = $00	; Invert byte for character printing
000220  3               	ScrFillByte = $00	; Screen fill byte for CLS
000220  3               .endif
000220  3               
000220  3               .if gflag
000220  3               	ScrMode     = $d0	;  $d0 = CLEAR4a colour
000220  3               .else
000220  3               	ScrMode     = $f0	;  $f0 = CLEAR4  mono
000220  3               .endif
000220  3               
000220  3               ;===============================================================
000220  3               ; Game starts here
000220  3               ;===============================================================
000220  3               
000220  3               .segment "CODE"
000220  3               
000220  3               ; Clear variables
000220  3               
000220  3  A9 00        	lda #0
000222  3  A2 00        	ldx #0
000224  3               clrloop:
000224  3  95 00        	sta 0,x
000226  3  E8           	inx
000227  3  D0 FB        	bne clrloop
000229  3               
000229  3  20 50 03     	jsr game	 	; start the game.
00022C  3  A9 0C        	lda #12			; Clear screen + exit to Basic
00022E  3  4C F4 FF     	jmp OSWRCH
000231  3               
000231  3               ; Definition of variables
000231  3               ; Make sure pointers are arranged in the same order as the data itself.
000231  3               
000231  3  FE 25        msgptr:		.word msgdat	; messages
000233  3  2B 28        blkptr:		.word chgfx	; block graphics.
000235  3  EB 2C        proptr:		.word bprop	; address of char properties.
000237  3  83 2D        sptptr:		.word sprgfx	; sprite graphics
000239  3  83 4C        frmptr:		.word frmlst	; sprite frames.
00023B  3  9F 4C        scrptr:		.word scdat	; address of screens.
00023D  3  F9 77        nmeptr:		.word nmedat	; enemy start positions.
00023F  3  A8 79        objptr:		.word objdta	; object graphics
000241  3               
000241  3               ;TxtFilter:	.byte $ff
000241  3  00 55 AA FF  txtcol:		.byte green,yellow,blue,red
000245  3               
000245  3               ; Don't change the order of these four.
000245  3               ; Menu routine relies on winlft following wintop.
000245  3               
000245  3  01           wintop:		.byte WINDOWTOP	; top of window.
000246  3  01           winlft:		.byte WINDOWLFT	; left edge.
000247  3  13           winhgt:		.byte WINDOWHGT	; window height.
000248  3  1E           winwid:		.byte WINDOWWID	; window width.
000249  3  0E           numob:		.byte NUMOBJ	; number of objects in game.
00024A  3               
00024A  3               ; Variables start here.
00024A  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
00024A  3               
00024A  3  08           wntopx:		.byte (8 * WINDOWTOP)
00024B  3  08           wnlftx:		.byte (8 * WINDOWLFT)
00024C  3  90           wnbotx:		.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
00024D  3  E6           wnrgtx:		.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
00024E  3               
00024E  3               ; Assorted game routines which can go in contended memory.
00024E  3               
00024E  3               ;--------------------------------------------------------------
00024E  3               ; Entry for inventory called by the INV command
00024E  3               ;
00024E  3               ; Input:
00024E  3               ;  X   = message nr with objects seperated with ,
00024E  3               ;
00024E  3               ; Output:
00024E  3               ;  OPT = selected objectnr of INV menu
00024E  3               ;--------------------------------------------------------------
00024E  3               
00024E  3               .if mflag
00024E  3               minve:
00024E  3               .if gflag
00024E  3               	lda #$ff		; blue frontcolour
00024E  3               	sta andeor
00024E  3               	lda #$aa		; yellow backcoloour
00024E  3               	sta andeor+1
00024E  3               .endif
00024E  3               	lda #<(invdis)		; routine address.
00024E  3               	sta mod0+1		; set up menu routine.
00024E  3               	sta mod2+1		; set up count routine.
00024E  3               	lda #>(invdis)
00024E  3               	sta mod0+2
00024E  3               	sta mod2+2
00024E  3               	lda #<(fopt)		; find option from available objects.
00024E  3               	sta mod1+1		; set up routine.
00024E  3               	lda #>(fopt)
00024E  3               	sta mod1+1+1
00024E  3               	jmp dbox		; do menu routine.
00024E  3               
00024E  3               ;--------------------------------------------------------------
00024E  3               ; Entry for menu called by the MENU command
00024E  3               ;
00024E  3               ; Input:
00024E  3               ;  X   = message nr with menu items seperated with ,
00024E  3               ;
00024E  3               ; Output:
00024E  3               ;  OPT = selected line nr of MENU menu
00024E  3               ;--------------------------------------------------------------
00024E  3               
00024E  3               mmenu:
00024E  3               	lda #<(always)		; routine address.
00024E  3               	sta mod0+1		; set up routine.
00024E  3               	sta mod2+1		; set up count routine.
00024E  3               	lda #>(always)
00024E  3               	sta mod0+2
00024E  3               	sta mod2+2
00024E  3               
00024E  3               	lda #<(fstd)		; standard option selection.
00024E  3               	sta mod1+1		; set up routine.
00024E  3               	lda #>(fstd)
00024E  3               	sta mod1+2
00024E  3               
00024E  3               ; Drop through into box routine.
00024E  3               
00024E  3               ;--------------------------------------------------------------
00024E  3               ; Work out size of box for message or menu.
00024E  3               ;--------------------------------------------------------------
00024E  3               
00024E  3               dbox:
00024E  3               	lda #<(msgdat)		; pointer to messages.
00024E  3               	sta z80_l
00024E  3               	lda #>(msgdat)
00024E  3               	sta z80_h
00024E  3               
00024E  3               	jsr getwrd		; get message number.
00024E  3               
00024E  3               	lda z80_h		; store pointer to message.
00024E  3               	sta TmpAddr
00024E  3               	lda z80_l
00024E  3               	sta TmpAddr+1
00024E  3               
00024E  3               	lda #1			; height.
00024E  3               	sta z80_d
00024E  3               	lda #0			; start at object zero.
00024E  3               	sta combyt		; store number of object in combyt.
00024E  3               	sta z80_e		; maximum width.
00024E  3               dbox5:
00024E  3               	lda #0			; this line"s width.
00024E  3               	sta z80_b
00024E  3               mod2:
00024E  3               	jsr always		; item in player"s possession?
00024E  3               	cmp #255
00024E  3               	bne dbox6		; not in inventory, skip this line.
00024E  3               	inc z80_d		; add to tally.
00024E  3               dbox6:
00024E  3               	ldy #0			; get character.
00024E  3               	lda (z80_hl),y
00024E  3               	sta z80_a
00024E  3               	inc z80_l		; next character.
00024E  3               	bne :+
00024E  3               	inc z80_h
00024E  3               :
00024E  3               	lda z80_a		; reached end of line?
00024E  3               	cmp #','
00024E  3               	beq dbox3		; yes.
00024E  3               	cmp #13
00024E  3               	beq dbox3		; yes.
00024E  3               	inc z80_b		; add to this line"s width.
00024E  3               	lda z80_a
00024E  3               	bmi dbox4		; end of message? yes, end count.
00024E  3               	jmp dbox6		; repeat until we find the end.
00024E  3               dbox3:
00024E  3               	lda z80_e		; maximum line width.
00024E  3               	cmp z80_b		; have we exceeded longest so far?
00024E  3               	bpl dbox5		; no, carry on looking.
00024E  3               	lda z80_b		; make this the widest so far.
00024E  3               	sta z80_e
00024E  3               	jmp dbox5		; keep looking.
00024E  3               dbox4:
00024E  3               	lda z80_e		; maximum line width.
00024E  3               	cmp z80_b		; have we exceeded longest so far?
00024E  3               	bpl dbox8		; no, carry on looking.
00024E  3               	lda z80_b		; final line is the longest so far.
00024E  3               	sta z80_e
00024E  3               dbox8:
00024E  3               	dec z80_d		; decrement items found.
00024E  3               	bne :+			; total was zero.
00024E  3               	lda #255
00024E  3               	sta varopt
00024E  3               	jmp dbox15
00024E  3               :
00024E  3               	lda z80_e		; longest line.
00024E  3               	bne :+			; was it zero?
00024E  3               	jmp dbox15		; total was zero.
00024E  3               :
00024E  3               	sta bwid		; set up size.
00024E  3               	lda z80_d
00024E  3               	sta blen
00024E  3               
00024E  3               ;--------------------------------------------------------------
00024E  3               ; That's set up our box size.
00024E  3               ;--------------------------------------------------------------
00024E  3               
00024E  3               	lda winhgt		; window height in characters.
00024E  3               	sec
00024E  3               	sbc z80_d		; subtract height of box.
00024E  3               	lsr a			; divide by 2.
00024E  3               	clc
00024E  3               	adc wintop		; add top edge of window.
00024E  3               	sta btop		; set up box top.
00024E  3               
00024E  3               	lda winwid		; window width in characters.
00024E  3               	sec
00024E  3               	sbc z80_e		; subtract box width.
00024E  3               	lsr a			; divide by 2.
00024E  3               	clc
00024E  3               	adc winlft		; add left edge of window.
00024E  3               	sta blft		; box left.
00024E  3               
00024E  3               	lda #<(FONT-256)		; font.
00024E  3               	sta grbase		; set up for text display.
00024E  3               	lda #>(FONT-256)
00024E  3               	sta grbase+1
00024E  3               
00024E  3               	lda TmpAddr+1		; restore message pointer.
00024E  3               	sta z80_l
00024E  3               	lda TmpAddr
00024E  3               	sta z80_h
00024E  3               
00024E  3               	lda btop		; box top.
00024E  3               	sta dispy		; set display coordinate.
00024E  3               	lda #0			; start at object zero.
00024E  3               	sta combyt		; store number of object in combyt.
00024E  3               dbox2:
00024E  3               	lda combyt		; get object number.
00024E  3               	sta z80_a
00024E  3               mod0:
00024E  3               	jsr always		; check inventory for display.
00024E  3               	cmp #255
00024E  3               	beq :+
00024E  3               	jmp dbox13		; not in inventory, skip this line.
00024E  3               :
00024E  3               	lda blft		; box left.
00024E  3               	sta dispx		; set left display position.
00024E  3               	lda bwid		; box width.
00024E  3               	sta z80_b		; store width.
00024E  3               dbox0:
00024E  3               	ldy #0
00024E  3               	lda (z80_hl),y		; get character.
00024E  3               	cmp #','		; end of line?
00024E  3               	beq dbox1		; yes, next one.
00024E  3               	cmp #13			; end of line?
00024E  3               	beq dbox1		; yes, next one.
00024E  3               
00024E  3               	cmp #141			; end of line?
00024E  3               	bne :+
00024E  3               	dec bwid
00024E  3               	jmp dbox7		; yes, next one.
00024E  3               :
00024E  3               	dec z80_b		; one less to display.
00024E  3               	and #127		; remove terminator.
00024E  3               
00024E  3               	jsr pchr		; display on screen.
00024E  3               
00024E  3               	ldy #0
00024E  3               	lda (z80_hl),y		; get character.
00024E  3               	sta z80_a
00024E  3               	inc z80_l		; next character.
00024E  3               	bne :+
00024E  3               	inc z80_h
00024E  3               :
00024E  3               	lda z80_a
00024E  3               	cmp #128		; end of message?
00024E  3               	bmi :+
00024E  3               	jmp dbox7		; yes, job done.
00024E  3               :
00024E  3               	lda z80_b		; chars remaining.
00024E  3               	beq :+			; are any left?
00024E  3               	jmp dbox0		; yes, continue.
00024E  3               :
00024E  3               ;---------------------------------------------------
00024E  3               ; Reached limit of characters per line.
00024E  3               ;---------------------------------------------------
00024E  3               
00024E  3               dbox9:
00024E  3               	ldy #0
00024E  3               	lda (z80_hl),y		; get character.
00024E  3               	inc z80_l		; next one.
00024E  3               	bne :+
00024E  3               	inc z80_h
00024E  3               :
00024E  3               	cmp #','		; another line?
00024E  3               	beq dbox10		; yes, do next line.
00024E  3               	cmp #13			; another line?
00024E  3               	beq dbox10		; yes, do next line.
00024E  3               	cmp #128		; end of message?
00024E  3               	bcs :+
00024E  3               	jmp dbox11		; yes, finish message.
00024E  3               :
00024E  3               	jmp dbox9
00024E  3               
00024E  3               ;---------------------------------------------------
00024E  3               ; Fill box to end of line.
00024E  3               ;---------------------------------------------------
00024E  3               
00024E  3               dboxf:
00024E  3               	lda #32			; space character.
00024E  3               	jsr pchr		; display character.
00024E  3               	dec z80_b
00024E  3               	beq :+
00024E  3               	jmp dboxf		; repeat for remaining chars on line.
00024E  3               :
00024E  3               	rts
00024E  3               dbox1:
00024E  3               	inc z80_l		; skip character.
00024E  3               	bne :+
00024E  3               	inc z80_h
00024E  3               :
00024E  3               	jsr dboxf		; fill box out to right side.
00024E  3               dbox10:
00024E  3               	inc dispy		; y coordinate down a line next position.
00024E  3               	jmp dbox2		; next line.
00024E  3               dbox7:
00024E  3               	lda z80_b		; chars remaining.
00024E  3               	bne :+			; are any left?
00024E  3               	jmp dbox11		; no, nothing to draw.
00024E  3               :
00024E  3               	jsr dboxf		; fill message to line.
00024E  3               
00024E  3               ;------------------------------------------------------
00024E  3               ; Drawn the box menu, now select option.
00024E  3               ;------------------------------------------------------
00024E  3               
00024E  3               dbox11:
00024E  3               	lda btop		; box top.
00024E  3               	sta dispy		; set bar position.
00024E  3               dbox14:
00024E  3               	jsr joykey		; get controls.
00024E  3               	cmp #$7f		; anything pressed?
00024E  3               	bne dbox14		; yes, debounce it.
00024E  3               	jsr dbar		; draw bar.
00024E  3               dbox12:
00024E  3               	jsr joykey		; get controls.
00024E  3               	cmp #$7f		; anything pressed?
00024E  3               	beq dbox12		; no, nothing.
00024E  3               	and #16			; fire button pressed?
00024E  3               	bne :+
00024E  3               mod1:
00024E  3               	jmp fstd		; yes, job done.
00024E  3               :
00024E  3               	jsr dbar		; delete bar.
00024E  3               
00024E  3               	lda joyval		; joystick reading.
00024E  3               	and #8			; going up?
00024E  3               	beq dboxu		; yes, go up.
00024E  3               
00024E  3               	ldx dispy		; vertical position of bar.
00024E  3               	inx			; look down.
00024E  3               	txa
00024E  3               	sec
00024E  3               	sbc btop		; find distance from top.
00024E  3               	cmp blen		; top of box.
00024E  3               	bne :+
00024E  3               	jmp dbox14		; yes, go no further.
00024E  3               :
00024E  3               	inc dispy		; move bar.
00024E  3               	jmp dbox14		; continue.
00024E  3               dboxu:
00024E  3               	lda dispy		; vertical position of bar.
00024E  3               	cmp btop		; are we at the top?
00024E  3               	bne :+
00024E  3               	jmp dbox14		; yes, go no further.
00024E  3               :
00024E  3               	dec dispy		; move bar.
00024E  3               	jmp dbox14		; continue.
00024E  3               fstd:
00024E  3               	lda dispy		; bar position.
00024E  3               	sec
00024E  3               	sbc btop		; find selected option.
00024E  3               	sta varopt		; store the option.
00024E  3               	jmp redraw		; redraw the screen.
00024E  3               
00024E  3               ;------------------------------------------------------
00024E  3               ; Option not available.  Skip this line.
00024E  3               ;------------------------------------------------------
00024E  3               
00024E  3               dbox13:
00024E  3               	ldy #0
00024E  3               	lda (z80_hl),y		; get character.
00024E  3               	inc z80_l		; next one.
00024E  3               	bne :+
00024E  3               	inc z80_h
00024E  3               :
00024E  3               	cmp #','		; another line?
00024E  3               	bne :+
00024E  3               	jmp dbox2		; yes, do next line.
00024E  3               :
00024E  3               	cmp #13			; another line?
00024E  3               	bne :+
00024E  3               	jmp dbox2		; yes, do next line.
00024E  3               :
00024E  3               
00024E  3               	bpl :+			; end of message?
00024E  3               	jmp dbox11		; yes, finish message.
00024E  3               :
00024E  3               	jmp dbox13
00024E  3               dbox15:
00024E  3               	lda TmpAddr		; pop message pointer from the stack.
00024E  3               	sta z80_h
00024E  3               	lda TmpAddr+1
00024E  3               	sta z80_l
00024E  3               	rts
00024E  3               
00024E  3               ;------------------------------------------------------
00024E  3               ; Invert bar
00024E  3               ;------------------------------------------------------
00024E  3               
00024E  3               dbar:
00024E  3               	lda blft		; box left.
00024E  3               	sta dispx		; set display coordinate.
00024E  3               	jsr gprad		; get printing address.
00024E  3               
00024E  3               	lda bwid		; box width.
00024E  3               	sta z80_c		; loop counter in c.
00024E  3               	lda z80_h
00024E  3               	sta z80_d		; store screen address high byte.
00024E  3               dbar1:
00024E  3               	ldx #7			; pixel height in b.
00024E  3               dbar0:
00024E  3               	ldy scrtab,x
00024E  3               	lda (scraddr),y		; get screen byte.
00024E  3               	eor #255		; reverse all bits.
00024E  3               	sta (scraddr),y		; write back to screen.
00024E  3               	dex			; next line down.
00024E  3               	bpl dbar0		; draw rest of character.
00024E  3               
00024E  3               	inc scraddr		; one char right.
00024E  3               	dec z80_c		; decrement character counter.
00024E  3               	bne dbar1		; repeat for whole line.
00024E  3               	rts
00024E  3               
00024E  3               ;------------------------------------------------------
00024E  3               ; Point to object
00024E  3               ;
00024E  3               ; Input:
00024E  3               ;  combyt
00024E  3               ;
00024E  3               ; Output:
00024E  3               ;  A = object number, A=255 if already in possession
00024E  3               ;------------------------------------------------------
00024E  3               
00024E  3               invdis:
00024E  3               	lda z80_l		; store message text pointer.
00024E  3               	pha
00024E  3               	lda z80_h
00024E  3               	pha
00024E  3               	lda combyt		; object number.
00024E  3               	inc combyt		; ready for next one.
00024E  3               	jsr gotob		; check if we have object.
00024E  3               	tay
00024E  3               	pla
00024E  3               	sta z80_h
00024E  3               	pla
00024E  3               	sta z80_l
00024E  3               	tya
00024E  3               	rts
00024E  3               
00024E  3               ;------------------------------------------------------
00024E  3               ; Find option selected.
00024E  3               ;
00024E  3               ; Input:
00024E  3               ;  -
00024E  3               ;
00024E  3               ; Output:
00024E  3               ;  OPT = selected object
00024E  3               ;------------------------------------------------------
00024E  3               
00024E  3               fopt:
00024E  3               	lda dispy
00024E  3               	sec
00024E  3               	sbc btop		; find selected option.
00024E  3               	sta tmp+2		; option selected in b register.
00024E  3               	inc tmp+2
00024E  3               
00024E  3               	lda #0			; set to first item.
00024E  3               	sta combyt		; object number.
00024E  3               fopt0:
00024E  3               	jsr fobj		; find next object in inventory.
00024E  3               	dec tmp+2
00024E  3               	bne fopt0		; repeat for relevant steps down the list.
00024E  3               
00024E  3               	lda combyt		; get option.
00024E  3               	sta varopt		; store the option.
00024E  3               	dec varopt		; one less, due to where we increment combyt.
00024E  3               	jmp redraw		; redraw the screen.
00024E  3               fobj:
00024E  3               	ldy combyt		; object number.
00024E  3               	inc combyt		; ready for next item.
00024E  3               	tya
00024E  3               	jsr gotob		; do we have this item?
00024E  3               	cmp #255
00024E  3               	bne :+
00024E  3               	rts
00024E  3               :
00024E  3               	jmp fobj		; yes, it's on the list.
00024E  3               
00024E  3               ;bwid:	.byte 0              ; box/menu width.
00024E  3               ;blen:	.byte 0              ; box/menu height.
00024E  3               ;btop:	.byte 0              ; box coordinates.
00024E  3               ;blft:	.byte 0
00024E  3               .endif
00024E  3               
00024E  3               ;----------------------------------------------------
00024E  3               ; Wait for keypress.
00024E  3               ;----------------------------------------------------
00024E  3               
00024E  3               prskey:
00024E  3  98           	tya
00024F  3  48           	pha
000250  3               prsloop:
000250  3  20 B1 02     	jsr vsync
000253  3  20 71 FE     	jsr READKEY
000256  3  C0 FF        	cpy #255
000258  3  F0 F6        	beq prsloop		; wait until key pressed
00025A  3  68           	pla
00025B  3  A8           	tay
00025C  3  60           	rts
00025D  3               
00025D  3               ;----------------------------------------------------
00025D  3               ; Delay routine 1/50 sec
00025D  3               ;
00025D  3               ; Wait 1/60 sec = 16666 usec
00025D  3               ; Wait 208 x 16 =  3328 usec
00025D  3               ;                 19994 usec
00025D  3               ; rts           =     6 usec
00025D  3               ; Total         = 20000 usec
00025D  3               ;----------------------------------------------------
00025D  3               
00025D  3               delay:
00025D  3  85 rr        	sta xtmp
00025F  3               del_loop:
00025F  3  20 66 FE     	jsr SCRSYNC		; wait for flyback
000262  3               
000262  3  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
000264  3               delay1:
000264  3  61 80        	adc ($80,x)		;	 6 usec
000266  3  61 80        	adc ($80,x)		;	 6 usec
000268  3  88           	dey			;	 2 usec
000269  3  D0 F9        	bne delay1		;	 2 usec
00026B  3  EA           	nop			; 2 usec
00026C  3  EA           	nop			; 2 usec
00026D  3               				; tot: 20000 usec
00026D  3  C6 rr        	dec xtmp
00026F  3  D0 EE        	bne del_loop
000271  3  60           	rts
000272  3               
000272  3               ;----------------------------------------------------
000272  3               ; Clear sprite table.
000272  3               ;
000272  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
000272  3               ;----------------------------------------------------
000272  3               
000272  3               xspr:
000272  3  A9 FF        	lda #255		; clear byte.
000274  3  A2 00        	ldx #0			; length of table.
000276  3               xspr0:
000276  3  9D 6C 16     	sta sprtab,x		; sprite table.
000279  3  E8           	inx			; move to next byte.
00027A  3  E0 CC        	cpx #SPRBUF
00027C  3  D0 F8        	bne xspr0		; repeat for rest of table.
00027E  3  60           	rts
00027F  3               
00027F  3               ;-------------------------------------------------------------
00027F  3               ; Initialise all objects.
00027F  3               ;
00027F  3               ; Reset current room,y,x to start room,y,x for all objects
00027F  3               ;-------------------------------------------------------------
00027F  3               
00027F  3               .if oflag
00027F  3               iniob:
00027F  3  A9 A8        	lda #<objdta 		; objects table.
000281  3  85 68        	sta z80_x
000283  3  A9 79        	lda #>objdta
000285  3  85 69        	sta z80_i
000287  3               
000287  3  AE 49 02     	ldx numob 		; number of objects in the game.
00028A  3               iniob0:
00028A  3  A0 23        	ldy #35
00028C  3  B1 68        	lda (z80_ix),y 		; start screen.
00028E  3  A0 20        	ldy #32
000290  3  91 68        	sta (z80_ix),y 		; set start screen.
000292  3               
000292  3  A0 24        	ldy #36
000294  3  B1 68        	lda (z80_ix),y 		; find start y.
000296  3  A0 21        	ldy #33
000298  3  91 68        	sta (z80_ix),y 		; set start y.
00029A  3               
00029A  3  A0 25        	ldy #37
00029C  3  B1 68        	lda (z80_ix),y 		; get initial x.
00029E  3  A0 22        	ldy #34
0002A0  3  91 68        	sta (z80_ix),y 		; set x coord.
0002A2  3               
0002A2  3  18           	clc 			; point to next object.
0002A3  3  A5 68        	lda z80_x
0002A5  3  69 26        	adc #38			; distance between objects.
0002A7  3  85 68        	sta z80_x
0002A9  3  90 02        	bcc :+
0002AB  3  E6 69        	inc z80_i
0002AD  3               :
0002AD  3  CA           	dex 			; repeat.
0002AE  3  D0 DA        	bne iniob0
0002B0  3               
0002B0  3  60           	rts
0002B1  3               .endif
0002B1  3               
0002B1  3               ;-------------------------------------------------------------
0002B1  3               ; Screen synchronisation.
0002B1  3               ;
0002B1  3               ;  - read joystick/keyboard
0002B1  3               ;  - handle sound
0002B1  3               ;  - sync framerate with clock
0002B1  3               ;  - handle shrapnel every even frame
0002B1  3               ;-------------------------------------------------------------
0002B1  3               
0002B1  3               vsync:
0002B1  3  48           	pha
0002B2  3  98           	tya
0002B3  3  48           	pha
0002B4  3  8A           	txa
0002B5  3  48           	pha
0002B6  3  20 14 0D     	jsr joykey		; read joystick/keyboard.
0002B9  3               vsync1:
0002B9  3  AD 09 B8     	lda Timer2_High		; sync framerate with clock
0002BC  3  C9 FF        	cmp #$ff
0002BE  3  D0 F9        	bne vsync1
0002C0  3  A9 C3        	lda #>50000
0002C2  3  8D 09 B8     	sta Timer2_High
0002C5  3  A9 50        	lda #<50000
0002C7  3  8D 08 B8     	sta Timer2_Low
0002CA  3               
0002CA  3  A5 rr        	lda clock
0002CC  3  29 01        	and #1
0002CE  3  D0 03        	bne:+
0002D0  3  20 4F 03     	jsr proshr		; handle shrapnel every even frame
0002D3  3               :
0002D3  3  AD F1 02     	lda sndtyp
0002D6  3  F0 13        	beq sndskip
0002D8  3               sndloop:
0002D8  3  AD 02 B0     	lda SpeakerBit		; handle sound
0002DB  3  AC F1 02     	ldy sndtyp
0002DE  3               sndwait:
0002DE  3  88           	dey
0002DF  3  D0 FD        	bne sndwait
0002E1  3  49 04        	eor #4
0002E3  3  8D 02 B0     	sta SpeakerBit
0002E6  3  CE F1 02     	dec sndtyp
0002E9  3  D0 ED        	bne sndloop
0002EB  3               sndskip:
0002EB  3  68           	pla
0002EC  3  AA           	tax
0002ED  3  68           	pla
0002EE  3  A8           	tay
0002EF  3  68           	pla
0002F0  3  60           	rts
0002F1  3               
0002F1  3  00           sndtyp:	.byte 0
0002F2  3               
0002F2  3               ;-----------------------------------------------
0002F2  3               ; Redraw the screen.
0002F2  3               ;
0002F2  3               ; Remove old copy of all sprites for redraw.
0002F2  3               ;-----------------------------------------------
0002F2  3               
0002F2  3               redraw:
0002F2  3               .if gflag
0002F2  3               	lda #$ff
0002F2  3               	sta andeor
0002F2  3               	lda #$00
0002F2  3               	sta andeor+1
0002F2  3               .endif
0002F2  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
0002F4  3  48           	pha
0002F5  3  A5 68        	lda z80_x
0002F7  3  48           	pha
0002F8  3               
0002F8  3  20 25 0A     	jsr droom		; show screen layout.
0002FB  3               .if oflag
0002FB  3  20 4D 05     	jsr shwob		; draw objects.
0002FE  3               .endif
0002FE  3               numsp0:
0002FE  3  A9 0C        	lda #NUMSPR		; sprites to draw.
000300  3  85 rr        	sta tmp
000302  3               
000302  3  A9 6C        	lda #<sprtab		; sprite table.
000304  3  85 68        	sta z80_x
000306  3  A9 16        	lda #>sprtab
000308  3  85 69        	sta z80_i
00030A  3               redrw0:
00030A  3  A0 00        	ldy #0
00030C  3  B1 68        	lda (z80_ix),y		; old sprite type.
00030E  3  C9 FF        	cmp #255		; is it enabled?
000310  3  F0 0B        	beq redrw1 		; no, find next one.
000312  3               
000312  3  A0 03        	ldy #3
000314  3  B1 68        	lda (z80_ix),y 		; sprite y.
000316  3  C9 B1        	cmp #177		; beyond maximum?
000318  3  B0 03        	bcs redrw1		; yes, nothing to draw.
00031A  3               
00031A  3  20 35 11     	jsr sspria		; show single sprite.
00031D  3               redrw1:
00031D  3  18           	clc			; next sprite.
00031E  3  A5 68        	lda z80_x
000320  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
000322  3  85 68        	sta z80_x
000324  3  90 02        	bcc :+
000326  3  E6 69        	inc z80_i
000328  3               :
000328  3  C6 rr        	dec tmp			; repeat for remaining sprites.
00032A  3  D0 DE        	bne redrw0
00032C  3               rpblc1:
00032C  3               ;	jsr dshrp		; redraw shrapnel.
00032C  3               
00032C  3               .if aflag
00032C  3               	jsr rbloc		; draw blocks for this screen
00032C  3               .endif
00032C  3  68           	pla			; retrieve sprite pointer.
00032D  3  85 68        	sta z80_x
00032F  3  68           	pla
000330  3  85 69        	sta z80_i
000332  3               
000332  3  60           	rts
000333  3               
000333  3               ;----------------------------------------------------------------------
000333  3               ; Clear screen routine.
000333  3               ;
000333  3               ; Fill screenmem $8000-$97ff with ScrFillByte
000333  3               ;----------------------------------------------------------------------
000333  3               
000333  3               cls:
000333  3  A9 80        	lda #>ScreenAddr		; screen address.
000335  3  8D 3F 03     	sta clsloop+2
000338  3  AD 6F 17     	lda andeor+1
00033B  3               .if iflag
00033B  3               	eor #$ff
00033B  3               .endif
00033B  3  A0 00        	ldy #0
00033D  3               clsloop:
00033D  3  99 00 80     	sta ScreenAddr,y
000340  3  C8           	iny
000341  3  D0 FA        	bne clsloop
000343  3  EE 3F 03     	inc clsloop+2
000346  3  AE 3F 03     	ldx clsloop+2
000349  3  E0 98        	cpx #>(ScreenAddr+$1800)
00034B  3  D0 F0        	bne clsloop
00034D  3  60           	rts
00034E  3               
00034E  3               ;----------------------------------------------------------------------
00034E  3               ; Atomic palette is static
00034E  3               ;----------------------------------------------------------------------
00034E  3               
00034E  3               setpal:
00034E  3  60           	rts
00034F  3               
00034F  3               ;----------------------------------------------------------------------
00034F  3               ; FODDER check
00034F  3               ;----------------------------------------------------------------------
00034F  3               
00034F  3               .if pflag .or dflag
00034F  3               fdchk:
00034F  3               	cmp #FODDER 		; is it fodder?
00034F  3               	beq :+
00034F  3               	rts 			; no.
00034F  3               :
00034F  3               	lda #0			; wipe fodder in MAP
00034F  3               	ldy #0
00034F  3               	sta (bufaddr),y 	; rewrite block type.
00034F  3               
00034F  3               	lda dispx		; x=x/8
00034F  3               	pha
00034F  3               	lsr a
00034F  3               	lsr a
00034F  3               	lsr a
00034F  3               	sta dispx
00034F  3               
00034F  3               	lda dispy		; y=y/8
00034F  3               	pha
00034F  3               	lsr a
00034F  3               	lsr a
00034F  3               	lsr a
00034F  3               	sta dispy
00034F  3               
00034F  3               	lda #0 			; block to write.
00034F  3               	jsr pattr 		; write block.
00034F  3               
00034F  3               	pla
00034F  3               	sta dispy
00034F  3               	pla
00034F  3               	sta dispx
00034F  3               	rts
00034F  3               .endif
00034F  3               
00034F  3               ;----------------------------------------------------
00034F  3               ; Scrolly text and puzzle variables.
00034F  3               ;----------------------------------------------------
00034F  3               
00034F  3               .if sflag
00034F  3               txtbit:	.byte 128		; bit to write.
00034F  3               txtwid:	.byte 16		; width of ticker message.
00034F  3               txtpos:	.word msgdat
00034F  3               txtini:	.word msgdat
00034F  3               txtscr:	.word ScreenAddr
00034F  3               .endif
00034F  3               
00034F  3               ;----------------------------------------------------
00034F  3               ; Specialist routines.
00034F  3               ; Process shrapnel.
00034F  3               ;----------------------------------------------------
00034F  3               proshr:
00034F  3               .if pflag
00034F  3               	lda #<SHRAPN		; table.
00034F  3               	sta z80_x
00034F  3               	lda #>SHRAPN
00034F  3               	sta z80_i
00034F  3               
00034F  3               	lda #NUMSHR		; shrapnel pieces to process.
00034F  3               	sta shrctr
00034F  3               prosh0:
00034F  3               	ldy #0
00034F  3               	lda (z80_ix),y		; on/off marker.
00034F  3               	asl a
00034F  3               proshx:
00034F  3               	bcs :+
00034F  3               	jsr prosh1 		; on, so process it.
00034F  3               :
00034F  3               	clc
00034F  3               	lda z80_x
00034F  3               	adc #SHRSIZ
00034F  3               	sta z80_x
00034F  3               	bcc :+
00034F  3               	inc z80_i
00034F  3               :
00034F  3               	dec shrctr		; round again.
00034F  3               	bne prosh0
00034F  3               .endif
00034F  3               .if sflag
00034F  3               	jsr scrly
00034F  3               .endif
00034F  3  60           	rts
000350  3               
000350  3               .if pflag
000350  3               ;shrctr:	.byte 0
000350  3               
000350  3               ;----------------------------------------------------
000350  3               ; Proces shrapnel piece
000350  3               ;----------------------------------------------------
000350  3               
000350  3               prosh1:
000350  3               	jsr plot 		; delete the pixel.
000350  3               
000350  3               	lda #<shrptr		; shrapnel routine pointers.
000350  3               	sta z80_l
000350  3               	lda #>shrptr
000350  3               	sta z80_h
000350  3               
000350  3               	ldy #0
000350  3               	lda (z80_ix),y		; restore shrapnel type.
000350  3               	jsr prosh2 		; run the routine.
000350  3               	jsr chkxy		; check x and y are good before we redisplay.
000350  3               
000350  3               	lda #<SHRSIZ 		; distance to next.
000350  3               	sta z80_e
000350  3               	lda #>SHRSIZ
000350  3               	sta z80_d
000350  3               	rts
000350  3               
000350  3               ;----------------------------------------------------
000350  3               ; Run the routine
000350  3               ;----------------------------------------------------
000350  3               
000350  3               prosh2:
000350  3               	asl a 			; 2 bytes per address.
000350  3               	tay
000350  3               	lda shrptr,y
000350  3               	sta z80_l
000350  3               	lda shrptr+1,y 		; fetch high byte from table.
000350  3               	sta z80_h
000350  3               	jmp (z80_hl) 		; jump to routine.
000350  3               
000350  3               ;----------------------------------------------------
000350  3               ; Paricle routine table
000350  3               ;----------------------------------------------------
000350  3               
000350  3               shrptr:	.word laser		; laser.
000350  3               	.word trail		; vapour trail.
000350  3               	.word shrap		; shrapnel from explosion.
000350  3               	.word dotl		; horizontal starfield left.
000350  3               	.word dotr		; horizontal starfield right.
000350  3               	.word dotu		; vertical starfield up.
000350  3               	.word dotd		; vertical starfield down.
000350  3               	.word ptcusr		; user particle.
000350  3               
000350  3               ;----------------------------------------------------
000350  3               ; Explosion shrapnel.
000350  3               ;----------------------------------------------------
000350  3               
000350  3               shrap:
000350  3               	ldy #1
000350  3               	lda (z80_ix),y 		; get the angle.
000350  3               	clc
000350  3               	adc #<shrsin		; shrapnel sine table.
000350  3               	sta z80_l
000350  3               	lda #>shrsin
000350  3               	adc #0
000350  3               	sta z80_h
000350  3               
000350  3               	ldy #0
000350  3               	lda (z80_hl),y 		; fetch value from table.
000350  3               	sta z80_e
000350  3               	inc z80_l 		; next byte of table.
000350  3               	bne :+
000350  3               	inc z80_h
000350  3               :
000350  3               	ldy #0
000350  3               	lda (z80_hl),y		; fetch value from table.
000350  3               	sta z80_d
000350  3               	inc z80_l		; next byte of table.
000350  3               	bne :+
000350  3               	inc z80_h
000350  3               :
000350  3               	ldy #0
000350  3               	lda (z80_hl),y 		; fetch value from table.
000350  3               	sta z80_c
000350  3               	inc z80_l 		; next byte of table.
000350  3               	bne :+
000350  3               	inc z80_h
000350  3               :
000350  3               	ldy #0
000350  3               	lda (z80_hl),y 		; fetch value from table.
000350  3               	sta z80_b
000350  3               
000350  3               	ldy #2
000350  3               	lda (z80_ix),y 		; x coordinate in hl.
000350  3               	clc
000350  3               	adc z80_e		; add sine lb
000350  3               	sta (z80_ix),y		; store new coordinate lb.
000350  3               	ldy #3
000350  3               	lda (z80_ix),y
000350  3               	adc z80_d		; add sine hb
000350  3               	sta (z80_ix),y		; store new coordinate hb.
000350  3               
000350  3               	ldy #4
000350  3               	lda (z80_ix),y	 	; y coordinate in hl.
000350  3               	clc
000350  3               	adc z80_c		; add cosine lb
000350  3               	sta (z80_ix),y		; store new coordinate lb.
000350  3               	ldy #5
000350  3               	lda (z80_ix),y
000350  3               	adc z80_b		; add cosine lb
000350  3               	sta (z80_ix),y		; store new coordinate hb.
000350  3               
000350  3               	rts
000350  3               
000350  3               ;----------------------------------------------------
000350  3               ; Move dots
000350  3               ;----------------------------------------------------
000350  3               
000350  3               dotl:
000350  3               	ldy #5
000350  3               	lda (z80_ix),y
000350  3               	sec
000350  3               	sbc #1		 	; move left.
000350  3               	sta (z80_ix),y
000350  3               	rts
000350  3               dotr:
000350  3               	ldy #5
000350  3               	lda (z80_ix),y
000350  3               	clc
000350  3               	adc #1		 	; move left.
000350  3               	sta (z80_ix),y
000350  3               	rts
000350  3               dotu:
000350  3               	ldy #3
000350  3               	lda (z80_ix),y
000350  3               	sec
000350  3               	sbc #1		 	; move up.
000350  3               	sta (z80_ix),y
000350  3               	rts
000350  3               dotd:
000350  3               	ldy #3
000350  3               	lda (z80_ix),y
000350  3               	clc
000350  3               	adc #1			; move down.
000350  3               	sta (z80_ix),y
000350  3               	rts
000350  3               
000350  3               ;----------------------------------------------------
000350  3               ; Check if coordinates are ok before redrawing at new position.
000350  3               ;
000350  3               ; left:   X>L		X=L	Ok
000350  3               ; right:  R+15>X	X=R	Ok
000350  3               ; top:    Y>T		Y=T	Ok
000350  3               ; bottom: B+15>Y	Y=B	Ok
000350  3               ;----------------------------------------------------
000350  3               
000350  3               chkxy:
000350  3               
000350  3               ; top:    Y>T		Y=T	Ok
000350  3               
000350  3               	ldy #3
000350  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000350  3               	cmp wntopx		; window top.
000350  3               	bcs :+			; compare with top window limit.
000350  3               	jmp kilshr		; out of window, kill shrapnel.
000350  3               :
000350  3               ; left:   X>L		X=L	Ok
000350  3               
000350  3               	ldy #5
000350  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000350  3               	cmp wnlftx		; left edge.
000350  3               	bcs :+			; compare with left window limit.
000350  3               	jmp kilshr		; out of window, kill shrapnel.
000350  3               :
000350  3               ; bottom: B+15>Y	Y=B	Ok
000350  3               
000350  3               	lda wnbotx		; point to bottom.
000350  3               	clc
000350  3               	adc #15
000350  3               	ldy #3
000350  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
000350  3               	bcs :+			; compare with shrapnel x coordinate.
000350  3               	jmp kilshr		; off screen, kill shrapnel..
000350  3               :
000350  3               ; right:  R+15>X	X=R	Ok
000350  3               
000350  3               	lda wnrgtx		; point to right edge.
000350  3               	clc
000350  3               	adc #15
000350  3               	ldy #5
000350  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
000350  3               	bcs :+			; compare with window limit.
000350  3               	jmp kilshr		; off screen, kill shrapnel.
000350  3               :
000350  3               
000350  3               ;----------------------------------------------------
000350  3               ; Drop through.
000350  3               ; Display shrapnel.
000350  3               ;----------------------------------------------------
000350  3               
000350  3               plot:
000350  3               	ldy #3
000350  3               	lda (z80_ix),y		; y integer.
000350  3               	sta dispy	 	; workspace coordinates.
000350  3               	ldy #5
000350  3               	lda (z80_ix),y	 	; x integer.
000350  3               	sta dispx 		; workspace coordinates.
000350  3               
000350  3               	ldy #0
000350  3               	lda (z80_ix),y 		; type.
000350  3               	bne :+			; is it a laser?
000350  3               	jmp plot1 		; yes, draw laser instead.
000350  3               :
000350  3               plot0:
000350  3               	lda dispx		; which pixel within byte do we
000350  3               	and #7			; want to set first?
000350  3               	tay
000350  3               	lda dots,y 		; table of small pixel positions.
000350  3               	sta z80_e 		; get value.
000350  3               
000350  3               	jsr scadd 		; screen address.
000350  3               	ldy #0
000350  3               	lda (scraddr),y		; see what's already there.
000350  3               	eor z80_e
000350  3               	sta (scraddr),y 	; put back on screen.
000350  3               	rts
000350  3               
000350  3               plot1:
000350  3               	jsr scadd 		; screen address.
000350  3               	ldy #0
000350  3               	lda (scraddr),y 	; fetch byte there.
000350  3               	eor #255 		; toggle all bits.
000350  3               	sta (scraddr),y 	; new byte.
000350  3               	rts
000350  3               
000350  3               ;----------------------------------------------------
000350  3               ; Switch off shrapnel
000350  3               ;----------------------------------------------------
000350  3               
000350  3               kilshr:
000350  3               	lda #128
000350  3               	ldy #0
000350  3               	sta (z80_ix),y	; switch off shrapnel.
000350  3               	rts
000350  3               
000350  3               ;----------------------------------------------------
000350  3               ; Sine/cosine table
000350  3               ;----------------------------------------------------
000350  3               
000350  3               shrsin:	.word 0,1024,391,946,724,724,946,391
000350  3               	.word 1024,0,946,65144,724,64811,391,64589
000350  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
000350  3               	.word 64512,0,64589,391,64811,724,65144,946
000350  3               
000350  3               ;----------------------------------------------------
000350  3               ; Create trail
000350  3               ;----------------------------------------------------
000350  3               
000350  3               trail:
000350  3               	ldy #1
000350  3               	lda (z80_ix),y 	; time remaining.
000350  3               	sec
000350  3               	sbc #1
000350  3               	sta (z80_ix),y
000350  3               	bne :+
000350  3               	jmp trailk		; time to switch it off.
000350  3               :
000350  3               	jsr qrand		; get a random number.
000350  3               	lsr a 			; x or y axis?
000350  3               	bcc :+
000350  3               	jmp trailv		; use y.
000350  3               :
000350  3               ; Trail horizontal
000350  3               
000350  3               	lsr a 			; which direction?
000350  3               	bcc :+
000350  3               	jmp traill		; go left.
000350  3               :
000350  3               ; Trail right
000350  3               
000350  3               	ldy #5
000350  3               	lda (z80_ix),y
000350  3               	clc
000350  3               	adc #1	 		; go right.
000350  3               	sta (z80_ix),y
000350  3               	rts
000350  3               
000350  3               ; Trail left
000350  3               
000350  3               traill:
000350  3               	ldy #5
000350  3               	lda (z80_ix),y
000350  3               	sec
000350  3               	sbc #1 			; go left.
000350  3               	sta (z80_ix),y
000350  3               	rts
000350  3               
000350  3               ; Trail vertical
000350  3               
000350  3               trailv:
000350  3               	lsr a		 	; which direction?
000350  3               	bcc :+
000350  3               	jmp trailu		; go up.
000350  3               :
000350  3               ; Trail down
000350  3               
000350  3               	ldy #3
000350  3               	lda (z80_ix),y
000350  3               	clc
000350  3               	adc #1 			; go down.
000350  3               	sta (z80_ix),y
000350  3               	rts
000350  3               
000350  3               ; Trail up
000350  3               
000350  3               trailu:
000350  3               	ldy #3
000350  3               	lda (z80_ix),y
000350  3               	sec
000350  3               	sbc #1 			; go up.
000350  3               	sta (z80_ix),y
000350  3               	rts
000350  3               
000350  3               ; Kill trail
000350  3               
000350  3               trailk:
000350  3               	lda #200		; set off-screen to kill vapour trail.
000350  3               	ldy #3
000350  3               	sta (z80_ix),y
000350  3               	rts
000350  3               
000350  3               ;----------------------------------------------------
000350  3               ; Create laser beam
000350  3               ;----------------------------------------------------
000350  3               
000350  3               laser:
000350  3               	ldy #1
000350  3               	lda (z80_ix),y 		; direction.
000350  3               	ror a 			; left or right?
000350  3               	bcs :+
000350  3               	jmp laserl		; move left.
000350  3               :
000350  3               ; Laser right
000350  3               
000350  3               	lda #8			; distance to travel.
000350  3               	sta z80_b
000350  3               	jmp laserm		; move laser.
000350  3               
000350  3               ; Laser left
000350  3               
000350  3               laserl:
000350  3               	lda #248		; distance to travel.
000350  3               	sta z80_b
000350  3               laserm:
000350  3               	ldy #5
000350  3               	lda (z80_ix),y		; x position.
000350  3               	clc
000350  3               	adc z80_b		; add distance.
000350  3               	sta (z80_ix),y		; set new x coordinate.
000350  3               
000350  3               ; Test new block.
000350  3               
000350  3               	sta dispx 		; set x for block collision detection purposes.
000350  3               	ldy #3
000350  3               	lda (z80_ix),y 		; get y.
000350  3               	sta dispy		; set coordinate for collision test.
000350  3               	jsr tstbl 		; get block type there.
000350  3               	cmp #WALL		; is it solid?
000350  3               	bne :+
000350  3               	jmp trailk		; yes, it cannot pass.
000350  3               :
000350  3               .if pflag .or dflag
000350  3                       cmp #FODDER             ; is it fodder?
000350  3                       bne :+
000350  3                       jsr fdchk               ; remove fodder block.
000350  3                       jmp trailk              ; destroy laser.
000350  3               :
000350  3               .endif
000350  3                       rts                     ; no, ignore it.
000350  3               
000350  3               ;----------------------------------------------------
000350  3               ; Dots mask
000350  3               ;----------------------------------------------------
000350  3               
000350  3               dots:	.byte 128,64,32,16,8,4,2,1
000350  3               
000350  3               
000350  3               ;----------------------------------------------------
000350  3               ; Plot, preserving de.
000350  3               ;----------------------------------------------------
000350  3               
000350  3               plotde:
000350  3               	lda z80_d 		; put de on stack.
000350  3               	pha
000350  3               	lda z80_e
000350  3               	pha
000350  3               
000350  3               	jsr plot 		; plot pixel.
000350  3               
000350  3               	pla			; restore de from stack.
000350  3               	sta z80_e
000350  3               	pla
000350  3               	sta z80_d
000350  3               
000350  3               	rts
000350  3               
000350  3               ;----------------------------------------------------
000350  3               ; Shoot a laser.
000350  3               ;----------------------------------------------------
000350  3               
000350  3               shoot:
000350  3               	sta z80_c		; store direction in c register.
000350  3               	ldy #8
000350  3               	lda (z80_ix),y 		; y coordinate.
000350  3               	clc
000350  3               shoot1:
000350  3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
000350  3               	sta z80_l 		; puty y coordinate in l.
000350  3               
000350  3               	ldy #9
000350  3               	lda (z80_ix),y 		; x coordinate in h.
000350  3               	sta z80_h
000350  3               
000350  3               	lda z80_i		; store pointer to sprite.
000350  3               	pha
000350  3               	lda z80_x
000350  3               	pha
000350  3               
000350  3               	jsr fpslot 		; find particle slot.
000350  3               	bcs :+
000350  3               	jmp vapou2		; failed, restore ix.
000350  3               :
000350  3               	lda #0
000350  3               	ldy #0
000350  3               	sta (z80_ix),y 		; set up a laser.
000350  3               
000350  3               	lda z80_c
000350  3               	ldy #1
000350  3               	sta (z80_ix),y 		; set the direction.
000350  3               
000350  3               	lda z80_l
000350  3               	ldy #3
000350  3               	sta (z80_ix),y		; set y coordinate.
000350  3               
000350  3               	ror z80_c		; check direction we want.
000350  3               	bcc :+
000350  3               	jmp shootr		; shoot right.
000350  3               :
000350  3               	lda z80_h		; X position.
000350  3               shoot0:
000350  3               	and #248		; align on character boundary.
000350  3               	ldy #5
000350  3               	sta (z80_ix),y		; set x coordinate.
000350  3               	jmp vapou0 		; draw first image.
000350  3               shootr:
000350  3               	lda z80_h		; x position.
000350  3               	clc
000350  3               	adc #15			; look right.
000350  3               	jmp shoot0		; align and continue.
000350  3               
000350  3               ;----------------------------------------------------
000350  3               ; Create a bit of vapour trail.
000350  3               ;----------------------------------------------------
000350  3               
000350  3               vapour:
000350  3               	lda z80_i		; store pointer to sprite.
000350  3               	pha
000350  3               	lda z80_x
000350  3               	pha
000350  3               
000350  3               	ldy #8
000350  3               	lda (z80_ix),y 		; y coordinate.
000350  3               	clc
000350  3               vapou3:
000350  3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
000350  3               	sta z80_l
000350  3               
000350  3               	ldy #9
000350  3               	lda (z80_ix),y 		; x coordinate.
000350  3               	adc #7
000350  3               	sta z80_h
000350  3               
000350  3               	jsr fpslot 		; find particle slot.
000350  3               	bcc :+
000350  3               	jmp vapou1		; no, we can use it.
000350  3               :
000350  3               vapou2:
000350  3               	pla
000350  3               	sta z80_x
000350  3               	pla
000350  3               	sta z80_i
000350  3               	rts
000350  3               vapou1:
000350  3               	lda z80_l
000350  3               	ldy #3
000350  3               	sta (z80_ix),y		; set up y.
000350  3               
000350  3               	lda z80_h
000350  3               	ldy #5
000350  3               	sta (z80_ix),y 		; set up x coordinate.
000350  3               
000350  3               	jsr qrand		; get quick random number.
000350  3               	and #15			; random time.
000350  3               	clc
000350  3               	adc #15			; minimum time on screen.
000350  3               	ldy #1
000350  3               	sta (z80_ix),y		; set time on screen.
000350  3               
000350  3               	lda #1
000350  3               	ldy #0
000350  3               	sta (z80_ix),y		; define particle as vapour trail.
000350  3               vapou0:
000350  3               	jsr chkxy		; plot first position.
000350  3               	jmp vapou2
000350  3               
000350  3               ;----------------------------------------------------
000350  3               ; Create a user particle.
000350  3               ;----------------------------------------------------
000350  3               
000350  3               ptusr:
000350  3               	sta z80_f		; store timer.
000350  3               
000350  3               	ldy #8
000350  3               	lda (z80_ix),y 		; y coordinate.
000350  3               	clc
000350  3               	adc #7			; mid-point of sprite.
000350  3               	sta z80_l
000350  3               
000350  3               	ldy #9
000350  3               	lda (z80_ix),y 		; x coordinate.
000350  3               	clc
000350  3               	adc #7			; mid-point of sprite.
000350  3               	sta z80_h
000350  3               
000350  3               	jsr fpslot 		; find particle slot.
000350  3               	bcs ptusr1
000350  3               	rts 			; out of slots, can't generate anything.
000350  3               ptusr1:
000350  3               	lda z80_l
000350  3               	ldy #3
000350  3               	sta (z80_ix),y 		; set up y.
000350  3               
000350  3               	lda z80_h
000350  3               	ldy #5
000350  3               	sta (z80_ix),y		; set up x coordinate.
000350  3               
000350  3               	lda z80_f 		; restore timer.
000350  3               	ldy #1
000350  3               	sta (z80_ix),y		; set time on screen.
000350  3               
000350  3               	lda #7
000350  3               	ldy #0
000350  3               	sta (z80_ix),y		; define particle as user particle.
000350  3               
000350  3               	jmp chkxy		; plot first position.
000350  3               
000350  3               ;----------------------------------------------------
000350  3               ; Create a vertical or horizontal star.
000350  3               ;----------------------------------------------------
000350  3               
000350  3               star:
000350  3               	lda z80_i		; store pointer to sprite.
000350  3               	pha
000350  3               	lda z80_x
000350  3               	pha
000350  3               
000350  3               	jsr fpslot 		; find particle slot.
000350  3               	bcs star7		; found one we can use.
000350  3               star0:
000350  3               	pla 			; restore sprite pointer.
000350  3               	sta z80_x
000350  3               	pla
000350  3               	sta z80_i
000350  3               	rts 			; out of slots, can't generate anything.
000350  3               star7:
000350  3               	lda z80_c		; direction.
000350  3               	and #3 			; is it left?
000350  3               	bne :+
000350  3               	jmp star1 		; yes, it's left.
000350  3               :
000350  3               	cmp #1 			; is it right?
000350  3               	bne :+
000350  3               	jmp star2 		; yes, it's right.
000350  3               :
000350  3               	cmp #2 			; is it up?
000350  3               	bne :+
000350  3               	jmp star3 		; yes, it's up.
000350  3               :
000350  3               	ldy wntopx 		; get edge of screen.
000350  3               	iny			; down one pixel.
000350  3               	tya
000350  3               star8:
000350  3               	ldy #3
000350  3               	sta (z80_ix),y 		; set y coord.
000350  3               	jsr qrand 		; get quick random number.
000350  3               star9:
000350  3               	ldy #5
000350  3               	sta (z80_ix),y		; set x position.
000350  3               
000350  3               	lda z80_c		; direction.
000350  3               	and #3			; zero to three.
000350  3               	clc
000350  3               	adc #3			; 3 to 6 for starfield.
000350  3               	ldy #0
000350  3               	sta (z80_ix),y		; define particle as star.
000350  3               	jsr chkxy		; plot first position.
000350  3               	jmp star0
000350  3               star1:
000350  3               	jsr qrand		; get quick random number.
000350  3               	ldy #3
000350  3               	sta (z80_ix),y 		; set y coord.
000350  3               
000350  3               	lda wnrgtx 		; get edge of screen.
000350  3               	clc
000350  3               	adc #15			; add width of sprite minus 1.
000350  3               	jmp star9
000350  3               star2:
000350  3               	jsr qrand 		; get quick random number.
000350  3               	ldy #3
000350  3               	sta (z80_ix),y		; set y coord.
000350  3               
000350  3               	lda wnlftx		; get edge of screen.
000350  3               	jmp star9
000350  3               star3:
000350  3               	lda wnbotx 		; get edge of screen.
000350  3               	clc
000350  3               	adc #15 		; height of sprite minus one pixel.
000350  3               	jmp star8
000350  3               
000350  3               ;----------------------------------------------------
000350  3               ; Find particle slot for lasers or vapour trail.
000350  3               ; can't use alternate accumulator.
000350  3               ;----------------------------------------------------
000350  3               
000350  3               fpslot:
000350  3               	lda #<SHRAPN 		; shrapnel table.
000350  3               	sta z80_x
000350  3               	lda #>SHRAPN
000350  3               	sta z80_i
000350  3               
000350  3               	lda #NUMSHR		; number of pieces in table.
000350  3               	sta z80_b
000350  3               fpslt0:
000350  3               	ldy #0
000350  3               	lda (z80_ix),y		; get type.
000350  3               	asl a  			; is this slot in use?
000350  3               	bcc :+
000350  3               	rts			; no, we can use it.
000350  3               :
000350  3               	clc			; point to more shrapnel.
000350  3               	lda z80_x
000350  3               	adc #SHRSIZ
000350  3               	sta z80_x
000350  3               	bcc :+
000350  3               	inc z80_i
000350  3               :
000350  3               	dec z80_b		; repeat for all shrapnel.
000350  3               	bne fpslt0
000350  3               
000350  3               	clc
000350  3               	rts 			; out of slots, can't generate anything.
000350  3               
000350  3               ;----------------------------------------------------
000350  3               ; Create an explosion at sprite position.
000350  3               ;----------------------------------------------------
000350  3               
000350  3               explod:
000350  3               	sta z80_c 		; particles to create.
000350  3               
000350  3               	lda z80_i 		; store pointer to sprite.
000350  3               	pha
000350  3               	lda z80_x
000350  3               	pha
000350  3               
000350  3               	ldy #8
000350  3               	lda (z80_ix),y 		; y coordinate.
000350  3               	sta z80_l
000350  3               	ldy #9
000350  3               	lda (z80_ix),y		; x coordinate.
000350  3               	sta z80_h
000350  3               
000350  3               	lda #<SHRAPN		; shrapnel table.
000350  3               	sta z80_x
000350  3               	lda #>SHRAPN
000350  3               	sta z80_i
000350  3               
000350  3               	lda #NUMSHR		; number of pieces in table.
000350  3               	sta explcnt
000350  3               expld0:
000350  3               	ldy #0
000350  3               	lda (z80_ix),y		; get type.
000350  3               	asl a 			; is this slot in use?
000350  3               	bcs expld1		; no, we can use it.
000350  3               expld2:
000350  3               	clc
000350  3               	lda z80_x
000350  3               	adc #SHRSIZ
000350  3               	sta z80_x
000350  3               	bcc :+
000350  3               	inc z80_i
000350  3               :
000350  3               	dec explcnt		; repeat for all shrapnel.
000350  3               	bne expld0
000350  3               expld3:
000350  3               	pla			; restore sprite pointer.
000350  3               	sta z80_x
000350  3               	pla
000350  3               	sta z80_i
000350  3               	rts 			; out of slots, can't generate any more.
000350  3               
000350  3               expld1:
000350  3               	lda z80_c		; shrapnel counter.
000350  3               	and #15			; 0 to 15.
000350  3               	clc			; add to x.
000350  3               	adc z80_l
000350  3               	ldy #3
000350  3               	sta (z80_ix),y		; y coord.
000350  3               
000350  3               	lda seed3 		; crap random number.
000350  3               	and #15			; 0 to 15.
000350  3               	clc 			; add to y.
000350  3               	adc z80_h
000350  3               	ldy #5
000350  3               	sta (z80_ix),y		; x coord.
000350  3               
000350  3               	lda #2
000350  3               	ldy #0
000350  3               	sta (z80_ix),y		; switch it on.
000350  3               
000350  3               	jsr chkxy		; plot first position.
000350  3               	jsr qrand		; quick random angle.
000350  3               	and #60 		; keep within range.
000350  3               	ldy #1
000350  3               	sta (z80_ix),y		; angle.
000350  3               
000350  3               	dec z80_c		; one less piece of shrapnel to generate.
000350  3               	bne expld2 		; back to main explosion loop.
000350  3               	jmp expld3 		; restore sprite pointer and exit.
000350  3               
000350  3               ;explcnt:	.byte 0
000350  3               
000350  3               ;----------------------------------------------------
000350  3               ; Quick random
000350  3               ;----------------------------------------------------
000350  3               
000350  3               qrand:
000350  3               	jsr random		; r register.
000350  3               	eor seed3		; combine with seed.
000350  3               	sta seed3 		; new seed.
000350  3               	rts
000350  3               
000350  3               ;seed3:	.byte 0
000350  3               
000350  3               ;----------------------------------------------------
000350  3               ; Display all shrapnel.
000350  3               ;----------------------------------------------------
000350  3               
000350  3               dshrp:
000350  3               	lda #<plotde		; display routine.
000350  3               	sta proshx+1
000350  3               	lda #>plotde
000350  3               	sta proshx+2
000350  3               	jsr proshr		; process shrapnel.
000350  3               
000350  3               	lda #<prosh1		; processing routine.
000350  3               	sta proshx+1
000350  3               	lda #>prosh1
000350  3               	sta proshx+2
000350  3               	rts
000350  3               
000350  3               ;------------------------------------------------------
000350  3               ; Particle engine.
000350  3               ;
000350  3               ; Init particle data for 55 particles in SHRAPN table.
000350  3               ; Every particle has 6 bytes.
000350  3               ;
000350  3               ; global:	-
000350  3               ; local:	x,y,hl
000350  3               ; calls:	-
000350  3               ;------------------------------------------------------
000350  3               
000350  3               inishr:
000350  3               	lda #<SHRAPN 		; table.
000350  3               	sta z80_l
000350  3               	lda #>SHRAPN
000350  3               	sta z80_h
000350  3               
000350  3               	ldy #0
000350  3               	ldx #NUMSHR		; shrapnel pieces to process.
000350  3               inish0:
000350  3               	lda #255 		; kill the shrapnel.
000350  3               	sta (z80_hl),y
000350  3               
000350  3               	clc 			; point there.
000350  3               	lda z80_l
000350  3               	adc #SHRSIZ		; distance to next.
000350  3               	sta z80_l
000350  3               	bcc :+
000350  3               	inc z80_h
000350  3               :
000350  3               	dex
000350  3               	bne inish0 		; round again.
000350  3               	rts
000350  3               
000350  3               ;------------------------------------------------------
000350  3               ; Check for collision between laser and sprite.
000350  3               ;------------------------------------------------------
000350  3               
000350  3               lcol:
000350  3               	lda #<SHRAPN		; shrapnel table.
000350  3               	sta z80_l
000350  3               	lda #>SHRAPN
000350  3               	sta z80_h
000350  3               
000350  3               	lda #NUMSHR		; number of pieces in table.
000350  3               	sta z80_b
000350  3               lcol0:
000350  3               	ldy #0
000350  3               	lda (z80_hl),y 		; get type.
000350  3               	beq lcol1		; yes, check collision.
000350  3               lcol3:
000350  3               	clc			; point to more shrapnel.
000350  3               	lda z80_l
000350  3               	adc #SHRSIZ
000350  3               	sta z80_l
000350  3               	bcc :+
000350  3               	inc z80_h
000350  3               :
000350  3               	dec z80_b		; repeat for all shrapnel.
000350  3               	bne lcol0
000350  3               	rts 			; no collision, carry not set.
000350  3               lcol1:
000350  3               	ldy #3
000350  3               	lda (z80_hl),y		; get y.
000350  3               	sec
000350  3               	ldy #8
000350  3               	sbc (z80_ix),y		; subtract sprite y.
000350  3               lcolh:
000350  3               	cmp #SPR_HGT 		; within range?
000350  3               	bcc :+
000350  3               	jmp lcol2		; no, missed.
000350  3               :
000350  3               	ldy #5
000350  3               	lda (z80_hl),y 		; get x.
000350  3               	sec
000350  3               	ldy #9
000350  3               	sbc (z80_ix),y 		; subtract sprite y.
000350  3               	cmp #16			; within range?
000350  3               	bcs :+
000350  3               	jmp lcol4 		; yes, collision occurred.
000350  3               :
000350  3               lcol2:
000350  3               	jmp lcol3
000350  3               lcol4:
000350  3               	sec
000350  3               	rts 			; return with carry set for collision.
000350  3               .endif
000350  3               
000350  3               ;------------------------------------------------------
000350  3               ; Main game engine code starts here.
000350  3               ; After initialisation, mloop is the main loop
000350  3               ;------------------------------------------------------
000350  3               
000350  3               game:
000350  3               
000350  3               ; Set up screen address table.
000350  3               
000350  3               setsat:
000350  3  A9 00        	lda #<ScreenAddr		; start of screen.
000352  3  85 rr        	sta scraddr
000354  3  A9 80        	lda #>ScreenAddr
000356  3  85 rr        	sta scraddr+1
000358  3               
000358  3  A0 00        	ldy #0			; vertical lines on screen.
00035A  3               setsa0:
00035A  3  A5 rr        	lda scraddr
00035C  3  99 00 9B     	sta SCADTB_lb,y		; write low byte.
00035F  3  A5 rr        	lda scraddr+1
000361  3  C0 C0        	cpy #192		; vertical lines on screen.
000363  3  90 02        	bcc :+
000365  3  09 F0        	ora #$F0		; plot sprites in rom if of screen
000367  3               :
000367  3  99 00 9C     	sta SCADTB_hb,y		; write high byte.
00036A  3  20 1E 12     	jsr nline		; next line down.
00036D  3  C8           	iny			; next position in table.
00036E  3  D0 EA        	bne setsa0
000370  3               
000370  3               ; Init graphics mode
000370  3               
000370  3  A9 F0        	lda #ScrMode		; graphics mode
000372  3  8D 00 B0     	sta ScrSelAddr 		; screen selection address
000375  3  20 4E 03     	jsr setpal 		; set up palette.
000378  3               
000378  3               ; Init AtoMMC joystick
000378  3  20 4E 0D     	jsr joyinit		; AtoMMC joystick on PORT B
00037B  3               
00037B  3               rpblc2:
00037B  3               .if pflag
00037B  3               	jsr inishr 		; initialise particle engine.
00037B  3               .endif
00037B  3               evintr:
00037B  3  20 02 24     	jsr evnt12 		; call intro/menu event.
00037E  3               
00037E  3  A9 02        	lda #WALL 		; write default property.
000380  3  A2 00        	ldx #0
000382  3               clrmap:
000382  3  9D 00 98     	sta MAP,x 		; block properties.
000385  3  9D 00 99     	sta MAP+256,x
000388  3  9D 00 9A     	sta MAP+512,x
00038B  3  E8           	inx			; next byte.
00038C  3  D0 F4        	bne clrmap
00038E  3               .if oflag
00038E  3  20 7F 02     	jsr iniob 		; initialise objects.
000391  3               .endif
000391  3  A9 00        	lda #0			; put zero in accumulator.
000393  3  85 rr        	sta gamwon		; reset game won flag.
000395  3               
000395  3  20 FD 04     	jsr inisc 		; init the score.
000398  3               mapst:
000398  3  AD C2 17     	lda stmap 		; start position on map.
00039B  3  8D 49 17     	sta roomtb		; set up position in table, if there is one.
00039E  3               
00039E  3               inipbl:
00039E  3               .if aflag
00039E  3               	lda #<eop		; reset blockpointer
00039E  3               	sta pbptr
00039E  3               	lda #>eop
00039E  3               	sta pbptr+1
00039E  3               .endif
00039E  3  20 31 13     	jsr initsc 		; set up first screen.
0003A1  3               
0003A1  3  A9 38        	lda #<ssprit 		; default to spare sprite in table.
0003A3  3  85 68        	sta z80_x
0003A5  3  A9 17        	lda #>ssprit
0003A7  3  85 69        	sta z80_i
0003A9  3               evini:
0003A9  3  20 03 24     	jsr evnt13 		; initialisation.
0003AC  3               
0003AC  3               ; Two restarts.
0003AC  3               ; First restart - clear all sprites and initialise everything.
0003AC  3               
0003AC  3               rstrt:
0003AC  3  20 9D 04     	jsr rsevt 		; restart events.
0003AF  3  20 72 02     	jsr xspr 		; clear sprite table.
0003B2  3  20 9D 14     	jsr sprlst 		; fetch pointer to screen sprites.
0003B5  3  20 26 15     	jsr ispr 		; initialise sprite table.
0003B8  3               
0003B8  3  4C C7 03     	jmp rstrt0
0003BB  3               
0003BB  3               ; Second restart - clear all but player, and don't initialise him.
0003BB  3               
0003BB  3               rstrtn:
0003BB  3  20 9D 04     	jsr rsevt		; restart events.
0003BE  3  20 CA 14     	jsr nspr 		; clear all non-player sprites.
0003C1  3  20 9D 14     	jsr sprlst 		; fetch pointer to screen sprites.
0003C4  3  20 63 15     	jsr kspr 		; initialise sprite table, no more players.
0003C7  3               
0003C7  3               ; Set up the player and/or enemy sprites.
0003C7  3               
0003C7  3               rstrt0:
0003C7  3  A9 00        	lda #0 			; zero in accumulator.
0003C9  3  85 rr        	sta nexlev 		; reset next level flag.
0003CB  3  85 rr        	sta restfl 		; reset restart flag.
0003CD  3  85 rr        	sta deadf 		; reset dead flag.
0003CF  3  20 25 0A     	jsr droom 		; show screen layout.
0003D2  3               rpblc0:
0003D2  3               .if pflag
0003D2  3               	jsr inishr 		; initialise particle engine.
0003D2  3               .endif
0003D2  3               .if aflag
0003D2  3               	jsr rbloc		; draw blocks for this screen
0003D2  3               .endif
0003D2  3               .if oflag
0003D2  3  20 4D 05     	jsr shwob		; draw objects.
0003D5  3               .endif
0003D5  3               
0003D5  3  A9 6C        	lda #<sprtab 		; address of sprite table, even sprites.
0003D7  3  85 68        	sta z80_x
0003D9  3  A9 16        	lda #>sprtab
0003DB  3  85 69        	sta z80_i
0003DD  3  20 0F 10     	jsr dspr 		; display sprites.
0003E0  3               
0003E0  3  A9 7D        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
0003E2  3  85 68        	sta z80_x
0003E4  3  A9 16        	lda #>(sprtab+TABSIZ)
0003E6  3  85 69        	sta z80_i
0003E8  3  20 0F 10     	jsr dspr 		; display sprites.
0003EB  3               mloop:
0003EB  3  20 B1 02     	jsr vsync 		; synchronise with display.
0003EE  3  A9 6C        	lda #<sprtab 		; address of sprite table, even sprites.
0003F0  3  85 68        	sta z80_x
0003F2  3  A9 16        	lda #>sprtab
0003F4  3  85 69        	sta z80_i
0003F6  3  20 0F 10     	jsr dspr 		; display even sprites.
0003F9  3               
0003F9  3  20 4C 05     	jsr plsnd 		; play sounds.
0003FC  3               
0003FC  3  20 4F 03     	jsr proshr
0003FF  3  A9 7D        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
000401  3  85 68        	sta z80_x
000403  3  A9 16        	lda #>(sprtab+TABSIZ)
000405  3  85 69        	sta z80_i
000407  3  20 0F 10     	jsr dspr 		; display odd sprites.
00040A  3               
00040A  3  A9 38        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
00040C  3  85 68        	sta z80_x
00040E  3  A9 17        	lda #>(ssprit)
000410  3  85 69        	sta z80_i
000412  3               evlp1:
000412  3  20 9D 22     	jsr evnt10 		; called once per main loop.
000415  3  20 8D 0F     	jsr pspr 		; process sprites.
000418  3               
000418  3               ; Main loop events.
000418  3               
000418  3  A9 38        	lda #<ssprit 		; point to spare sprite for spawning purposes.
00041A  3  85 68        	sta z80_x
00041C  3  A9 17        	lda #>ssprit
00041E  3  85 69        	sta z80_i
000420  3               evlp2:
000420  3  20 CD 23     	jsr evnt11 		; called once per main loop.
000423  3               bsortx:
000423  3  20 03 0F     	jsr bsort 		; sort sprites.
000426  3               
000426  3  A5 rr        	lda nexlev		; finished level flag.
000428  3  D0 1F        	bne newlev		; is set, go to next level.
00042A  3  A5 rr        	lda gamwon		; finished game flag.
00042C  3  D0 2A        	bne evwon		; is set, finish the game.
00042E  3  A5 rr        	lda restfl 		; finished level flag.
000430  3  C9 01        	cmp #1			; has it been set?
000432  3  D0 03        	bne :+
000434  3  4C AC 03     	jmp rstrt		; yes, go to next level.
000437  3               :
000437  3  C9 02        	cmp #2			; has it been set?
000439  3  D0 03        	bne :+
00043B  3  4C BB 03     	jmp rstrtn		; yes, go to next level.
00043E  3               :
00043E  3  A5 rr        	lda deadf 		; dead flag.
000440  3  D0 1C        	bne pdead		; yes, player dead.
000442  3               
000442  3               ; back to start of main loop.
000442  3               
000442  3  E6 rr        	inc frmno
000444  3  E6 rr        	inc clock
000446  3  4C EB 03     	jmp mloop		; switched to a jmp mloop during test mode.
000449  3               
000449  3               ;----------------------------------------------------------
000449  3               ; Read blocks from list and update screen accordingly.
000449  3               ;----------------------------------------------------------
000449  3               
000449  3               .if aflag
000449  3               rbloc:
000449  3               	lda #<eop		; reset temp blockpointer
000449  3               	sta tmp
000449  3               	lda #>eop
000449  3               	sta tmp+1
000449  3               
000449  3               rbloc2:
000449  3               	lda tmp			; check for last block
000449  3               	cmp pbptr
000449  3               	bne rbloc1
000449  3               	lda tmp+1
000449  3               	cmp pbptr+1
000449  3               	bne rbloc1
000449  3               	rts
000449  3               rbloc1:
000449  3               	ldy #0
000449  3               	lda (tmp),y		; check if block for this scno
000449  3               	cmp scno
000449  3               	bne rbloc0		; if not, skip
000449  3               	iny
000449  3               	lda (tmp),y		; get y
000449  3               	sta dispy
000449  3               	iny
000449  3               	lda (tmp),y		; get x
000449  3               	sta dispx
000449  3               	iny
000449  3               	lda (tmp),y		; get blocknr
000449  3               	jsr pattr2		; draw block
000449  3               rbloc0:
000449  3               	clc			; point to next block
000449  3               	lda tmp
000449  3               	adc #4
000449  3               	sta tmp
000449  3               	bcc rbloc2
000449  3               	inc tmp+1
000449  3               	jmp rbloc2
000449  3               .endif
000449  3               
000449  3               ;----------------------------------------------------------
000449  3               ; New level
000449  3               ;----------------------------------------------------------
000449  3               
000449  3               newlev:
000449  3  A5 rr        	lda scno 			; current screen.
00044B  3  18           	clc
00044C  3  69 01        	adc #1				; next screen.
00044E  3  CD F8 77     	cmp numsc			; total number of screens.
000451  3  B0 05        	bcs evwon			; yes, game finished.
000453  3  85 rr        	sta scno			; set new level number.
000455  3  4C AC 03     	jmp rstrt			; restart, clearing all aliens.
000458  3               
000458  3               evwon:
000458  3  20 60 25     	jsr evnt18		 	; game completed.
00045B  3  4C 72 04     	jmp tidyup			; tidy up and return to BASIC/calling routine.
00045E  3               
00045E  3               ;----------------------------------------------------------
00045E  3               ; Player dead.
00045E  3               ;----------------------------------------------------------
00045E  3               
00045E  3               pdead:
00045E  3  A9 00        	lda #0				; zeroise accumulator.
000460  3  85 rr        	sta deadf			; reset dead flag.
000462  3               evdie:
000462  3  20 23 25     	jsr evnt16 			; death subroutine.
000465  3  A5 rr        	lda numlif			; number of lives.
000467  3  F0 03        	beq :+
000469  3  4C AC 03     	jmp rstrt 			; restart game.
00046C  3               :
00046C  3               evfail:
00046C  3  20 56 25     	jsr evnt17 			; failure event.
00046F  3  4C 50 03     	jmp game			; restart game
000472  3               
000472  3               ;----------------------------------------------------------
000472  3               ; Tidy things up
000472  3               ;----------------------------------------------------------
000472  3               
000472  3               tidyup:
000472  3  A0 00        	ldy #0				; digits to check.
000474  3               tidyu2:
000474  3  B9 0D 07     	lda score,y 			; get score digit.
000477  3  CD 13 07     	cmp hiscor 			; are we larger than high score digit?
00047A  3  90 07        	bcc tidyu0			; high score is bigger.
00047C  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
00047E  3  C8           	iny				; next digit of high score.
00047F  3  C0 06        	cpy #6
000481  3  D0 F1        	bne tidyu2			; repeat for all digits
000483  3               tidyu0:
000483  3  A9 0D        	lda #<score			; return pointing to score.
000485  3  85 62        	sta z80_c
000487  3  A9 07        	lda #>score
000489  3  85 63        	sta z80_b
00048B  3  60           	rts
00048C  3               tidyu1:
00048C  3  A0 05        	ldy #5
00048E  3               tidyu3:
00048E  3  B9 0D 07     	lda score,y			; score.
000491  3  99 13 07     	sta hiscor,y			; high score.
000494  3  88           	dey
000495  3  10 F7        	bpl tidyu3 			; copy score to high score.
000497  3               evnewh:
000497  3  20 FB 25     	jsr evnt19			; new high score event.
00049A  3  4C 83 04     	jmp tidyu0			; tidy up.
00049D  3               
00049D  3               ;--------------------------------------------------
00049D  3               ; Restart event.
00049D  3               ;--------------------------------------------------
00049D  3               
00049D  3               rsevt:
00049D  3  A9 38        	lda #<ssprit 			; default to spare element in table.
00049F  3  85 68        	sta z80_x
0004A1  3  A9 17        	lda #>ssprit
0004A3  3  85 69        	sta z80_i
0004A5  3               evrs:
0004A5  3  4C F6 24     	jmp evnt14	 		; call restart event.
0004A8  3               
0004A8  3               ;------------------------------------------------------------------
0004A8  3               ; Copy number passed in a to string position bc, right-justified.
0004A8  3               ;
0004A8  3               ; Input:
0004A8  3               ;  A  = number
0004A8  3               ;  BC = string address
0004A8  3               ;
0004A8  3               ; Output:
0004A8  3               ;  BC = string with number
0004A8  3               ;-----------------------------------------------------------------
0004A8  3               
0004A8  3               num2ch:
0004A8  3  85 65        	sta z80_d		; Save number
0004AA  3               
0004AA  3  A9 00        	lda #0
0004AC  3  85 rr        	sta flag
0004AE  3               numdg3:
0004AE  3  A2 64        	ldx #100		; hundreds column.
0004B0  3  86 64        	stx z80_e
0004B2  3  20 C2 04     	jsr numdg		; show digit.
0004B5  3               numdg2:
0004B5  3  A2 0A        	ldx #10			; tens column.
0004B7  3  86 64        	stx z80_e
0004B9  3  20 C2 04     	jsr numdg		; show digit.
0004BC  3               
0004BC  3  E6 rr        	inc flag
0004BE  3  A2 01        	ldx #1			; units column.
0004C0  3  86 64        	stx z80_e
0004C2  3               numdg:
0004C2  3  A9 30        	lda #48			; clear digit.
0004C4  3  85 61        	sta z80_a
0004C6  3               numdg1:
0004C6  3  A5 65        	lda z80_d
0004C8  3  C5 64        	cmp z80_e
0004CA  3  90 0E        	bcc numdg0		; nothing to show.
0004CC  3  38           	sec
0004CD  3  A5 65        	lda z80_d
0004CF  3  E5 64        	sbc z80_e		; subtract from column.
0004D1  3  85 65        	sta z80_d
0004D3  3  E6 61        	inc z80_a		; increment digit.
0004D5  3  E6 rr        	inc flag
0004D7  3  4C C6 04     	jmp numdg1		; repeat until column is zero.
0004DA  3               numdg0:
0004DA  3  A0 00        	ldy #0
0004DC  3  A5 61        	lda z80_a
0004DE  3  91 62        	sta (z80_bc),y		; write digit to buffer.
0004E0  3  A5 rr        	lda flag
0004E2  3  F0 06        	beq :+
0004E4  3  E6 62        	inc z80_c		; next buffer position.
0004E6  3  D0 02        	bne :+
0004E8  3  E6 63        	inc z80_b
0004EA  3               :
0004EA  3  60           	rts
0004EB  3               num2dd:
0004EB  3  85 65        	sta z80_d		; Save number
0004ED  3               
0004ED  3  A9 01        	lda #1
0004EF  3  85 rr        	sta flag
0004F1  3               
0004F1  3  4C B5 04     	jmp numdg2
0004F4  3               num2td:
0004F4  3  85 65        	sta z80_d		; Save number
0004F6  3               
0004F6  3  A9 01        	lda #1
0004F8  3  85 rr        	sta flag
0004FA  3  4C AE 04     	jmp numdg3
0004FD  3               
0004FD  3               ;flag:	.byte 0
0004FD  3               
0004FD  3               ;---------------------------------------------------------
0004FD  3               ; Reset score to "000000"
0004FD  3               ;---------------------------------------------------------
0004FD  3               
0004FD  3               inisc:
0004FD  3  A9 30        	lda #'0'
0004FF  3  A2 05        	ldx #5			; digits to initialise.
000501  3               inisc0:
000501  3  9D 0D 07     	sta score,x 		; write zero digit.
000504  3  CA           	dex			; next column.
000505  3  10 FA        	bpl inisc0		; repeat for all digits.
000507  3               
000507  3  60           	rts
000508  3               
000508  3               ;-----------------------------------------------------
000508  3               ; Multiply h by d and return in hl.
000508  3               ;
000508  3               ; Input:
000508  3               ;  H = first number
000508  3               ;  D = second number
000508  3               ;
000508  3               ; Output:
000508  3               ;  HL = result H x D
000508  3               ;-----------------------------------------------------
000508  3               
000508  3               imul:
000508  3  A5 65        	lda z80_d		; HL = H * D
00050A  3  85 64        	sta z80_e
00050C  3  A5 67        	lda z80_h
00050E  3  85 62        	sta z80_c		; make c first multiplier.
000510  3               imul0:
000510  3  A9 00        	lda #0			; zeroise total.
000512  3  85 66        	sta z80_l
000514  3  85 67        	sta z80_h
000516  3               
000516  3  A5 67        	lda z80_h
000518  3  85 65        	sta z80_d		; zeroise high byte.
00051A  3               
00051A  3  A9 08        	lda #8			; repeat 8 times.
00051C  3  85 63        	sta z80_b
00051E  3               imul1:
00051E  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
000520  3  90 0E        	bcc imul2		; wasn't set.
000522  3  18           	clc			; bit was set, so add de.
000523  3  A5 66        	lda z80_l
000525  3  65 64        	adc z80_e
000527  3  85 66        	sta z80_l
000529  3  A5 67        	lda z80_h
00052B  3  65 65        	adc z80_d
00052D  3  85 67        	sta z80_h
00052F  3  18           	clc 			; reset carry.
000530  3               imul2:
000530  3  06 64        	asl z80_e 		; shift de 1 bit left.
000532  3  26 65        	rol z80_d
000534  3  C6 63        	dec z80_b
000536  3  D0 E6        	bne imul1		; repeat 8 times.
000538  3               
000538  3  60           	rts
000539  3               
000539  3               ;-----------------------------------------------
000539  3               ; Divide d by e and return in d, remainder in a.
000539  3               ;
000539  3               ; Input:
000539  3               ;  D = first number
000539  3               ;  E = second number
000539  3               ;
000539  3               ; Output:
000539  3               ;  D = result D/E
000539  3               ;  A = remainder
000539  3               ;-----------------------------------------------
000539  3               
000539  3               idiv:
000539  3  A9 00        	lda #0
00053B  3  A0 08        	ldy #8		 	; bits to shift.
00053D  3  06 65        	asl z80_d
00053F  3               idiv0:
00053F  3  2A           	rol a 			; multiply d by 2.
000540  3  C5 64        	cmp z80_e 		; test if e is smaller.
000542  3  90 02        	bcc idiv1		; e is greater, no division this time.
000544  3  E5 64        	sbc z80_e		; subtract it.
000546  3               idiv1:
000546  3  26 65        	rol z80_d		; rotate into d.
000548  3  88           	dey
000549  3  D0 F4        	bne idiv0		; repeat
00054B  3  60           	rts
00054C  3               
00054C  3               ;---------------------------------------------------
00054C  3               ; Play AY sound effect
00054C  3               ;---------------------------------------------------
00054C  3               
00054C  3               plsnd:
00054C  3  60           	rts
00054D  3               
00054D  3               ;---------------------------------------------------
00054D  3               ; Objects handling.
00054D  3               ; 32 bytes for image
00054D  3               ; 3 for room, y and x
00054D  3               ; 3 for starting room, y and x.
00054D  3               ; 254 = disabled.
00054D  3               ; 255 = object in player"s pockets.
00054D  3               ;---------------------------------------------------
00054D  3               
00054D  3               ;---------------------------------------------------
00054D  3               ; Show items present.
00054D  3               ;---------------------------------------------------
00054D  3               
00054D  3               .if oflag
00054D  3               shwob:
00054D  3  A9 A8        	lda #<objdta 			; objects table.
00054F  3  85 66        	sta z80_l
000551  3  A9 79        	lda #>objdta
000553  3  85 67        	sta z80_h
000555  3               
000555  3  AD 49 02     	lda numob 			; number of objects in the game.
000558  3  85 rr        	sta sprcnt
00055A  3               shwob0:
00055A  3  A0 20        	ldy #32 			; distance to room number.
00055C  3  B1 66        	lda (z80_hl),y 			; same as an item?
00055E  3  C5 rr        	cmp scno 			; current location.
000560  3  D0 03        	bne :+
000562  3  20 77 05     	jsr dobj 			; yes, display object.
000565  3               :
000565  3  18           	clc
000566  3  A5 66        	lda z80_l
000568  3  69 26        	adc #38 			; distance to next item.
00056A  3  85 66        	sta z80_l
00056C  3  A5 67        	lda z80_h
00056E  3  69 00        	adc #0
000570  3  85 67        	sta z80_h	 		; point to it.
000572  3  C6 rr        	dec sprcnt
000574  3  D0 E4        	bne shwob0 			; repeat for others.
000576  3  60           	rts
000577  3               
000577  3               ;---------------------------------------------------
000577  3               ; Display object.
000577  3               ; hl must point to object's start address.
000577  3               ;
000577  3               ; Input:
000577  3               ;  HL = object address
000577  3               ;---------------------------------------------------
000577  3               
000577  3               dobj:
000577  3  A0 21        	ldy #33
000579  3  B1 66        	lda (z80_hl),y 			; point to y.
00057B  3  85 rr        	sta dispy
00057D  3  C8           	iny
00057E  3  B1 66        	lda (z80_hl),y 			; point to x.
000580  3  85 rr        	sta dispx
000582  3               dobj1:
000582  3  4C 6D 09     	jmp sprite 			; draw this sprite.
000585  3               
000585  3               ;--------------------------------------
000585  3               ; Remove an object.
000585  3               ;
000585  3               ; Input:
000585  3               ;  A = object number
000585  3               ;--------------------------------------
000585  3               
000585  3               remob:
000585  3  CD 49 02     	cmp numob			; number of objects in game.
000588  3  90 01        	bcc :+				; are we checking past the end?
00058A  3  60           	rts				; yes, can't get non-existent item.
00058B  3               :
00058B  3  48           	pha				; remember object.
00058C  3  20 9A 05     	jsr getob			; pick it up if we haven't already got it.
00058F  3  68           	pla				; retrieve object number.
000590  3  20 C9 05     	jsr gotob			; get its address.
000593  3  A9 FE        	lda #254
000595  3  A0 20        	ldy #32
000597  3  91 66        	sta (z80_hl),y			; remove it.
000599  3  60           	rts
00059A  3               
00059A  3               ;---------------------------------------------------
00059A  3               ; Pick up object number held in the accumulator.
00059A  3               ;
00059A  3               ; Input:
00059A  3               ;  A = object number
00059A  3               ;---------------------------------------------------
00059A  3               
00059A  3               getob:
00059A  3  CD 49 02     	cmp numob 		; number of objects in game.
00059D  3  90 01        	bcc :+			; are we checking past the end?
00059F  3  60           	rts			; yes, can't get non-existent item.
0005A0  3               :
0005A0  3  20 C9 05     	jsr gotob 		; check if we already have it.
0005A3  3  C9 FF        	cmp #255
0005A5  3  D0 01        	bne :+
0005A7  3  60           	rts			; we already do.
0005A8  3               :
0005A8  3  A0 20        	ldy #32
0005AA  3  B1 66        	lda (z80_hl),y		; is it on this screen?
0005AC  3  C5 rr        	cmp scno 		; current screen.
0005AE  3  D0 14        	bne getob0		; not on screen, so nothing to delete.
0005B0  3               
0005B0  3  A9 FF        	lda #255
0005B2  3  91 66        	sta (z80_hl),y		; pick it up.
0005B4  3  C8           	iny 			; point to y coord.
0005B5  3               getob1:
0005B5  3  A0 21        	ldy #33
0005B7  3  B1 66        	lda (z80_hl),y		; y coord.
0005B9  3  85 rr        	sta dispy
0005BB  3  A0 22        	ldy #34
0005BD  3  B1 66        	lda (z80_hl),y 		; x coord.
0005BF  3  85 rr        	sta dispx
0005C1  3  4C 82 05     	jmp dobj1 		; delete object sprite.
0005C4  3               getob0:
0005C4  3  A9 FF        	lda #255
0005C6  3  91 66        	sta (z80_hl),y 		; pick it up.
0005C8  3  60           	rts
0005C9  3               .endif
0005C9  3               
0005C9  3               ;-----------------------------------------------------------------
0005C9  3               ; Got object check.
0005C9  3               ; Call with object in accumulator, returns zero set if in pockets.
0005C9  3               ;
0005C9  3               ; Input:
0005C9  3               ;  A = object number
0005C9  3               ;-----------------------------------------------------------------
0005C9  3               .if oflag .or mflag
0005C9  3               gotob:
0005C9  3  CD 49 02     	cmp numob 		; number of objects in game.
0005CC  3  90 03        	bcc :+ 			; are we checking past the end?
0005CE  3  4C D5 05     	jmp gotob0 		; yes, we can't have a non-existent object.
0005D1  3               :
0005D1  3  20 DA 05     	jsr findob		; find the object.
0005D4  3               gotob1:
0005D4  3  60           	rts
0005D5  3               
0005D5  3               gotob0:
0005D5  3  A9 FE        	lda #254 		; missing.
0005D7  3  4C D4 05     	jmp gotob1
0005DA  3               
0005DA  3               findob:
0005DA  3  48           	pha			; save object number
0005DB  3  A9 A8        	lda #<objdta 		; objects.
0005DD  3  85 66        	sta z80_l
0005DF  3  A9 79        	lda #>objdta
0005E1  3  85 67        	sta z80_h
0005E3  3  68           	pla			; retreive object number
0005E4  3  F0 0F        	beq fndob1 		; is it zero? yes, skip loop.
0005E6  3  AA           	tax 			; loop counter
0005E7  3               fndob2:
0005E7  3  18           	clc
0005E8  3  A5 66        	lda z80_l
0005EA  3  69 26        	adc #38 		; size of each object.
0005EC  3  85 66        	sta z80_l
0005EE  3  90 02        	bcc :+
0005F0  3  E6 67        	inc z80_h
0005F2  3               :
0005F2  3  CA           	dex 			; repeat until we find address.
0005F3  3  D0 F2        	bne fndob2
0005F5  3               fndob1:
0005F5  3  A0 20        	ldy #32			; distance to room it's in.
0005F7  3  B1 66        	lda (z80_hl),y		; fetch status.
0005F9  3  60           	rts
0005FA  3               .endif
0005FA  3               
0005FA  3               ;---------------------------------------------
0005FA  3               ; Drop object number at (dispx, dispy).
0005FA  3               ;
0005FA  3               ; Input:
0005FA  3               ;  A = object number
0005FA  3               ;---------------------------------------------
0005FA  3               
0005FA  3               .if oflag
0005FA  3               drpob:
0005FA  3  CD 49 02     	cmp numob 		; are we checking past the end?
0005FD  3  90 01        	bcc :+
0005FF  3  60           	rts			; yes, can't drop non-existent item.
000600  3               :
000600  3  20 C9 05     	jsr gotob		; make sure object is in inventory.
000603  3  C5 rr        	cmp scno		; already on this screen?
000605  3  D0 01        	bne :+
000607  3  60           	rts			; yes, nothing to do.
000608  3               :
000608  3  A0 20        	ldy #32
00060A  3  A5 rr        	lda scno
00060C  3  91 66        	sta (z80_hl),y		; bring onto screen.
00060E  3  A5 rr        	lda dispy		; sprite y coordinate.
000610  3  C8           	iny
000611  3  91 66        	sta (z80_hl),y		; point to object y.
000613  3  A5 rr        	lda dispx 		; sprite x coordinate.
000615  3  C8           	iny
000616  3  91 66        	sta (z80_hl),y 		; point to object x
000618  3  4C 77 05     	jmp dobj		; draw the object sprite.
00061B  3               
00061B  3               ;-----------------------------------------------
00061B  3               ; Seek objects at sprite position.
00061B  3               ;
00061B  3               ; Output:
00061B  3               ;  A = object number, if not found A=255
00061B  3               ;-----------------------------------------------
00061B  3               
00061B  3               skobj:
00061B  3  A9 A8        	lda #<objdta 		; pointer to objects.
00061D  3  85 66        	sta z80_l
00061F  3  A9 79        	lda #>objdta
000621  3  85 67        	sta z80_h
000623  3               
000623  3  AD 49 02     	lda numob 		; number of objects in game.
000626  3  85 63        	sta z80_b 		; set up the loop counter.
000628  3               skobj0:
000628  3  A5 rr        	lda scno		; current room number.
00062A  3  A0 20        	ldy #32
00062C  3  D1 66        	cmp (z80_hl),y		; is object in here?
00062E  3  D0 03        	bne :+
000630  3  20 45 06     	jsr skobj1		; yes, check coordinates.
000633  3               :
000633  3  18           	clc			; point to next object in table.
000634  3  A5 66        	lda z80_l
000636  3  69 26        	adc #38			; size of each object.
000638  3  85 66        	sta z80_l
00063A  3  90 02        	bcc :+
00063C  3  E6 67        	inc z80_h
00063E  3               :
00063E  3  C6 63        	dec z80_b
000640  3  D0 E6        	bne skobj0		; repeat for all objects.
000642  3               
000642  3  A9 FF        	lda #255		; end of list and nothing found, return 255.
000644  3  60           	rts
000645  3               
000645  3               skobj1:
000645  3  A0 21        	ldy #33			; point to y coordinate.
000647  3  B1 66        	lda (z80_hl),y		; point to y coordinate.
000649  3  38           	sec
00064A  3  A0 08        	ldy #8
00064C  3  F1 68        	sbc (z80_ix),y 		; subtract sprite y.
00064E  3  18           	clc
00064F  3  69 0F        	adc #15			; add sprite height minus one.
000651  3  C9 1F        	cmp #31			; within range?
000653  3  90 03        	bcc :+
000655  3  4C 73 06     	jmp skobj2		; no, ignore object.
000658  3               :
000658  3  A0 22        	ldy #34			; point to x coordinate now.
00065A  3  B1 66        	lda (z80_hl),y 		; get coordinate.
00065C  3  38           	sec
00065D  3  A0 09        	ldy #9
00065F  3  F1 68        	sbc (z80_ix),y 		; subtract the sprite x.
000661  3  18           	clc			; add sprite width minus one.
000662  3  69 0F        	adc #15
000664  3  C9 1F        	cmp #31			; within range?
000666  3  90 03        	bcc :+
000668  3  4C 73 06     	jmp skobj2		; no, ignore object.
00066B  3               :
00066B  3  68           	pla			; remove return address from stack.
00066C  3  68           	pla
00066D  3               
00066D  3  AD 49 02     	lda numob 		; objects in game.
000670  3  38           	sec
000671  3  E5 63        	sbc z80_b		; subtract loop counter.
000673  3               skobj2:
000673  3  60           	rts			; accumulator now points to object.
000674  3               .endif
000674  3               
000674  3               ;---------------------------------------------------------------------
000674  3               ; Spawn a new sprite.
000674  3               ;---------------------------------------------------------------------
000674  3               
000674  3               spawn:
000674  3  A9 6C        	lda #<sprtab		; sprite table.
000676  3  85 66        	sta z80_l
000678  3  A9 16        	lda #>sprtab
00067A  3  85 67        	sta z80_h
00067C  3               numsp1:
00067C  3  A9 0C        	lda #NUMSPR		; number of sprites.
00067E  3  85 rr        	sta spcnt
000680  3               spaw0:
000680  3  A0 00        	ldy #0
000682  3  B1 66        	lda (z80_hl),y		; get sprite type.
000684  3  C9 FF        	cmp #255		; is it an unused slot?
000686  3  F0 0F        	beq spaw1 		; yes, we can use this one.
000688  3               
000688  3  18           	clc 			; point to next sprite in table.
000689  3  A5 66        	lda z80_l
00068B  3  69 11        	adc #TABSIZ		; size of each entry.
00068D  3  85 66        	sta z80_l
00068F  3  90 02        	bcc :+
000691  3  E6 67        	inc z80_h
000693  3               :
000693  3  C6 rr        	dec spcnt		; one less iteration.
000695  3  D0 E9        	bne spaw0		; keep going until we find a slot.
000697  3               
000697  3               ; Didn't find one but drop through and set up a dummy sprite instead.
000697  3               
000697  3               spaw1:
000697  3  A5 69        	lda z80_i		; address of original sprite.
000699  3  48           	pha
00069A  3  A5 68        	lda z80_x
00069C  3  48           	pha
00069D  3               
00069D  3  A5 66        	lda z80_l		; store spawned sprite address.
00069F  3  85 rr        	sta spptr
0006A1  3  A5 67        	lda z80_h
0006A3  3  85 rr        	sta spptr+1
0006A5  3               
0006A5  3  A5 62        	lda z80_c
0006A7  3  A0 00        	ldy #0
0006A9  3  91 66        	sta (z80_hl),y 		; set the type.
0006AB  3  A0 05        	ldy #5
0006AD  3  91 66        	sta (z80_hl),y		; copy
0006AF  3               
0006AF  3  A5 63        	lda z80_b
0006B1  3  A0 01        	ldy #1
0006B3  3  91 66        	sta (z80_hl),y		; set the image.
0006B5  3  A0 06        	ldy #6
0006B7  3  91 66        	sta (z80_hl),y		; copy
0006B9  3               
0006B9  3  A9 00        	lda #0 			; frame zero.
0006BB  3  A0 02        	ldy #2
0006BD  3  91 66        	sta (z80_hl),y		; set frame.
0006BF  3  A0 07        	ldy #7
0006C1  3  91 66        	sta (z80_hl),y		; copy
0006C3  3               
0006C3  3  A0 08        	ldy #8
0006C5  3  B1 68        	lda (z80_ix),y 		; x coordinate.
0006C7  3  A0 03        	ldy #3
0006C9  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
0006CB  3  A0 08        	ldy #8
0006CD  3  91 66        	sta (z80_hl),y		; copy
0006CF  3               
0006CF  3  A0 09        	ldy #9
0006D1  3  B1 68        	lda (z80_ix),y 		; y coordinate.
0006D3  3  A0 04        	ldy #4
0006D5  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
0006D7  3  A0 09        	ldy #9
0006D9  3  91 66        	sta (z80_hl),y		; copy
0006DB  3               
0006DB  3  A0 0A        	ldy #10			; direction of original.
0006DD  3  B1 68        	lda (z80_ix),y
0006DF  3  91 66        	sta (z80_hl),y		; direction
0006E1  3               
0006E1  3  A9 00        	lda #0
0006E3  3  A0 0B        	ldy #11
0006E5  3  91 66        	sta (z80_hl),y		; reset parameter.
0006E7  3  C8           	iny
0006E8  3  91 66        	sta (z80_hl),y		; reset parameter.
0006EA  3  C8           	iny
0006EB  3  91 66        	sta (z80_hl),y		; reset parameter.
0006ED  3  C8           	iny
0006EE  3  91 66        	sta (z80_hl),y		; reset parameter.
0006F0  3               rtssp:
0006F0  3  A5 rr        	lda spptr		; address of new sprite.
0006F2  3  85 68        	sta z80_x
0006F4  3  A5 rr        	lda spptr+1
0006F6  3  85 69        	sta z80_i
0006F8  3               evis1:
0006F8  3  20 3D 22     	jsr evnt09 		; call sprite initialisation event.
0006FB  3               
0006FB  3  A5 rr        	lda spptr 		; address of new sprite.
0006FD  3  85 68        	sta z80_x
0006FF  3  A5 rr        	lda spptr+1
000701  3  85 69        	sta z80_i
000703  3  20 35 11     	jsr sspria 		; display the new sprite.
000706  3               
000706  3  68           	pla			; address of original sprite.
000707  3  85 68        	sta z80_x
000709  3  68           	pla
00070A  3  85 69        	sta z80_i
00070C  3               
00070C  3  60           	rts
00070D  3               
00070D  3               ;spcnt:	.byte 0
00070D  3               ;spptr:	.word 0			; spawned sprite pointer.
00070D  3               ;seed:	.byte 0			; seed for random numbers.
00070D  3  30 30 30 30  score:	.byte "000000"		; player"s score.
000711  3  30 30        
000713  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
000717  3  30 30        
000719  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
00071D  3  30 30        
00071F  3  00 80        grbase:	.word ScreenAddr	; graphics base address.
000721  3               
000721  3               ;----------------------------------------------------
000721  3               ; Check y-pos
000721  3               ;----------------------------------------------------
000721  3               
000721  3               checkx:
000721  3  A5 rr        	lda dispy		; y position.
000723  3  C9 18        	cmp #24			; off screen?
000725  3  B0 01        	bcs :+
000727  3  60           	rts			; no, it's okay.
000728  3               :
000728  3  68           	pla			; remove return address from stack.
000729  3  85 66        	sta z80_l
00072B  3  68           	pla
00072C  3  85 67        	sta z80_h
00072E  3  60           	rts
00072F  3               
00072F  3               ;-----------------------------------------------
00072F  3               ; Displays the current high score.
00072F  3               ;-----------------------------------------------
00072F  3               
00072F  3               dhisc:
00072F  3  A9 13        	lda #<hiscor 		; high score text.
000731  3  8D 66 07     	sta dscor3+1
000734  3  8D 81 07     	sta bscor3+1
000737  3  A9 07        	lda #>hiscor
000739  3  8D 67 07     	sta dscor3+2
00073C  3  8D 82 07     	sta bscor3+2
00073F  3  4C 52 07     	jmp dscor1		; check in printable range then show 6 digits.
000742  3               
000742  3               ;------------------------------------------------------
000742  3               ; Displays the current score.
000742  3               ;------------------------------------------------------
000742  3               
000742  3               dscor:
000742  3  A9 0D        	lda #<score		; score text.
000744  3  8D 66 07     	sta dscor3+1
000747  3  8D 81 07     	sta bscor3+1
00074A  3  A9 07        	lda #>score
00074C  3  8D 67 07     	sta dscor3+2
00074F  3  8D 82 07     	sta bscor3+2
000752  3               dscor1:
000752  3  8C 7D 07     	sty tmpscr
000755  3  20 D7 0E     	jsr preprt		; set up font and print position.
000758  3  20 21 07     	jsr checkx		; make sure we're in a printable range.
00075B  3               
00075B  3               ;	lda #6			; digits to display.
00075B  3               ;	sta z80_b
00075B  3  A5 rr        	lda prtmod		; get print mode.
00075D  3  F0 03        	beq :+			; standard size text?
00075F  3  4C 7E 07     	jmp bscor0		; no, show double-height.
000762  3               :
000762  3               dscor0:
000762  3               ;	ldy #0
000762  3               ;	lda (z80_hl),y 		; fetch character.
000762  3  AC 7D 07     	ldy tmpscr
000765  3               dscor3:
000765  3  B9 0D 07     	lda score,y
000768  3  20 B4 08     	jsr pchar 		; display character.
00076B  3  E6 rr        	inc dispx		; move along x coordinate
00076D  3               
00076D  3               ;	inc z80_l		; next score column.
00076D  3               ;	bne :+
00076D  3               ;	inc z80_h
00076D  3               ;:
00076D  3  EE 7D 07     	inc tmpscr
000770  3  C6 63        	dec z80_b
000772  3  D0 EE        	bne dscor0 		; repeat for all digits.
000774  3               dscor2:
000774  3  A5 rr        	lda dispx 		; set up display coordinates.
000776  3  85 rr        	sta charx
000778  3  A5 rr        	lda dispy
00077A  3  85 rr        	sta chary
00077C  3  60           	rts
00077D  3               
00077D  3  00           tmpscr:	.byte 0
00077E  3               ;------------------------------------------------------
00077E  3               ; Displays the current score in double-height characters.
00077E  3               ;
00077E  3               ; Input:
00077E  3               ;  B  = digit number
00077E  3               ;  HL = score string
00077E  3               ;------------------------------------------------------
00077E  3               
00077E  3               bscor0:
00077E  3               ;	ldy #0
00077E  3               
00077E  3               ;	lda (z80_hl),y 		; fetch character.
00077E  3  A4 rr        	ldy tmp
000780  3               bscor3:
000780  3  B9 0D 07     	lda score,y
000783  3  20 5E 0E     	jsr bchar 		; display big char.
000786  3               
000786  3               ;	inc z80_l 		; next score column.
000786  3               ;	bne :+
000786  3               ;	inc z80_h
000786  3               ;:
000786  3  E6 rr        	inc tmp
000788  3  C6 63        	dec z80_b
00078A  3  F0 03        	beq :+
00078C  3  4C 7E 07     	jmp bscor0 		; repeat for all digits.
00078F  3               :
00078F  3  4C 74 07     	jmp dscor2 		; tidy up line and column variables.
000792  3               
000792  3               ;-----------------------------------------------------
000792  3               ; Adds number in the hl pair to the score.
000792  3               ;-----------------------------------------------------
000792  3               
000792  3               addsc:
000792  3  A9 0E        	lda #<(score+1) 	; ten thousands column.
000794  3  85 64        	sta z80_e
000796  3  A9 07        	lda #>(score+1)
000798  3  85 65        	sta z80_d
00079A  3  A9 10        	lda #<10000		; amount to add each time.
00079C  3  85 62        	sta z80_c
00079E  3  A9 27        	lda #>10000
0007A0  3  85 63        	sta z80_b
0007A2  3  20 E6 07     	jsr incsc		; add to score.
0007A5  3               
0007A5  3  E6 64        	inc z80_e		; thousands column.
0007A7  3  D0 02        	bne :+
0007A9  3  E6 65        	inc z80_d
0007AB  3               :
0007AB  3  A9 E8        	lda #<1000		; amount to add each time.
0007AD  3  85 62        	sta z80_c
0007AF  3  A9 03        	lda #>1000
0007B1  3  85 63        	sta z80_b
0007B3  3  20 E6 07     	jsr incsc 		; add to score.
0007B6  3               
0007B6  3  E6 64        	inc z80_e		; hundreds column.
0007B8  3  D0 02        	bne :+
0007BA  3  E6 65        	inc z80_d
0007BC  3               :
0007BC  3  A9 64        	lda #<100		; amount to add each time.
0007BE  3  85 62        	sta z80_c
0007C0  3  A9 00        	lda #>100
0007C2  3  85 63        	sta z80_b
0007C4  3  20 E6 07     	jsr incsc		; add to score.
0007C7  3               
0007C7  3  E6 64        	inc z80_e 		; tens column.
0007C9  3  D0 02        	bne :+
0007CB  3  E6 65        	inc z80_d
0007CD  3               :
0007CD  3  A9 0A        	lda #<10		; amount to add each time.
0007CF  3  85 62        	sta z80_c
0007D1  3  A9 00        	lda #>10
0007D3  3  85 63        	sta z80_b
0007D5  3  20 E6 07     	jsr incsc 		; add to score.
0007D8  3               
0007D8  3  E6 64        	inc z80_e		; units column.
0007DA  3  D0 02        	bne :+
0007DC  3  E6 65        	inc z80_d
0007DE  3               :
0007DE  3  A9 01        	lda #<1			; units.
0007E0  3  85 62        	sta z80_c
0007E2  3  A9 00        	lda #>1
0007E4  3  85 63        	sta z80_b
0007E6  3               incsc:
0007E6  3  A5 67        	lda z80_h		; store amount to add.
0007E8  3  48           	pha
0007E9  3  A5 66        	lda z80_l
0007EB  3  48           	pha
0007EC  3               
0007EC  3  38           	sec			; subtract from amount to add.
0007ED  3  A5 66        	lda z80_l
0007EF  3  E5 62        	sbc z80_c
0007F1  3  85 66        	sta z80_l
0007F3  3  A5 67        	lda z80_h
0007F5  3  E5 63        	sbc z80_b
0007F7  3  85 67        	sta z80_h
0007F9  3  90 14        	bcc incsc0		; too much, restore value.
0007FB  3               
0007FB  3  68           	pla			; delete the previous amount from the stack.
0007FC  3  68           	pla
0007FD  3               
0007FD  3  A5 65        	lda z80_d 		; store column position.
0007FF  3  48           	pha
000800  3  A5 64        	lda z80_e
000802  3  48           	pha
000803  3  20 16 08     	jsr incsc2		; do the increment.
000806  3               
000806  3  68           	pla			; restore column.
000807  3  85 64        	sta z80_e
000809  3  68           	pla
00080A  3  85 65        	sta z80_d
00080C  3  4C E6 07     	jmp incsc		; repeat until all added.
00080F  3               
00080F  3               incsc0:
00080F  3  68           	pla			; restore previous value.
000810  3  85 66        	sta z80_l
000812  3  68           	pla
000813  3  85 67        	sta z80_h
000815  3  60           	rts
000816  3               incsc2:
000816  3  A0 00        	ldy #0
000818  3  B1 64        	lda (z80_de),y 		; get amount.
00081A  3  18           	clc
00081B  3  69 01        	adc #1			; add one to column.
00081D  3  91 64        	sta (z80_de),y		; write new column total.
00081F  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
000821  3  B0 01        	bcs :+
000823  3  60           	rts			; no, carry on.
000824  3               :
000824  3  A9 30        	lda #'0'		; make it zero.
000826  3  91 64        	sta (z80_de),y		; write new column total.
000828  3  C6 64        	dec z80_e		; back one column.
00082A  3  D0 02        	bne :+
00082C  3  C6 65        	dec z80_d
00082E  3               :
00082E  3  4C 16 08     	jmp incsc2
000831  3               
000831  3               ;------------------------------------
000831  3               ; Add bonus to score and reset bonus
000831  3               ;------------------------------------
000831  3               
000831  3               addbo:
000831  3  A2 05        	ldx #5			; last digit.
000833  3  18           	clc
000834  3               addbo0:
000834  3  BD 0D 07     	lda score,x		; get score.
000837  3  7D 19 07     	adc bonus,x		; add bonus.
00083A  3  38           	sec			; 0 to 18.
00083B  3  E9 30        	sbc #48
00083D  3  48           	pha
00083E  3  A9 30        	lda #'0'
000840  3  9D 19 07     	sta bonus,x
000843  3  C9 3A        	cmp #58
000845  3  B0 03        	bcs addbo1
000847  3  38           	sec
000848  3  E9 0A        	sbc #10
00084A  3               addbo1:
00084A  3  9D 0D 07     	sta score,x		; zeroise bonus.
00084D  3  CA           	dex			; next digit.
00084E  3  10 E4        	bpl addbo0		; repeat for all 6 digits.
000850  3  60           	rts
000851  3               
000851  3               ;------------------------------------
000851  3               ; Swap score and bonus.
000851  3               ;------------------------------------
000851  3               
000851  3               swpsb:
000851  3  A2 05        	ldx #5			; digits to add.
000853  3               swpsb0:
000853  3  BD 0D 07     	lda score,x 		; get score digits.
000856  3  48           	pha			; save digit
000857  3  BD 19 07     	lda bonus,x 		; get bonus digits.
00085A  3  9D 0D 07     	sta score,x		; switch score-bonus
00085D  3  68           	pla
00085E  3  9D 19 07     	sta bonus,x
000861  3  CA           	dex 			; repeat for all 6 digits.
000862  3  10 EF        	bpl swpsb0
000864  3  60           	rts
000865  3               
000865  3               ;----------------------------------------------------
000865  3               ; Get print address.
000865  3               ;----------------------------------------------------
000865  3               
000865  3               gprad:
000865  3  A5 rr        	lda dispx		; get x
000867  3  85 rr        	sta scraddr		; store lb address
000869  3               
000869  3  2A           	rol a
00086A  3  26 rr        	rol tmp
00086C  3  2A           	rol a
00086D  3  26 rr        	rol tmp
00086F  3  2A           	rol a
000870  3  26 rr        	rol tmp
000872  3  A5 rr        	lda tmp
000874  3  29 07        	and #7
000876  3  85 rr        	sta tmp
000878  3  A5 rr        	lda prtmod
00087A  3  F0 02        	beq :+
00087C  3  06 rr        	asl tmp
00087E  3               :
00087E  3  A5 rr        	lda tmp
000880  3  18           	clc
000881  3  65 rr        	adc dispy		; get y
000883  3  09 80        	ora #$80		; add $80
000885  3  85 rr        	sta scraddr+1		; store hb address
000887  3  60           	rts
000888  3               
000888  3               ;--------------------------------------------------------------
000888  3               ; Get property buffer address of char at (dispx, dispy) in hl.
000888  3               ;
000888  3               ; Output:
000888  3               ;  bufaddr = MAP + dispy*32 + dispx
000888  3               ;--------------------------------------------------------------
000888  3               
000888  3               pradd:
000888  3  A5 rr        	lda dispy 		; y coordinate.
00088A  3  85 rr        	sta bufaddr
00088C  3  A9 00        	lda #0
00088E  3  85 rr        	sta bufaddr+1
000890  3  06 rr        	asl bufaddr  		; multiply char by 32
000892  3  26 rr        	rol bufaddr+1
000894  3  06 rr        	asl bufaddr
000896  3  26 rr        	rol bufaddr+1
000898  3  06 rr        	asl bufaddr
00089A  3  26 rr        	rol bufaddr+1
00089C  3  06 rr        	asl bufaddr
00089E  3  26 rr        	rol bufaddr+1
0008A0  3  06 rr        	asl bufaddr
0008A2  3  26 rr        	rol bufaddr+1
0008A4  3  18           	clc			; add address of MAP graphics.
0008A5  3  A5 rr        	lda bufaddr
0008A7  3  65 rr        	adc dispx
0008A9  3  69 00        	adc #<MAP
0008AB  3  85 rr        	sta bufaddr
0008AD  3  A5 rr        	lda bufaddr+1
0008AF  3  69 98        	adc #>MAP
0008B1  3  85 rr        	sta bufaddr+1
0008B3  3  60           	rts
0008B4  3               
0008B4  3               ;----------------------------------------------------
0008B4  3               ; Display character in A at dispx,dispy.
0008B4  3               ;
0008B4  3               ; Input:
0008B4  3               ;  A 	   = character to print
0008B4  3               ;----------------------------------------------------
0008B4  3               
0008B4  3               pchar:
0008B4  3  85 rr        	sta fntaddr
0008B6  3  A9 00        	lda #0
0008B8  3  85 rr        	sta fntaddr+1
0008BA  3  06 rr        	asl fntaddr  		; multiply char by 8.
0008BC  3  26 rr        	rol fntaddr+1
0008BE  3  06 rr        	asl fntaddr
0008C0  3  26 rr        	rol fntaddr+1
0008C2  3  06 rr        	asl fntaddr
0008C4  3  26 rr        	rol fntaddr+1
0008C6  3               
0008C6  3  A5 rr        	lda fntaddr
0008C8  3  18           	clc
0008C9  3  69 BC        	adc #<(FONT-256)
0008CB  3  85 rr        	sta fntaddr		; that's the low byte.
0008CD  3  A5 rr        	lda fntaddr+1
0008CF  3  69 7A        	adc #>(FONT-256)
0008D1  3  85 rr        	sta fntaddr+1		; add displacement.
0008D3  3               pchark:
0008D3  3  20 65 08     	jsr gprad		; get screen address.
0008D6  3  A2 07        	ldx #7			; lines to write.
0008D8  3               pchar0:
0008D8  3  A0 00        	ldy #0
0008DA  3  B1 rr        	lda (fntaddr),y 	; get image byte.
0008DC  3  BC EB 08     	ldy scrtab,x		; Get rowoffset
0008DF  3               .if gflag
0008DF  3               	and andeor
0008DF  3               	eor andeor+1
0008DF  3               .endif
0008DF  3               .if iflag
0008DF  3               	eor #$ff
0008DF  3               .endif
0008DF  3  91 rr        	sta (scraddr),y 	; copy to screen.
0008E1  3  E6 rr        	inc fntaddr		; next image byte.
0008E3  3  D0 02        	bne :+
0008E5  3  E6 rr        	inc fntaddr+1
0008E7  3               :
0008E7  3  CA           	dex			; next screen row down.
0008E8  3  10 EE        	bpl pchar0		; repeat.
0008EA  3  60           	rts
0008EB  3               
0008EB  3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
0008EF  3  60 40 20 00  
0008F3  3               
0008F3  3               ;----------------------------------------------
0008F3  3               
0008F3  3               ; Print attributes, properties and pixels.
0008F3  3               ;
0008F3  3               ; Input:
0008F3  3               ;  A	= tile number
0008F3  3               ;----------------------------------------------
0008F3  3               
0008F3  3  00           colpatt:	.byte 0
0008F4  3               
0008F4  3               pbpattr:			; entry PUTBLOCK command
0008F4  3  A4 rr        	ldy charx
0008F6  3  84 rr        	sty dispx
0008F8  3  A4 rr        	ldy chary
0008FA  3  84 rr        	sty dispy
0008FC  3               pattr:
0008FC  3               .if aflag
0008FC  3               	pha
0008FC  3               	jsr wbloc		; save blockinfo
0008FC  3               	pla
0008FC  3               .endif
0008FC  3               
0008FC  3               pattr2:
0008FC  3  85 63        	sta z80_b		; store cell in b register for now.
0008FE  3  AA           	tax
0008FF  3  BD EB 2C     	lda bprop,x 		; block properties.
000902  3  85 62        	sta z80_c
000904  3  C9 08        	cmp #COLECT
000906  3  D0 05        	bne :+
000908  3  A5 63        	lda z80_b
00090A  3  8D F3 08     	sta colpatt
00090D  3               :
00090D  3  20 88 08     	jsr pradd 		; get property buffer address.
000910  3  A5 62        	lda z80_c
000912  3  A0 00        	ldy #0
000914  3  91 rr        	sta (bufaddr),y 	; write property.
000916  3  A5 63        	lda z80_b 		; restore cell.
000918  3               
000918  3               ; Print attributes, no properties.
000918  3               
000918  3               panp:
000918  3  85 64        	sta z80_e		; displacement in e.
00091A  3  A9 00        	lda #0
00091C  3  85 65        	sta z80_d		; no high byte.
00091E  3  06 64        	asl z80_e  		; multiply char by 8.
000920  3  26 65        	rol z80_d
000922  3  06 64        	asl z80_e
000924  3  26 65        	rol z80_d
000926  3  06 64        	asl z80_e
000928  3  26 65        	rol z80_d
00092A  3  18           	clc
00092B  3  A5 64        	lda z80_e
00092D  3  69 2B        	adc #<chgfx 		; address of graphics.
00092F  3  85 rr        	sta tileaddr
000931  3  A5 65        	lda z80_d
000933  3  69 28        	adc #>chgfx
000935  3  85 rr        	sta tileaddr+1
000937  3  20 65 08     	jsr gprad 		; get screen address.
00093A  3  A2 07        	ldx #7			; number of pixel rows to write.
00093C  3               panp0:
00093C  3  A0 00        	ldy #0
00093E  3  B1 rr        	lda (tileaddr),y 	; get image byte.
000940  3               .if iflag
000940  3               	eor #$ff		; Invert
000940  3               .endif
000940  3  BC EB 08     	ldy scrtab,x
000943  3  91 rr        	sta (scraddr),y 	; copy to screen.
000945  3  E6 rr        	inc tileaddr 		; next image byte.
000947  3  D0 02        	bne :+
000949  3  E6 rr        	inc tileaddr+1
00094B  3               :
00094B  3  CA           	dex	 		; repeat for 8 pixel rows.
00094C  3  10 EE        	bpl panp0
00094E  3  E6 rr        	inc dispx 		; move along one.
000950  3  E6 rr        	inc charx
000952  3  60           	rts
000953  3               
000953  3               ;----------------------------------------------
000953  3               ; Write block
000953  3               ;----------------------------------------------
000953  3               
000953  3               .if aflag
000953  3               wbloc:
000953  3               	ldy #3
000953  3               	sta (pbptr),y		; store block number
000953  3               	dey
000953  3               	lda dispx
000953  3               	sta (pbptr),y		; write x position of block.
000953  3               	dey
000953  3               	lda dispy
000953  3               	sta (pbptr),y		; write y position of block.
000953  3               	dey
000953  3               	lda scno
000953  3               	sta (pbptr),y		; write screen.
000953  3               	clc			; point to next free location
000953  3               	lda pbptr
000953  3               	adc #4
000953  3               	sta pbptr
000953  3               	bcc :+
000953  3               	inc pbptr+1
000953  3               :
000953  3               	rts
000953  3               .endif
000953  3               
000953  3               ;----------------------------------------------
000953  3               ; Print character pixels, no more.
000953  3               ;
000953  3               ; Input:
000953  3               ;  A	= character to print
000953  3               ;----------------------------------------------
000953  3               
000953  3               pchr:
000953  3  20 B4 08     	jsr pchar 		; show character in accumulator.
000956  3  E6 rr        	inc dispx		; move along one.
000958  3  60           	rts
000959  3               
000959  3               ;----------------------------------------------------
000959  3               ; Shifter sprite routine for objects.
000959  3               ;----------------------------------------------------
000959  3               
000959  3               .if oflag
000959  3               sprit7:
000959  3  A5 63        	lda z80_b
00095B  3  F0 0F        	beq sprit0
00095D  3  85 61        	sta z80_a
00095F  3               sprit3:
00095F  3  4E ED 09     	lsr spr			; shift into position.
000962  3  6E EE 09     	ror spr+1
000965  3  6E EF 09     	ror spr+2
000968  3  C6 61        	dec z80_a		; one less iteration.
00096A  3  D0 F3        	bne sprit3
00096C  3               sprit0:
00096C  3  60           	rts 			; now apply to screen.
00096D  3               
00096D  3               ;----------------------------------------------------
00096D  3               ; Draw sprite
00096D  3               ;----------------------------------------------------
00096D  3               
00096D  3               sprite:
00096D  3  86 rr        	stx xtmp		; Save X-reg
00096F  3  20 12 11     	jsr scadd 		; get screen address in scraddr.
000972  3               
000972  3  A5 rr        	lda dispx 		; x position.
000974  3  29 07        	and #7 			; position straddling cells.
000976  3  85 63        	sta z80_b		; store in b register.
000978  3               
000978  3  A5 66        	lda z80_l		; store sprite graphic address.
00097A  3  8D 8D 09     	sta sprit1+1
00097D  3  8D 94 09     	sta sprit2+1
000980  3  A5 67        	lda z80_h
000982  3  8D 8E 09     	sta sprit1+2
000985  3  8D 95 09     	sta sprit2+2
000988  3               
000988  3  A2 00        	ldx #0			; pixel height.
00098A  3  A0 00        	ldy #0
00098C  3               sprit1:
00098C  3  BD A8 79     	lda objdta,x		; fetch first byte.
00098F  3  8D ED 09     	sta spr
000992  3  E8           	inx
000993  3               sprit2:
000993  3  BD A8 79     	lda objdta,x
000996  3  8D EE 09     	sta spr+1
000999  3               
000999  3  A9 00        	lda #0
00099B  3  8D EF 09     	sta spr+2
00099E  3  20 59 09     	jsr sprit7		; shift sprite
0009A1  3               
0009A1  3  CA           	dex
0009A2  3  AD ED 09     	lda spr			; fetch graphic.
0009A5  3  BC CD 09     	ldy spritetab,x
0009A8  3  51 rr        	eor (scraddr),y		; merge with screen image.
0009AA  3  91 rr        	sta (scraddr),y		; write to screen.
0009AC  3  E8           	inx			; next screen byte.
0009AD  3               
0009AD  3  AD EE 09     	lda spr+1		; fetch graphic.
0009B0  3  BC CD 09     	ldy spritetab,x
0009B3  3  51 rr        	eor (scraddr),y		; merge with screen image.
0009B5  3  91 rr        	sta (scraddr),y		; write to screen.
0009B7  3  C8           	iny
0009B8  3               
0009B8  3  AD EF 09     	lda spr+2		; fetch graphic.
0009BB  3  51 rr        	eor (scraddr),y		; merge with screen image.
0009BD  3  91 rr        	sta (scraddr),y		; write to screen.
0009BF  3               
0009BF  3  E8           	inx			; next source byte.
0009C0  3  E0 10        	cpx #16
0009C2  3  D0 02        	bne :+
0009C4  3  E6 rr        	inc scraddr+1
0009C6  3               :
0009C6  3  E0 20        	cpx #32
0009C8  3  D0 C2        	bne sprit1		; repeat
0009CA  3               
0009CA  3  A6 rr        	ldx xtmp		; retreive X-reg
0009CC  3  60           	rts
0009CD  3               
0009CD  3               spritetab:
0009CD  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
0009D1  3  40 41 60 61  
0009D5  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0009D9  3  C0 C1 E0 E1  
0009DD  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
0009E1  3  40 41 60 61  
0009E5  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0009E9  3  C0 C1 E0 E1  
0009ED  3               
0009ED  3  00 00 00     spr:	.byte 0,0,0
0009F0  3               
0009F0  3               ;xtmp:	.byte 0
0009F0  3               .endif
0009F0  3               
0009F0  3               ;-----------------------------------------------------------
0009F0  3               ; Get room address.
0009F0  3               ;-----------------------------------------------------------
0009F0  3               
0009F0  3               groom:
0009F0  3  A6 rr        	ldx scno 		; screen number.
0009F2  3  A0 00        	ldy #0
0009F4  3               groomx:
0009F4  3  A9 9F        	lda #<scdat 		; pointer to screens.
0009F6  3  85 66        	sta z80_l
0009F8  3  A9 4C        	lda #>scdat
0009FA  3  85 67        	sta z80_h
0009FC  3               groom1:
0009FC  3  E0 00        	cpx #0			; is it the first one?
0009FE  3  F0 15        	beq groom0 		; no more screens to skip.
000A00  3               
000A00  3  18           	clc
000A01  3  A5 66        	lda z80_l
000A03  3  79 9F 4C     	adc scdat,y 		; low byte of screen size.
000A06  3  85 66        	sta z80_l
000A08  3  C8           	iny			; point to high byte.
000A09  3  A5 67        	lda z80_h
000A0B  3  79 9F 4C     	adc scdat,y 		; high byte of screen size.
000A0E  3  85 67        	sta z80_h
000A10  3  C8           	iny			; next address.
000A11  3               
000A11  3  CA           	dex 			; one less iteration.
000A12  3  4C FC 09     	jmp groom1 		; loop until we reach the end.
000A15  3               groom0:
000A15  3  AD F8 77     	lda numsc 		; add displacement.
000A18  3  0A           	asl a
000A19  3  18           	clc			; add double displacement to address.
000A1A  3  65 66        	adc z80_l
000A1C  3  85 66        	sta z80_l
000A1E  3  A5 67        	lda z80_h
000A20  3  69 00        	adc #0
000A22  3  85 67        	sta z80_h
000A24  3  60           	rts
000A25  3               
000A25  3               ;-----------------------------------------------------------
000A25  3               ; Draw present room.
000A25  3               ;-----------------------------------------------------------
000A25  3               
000A25  3               droom:
000A25  3  AD 45 02     	lda wintop 		; window top.
000A28  3  85 rr        	sta dispy		; set cursor y position.
000A2A  3               droom2:
000A2A  3  20 F0 09     	jsr groom 		; get address of current room.
000A2D  3  A9 00        	lda #0	 		; zero in accumulator.
000A2F  3  85 rr        	sta comcnt 		; reset compression counter.
000A31  3  AD 47 02     	lda winhgt 		; height of window.
000A34  3  85 rr        	sta rrow		; set row counter
000A36  3               droom0:
000A36  3  AD 46 02     	lda winlft 		; window left edge.
000A39  3  85 rr        	sta dispx 		; set cursor x position.
000A3B  3  AD 48 02     	lda winwid 		; width of window.
000A3E  3  85 rr        	sta rcol		; set column counter
000A40  3               droom1:
000A40  3  20 51 0A     	jsr flbyt 		; decompress next byte on the fly.
000A43  3  20 FC 08     	jsr pattr2 		; show attributes and block.
000A46  3  C6 rr        	dec rcol		; one less column.
000A48  3  D0 F6        	bne droom1 		; repeat for entire line.
000A4A  3  E6 rr        	inc dispy		; move down one line.
000A4C  3  C6 rr        	dec rrow 		; one less row.
000A4E  3  D0 E6        	bne droom0 		; repeat for all rows.
000A50  3  60           	rts
000A51  3               
000A51  3               ;rcol:	.byte 0
000A51  3               ;rrow:	.byte 0
000A51  3               
000A51  3               ;----------------------------------------------
000A51  3               ; Decompress bytes on-the-fly.
000A51  3               ;----------------------------------------------
000A51  3               
000A51  3               flbyt:
000A51  3  A5 rr        	lda comcnt 		; compression counter.
000A53  3  D0 21        	bne flbyt1		; any more to decompress?  yes.
000A55  3               
000A55  3  A0 00        	ldy #0
000A57  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
000A59  3  E6 66        	inc z80_l 		; point to next cell.
000A5B  3  D0 02        	bne :+
000A5D  3  E6 67        	inc z80_h
000A5F  3               :
000A5F  3  C9 FF        	cmp #255 		; is this byte a control code?
000A61  3  F0 01        	beq :+
000A63  3  60           	rts 			; no, this byte is uncompressed.
000A64  3               :
000A64  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
000A66  3  85 rr        	sta combyt 		; set up the type.
000A68  3  E6 66        	inc z80_l 		; point to quantity.
000A6A  3  D0 02        	bne :+
000A6C  3  E6 67        	inc z80_h
000A6E  3               :
000A6E  3  B1 66        	lda (z80_hl),y 		; get quantity.
000A70  3  E6 66        	inc z80_l 		; point to next byte.
000A72  3  D0 02        	bne :+
000A74  3  E6 67        	inc z80_h
000A76  3               :
000A76  3               flbyt1:
000A76  3  85 rr        	sta comcnt 		; store new quantity.
000A78  3  C6 rr        	dec comcnt		; one less.
000A7A  3  A5 rr        	lda combyt 		; byte to expand.
000A7C  3  60           	rts
000A7D  3               
000A7D  3               ;combyt:	.byte 0			; byte type compressed.
000A7D  3               ;comcnt:	.byte 0			; compression counter.
000A7D  3               
000A7D  3               ;------------------------------------------
000A7D  3               ; Ladder down check.
000A7D  3               ;
000A7D  3               ; Input:
000A7D  3               ;  IX = sprite pointer
000A7D  3               ;------------------------------------------
000A7D  3               
000A7D  3               .if lflag
000A7D  3               laddd:
000A7D  3  A0 09        	ldy #9
000A7F  3  B1 68        	lda (z80_ix),y		; x coordinate.
000A81  3  85 rr        	sta dispx
000A83  3               
000A83  3  A0 08        	ldy #8
000A85  3  B1 68        	lda (z80_ix),y		; y coordinate.
000A87  3  29 FE        	and #254		; make it even.
000A89  3  91 68        	sta (z80_ix),y 		; reset it.
000A8B  3  18           	clc 			; look down 16 pixels.
000A8C  3               numsp5:
000A8C  3  69 10        	adc #SPR_HGT
000A8E  3  85 rr        	sta dispy		; coords in dispx,dispy.
000A90  3  4C A6 0A     	jmp laddv
000A93  3               
000A93  3               ;------------------------------------------
000A93  3               ; Ladder up check.
000A93  3               ;
000A93  3               ; Input:
000A93  3               ;  IX = sprite pointer
000A93  3               ;
000A93  3               ; Output:
000A93  3               ;  A  = 0 is ok, A <>0 is not ok
000A93  3               ;------------------------------------------
000A93  3               
000A93  3               laddu:
000A93  3  A0 09        	ldy #9
000A95  3  B1 68        	lda (z80_ix),y		; x coordinate.
000A97  3  85 rr        	sta dispx
000A99  3               
000A99  3  A0 08        	ldy #8
000A9B  3  B1 68        	lda (z80_ix),y		; y coordinate.
000A9D  3  29 FE        	and #254 		; make it even.
000A9F  3  91 68        	sta (z80_ix),y		; reset it.
000AA1  3  18           	clc 			; look 2 pixels above feet.
000AA2  3               numsp6:
000AA2  3  69 0E        	adc #SPR_HGT-2
000AA4  3  85 rr        	sta dispy		; coords in dispx,dispy.
000AA6  3               laddv:
000AA6  3  20 78 0C     	jsr tstbl 		; get map address.
000AA9  3  20 AF 0B     	jsr ldchk 		; standard ladder check.
000AAC  3  F0 01        	beq :+
000AAE  3  60           	rts 			; no way through.
000AAF  3               :
000AAF  3  E6 rr        	inc bufaddr 		; look right one cell.
000AB1  3  D0 02        	bne :+
000AB3  3  E6 rr        	inc bufaddr+1
000AB5  3               :
000AB5  3  20 AF 0B     	jsr ldchk 		; do the check.
000AB8  3  F0 01        	beq :+
000ABA  3  60           	rts 			; impassable.
000ABB  3               :
000ABB  3  A5 rr        	lda dispx 		; y coordinate.
000ABD  3  29 07        	and #7 			; position straddling block cells.
000ABF  3  D0 01        	bne :+
000AC1  3  60           	rts 			; no more checks needed.
000AC2  3               :
000AC2  3  E6 rr        	inc bufaddr 		; look to third cell.
000AC4  3  D0 02        	bne :+
000AC6  3  E6 rr        	inc bufaddr+1
000AC8  3               :
000AC8  3  20 AF 0B     	jsr ldchk 		; do the check.
000ACB  3  60           	rts  			; return with zero flag set accordingly.
000ACC  3               .endif
000ACC  3               
000ACC  3               ;---------------------------------------------------------
000ACC  3               ; Can go up check.
000ACC  3               ;
000ACC  3               ; Input:
000ACC  3               ;  IX = sprite pointer
000ACC  3               ;
000ACC  3               ; Output:
000ACC  3               ;  A  = 0 is ok, A <>0 is not ok
000ACC  3               ;---------------------------------------------------------
000ACC  3               
000ACC  3               cangu:
000ACC  3  A0 09        	ldy #9
000ACE  3  B1 68        	lda (z80_ix),y		; x coordinate.
000AD0  3  85 rr        	sta dispx
000AD2  3  A0 08        	ldy #8
000AD4  3  B1 68        	lda (z80_ix),y 		; y coordinate.
000AD6  3  38           	sec
000AD7  3  E9 02        	sbc #2
000AD9  3  85 rr        	sta dispy		; coords in dispx,dispy.
000ADB  3  20 78 0C     	jsr tstbl 		; get map address.
000ADE  3  20 7E 0B     	jsr lrchk 		; standard left/right check.
000AE1  3  F0 01        	beq :+
000AE3  3  60           	rts			; no way through.
000AE4  3               :
000AE4  3  E6 rr        	inc bufaddr		; look right one cell.
000AE6  3  D0 02        	bne :+
000AE8  3  E6 rr        	inc bufaddr+1
000AEA  3               :
000AEA  3  20 7E 0B     	jsr lrchk 		; do the check.
000AED  3  F0 01        	beq :+
000AEF  3  60           	rts			; impassable.
000AF0  3               :
000AF0  3  A5 rr        	lda dispx		; x coordinate.
000AF2  3  29 07        	and #7			; position straddling block cells.
000AF4  3  D0 01        	bne :+
000AF6  3  60           	rts			; no more checks needed.
000AF7  3               :
000AF7  3  E6 rr        	inc bufaddr		; look to third cell.
000AF9  3  D0 02        	bne :+
000AFB  3  E6 rr        	inc bufaddr+1
000AFD  3               :
000AFD  3  20 7E 0B     	jsr lrchk		; do the check.
000B00  3  60           	rts 			; return with zero flag set accordingly.
000B01  3               
000B01  3               ;---------------------------------------------------------
000B01  3               ; Can go down check.
000B01  3               ;
000B01  3               ; Input:
000B01  3               ;  IX = sprite pointer
000B01  3               ;
000B01  3               ; Output:
000B01  3               ;  A  = 0 is ok, A <>0 is not ok
000B01  3               ;---------------------------------------------------------
000B01  3               
000B01  3               cangd:
000B01  3  A0 09        	ldy #9
000B03  3  B1 68        	lda (z80_ix),y 		; x coordinate.
000B05  3  85 rr        	sta dispx
000B07  3  A0 08        	ldy #8
000B09  3  B1 68        	lda (z80_ix),y		; y coordinate.
000B0B  3  18           	clc
000B0C  3               numsp3:
000B0C  3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
000B0E  3  85 rr        	sta dispy		; coords in dispx,dispy.
000B10  3  20 78 0C     	jsr tstbl 		; get map address.
000B13  3  20 93 0B     	jsr plchk 		; block, platform check.
000B16  3  F0 01        	beq :+
000B18  3  60           	rts			; no way through.
000B19  3               :
000B19  3  E6 rr        	inc bufaddr		; look right one cell.
000B1B  3  D0 02        	bne :+
000B1D  3  E6 rr        	inc bufaddr+1
000B1F  3               :
000B1F  3  20 93 0B     	jsr plchk		; block, platform check.
000B22  3  F0 01        	beq :+
000B24  3  60           	rts			; impassable.
000B25  3               :
000B25  3  A5 rr        	lda dispx		; x coordinate.
000B27  3  29 07        	and #7			; position straddling block cells.
000B29  3  D0 01        	bne :+
000B2B  3  60           	rts			; no more checks needed.
000B2C  3               :
000B2C  3  E6 rr        	inc bufaddr		; look to third cell.
000B2E  3  D0 02        	bne :+
000B30  3  E6 rr        	inc bufaddr+1
000B32  3               :
000B32  3  20 93 0B     	jsr plchk		; block, platform check.
000B35  3  60           	rts			; return with zero flag set accordingly.
000B36  3               
000B36  3               ;---------------------------------------------------------
000B36  3               ; Can go left check.
000B36  3               ;
000B36  3               ; Input:
000B36  3               ;  IX = sprite pointer
000B36  3               ;
000B36  3               ; Output:
000B36  3               ;  A  = 0 is ok, A <>0 is not ok
000B36  3               ;---------------------------------------------------------
000B36  3               
000B36  3               cangl:
000B36  3  A0 08        	ldy #8
000B38  3  B1 68        	lda (z80_ix),y 		; y coordinate.
000B3A  3  85 rr        	sta dispy
000B3C  3  A0 09        	ldy #9
000B3E  3  B1 68        	lda (z80_ix),y 		; x coordinate.
000B40  3  38           	sec
000B41  3  E9 02        	sbc #2			; look left 2 pixels.
000B43  3  85 rr        	sta dispx		; coords in dispx,dispy.
000B45  3  4C 57 0B     	jmp cangh		; test if we can go there.
000B48  3               
000B48  3               ;---------------------------------------------------------
000B48  3               ; Can go right check.
000B48  3               ;
000B48  3               ; Input:
000B48  3               ;  IX = sprite pointer
000B48  3               ;
000B48  3               ; Output:
000B48  3               ;  A  = 0 is ok, A <>0 is not ok
000B48  3               ;---------------------------------------------------------
000B48  3               
000B48  3               cangr:
000B48  3  A0 08        	ldy #8
000B4A  3  B1 68        	lda (z80_ix),y		; y coordinate.
000B4C  3  85 rr        	sta dispy
000B4E  3  A0 09        	ldy #9
000B50  3  B1 68        	lda (z80_ix),y		; x coordinate.
000B52  3  18           	clc
000B53  3  69 10        	adc #16			; look right 16 pixels.
000B55  3  85 rr        	sta dispx		; coords in dispx,dispy.
000B57  3               cangh:
000B57  3               cangh2:
000B57  3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
000B59  3  85 63        	sta z80_b
000B5B  3  A5 rr        	lda dispy		; y position.
000B5D  3  29 07        	and #7			; does x straddle cells?
000B5F  3  D0 02        	bne cangh0		; yes, loop counter is good.
000B61  3  C6 63        	dec z80_b		; one less row to write.
000B63  3               cangh0:
000B63  3  20 78 0C     	jsr tstbl		; get map address.
000B66  3               cangh1:
000B66  3  20 7E 0B     	jsr lrchk		; standard left/right check.
000B69  3  F0 01        	beq :+
000B6B  3  60           	rts			; no way through.
000B6C  3               :
000B6C  3  48           	pha
000B6D  3  18           	clc
000B6E  3  A5 rr        	lda bufaddr
000B70  3  69 20        	adc #32			; look down.
000B72  3  85 rr        	sta bufaddr
000B74  3  90 02        	bcc :+
000B76  3  E6 rr        	inc bufaddr+1
000B78  3               :
000B78  3  68           	pla
000B79  3               
000B79  3  C6 63        	dec z80_b
000B7B  3  D0 E9        	bne cangh1
000B7D  3  60           	rts
000B7E  3               
000B7E  3               ;-------------------------------------
000B7E  3               ; Check left/right movement is okay.
000B7E  3               ;
000B7E  3               ; Input:
000B7E  3               ;  bufaddr = MAP + x/8 + y/8*32
000B7E  3               ;
000B7E  3               ; Output:
000B7E  3               ;  A  = 0 is ok, A <>0 is not ok
000B7E  3               ;-------------------------------------
000B7E  3               
000B7E  3               lrchk:
000B7E  3  A0 00        	ldy #0
000B80  3  B1 rr        	lda (bufaddr),y		; fetch map cell.
000B82  3  C9 02        	cmp #WALL 		; is it passable?
000B84  3  F0 0A        	beq lrchkx		; no.
000B86  3               
000B86  3  C9 04        	cmp #FODDER		; fodder has to be dug.
000B88  3  F0 06        	beq lrchkx		; not passable.
000B8A  3  A9 00        	lda #0
000B8C  3  60           	rts
000B8D  3               
000B8D  3               ;--------------------------------------------------------------
000B8D  3               ; Called by mmenu
000B8D  3               ;--------------------------------------------------------------
000B8D  3               
000B8D  3               always:
000B8D  3  A9 FF        	lda #255		; report it as okay.
000B8F  3  60           	rts
000B90  3               
000B90  3               lrchkx:
000B90  3  A9 01        	lda #1 			; reset all bits.
000B92  3  60           	rts
000B93  3               
000B93  3               
000B93  3               ;--------------------------------------------------------------
000B93  3               ; Check platform or solid item is not in way.
000B93  3               ;
000B93  3               ; Input:
000B93  3               ;  bufaddr = MAP + x/8 + y/8*32
000B93  3               ;
000B93  3               ; Output:
000B93  3               ;  A  = 0 is ok, A <>0 is not ok
000B93  3               ;--------------------------------------------------------------
000B93  3               
000B93  3               plchk:
000B93  3  A0 00        	ldy #0
000B95  3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
000B97  3  C9 02        	cmp #WALL 		; is it passable?
000B99  3  F0 F5        	beq lrchkx		; no.
000B9B  3               .if pflag .or dflag
000B9B  3               	cmp #FODDER		; fodder has to be dug.
000B9B  3               	beq lrchkx		; not passable.
000B9B  3               .endif
000B9B  3  C9 01        	cmp #PLATFM		; platform is solid.
000B9D  3  F0 07        	beq plchkx		; not passable.
000B9F  3               .if lflag
000B9F  3  C9 03        	cmp #LADDER		; is it a ladder?
000BA1  3  F0 ED        	beq lrchkx		; on ladder, deny movement.
000BA3  3               .endif
000BA3  3               plchk0:
000BA3  3  A9 00        	lda #0			; report as ok
000BA5  3  60           	rts
000BA6  3               plchkx:
000BA6  3  A5 rr        	lda dispy		; x coordinate.
000BA8  3  29 07        	and #7			; position straddling blocks.
000BAA  3  F0 E4        	beq lrchkx		; on platform, deny movement.
000BAC  3  4C A3 0B     	jmp plchk0
000BAF  3               
000BAF  3               ;--------------------------------------------------------------
000BAF  3               ; Check ladder is available.
000BAF  3               ;
000BAF  3               ; Input:
000BAF  3               ;  bufaddr = MAP + x/8 + y/8*32
000BAF  3               ;
000BAF  3               ; Output:
000BAF  3               ;  A  = 0 is ok, A <>0 is not ok
000BAF  3               ;--------------------------------------------------------------
000BAF  3               
000BAF  3               .if lflag
000BAF  3               ldchk:
000BAF  3  A0 00        	ldy #0
000BB1  3  B1 rr        	lda (bufaddr),y 	; fetch cell.
000BB3  3  C9 03        	cmp #LADDER 		; is it a ladder?
000BB5  3  F0 03        	beq :+
000BB7  3  A9 01        	lda #1
000BB9  3  60           	rts  			; return with zero flag set accordingly.
000BBA  3               :
000BBA  3  A9 00        	lda #0
000BBC  3  60           	rts
000BBD  3               .endif
000BBD  3               
000BBD  3               ;--------------------------------------------------------------
000BBD  3               ; Get collectables.
000BBD  3               ;--------------------------------------------------------------
000BBD  3               
000BBD  3               .if cflag
000BBD  3               getcol:
000BBD  3                       lda #COLECT             ; collectable blocks.
000BBD  3                       sta z80_b
000BBD  3                       jsr tded                ; test for collectable blocks.
000BBD  3                       cmp z80_b               ; did we find one?
000BBD  3                       beq :+
000BBD  3                       rts                     ; none were found, job done.
000BBD  3               :
000BBD  3                       jsr gtblk               ; get block.
000BBD  3                       jsr evnt20              ; collected block event.
000BBD  3                       jmp getcol              ; repeat until none left.
000BBD  3               
000BBD  3               ; Get collectable block.
000BBD  3               
000BBD  3               gtblk:
000BBD  3               	ldy #0
000BBD  3               	lda (bufaddr),y
000BBD  3               	sta z80_a
000BBD  3                       lda #0
000BBD  3                       sta (bufaddr),y		; make it empty now.
000BBD  3               
000BBD  3               	lda bufaddr		; set dispx
000BBD  3               	and #31
000BBD  3               	sta dispx
000BBD  3               
000BBD  3               	lda bufaddr+1		; Set dispy
000BBD  3               	sec
000BBD  3               	sbc #>MAP
000BBD  3               	sta bufaddr+1
000BBD  3               	asl bufaddr
000BBD  3               	rol bufaddr+1
000BBD  3               	asl bufaddr
000BBD  3               	rol bufaddr+1
000BBD  3               	asl bufaddr
000BBD  3               	rol bufaddr+1
000BBD  3               	lda bufaddr+1
000BBD  3               	sta dispy
000BBD  3               
000BBD  3               	lda colpatt		; get blocknr
000BBD  3               	sta z80_e		; displacement in e.
000BBD  3               	lda #0
000BBD  3               	sta z80_d		; no high byte.
000BBD  3               	asl z80_e  		; multiply char by 8.
000BBD  3               	rol z80_d
000BBD  3               	asl z80_e
000BBD  3               	rol z80_d
000BBD  3               	asl z80_e
000BBD  3               	rol z80_d
000BBD  3               	clc
000BBD  3               	lda z80_e
000BBD  3               	adc #<chgfx 		; address of graphics.
000BBD  3               	sta tileaddr
000BBD  3               	lda z80_d
000BBD  3               	adc #>chgfx
000BBD  3               	sta tileaddr+1
000BBD  3               	jsr gprad 		; get screen address.
000BBD  3               	ldx #7			; number of pixel rows to write.
000BBD  3               gtblk0:
000BBD  3               	ldy #0
000BBD  3               	lda (tileaddr),y 	; get image byte.
000BBD  3               	ldy scrtab,x
000BBD  3               	eor (scraddr),y 	; XOR tile on screen
000BBD  3               	sta (scraddr),y 	; copy to screen.
000BBD  3               	inc tileaddr 		; next image byte.
000BBD  3               	bne :+
000BBD  3               	inc tileaddr+1
000BBD  3               :
000BBD  3               	dex	 		; repeat for 8 pixel rows.
000BBD  3               	bpl gtblk0
000BBD  3               	rts
000BBD  3               .endif
000BBD  3               
000BBD  3               ;--------------------------------------------------------------
000BBD  3               ; Touched deadly block check.
000BBD  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
000BBD  3               ;
000BBD  3               ; Input:
000BBD  3               ;  IX = sprite address
000BBD  3               ;
000BBD  3               ; Output:
000BBD  3               ;  A  = 0 is ok, A=5 is not ok
000BBD  3               ;--------------------------------------------------------------
000BBD  3               
000BBD  3               tded:
000BBD  3  A0 08        	ldy #8
000BBF  3  B1 68        	lda (z80_ix),y 		; y coordinate.
000BC1  3  85 rr        	sta dispy
000BC3  3  C8           	iny
000BC4  3  B1 68        	lda (z80_ix),y 		; x coordinate.
000BC6  3  85 rr        	sta dispx		; coords in dispx,dispy.
000BC8  3  20 78 0C     	jsr tstbl		; get map address.
000BCB  3  48           	pha
000BCC  3  A9 1F        	lda #31			; default distance to next line down.
000BCE  3  85 64        	sta z80_e
000BD0  3  68           	pla
000BD1  3  C5 63        	cmp z80_b		; is this the required block?
000BD3  3  D0 01        	bne :+
000BD5  3  60           	rts			; yes.
000BD6  3               :
000BD6  3  E6 rr        	inc bufaddr 		; next cell.
000BD8  3  D0 02        	bne :+
000BDA  3  E6 rr        	inc bufaddr+1
000BDC  3               :
000BDC  3  A0 00        	ldy #0
000BDE  3  B1 rr        	lda (bufaddr),y		; fetch type.
000BE0  3  C5 63        	cmp z80_b 		; is this deadly/custom?
000BE2  3  D0 01        	bne :+
000BE4  3  60           	rts			; yes.
000BE5  3               :
000BE5  3  A5 rr        	lda dispx		; horizontal position.
000BE7  3  85 62        	sta z80_c 		; store column in c register.
000BE9  3  29 07        	and #7			; is it straddling cells?
000BEB  3  D0 03        	bne :+
000BED  3  4C 01 0C     	jmp tded0		; no.
000BF0  3               :
000BF0  3  E6 rr        	inc bufaddr 		; last cell.
000BF2  3  D0 02        	bne :+
000BF4  3  E6 rr        	inc bufaddr+1
000BF6  3               :
000BF6  3  A0 00        	ldy #0
000BF8  3  B1 rr        	lda (bufaddr),y 	; fetch type.
000BFA  3  C5 63        	cmp z80_b		; is this the block?
000BFC  3  D0 01        	bne :+
000BFE  3  60           	rts			; yes.
000BFF  3               :
000BFF  3  C6 64        	dec z80_e		; one less cell to next row down.
000C01  3               tded0:
000C01  3  18           	clc 			; point to next row.
000C02  3  A5 rr        	lda bufaddr
000C04  3  65 64        	adc z80_e
000C06  3  85 rr        	sta bufaddr
000C08  3  90 02        	bcc :+
000C0A  3  E6 rr        	inc bufaddr+1
000C0C  3               :
000C0C  3  A0 00        	ldy #0
000C0E  3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
000C10  3  C5 63        	cmp z80_b		; is this fatal?
000C12  3  D0 01        	bne :+
000C14  3  60           	rts			; yes.
000C15  3               :
000C15  3  E6 rr        	inc bufaddr 		; next cell.
000C17  3  D0 02        	bne :+
000C19  3  E6 rr        	inc bufaddr+1
000C1B  3               :
000C1B  3  A0 00        	ldy #0
000C1D  3  B1 rr        	lda (bufaddr),y 	; fetch type.
000C1F  3  C5 63        	cmp z80_b		; is this fatal?
000C21  3  D0 01        	bne :+
000C23  3  60           	rts			; yes.
000C24  3               :
000C24  3  A5 62        	lda z80_c		; horizontal position.
000C26  3  29 07        	and #7			; is it straddling cells?
000C28  3  D0 03        	bne :+
000C2A  3  4C 3C 0C     	jmp tded1 		; no.
000C2D  3               :
000C2D  3  E6 rr        	inc bufaddr		; last cell.
000C2F  3  D0 02        	bne :+
000C31  3  E6 rr        	inc bufaddr+1
000C33  3               :
000C33  3  A0 00        	ldy #0
000C35  3  B1 rr        	lda (bufaddr),y		; fetch type.
000C37  3  C5 63        	cmp z80_b		; is this fatal?
000C39  3  D0 01        	bne :+
000C3B  3  60           	rts			; yes.
000C3C  3               :
000C3C  3               tded1:
000C3C  3  A5 rr        	lda dispy		; vertical position.
000C3E  3  29 07        	and #7 			; is it straddling cells?
000C40  3  D0 01        	bne :+
000C42  3  60           	rts			; no, job done.
000C43  3               :
000C43  3  18           	clc			; point to next row.
000C44  3  A5 rr        	lda bufaddr
000C46  3  65 64        	adc z80_e
000C48  3  85 rr        	sta bufaddr
000C4A  3  90 02        	bcc :+
000C4C  3  E6 rr        	inc bufaddr+1
000C4E  3               :
000C4E  3  A0 00        	ldy #0
000C50  3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
000C52  3  C5 63        	cmp z80_b		; is this fatal?
000C54  3  D0 01        	bne :+
000C56  3  60           	rts			; yes.
000C57  3               :
000C57  3  E6 rr        	inc bufaddr		; next cell.
000C59  3  D0 02        	bne :+
000C5B  3  E6 rr        	inc bufaddr+1
000C5D  3               :
000C5D  3  A0 00        	ldy #0
000C5F  3  B1 rr        	lda (bufaddr),y 	; fetch type.
000C61  3  C5 63        	cmp z80_b		; is this fatal?
000C63  3  D0 01        	bne :+
000C65  3  60           	rts			; yes.
000C66  3               :
000C66  3  A5 62        	lda z80_c		; horizontal position.
000C68  3  29 07        	and #7			; is it straddling cells?
000C6A  3  D0 01        	bne :+
000C6C  3  60           	rts			; no.
000C6D  3               :
000C6D  3  E6 rr        	inc bufaddr		; last cell.
000C6F  3  D0 02        	bne :+
000C71  3  E6 rr        	inc bufaddr+1
000C73  3               :
000C73  3  A0 00        	ldy #0
000C75  3  B1 rr        	lda (bufaddr),y		; fetch final type.
000C77  3  60           	rts 			; return with final type in accumulator.
000C78  3               
000C78  3               ;---------------------------------------------------
000C78  3               ; Fetch block type at (dispx, dispy).
000C78  3               ;
000C78  3               ; Output:
000C78  3               ;  A = block type
000C78  3               ;---------------------------------------------------
000C78  3               
000C78  3               tstbl:
000C78  3  A5 rr        	lda dispy 		; fetch y coord.
000C7A  3  4A           	lsr a			; bufaddr = y/8
000C7B  3  4A           	lsr a
000C7C  3  4A           	lsr a
000C7D  3  85 rr        	sta chary
000C7F  3               
000C7F  3  85 rr        	sta bufaddr
000C81  3  A9 00        	lda #0
000C83  3  85 rr        	sta bufaddr+1
000C85  3               
000C85  3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
000C87  3  26 rr        	rol bufaddr+1
000C89  3  06 rr        	asl bufaddr
000C8B  3  26 rr        	rol bufaddr+1
000C8D  3  06 rr        	asl bufaddr
000C8F  3  26 rr        	rol bufaddr+1
000C91  3  06 rr        	asl bufaddr
000C93  3  26 rr        	rol bufaddr+1
000C95  3  06 rr        	asl bufaddr
000C97  3  26 rr        	rol bufaddr+1
000C99  3               
000C99  3  A5 rr        	lda dispx		; x/8
000C9B  3  4A           	lsr a
000C9C  3  4A           	lsr a
000C9D  3  4A           	lsr a
000C9E  3  85 rr        	sta charx
000CA0  3               
000CA0  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
000CA1  3  65 rr        	adc bufaddr
000CA3  3  69 00        	adc #<MAP
000CA5  3  85 rr        	sta bufaddr
000CA7  3  A5 rr        	lda bufaddr+1
000CA9  3  69 98        	adc #>MAP
000CAB  3  85 rr        	sta bufaddr+1
000CAD  3               
000CAD  3  A0 00        	ldy #0
000CAF  3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
000CB1  3  60           	rts
000CB2  3               
000CB2  3               
000CB2  3               ;-------------------------------------------------------------------
000CB2  3               ; Jump - if we can.
000CB2  3               ; Requires initial speed to be set up in accumulator prior to call.
000CB2  3               ;
000CB2  3               ; Input:
000CB2  3               ;  IX = sprite address
000CB2  3               ;-------------------------------------------------------------------
000CB2  3               
000CB2  3               jump:
000CB2  3  A0 0D        	ldy #13
000CB4  3  B1 68        	lda (z80_ix),y		; jump table low.
000CB6  3  A0 0E        	ldy #14
000CB8  3  11 68        	ora (z80_ix),y		; jump table high.
000CBA  3  F0 01        	beq :+
000CBC  3  60           	rts			; already in the air.
000CBD  3               :
000CBD  3  A9 7E        	lda #>jtab
000CBF  3  A0 0E        	ldy #14
000CC1  3  91 68        	sta (z80_ix),y		; set jump high.
000CC3  3  A9 BC        	lda #<jtab		; jump table start.
000CC5  3  A0 0D        	ldy #13
000CC7  3  91 68        	sta (z80_ix),y		; set jump low.
000CC9  3  60           	rts
000CCA  3               
000CCA  3               ; Jump table.
000CCA  3               
000CCA  3               ;jtab:
000CCA  3               ;	.byte 248,250,252
000CCA  3               ;	.byte 254,254,255
000CCA  3               ;	.byte 255,255,0,0
000CCA  3               ;	.byte 0,1,1,1,2,2
000CCA  3               ;	.byte 4,6,8,8,8,99
000CCA  3               
000CCA  3               ;------------------------------------------------
000CCA  3               ; Random numbers code.
000CCA  3               ; Pseudo-random number generator, 8-bit.
000CCA  3               ;
000CCA  3               ; Output:
000CCA  3               ;  RND = random number
000CCA  3               ;------------------------------------------------
000CCA  3               
000CCA  3               random:
000CCA  3  A5 rr        	lda seed
000CCC  3  F0 05        	beq doEor
000CCE  3  0A           	asl a
000CCF  3  F0 04        	beq noEor
000CD1  3  90 02        	bcc noEor
000CD3  3  49 1D        doEor:	eor #$1d
000CD5  3  85 rr        noEor:	sta seed
000CD7  3  60           	rts
000CD8  3               
000CD8  3  A5 rr        	lda seed		; get last random number.
000CDA  3  0A           	asl a
000CDB  3  0A           	asl a
000CDC  3  18           	clc
000CDD  3  65 rr        	adc seed
000CDF  3  18           	clc
000CE0  3  69 45        	adc #$45
000CE2  3  85 rr        	sta seed		; store new seed.
000CE4  3  85 rr        	sta varrnd		; return number in variable.
000CE6  3  60           	rts
000CE7  3               
000CE7  3               ;--------------------------------------------------------
000CE7  3               ; Keys
000CE7  3               ;
000CE7  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
000CE7  3               ;             ||||||||
000CE7  3               ;             |||||||+> Right    KEY 0  - X
000CE7  3               ;             ||||||+-> Left     KEY 1  - Z
000CE7  3               ;             |||||+--> Down     KEY 2  - .
000CE7  3               ;             ||||+---> Up       KEY 3  - ;
000CE7  3               ;             |||+----> Fire1    KEY 4  - SPC
000CE7  3               ;             ||+-----> Fire2    KEY 5  - Q
000CE7  3               ;             |+------> Fire3    KEY 6  - P
000CE7  3               ;             +-------> Not used
000CE7  3               ;
000CE7  3               ;                       Option1  KEY 7  - 1
000CE7  3               ;                       Option2  KEY 8  - 2
000CE7  3               ;                       Option3  KEY 9  - 3
000CE7  3               ;                       Option4  KEY 10 - 4
000CE7  3               ;--------------------------------------------------------
000CE7  3               
000CE7  3               ;              X   Z   .   ;  SPC  Q   P
000CE7  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
000CE7  3               ;        .byte $21,$11,$01,$92                   ; menu options.
000CE7  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
000CEB  3  00 04 14     
000CEE  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
000CF2  3               
000CF2  3               ;--------------------------------------------------------
000CF2  3               ; Keyboard test routine.
000CF2  3               ;
000CF2  3               ; Input:
000CF2  3               ;  A = key to read, high nibble=row and low nibble=col
000CF2  3               ;
000CF2  3               ; Output:
000CF2  3               ;  carry clr = key pressed
000CF2  3               ;  carry set = key not pressed
000CF2  3               ;--------------------------------------------------------
000CF2  3               
000CF2  3               ktest:
000CF2  3  85 61        	sta z80_a		; save key
000CF4  3               
000CF4  3  4A           	lsr a			; set row
000CF5  3  4A           	lsr a
000CF6  3  4A           	lsr a
000CF7  3  4A           	lsr a
000CF8  3  09 F0        	ora #ScrMode		; don't flip screenmode
000CFA  3  8D 00 B0     	sta KeyRowAddr
000CFD  3               
000CFD  3  A5 61        	lda z80_a
000CFF  3  29 0F        	and #$0f
000D01  3  AA           	tax
000D02  3  AD 01 B0     	lda KeyColAddr		; read column
000D05  3               
000D05  3  3D 0E 0D     	and keymask,x		; check key pressed
000D08  3  F0 02        	beq pressed
000D0A  3  38           	sec			; key not pressed
000D0B  3  60           	rts
000D0C  3               pressed:
000D0C  3  18           	clc			; key pressed
000D0D  3  60           	rts
000D0E  3               
000D0E  3  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20
000D12  3  10 20        
000D14  3               
000D14  3               ;-------------------------------------------------------
000D14  3               ; Joystick and keyboard reading routines.
000D14  3               ;
000D14  3               ; contrl = 0, Keyboard
000D14  3               ;          1, JoyKeyb
000D14  3               ;          2, JoyMMC
000D14  3               ;-------------------------------------------------------
000D14  3               
000D14  3               joykey:
000D14  3  A5 rr        	lda contrl 		; control flag.
000D16  3  C9 01        	cmp #1
000D18  3  D0 03        	bne :+
000D1A  3  4C 38 0D     	jmp joyjoy 		; read keyboard joystick
000D1D  3               :
000D1D  3  C9 02        	cmp #2
000D1F  3  D0 03        	bne :+
000D21  3  4C 61 0D     	jmp joysin 		; read MMC joystick.
000D24  3               :
000D24  3               ; Keyboard controls.
000D24  3               
000D24  3  A9 00        	lda #0		 	; zero reading.
000D26  3  85 64        	sta z80_e
000D28  3               
000D28  3  A0 06        	ldy #6	 		; address of last key.
000D2A  3               joyke0:
000D2A  3  B9 D2 7E     	lda keys,y 		; get key from table.
000D2D  3  20 F2 0C     	jsr ktest		; being pressed?
000D30  3  26 64        	rol z80_e 		; rotate into reading.
000D32  3               
000D32  3  88           	dey		 	; next key.
000D33  3  10 F5        	bpl joyke0 		; repeat for all keys.
000D35  3  4C 49 0D     	jmp joyjo1 		; store the value.
000D38  3               
000D38  3               ; Keyboard joystick controls.
000D38  3               
000D38  3               joyjoy:
000D38  3  A9 00        	lda #0		 	; zero reading.
000D3A  3  85 64        	sta z80_e
000D3C  3               
000D3C  3  A0 06        	ldy #6	 		; address of last key.
000D3E  3               joyjo3:
000D3E  3  B9 E7 0C     	lda jkeys,y 		; get key from table.
000D41  3  20 F2 0C     	jsr ktest		; being pressed?
000D44  3  26 64        	rol z80_e 		; rotate into reading.
000D46  3               
000D46  3  88           	dey		 	; next key.
000D47  3  10 F5        	bpl joyjo3 		; repeat for all keys.
000D49  3               joyjo1:
000D49  3  A5 64        	lda z80_e 		; copy e register to accumulator.
000D4B  3               joyjo2:
000D4B  3  85 rr        	sta joyval		; remember value.
000D4D  3  60           	rts
000D4E  3               
000D4E  3               
000D4E  3               ; AtoMMC joystick controls.
000D4E  3               
000D4E  3               ; Set PORTB direction
000D4E  3               
000D4E  3               joyinit:
000D4E  3  A9 FF        	lda #$ff   		; Write value to latch, bits 0-7 input
000D50  3  8D 01 B4     	sta DatReg
000D53  3  20 8F 0D     	jsr interwritedelay
000D56  3  A9 A1        	lda #$a1   		; Write direction in latch to PORTB
000D58  3  8D 00 B4     	sta CmdReg
000D5B  3               
000D5B  3               wait_until_not_busy:
000D5B  3  AD 00 B4     	lda CmdReg
000D5E  3  30 FB        	bmi wait_until_not_busy
000D60  3  60           	rts
000D61  3               
000D61  3               ; Get PORTB value
000D61  3               
000D61  3               joysin:
000D61  3  A9 A2        	lda #$a2   		; Read value PORTB in latch
000D63  3  8D 00 B4     	sta CmdReg
000D66  3  20 8F 0D     	jsr interwritedelay
000D69  3               
000D69  3  AD 01 B4     	lda DatReg		; Read joystick status
000D6C  3  29 7F        	and #$7f
000D6E  3  85 rr        	sta joyval
000D70  3  85 F0        	sta $f0
000D72  3               
000D72  3  AD D7 7E     	lda keys+5		; check fire2
000D75  3  20 F2 0C     	jsr ktest
000D78  3  B0 06        	bcs :+
000D7A  3  A5 rr        	lda joyval
000D7C  3  29 DF        	and #$df
000D7E  3  85 rr        	sta joyval
000D80  3               :
000D80  3  AD D8 7E     	lda keys+6		; check fire3
000D83  3  20 F2 0C     	jsr ktest
000D86  3  B0 06        	bcs :+
000D88  3  A5 rr        	lda joyval
000D8A  3  29 BF        	and #$bf
000D8C  3  85 rr        	sta joyval
000D8E  3               :
000D8E  3  60           	rts
000D8F  3               
000D8F  3               ; Short delay
000D8F  3               ; Enough to intersperse 2 writes to the FATPIC.
000D8F  3               
000D8F  3               interwritedelay:
000D8F  3  A9 08        	lda  #8
000D91  3  38           	sec
000D92  3               loop:
000D92  3  E9 01        	sbc  #1
000D94  3  D0 FC        	bne  loop
000D96  3  60           	rts
000D97  3               
000D97  3               ;tmp_byte:   .byte 0
000D97  3               
000D97  3               ;---------------------------------------------------------------
000D97  3               ; Getkey in column,row format
000D97  3               ;
000D97  3               ; Output:
000D97  3               ;  A = high nibble=row and low nibble=column key in matrix
000D97  3               ;---------------------------------------------------------------
000D97  3               
000D97  3               kget:
000D97  3  A9 F0        	lda #ScrMode		; high-mono mode.
000D99  3  8D 00 B0     	sta ScrSelAddr		; screen select port
000D9C  3  86 rr        	stx xtmp
000D9E  3               kget4:
000D9E  3  20 71 FE     	jsr READKEY		; read key until pressed
000DA1  3  C0 FF        	cpy #255
000DA3  3  F0 F9        	beq kget4
000DA5  3  85 rr        	sta rcol		; save column
000DA7  3  86 rr        	stx rrow		; determine row
000DA9  3               kget3:
000DA9  3  20 71 FE     	jsr READKEY		; wait until key released
000DAC  3  C0 FF        	cpy #255
000DAE  3  D0 F9        	bne kget3
000DB0  3               
000DB0  3  38           	sec			; calculate matrix row
000DB1  3  A9 0A        	lda #10
000DB3  3  E5 rr        	sbc rrow
000DB5  3  0A           	asl a
000DB6  3  0A           	asl a
000DB7  3  0A           	asl a
000DB8  3  0A           	asl a
000DB9  3  85 rr        	sta rrow
000DBB  3               
000DBB  3  A0 FF        	ldy #255		; find column mask
000DBD  3               kget1:
000DBD  3  C8           	iny
000DBE  3  B9 0E 0D     	lda keymask,y
000DC1  3  C5 rr        	cmp rcol
000DC3  3  F0 03        	beq kget2
000DC5  3  4C BD 0D     	jmp kget1
000DC8  3               kget2:
000DC8  3  98           	tya			; determine column
000DC9  3  18           	clc
000DCA  3  65 rr        	adc rrow
000DCC  3  A6 rr        	ldx xtmp
000DCE  3  60           	rts
000DCF  3               
000DCF  3               ;---------------------------------------------------------------
000DCF  3               ; Display message.
000DCF  3               ;
000DCF  3               ; Input:
000DCF  3               ;  A = message number
000DCF  3               ;---------------------------------------------------------------
000DCF  3               
000DCF  3               dmsg:
000DCF  3  AA           	tax
000DD0  3  A9 FE        	lda #<msgdat		; pointer to messages.
000DD2  3  85 66        	sta z80_l
000DD4  3  A9 25        	lda #>msgdat
000DD6  3  85 67        	sta z80_h
000DD8  3  20 EA 0E     	jsr getwrd		; get message number.
000DDB  3               dmsg3:
000DDB  3  20 D7 0E     	jsr preprt		; pre-printing stuff.
000DDE  3  20 21 07     	jsr checkx		; make sure we"re in a printable range.
000DE1  3  A5 rr        	lda prtmod		; print mode.
000DE3  3  D0 47        	bne bmsg1		; no, double-height text.
000DE5  3               dmsg0:
000DE5  3  A5 67        	lda z80_h		; store string pointer.
000DE7  3  48           	pha
000DE8  3  A5 66        	lda z80_l
000DEA  3  48           	pha
000DEB  3               
000DEB  3  A0 00        	ldy #0
000DED  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
000DEF  3  29 7F        	and #127		; remove any end marker.
000DF1  3  C9 0D        	cmp #13
000DF3  3  F0 24        	beq dmsg1
000DF5  3  20 B4 08     	jsr pchar		; display character.
000DF8  3  20 C4 0E     	jsr nexpos 		; display position.
000DFB  3  D0 03        	bne dmsg2		; not on a new line.
000DFD  3  20 C9 0E     	jsr nexlin		; next line down.
000E00  3               dmsg2:
000E00  3  68           	pla			; retrieve string pointer
000E01  3  85 66        	sta z80_l
000E03  3  68           	pla
000E04  3  85 67        	sta z80_h
000E06  3               
000E06  3  A0 00        	ldy #0
000E08  3  B1 66        	lda (z80_hl),y		; fetch last character.
000E0A  3  0A           	asl a  			; was it the end?
000E0B  3  90 03        	bcc :+
000E0D  3  4C 74 07     	jmp dscor2		; yes, job done.
000E10  3               :
000E10  3  E6 66        	inc z80_l		; next character to display.
000E12  3  D0 02        	bne :+
000E14  3  E6 67        	inc z80_h
000E16  3               :
000E16  3  4C E5 0D     	jmp dmsg0
000E19  3               dmsg1:
000E19  3  E6 rr        	inc dispy
000E1B  3  A5 rr        	lda dispy
000E1D  3  C9 18        	cmp #24
000E1F  3  90 04        	bcc dmsg4
000E21  3  A9 00        	lda #0
000E23  3  85 rr        	sta dispy
000E25  3               dmsg4:
000E25  3  A9 00        	lda #0
000E27  3  85 rr        	sta dispx
000E29  3  4C 00 0E     	jmp dmsg2
000E2C  3               
000E2C  3               ;prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
000E2C  3               
000E2C  3               ;----------------------------------------------------------
000E2C  3               ; Display message in big text.
000E2C  3               ;
000E2C  3               ; Input:
000E2C  3               ;  HL = string pointer
000E2C  3               ;----------------------------------------------------------
000E2C  3               
000E2C  3               bmsg1:
000E2C  3  A0 00        	ldy #0
000E2E  3  B1 66        	lda (z80_hl),y 		; get character to display.
000E30  3  29 7F        	and #127		; only want 7 bits.
000E32  3  C9 0D        	cmp #13
000E34  3  F0 13        	beq bmsg2
000E36  3  20 5E 0E     	jsr bchar 		; display big char.
000E39  3               bmsg3:
000E39  3  A0 00        	ldy #0
000E3B  3  B1 66        	lda (z80_hl),y 		; look at last character.
000E3D  3  48           	pha
000E3E  3  E6 66        	inc z80_l 		; next character in list.
000E40  3  D0 02        	bne :+
000E42  3  E6 67        	inc z80_h
000E44  3               :
000E44  3  68           	pla
000E45  3  0A           	asl a  			; was terminator flag set?
000E46  3  90 E4        	bcc bmsg1		; no, keep going.
000E48  3  60           	rts
000E49  3               bmsg2:
000E49  3  A9 00        	lda #0
000E4B  3  85 rr        	sta dispx
000E4D  3  E6 rr        	inc dispy
000E4F  3  E6 rr        	inc dispy
000E51  3  A5 rr        	lda dispy
000E53  3  C9 17        	cmp #23
000E55  3  90 E2        	bcc bmsg3
000E57  3  A9 00        	lda #0
000E59  3  85 rr        	sta dispy
000E5B  3  4C 39 0E     	jmp bmsg3
000E5E  3               
000E5E  3               ;----------------------------------------------------------
000E5E  3               ; Big character display.
000E5E  3               ;
000E5E  3               ; Input:
000E5E  3               ;  A = character
000E5E  3               ;----------------------------------------------------------
000E5E  3               
000E5E  3               bchar:
000E5E  3  85 64        	sta z80_e		; save char in lb
000E60  3  A9 00        	lda #0
000E62  3  85 65        	sta z80_d		; reset hb
000E64  3               
000E64  3  06 64        	asl z80_e 		; multiply char by 8.
000E66  3  26 65        	rol z80_d
000E68  3  06 64        	asl z80_e
000E6A  3  26 65        	rol z80_d
000E6C  3  06 64        	asl z80_e
000E6E  3  26 65        	rol z80_d		; de = a*8
000E70  3               
000E70  3  18           	clc			; de = Fontpointer + a*8
000E71  3  A5 64        	lda z80_e
000E73  3  69 BC        	adc #<(FONT-256) 		; address of font.
000E75  3  85 64        	sta z80_e
000E77  3  A5 65        	lda z80_d
000E79  3  69 7A        	adc #>(FONT-256)
000E7B  3  85 65        	sta z80_d
000E7D  3               
000E7D  3  20 65 08     	jsr gprad 		; get screen address.
000E80  3               
000E80  3  A2 00        	ldx #0			; height of character in font.
000E82  3               bchar0:
000E82  3  A0 00        	ldy #0
000E84  3  B1 64        	lda (z80_de),y 		; get a bit of the font.
000E86  3               
000E86  3               .if gflag
000E86  3               	and andeor
000E86  3               	eor andeor+1
000E86  3               .endif
000E86  3               .if iflag
000E86  3               	eor #$ff
000E86  3               .endif
000E86  3               
000E86  3  91 rr        	sta (scraddr),y
000E88  3  48           	pha
000E89  3  20 1E 12     	jsr nline 		; next line down.
000E8C  3  68           	pla
000E8D  3  91 rr        	sta (scraddr),y
000E8F  3  20 1E 12     	jsr nline 		; next line down.
000E92  3               
000E92  3  18           	clc
000E93  3  E6 64        	inc z80_e 		; next line of font.
000E95  3  D0 02        	bne :+
000E97  3  E6 65        	inc z80_d
000E99  3               :
000E99  3  E8           	inx
000E9A  3  E0 08        	cpx #8
000E9C  3  D0 E4        	bne bchar0
000E9E  3               
000E9E  3  20 C4 0E     	jsr nexpos		; display position.
000EA1  3  D0 05        	bne bchar2 		; not on a new line.
000EA3  3               bchar3:
000EA3  3  E6 rr        	inc dispy
000EA5  3  20 C9 0E     	jsr nexlin 		; next line check.
000EA8  3               bchar2:
000EA8  3  4C 74 07     	jmp dscor2		; tidy up line and column variables.
000EAB  3               
000EAB  3               
000EAB  3               ;-------------------------------------------------
000EAB  3               ; Display a character.
000EAB  3               ;
000EAB  3               ; Input:
000EAB  3               ;  A = character
000EAB  3               ;-------------------------------------------------
000EAB  3               
000EAB  3               achar:
000EAB  3  85 63        	sta z80_b 		; copy to b.
000EAD  3  20 D7 0E     	jsr preprt 		; get ready to print.
000EB0  3  A5 63        	lda z80_b		; character in accumulator.
000EB2  3  A6 rr        	ldx prtmod 		; print mode.
000EB4  3  F0 03        	beq :+
000EB6  3  4C 5E 0E     	jmp bchar 		; no, double-height text.
000EB9  3               :
000EB9  3  20 B4 08     	jsr pchar 		; display character.
000EBC  3  20 C4 0E     	jsr nexpos 		; display position.
000EBF  3  F0 E2        	beq bchar3		; next line down.
000EC1  3  4C A8 0E     	jmp bchar2 		; tidy up.
000EC4  3               
000EC4  3               
000EC4  3               ;-------------------------------------------------
000EC4  3               ; Get next print column position.
000EC4  3               ;-------------------------------------------------
000EC4  3               
000EC4  3               nexpos:
000EC4  3  E6 rr        	inc dispx		; move along one position.
000EC6  3  A5 rr        	lda dispx 		; get coordinate.
000EC8  3               ;	and #31
000EC8  3  60           	rts 			; return with status in zero flag.
000EC9  3               
000EC9  3               ;-------------------------------------------------
000EC9  3               ; Get next print line position.
000EC9  3               ;-------------------------------------------------
000EC9  3               
000EC9  3               nexlin:
000EC9  3  E6 rr        	inc dispy 		; newline.
000ECB  3  A5 rr        	lda dispy		; vertical position.
000ECD  3  C9 18        	cmp #24			; past screen edge?
000ECF  3  B0 01        	bcs :+
000ED1  3  60           	rts			; no, still okay.
000ED2  3               :
000ED2  3  A9 00        	lda #0			; restart at top.
000ED4  3  85 rr        	sta dispy
000ED6  3  60           	rts
000ED7  3               
000ED7  3               ;--------------------------------------------------------
000ED7  3               ; Pre-print preliminaries.
000ED7  3               ;--------------------------------------------------------
000ED7  3               
000ED7  3               preprt:
000ED7  3  A9 BC        	lda #<(FONT-256)		; font pointer.
000ED9  3  8D 1F 07     	sta grbase		; set up graphics base.
000EDC  3  A9 7A        	lda #>(FONT-256)
000EDE  3  8D 20 07     	sta grbase+1
000EE1  3               prescr:
000EE1  3  A5 rr        	lda charx 		; display coordinates.
000EE3  3  85 rr        	sta dispx		; set up general coordinates.
000EE5  3  A5 rr        	lda chary
000EE7  3  85 rr        	sta dispy
000EE9  3  60           	rts
000EEA  3               
000EEA  3               ;--------------------------------------------------------------
000EEA  3               ; Get messagenr x in hl
000EEA  3               ;
000EEA  3               ; Input:
000EEA  3               ;  HL = pointer to message list
000EEA  3               ;  X  = message number.
000EEA  3               ;--------------------------------------------------------------
000EEA  3               
000EEA  3               getwrd:
000EEA  3  E0 00        	cpx #0
000EEC  3  D0 01        	bne:+ 			; first word in list?
000EEE  3  60           	rts 			; yep, don't search.
000EEF  3               :
000EEF  3  A0 00        	ldy #0
000EF1  3               getwd0:
000EF1  3  B1 66        	lda (z80_hl),y
000EF3  3  48           	pha
000EF4  3  E6 66        	inc z80_l
000EF6  3  D0 02        	bne :+
000EF8  3  E6 67        	inc z80_h
000EFA  3               :
000EFA  3  68           	pla
000EFB  3  C9 80        	cmp #128		; found end?
000EFD  3  30 F2        	bmi getwd0		; no, carry on.
000EFF  3  CA           	dex			; until we have right number.
000F00  3  D0 EF        	bne getwd0
000F02  3  60           	rts
000F03  3               
000F03  3               ;-----------------------------------------------------------
000F03  3               ; Bubble sort.
000F03  3               ;-----------------------------------------------------------
000F03  3               
000F03  3               bsort:
000F03  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
000F05  3  85 rr        	sta qscnt
000F07  3               
000F07  3  A9 6C        	lda #<sprtab 		; sprite table.
000F09  3  85 68        	sta z80_x
000F0B  3  A9 16        	lda #>sprtab
000F0D  3  85 69        	sta z80_i
000F0F  3               bsort0:
000F0F  3  A0 00        	ldy #0
000F11  3  B1 68        	lda (z80_ix),y 		; first sprite type.
000F13  3  C9 FF        	cmp #255 		; is it switched off?
000F15  3  F0 30        	beq swemp		; yes, may need to switch another in here.
000F17  3               
000F17  3  A0 11        	ldy #TABSIZ
000F19  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
000F1B  3  C9 FF        	cmp #255 		; is it enabled?
000F1D  3  F0 0A        	beq bsort2 		; no, nothing to swap.
000F1F  3               
000F1F  3  A0 14        	ldy #TABSIZ+3
000F21  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
000F23  3  A0 03        	ldy #3
000F25  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
000F27  3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
000F29  3               bsort2:
000F29  3  18           	clc
000F2A  3  A5 68        	lda z80_x
000F2C  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
000F2E  3  85 68        	sta z80_x
000F30  3  90 02        	bcc :+
000F32  3  E6 69        	inc z80_i
000F34  3               :
000F34  3  C6 rr        	dec qscnt
000F36  3  D0 D7        	bne bsort0		; repeat for remaining sprites.
000F38  3  60           	rts
000F39  3               
000F39  3               ;qscnt:	.byte 0
000F39  3               
000F39  3               bsort1:
000F39  3  A0 11        	ldy #TABSIZ
000F3B  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
000F3D  3  C9 FF        	cmp #255		; is it enabled?
000F3F  3  F0 E8        	beq bsort2		; no, nothing to swap.
000F41  3  20 55 0F     	jsr swspr		; swap positions.
000F44  3  4C 29 0F     	jmp bsort2
000F47  3               swemp:
000F47  3  A0 11        	ldy #TABSIZ
000F49  3  B1 68        	lda (z80_ix),y		; next table entry.
000F4B  3  C9 FF        	cmp #255		; is that one on?
000F4D  3  F0 DA        	beq bsort2		; no, nothing to swap.
000F4F  3  20 55 0F     	jsr swspr		; swap positions.
000F52  3  4C 29 0F     	jmp bsort2
000F55  3               
000F55  3               ; Swap sprites.
000F55  3               
000F55  3               swspr:
000F55  3  A5 68        	lda z80_x		; table address
000F57  3  85 64        	sta z80_e		; copy to de pair.
000F59  3  85 66        	sta z80_l		; copy to hl pair.
000F5B  3  A5 69        	lda z80_i
000F5D  3  85 67        	sta z80_h
000F5F  3  85 65        	sta z80_d
000F61  3               
000F61  3  18           	clc
000F62  3  A5 66        	lda z80_l
000F64  3  69 11        	adc #TABSIZ		; distance to second entry.
000F66  3  85 66        	sta z80_l
000F68  3  90 02        	bcc :+
000F6A  3  E6 67        	inc z80_h
000F6C  3               :
000F6C  3  A9 11        	lda #TABSIZ		; bytes to swap.
000F6E  3  85 63        	sta z80_b
000F70  3  A0 00        	ldy #0
000F72  3               swspr0:
000F72  3  B1 66        	lda (z80_hl),y		; fetch second byte.
000F74  3  48           	pha
000F75  3  B1 64        	lda (z80_de),y 		; fetch first byte.
000F77  3  91 66        	sta (z80_hl),y 		; copy to second.
000F79  3  68           	pla
000F7A  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
000F7C  3               
000F7C  3  E6 64        	inc z80_e 		; next byte.
000F7E  3  D0 02        	bne :+
000F80  3  E6 65        	inc z80_d
000F82  3               :
000F82  3  E6 66        	inc z80_l 		; next byte.
000F84  3  D0 02        	bne :+
000F86  3  E6 67        	inc z80_h
000F88  3               :
000F88  3  C6 63        	dec z80_b
000F8A  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
000F8C  3  60           	rts
000F8D  3               
000F8D  3               ;----------------------------------------------------
000F8D  3               ; Process sprites.
000F8D  3               ;----------------------------------------------------
000F8D  3               
000F8D  3               pspr:
000F8D  3  A9 0C        	lda #NUMSPR		; sprites to process.
000F8F  3  85 rr        	sta sprptr
000F91  3               
000F91  3  A9 6C        	lda #<sprtab 		; sprite table.
000F93  3  85 68        	sta z80_x
000F95  3  A9 16        	lda #>sprtab
000F97  3  85 69        	sta z80_i
000F99  3               pspr1:
000F99  3  A0 00        	ldy #0
000F9B  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
000F9D  3  C9 09        	cmp #9 			; within range of sprite types?
000F9F  3  B0 03        	bcs :+
000FA1  3  20 B4 0F     	jsr pspr2 		; yes, process this one.
000FA4  3               :
000FA4  3  18           	clc
000FA5  3  A5 68        	lda z80_x
000FA7  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
000FA9  3  85 68        	sta z80_x
000FAB  3  90 02        	bcc :+
000FAD  3  E6 69        	inc z80_i		; next sprite.
000FAF  3               :
000FAF  3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
000FB1  3  D0 E6        	bne pspr1
000FB3  3  60           	rts
000FB4  3               
000FB4  3               ;sprptr:	.byte 0
000FB4  3               
000FB4  3               pspr2:
000FB4  3  A5 68        	lda z80_x 		; store original sprite pointer.
000FB6  3  85 rr        	sta ogptr
000FB8  3  A5 69        	lda z80_i
000FBA  3  85 rr        	sta ogptr+1
000FBC  3  20 C8 0F     	jsr pspr3		; do the routine.
000FBF  3               rtorg:
000FBF  3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
000FC1  3  85 68        	sta z80_x
000FC3  3  A5 rr        	lda ogptr+1
000FC5  3  85 69        	sta z80_i
000FC7  3               rtorg0:
000FC7  3  60           	rts
000FC8  3               
000FC8  3               pspr3:
000FC8  3  A9 FD        	lda #<evtyp0		; sprite type events list.
000FCA  3  85 66        	sta z80_l
000FCC  3  A9 0F        	lda #>evtyp0
000FCE  3  85 67        	sta z80_h
000FD0  3               pspr4:
000FD0  3  B1 68        	lda (z80_ix),y
000FD2  3  0A           	asl a			; double accumulator.
000FD3  3  18           	clc
000FD4  3  65 66        	adc z80_l
000FD6  3  85 66        	sta z80_l
000FD8  3  90 02        	bcc :+
000FDA  3  E6 67        	inc z80_h
000FDC  3               :
000FDC  3  B1 66        	lda (z80_hl),y
000FDE  3  85 64        	sta z80_e 		; copy to de.
000FE0  3  48           	pha
000FE1  3               
000FE1  3  E6 66        	inc z80_l 		; next byte of address.
000FE3  3  D0 02        	bne :+
000FE5  3  E6 67        	inc z80_h
000FE7  3               :
000FE7  3  B1 66        	lda (z80_hl),y 		; address high.
000FE9  3  85 65        	sta z80_d
000FEB  3               
000FEB  3  48           	pha	 		; swap address into hl.
000FEC  3  A5 67        	lda z80_h
000FEE  3  85 65        	sta z80_d
000FF0  3  68           	pla
000FF1  3  85 67        	sta z80_h
000FF3  3  68           	pla
000FF4  3  85 66        	sta z80_l
000FF6  3  A5 66        	lda z80_l
000FF8  3  85 64        	sta z80_e
000FFA  3               
000FFA  3  6C 66 00     	jmp (z80_hl) 		; go there.
000FFD  3               
000FFD  3               ;ogptr:	.word 0			; original sprite pointer.
000FFD  3               
000FFD  3               ; Address of each sprite type's routine.
000FFD  3               
000FFD  3  C3 17        evtyp0:	.word evnt00
000FFF  3  DE 1B        evtyp1:	.word evnt01
001001  3  EF 1C        evtyp2:	.word evnt02
001003  3  3A 1E        evtyp3:	.word evnt03
001005  3  7F 1F        evtyp4:	.word evnt04
001007  3  80 1F        evtyp5:	.word evnt05
001009  3  C5 1F        evtyp6:	.word evnt06
00100B  3  DF 20        evtyp7:	.word evnt07
00100D  3  B4 21        evtyp8:	.word evnt08
00100F  3               
00100F  3               ;--------------------------------------------------------------
00100F  3               ; Display sprites.
00100F  3               ;
00100F  3               ; Input:
00100F  3               ;  IX = sprite table
00100F  3               ;--------------------------------------------------------------
00100F  3               
00100F  3               dspr:
00100F  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
001011  3  85 rr        	sta sprcnt
001013  3               dspr0:
001013  3  A0 00        	ldy #0
001015  3  B1 68        	lda (z80_ix),y 		; get sprite type.
001017  3  C9 FF        	cmp #255 		; is it enabled?
001019  3  D0 42        	bne dspr1 		; yes, it needs deleting.
00101B  3               dspr5:
00101B  3  A0 05        	ldy #5
00101D  3  B1 68        	lda (z80_ix),y 		; new type.
00101F  3  C9 FF        	cmp #255		; is it enabled?
001021  3  D0 77        	bne dspr3 		; yes, it needs drawing.
001023  3               dspr2:
001023  3  A0 05        	ldy #5
001025  3  B1 68        	lda (z80_ix),y 		; copy new type.
001027  3  A0 00        	ldy #0
001029  3  91 68        	sta (z80_ix),y
00102B  3  A0 06        	ldy #6
00102D  3  B1 68        	lda (z80_ix),y 		; copy new image number.
00102F  3  A0 01        	ldy #1
001031  3  91 68        	sta (z80_ix),y
001033  3  A0 07        	ldy #7
001035  3  B1 68        	lda (z80_ix),y 		; copy new frame.
001037  3  A0 02        	ldy #2
001039  3  91 68        	sta (z80_ix),y
00103B  3  A0 08        	ldy #8
00103D  3  B1 68        	lda (z80_ix),y 		; copy new y.
00103F  3  A0 03        	ldy #3
001041  3  91 68        	sta (z80_ix),y
001043  3  A0 09        	ldy #9
001045  3  B1 68        	lda (z80_ix),y 		; copy new x.
001047  3  A0 04        	ldy #4
001049  3  91 68        	sta (z80_ix),y
00104B  3               
00104B  3  18           	clc
00104C  3  A5 68        	lda z80_x
00104E  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
001050  3  85 68        	sta z80_x
001052  3  A5 69        	lda z80_i
001054  3  69 00        	adc #0
001056  3  85 69        	sta z80_i 		; next sprite.
001058  3  C6 rr        	dec sprcnt
00105A  3  D0 B7        	bne dspr0		; repeat for remaining sprites.
00105C  3  60           	rts
00105D  3               dspr1:
00105D  3  A0 05        	ldy #5
00105F  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
001061  3  C9 FF        	cmp #255		; is this enabled?
001063  3  D0 06        	bne dspr4 		; yes, display both.
001065  3               dspr6:
001065  3  20 35 11     	jsr sspria 		; show single sprite.
001068  3  4C 23 10     	jmp dspr2
00106B  3               
00106B  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
00106B  3               
00106B  3               dspr4:
00106B  3  A0 04        	ldy #4
00106D  3  B1 68        	lda (z80_ix),y		; old x.
00106F  3  A0 09        	ldy #9
001071  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
001073  3  D0 1F        	bne dspr7 		; they differ, need to redraw.
001075  3               
001075  3  A0 03        	ldy #3
001077  3  B1 68        	lda (z80_ix),y		; old y.
001079  3  A0 08        	ldy #8
00107B  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
00107D  3  D0 15        	bne dspr7		; they differ, need to redraw.
00107F  3               
00107F  3  A0 02        	ldy #2
001081  3  B1 68        	lda (z80_ix),y 		; old frame.
001083  3  A0 07        	ldy #7
001085  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
001087  3  4C 94 10     	jmp dspr7 		; they differ, need to redraw.
00108A  3               
00108A  3  A0 01        	ldy #1
00108C  3  B1 68        	lda (z80_ix),y 		; old image.
00108E  3  A0 06        	ldy #6
001090  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
001092  3  F0 8F        	beq dspr2		; everything is the same, don't redraw.
001094  3               dspr7:
001094  3  20 62 11     	jsr sspric 		; delete old sprite, draw new one simultaneously.
001097  3  4C 23 10     	jmp dspr2
00109A  3               dspr3:
00109A  3  20 5C 11     	jsr ssprib 		; show single sprite.
00109D  3  4C 23 10     	jmp dspr2
0010A0  3               
0010A0  3               ;sprcnt:	.byte 0
0010A0  3               
0010A0  3               ;-----------------------------------------
0010A0  3               ; Get sprite address calculations.
0010A0  3               ; gspran = new sprite, gsprad = old sprite.
0010A0  3               ;
0010A0  3               ; Input:
0010A0  3               ;  IX = sprite address
0010A0  3               ;-----------------------------------------
0010A0  3               
0010A0  3               gspran:
0010A0  3  A0 08        	ldy #8
0010A2  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
0010A4  3  85 rr        	sta dispy
0010A6  3  A0 09        	ldy #9
0010A8  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
0010AA  3  85 rr        	sta dispx
0010AC  3  A0 06        	ldy #6
0010AE  3  B1 68        	lda (z80_ix),y 		; new sprite image.
0010B0  3  20 8E 14     	jsr gfrm		; fetch start frame for this sprite.
0010B3  3               
0010B3  3  A0 00        	ldy #0
0010B5  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
0010B7  3  A0 07        	ldy #7
0010B9  3  18           	clc
0010BA  3  71 68        	adc (z80_ix),y 		; new add frame number.
0010BC  3  4C DB 10     	jmp gspra0
0010BF  3               
0010BF  3               ;-----------------------------------------
0010BF  3               ; Calculate old sprite address
0010BF  3               ;
0010BF  3               ; Input:
0010BF  3               ;  IX = sprite address
0010BF  3               ;
0010BF  3               ; Output:
0010BF  3               ;  B  = right byte mask
0010BF  3               ;  C  = left byte mask
0010BF  3               ;  DE = spriteframe address
0010BF  3               ;  scraddr = screenaddress(dispx,dispy)
0010BF  3               ;-----------------------------------------
0010BF  3               
0010BF  3               gsprad:
0010BF  3  A0 03        	ldy #3
0010C1  3  B1 68        	lda (z80_ix),y		; y coordinate.
0010C3  3  85 rr        	sta dispy
0010C5  3  A0 04        	ldy #4
0010C7  3  B1 68        	lda (z80_ix),y		; x coordinate.
0010C9  3  85 rr        	sta dispx
0010CB  3  A0 01        	ldy #1
0010CD  3  B1 68        	lda (z80_ix),y 		; sprite image.
0010CF  3  20 8E 14     	jsr gfrm 		; fetch start frame for this sprite.
0010D2  3               
0010D2  3  A0 00        	ldy #0
0010D4  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
0010D6  3  A0 02        	ldy #2
0010D8  3  18           	clc
0010D9  3  71 68        	adc (z80_ix),y 		; add frame number.
0010DB  3               gspra0:
0010DB  3  4A           	lsr a	  		; multiply by 128.
0010DC  3  85 65        	sta z80_d 		; store in d.
0010DE  3  8D 33 11     	sta tmp1
0010E1  3  A9 00        	lda #0
0010E3  3  6A           	ror a
0010E4  3  85 64        	sta z80_e 		; got low byte.
0010E6  3  8D 34 11     	sta tmp2
0010E9  3               .if bflag
0010E9  3               	lsr tmp1
0010E9  3               	ror tmp2
0010E9  3               	clc
0010E9  3               	lda tmp2
0010E9  3               	adc z80_e
0010E9  3               	sta z80_e
0010E9  3               	lda tmp1
0010E9  3               	adc z80_d
0010E9  3               	sta z80_d
0010E9  3               .endif
0010E9  3  18           	clc 			; address of play sprites.
0010EA  3  A5 64        	lda z80_e
0010EC  3  69 83        	adc #<sprgfx
0010EE  3  85 64        	sta z80_e
0010F0  3  A5 65        	lda z80_d
0010F2  3  69 2D        	adc #>sprgfx
0010F4  3  85 65        	sta z80_d
0010F6  3               
0010F6  3  A5 rr        	lda dispx 		; y coordinate.
0010F8  3  29 06        	and #6 			; position within byte boundary.
0010FA  3  AA           	tax	 		; low byte of table displacement.
0010FB  3               
0010FB  3  0A           	asl a	  		; multiply by 32.
0010FC  3  0A           	asl a  			; already a multiple
0010FD  3  0A           	asl a  			; of 2, so just 4
0010FE  3               .if bflag
0010FE  3               	sta tmp1
0010FE  3               	asl a  			; shifts needed.
0010FE  3               	clc
0010FE  3               	adc tmp1
0010FE  3               .else
0010FE  3  0A           	asl a  			; shifts needed.
0010FF  3               .endif
0010FF  3  18           	clc 			; add to sprite address.
001100  3  65 64        	adc z80_e
001102  3  85 64        	sta z80_e
001104  3  90 02        	bcc :+
001106  3  E6 65        	inc z80_d
001108  3               :
001108  3  BD 2B 11     	lda spmask,x		 ; pointer to mask table.
00110B  3  85 62        	sta z80_c 		; left mask.
00110D  3  BD 2C 11     	lda spmask+1,x
001110  3  85 63        	sta z80_b 		; right mask.
001112  3               
001112  3               ;------------------------------------------------------------------
001112  3               ; Drop into screen address routine.
001112  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
001112  3               ;------------------------------------------------------------------
001112  3               
001112  3               scadd:
001112  3  A6 rr        	ldx dispy
001114  3  E0 C0        	cpx #192
001116  3  90 02        	bcc :+
001118  3  A2 C0        	ldx #192
00111A  3               :
00111A  3  A5 rr        	lda dispx
00111C  3  4A           	lsr a
00111D  3  4A           	lsr a
00111E  3  4A           	lsr a
00111F  3  18           	clc
001120  3  7D 00 9B     	adc SCADTB_lb,x
001123  3  85 rr        	sta scraddr
001125  3  BD 00 9C     	lda SCADTB_hb,x
001128  3  85 rr        	sta scraddr+1
00112A  3  60           	rts
00112B  3               
00112B  3  FF 00        spmask:	.byte $ff,$00
00112D  3  3F C0        	.byte $3f,$c0
00112F  3  0F F0        	.byte $0f,$f0
001131  3  03 FC        	.byte $03,$fc
001133  3               
001133  3  00           tmp1:	.byte 0
001134  3  00           tmp2:	.byte 0
001135  3               
001135  3               ;-----------------------------------------------------------------
001135  3               ; These are the sprite routines.
001135  3               ; sspria = single sprite, old (ix).
001135  3               ; ssprib = single sprite, new (ix+5).
001135  3               ; sspric = both sprites, old (ix) and new (ix+5).
001135  3               ;-----------------------------------------------------------------
001135  3               
001135  3               sspria:
001135  3  20 BF 10     	jsr gsprad		; get old sprite address.
001138  3               sspri2:
001138  3  A5 64        	lda z80_e
00113A  3  8D AA 11     	sta dline1+1		; Set spritedata address
00113D  3  8D B9 11     	sta dline2+1
001140  3  A5 65        	lda z80_d
001142  3  8D AB 11     	sta dline1+2
001145  3  8D BA 11     	sta dline2+2
001148  3  86 rr        	stx xtmp
00114A  3  A2 00        	ldx #0			; vertical lines.
00114C  3               sspri0:
00114C  3  20 A6 11     	jsr dline		; draw a line.
00114F  3  E0 10        	cpx #16			; detect block boundery
001151  3  D0 02        	bne :+			; skip if not
001153  3  E6 rr        	inc scraddr+1		; jump to next blockline
001155  3               :
001155  3  E0 20        	cpx #32			; check finished
001157  3               .if bflag
001157  3               	bne :+			; skip if not
001157  3               	inc scraddr+1		; jump to next blockline
001157  3               	inc z80_hlp+1		; jump to next blockline
001157  3               :
001157  3               	cpx #48			; check finished
001157  3               .endif
001157  3  D0 F3        	bne sspri0		; no, repeat
001159  3  A6 rr        	ldx xtmp
00115B  3  60           	rts
00115C  3               
00115C  3               ;-----------------------------------------------------------------
00115C  3               
00115C  3               ssprib:
00115C  3  20 A0 10     	jsr gspran 		; get new sprite address.
00115F  3  4C 38 11     	jmp sspri2
001162  3               
001162  3               ;-----------------------------------------------------------------
001162  3               
001162  3               sspric:
001162  3  20 BF 10     	jsr gsprad 		; get old sprite address.
001165  3  A5 64        	lda z80_e
001167  3  8D CE 11     	sta ddline1+1		; Set spritedata address
00116A  3  8D DD 11     	sta ddline2+1
00116D  3  A5 65        	lda z80_d
00116F  3  8D CF 11     	sta ddline1+2
001172  3  8D DE 11     	sta ddline2+2
001175  3  20 DD 7E     	jsr exx  		; store addresses.
001178  3               
001178  3  20 A0 10     	jsr gspran 		; get new sprite addresses.
00117B  3  A5 64        	lda z80_e
00117D  3  8D AA 11     	sta dline1+1		; Set spritedata address
001180  3  8D B9 11     	sta dline2+1
001183  3  A5 65        	lda z80_d
001185  3  8D AB 11     	sta dline1+2
001188  3  8D BA 11     	sta dline2+2
00118B  3               
00118B  3  86 rr        	stx xtmp
00118D  3  A2 00        	ldx #0			; vertical lines.
00118F  3               lloop:
00118F  3  20 A6 11     	jsr dline 		; draw a line.
001192  3  CA           	dex
001193  3  CA           	dex
001194  3  20 CA 11     	jsr ddline 		; delete a line.
001197  3  E0 10        	cpx #16			; detect block boundery
001199  3  D0 04        	bne :+			; skip if not
00119B  3  E6 rr        	inc scraddr+1		; jump to next blockline
00119D  3  E6 73        	inc z80_hlp+1		; jump to next blockline
00119F  3               :
00119F  3  E0 20        	cpx #32			; check finished
0011A1  3               .if bflag
0011A1  3               	bne :+			; skip if not
0011A1  3               	inc scraddr+1		; jump to next blockline
0011A1  3               	inc z80_hlp+1		; jump to next blockline
0011A1  3               :
0011A1  3               	cpx #48			; check finished
0011A1  3               .endif
0011A1  3  D0 EC        	bne lloop		; no, repeat
0011A3  3  A6 rr        	ldx xtmp
0011A5  3  60           	rts
0011A6  3               
0011A6  3               
0011A6  3               ;-----------------------------------------------------------------
0011A6  3               
0011A6  3               dline:
0011A6  3  BC EE 11     	ldy sprline,x		; point to screenleft
0011A9  3               dline1:
0011A9  3  BD A8 79     	lda objdta,x		; fetch spriteleft byte
0011AC  3  85 61        	sta z80_a		; save spriteright byte
0011AE  3               .if hflag
0011AE  3               	sty ytmp
0011AE  3               	lda scraddr
0011AE  3               	and #31
0011AE  3               	sta dispx
0011AE  3               	lda scraddr+1
0011AE  3               	and #31
0011AE  3               	sta dispy
0011AE  3               	jsr pradd
0011AE  3               	ldy #0
0011AE  3               	lda (bufaddr),y
0011AE  3               	cmp #CUSTOM
0011AE  3               	beq sline
0011AE  3               	ldy ytmp
0011AE  3               .endif
0011AE  3  A5 61        	lda z80_a
0011B0  3  25 62        	and z80_c		; mask left
0011B2  3  51 rr        	eor (scraddr),y		; merge with screenleft
0011B4  3  91 rr        	sta (scraddr),y		; write screenleft
0011B6  3               sline:
0011B6  3               .if hflag
0011B6  3               	ldy ytmp
0011B6  3               .endif
0011B6  3  E8           	inx			; next spritebyte
0011B7  3  C8           	iny			; point to screenmiddle
0011B8  3               .if hflag
0011B8  3               	sty ytmp
0011B8  3               	ldy #1
0011B8  3               	lda (bufaddr),y
0011B8  3               	cmp #CUSTOM
0011B8  3               	beq sline2
0011B8  3               	ldy ytmp
0011B8  3               .endif
0011B8  3               dline2:
0011B8  3  BD A8 79     	lda objdta,x		; fetch spritemiddle byte
0011BB  3  51 rr        	eor (scraddr),y		; merge with screenmiddle
0011BD  3  91 rr        	sta (scraddr),y		; write screenmiddle
0011BF  3               sline2:
0011BF  3               .if hflag
0011BF  3               	ldy ytmp
0011BF  3               .endif
0011BF  3  C8           	iny			; point to screenright
0011C0  3               .if hflag
0011C0  3               	sty ytmp
0011C0  3               	ldy #2
0011C0  3               	lda (bufaddr),y
0011C0  3               	cmp #CUSTOM
0011C0  3               	beq sline3
0011C0  3               	ldy ytmp
0011C0  3               .endif
0011C0  3  A5 61        	lda z80_a		; fetch spriteright byte
0011C2  3  25 63        	and z80_b		; mask right
0011C4  3  51 rr        	eor (scraddr),y		; merge with screenright
0011C6  3  91 rr        	sta (scraddr),y		; write screenright
0011C8  3               sline3:
0011C8  3               .if hflag
0011C8  3               	ldy ytmp
0011C8  3               .endif
0011C8  3  E8           	inx			; next spritebyte
0011C9  3               
0011C9  3  60           	rts
0011CA  3               
0011CA  3               ;-----------------------------------------------------------------
0011CA  3               
0011CA  3               ddline:
0011CA  3  BC EE 11     	ldy sprline,x		; point to screenleft
0011CD  3               ddline1:
0011CD  3  BD A8 79     	lda objdta,x		; fetch spriteleft byte
0011D0  3  85 61        	sta z80_a		; save spriteright byte
0011D2  3               .if hflag
0011D2  3               	sty ytmp
0011D2  3               	lda z80_hlp
0011D2  3               	and #31
0011D2  3               	sta dispx
0011D2  3               	lda z80_hlp+1
0011D2  3               	and #31
0011D2  3               	sta dispy
0011D2  3               	jsr pradd
0011D2  3               	ldy #0
0011D2  3               	lda (bufaddr),y
0011D2  3               	cmp #CUSTOM
0011D2  3               	beq dsline
0011D2  3               	ldy ytmp
0011D2  3               .endif
0011D2  3  A5 61        	lda z80_a
0011D4  3  25 6E        	and z80_cp		; mask left
0011D6  3  51 72        	eor (z80_hlp),y		; merge with screenleft
0011D8  3  91 72        	sta (z80_hlp),y		; write screenleft
0011DA  3               dsline:
0011DA  3               .if hflag
0011DA  3               	ldy ytmp
0011DA  3               .endif
0011DA  3  E8           	inx			; next spritebyte
0011DB  3  C8           	iny			; point to screenmiddle
0011DC  3               .if hflag
0011DC  3               	sty ytmp
0011DC  3               	ldy #1
0011DC  3               	lda (bufaddr),y
0011DC  3               	cmp #CUSTOM
0011DC  3               	beq dsline2
0011DC  3               	ldy ytmp
0011DC  3               .endif
0011DC  3               ddline2:
0011DC  3  BD A8 79     	lda objdta,x		; fetch spritemiddle byte
0011DF  3  51 72        	eor (z80_hlp),y		; merge with screenmiddle
0011E1  3  91 72        	sta (z80_hlp),y		; write screenmiddle
0011E3  3               dsline2:
0011E3  3               .if hflag
0011E3  3               	ldy ytmp
0011E3  3               .endif
0011E3  3  C8           	iny			; point to screenright
0011E4  3               .if hflag
0011E4  3               	sty ytmp
0011E4  3               	ldy #2
0011E4  3               	lda (bufaddr),y
0011E4  3               	cmp #CUSTOM
0011E4  3               	beq dsline3
0011E4  3               	ldy ytmp
0011E4  3               .endif
0011E4  3  A5 61        	lda z80_a		; fetch spriteright byte
0011E6  3  25 6F        	and z80_bp		; mask right
0011E8  3  51 72        	eor (z80_hlp),y		; merge with screenright
0011EA  3  91 72        	sta (z80_hlp),y		; write screenright
0011EC  3               dsline3:
0011EC  3               .if hflag
0011EC  3               	ldy ytmp
0011EC  3               .endif
0011EC  3  E8           	inx			; next spritebyte
0011ED  3               
0011ED  3  60           	rts
0011EE  3               
0011EE  3               sprline:
0011EE  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
0011F2  3  40 41 60 61  
0011F6  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0011FA  3  C0 C1 E0 E1  
0011FE  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
001202  3  40 41 60 61  
001206  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
00120A  3  C0 C1 E0 E1  
00120E  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
001212  3  40 41 60 61  
001216  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
00121A  3  C0 C1 E0 E1  
00121E  3               
00121E  3               ;----------------------------------------------------------------------
00121E  3               ; Line drawn, now work out next target address.
00121E  3               ;----------------------------------------------------------------------
00121E  3               
00121E  3               nline:
00121E  3  18           	clc
00121F  3  A5 rr        	lda scraddr 		; get low byte of address.
001221  3  69 20        	adc #$20
001223  3  85 rr        	sta scraddr 		; new low byte of address.
001225  3  90 02        	bcc :+
001227  3  E6 rr        	inc scraddr+1 		; new high byte of address.
001229  3               :
001229  3  60           	rts
00122A  3               
00122A  3               ;-------------------------------------------------------------
00122A  3               ; Line drawn, now work out next target address.
00122A  3               ;
00122A  3               ; Input:
00122A  3               ;  BP  = right mask
00122A  3               ;  CP  = left mask
00122A  3               ;  DEP = spriteaddress
00122A  3               ;  z80_hlp = screen address
00122A  3               ;-------------------------------------------------------------
00122A  3               
00122A  3               
00122A  3               ;-----------------------------------------------------------
00122A  3               ; Animates a sprite.
00122A  3               ;
00122A  3               ; Input:
00122A  3               ;  IX = sprite address
00122A  3               ;  HL = last sprite address
00122A  3               ;-----------------------------------------------------------
00122A  3               
00122A  3               animsp:
00122A  3  25 rr        	and frmno
00122C  3  F0 01        	beq :+
00122E  3  60           	rts
00122F  3               :
00122F  3  A0 06        	ldy #6
001231  3  B1 68        	lda (z80_ix),y		; sprite image
001233  3  20 8E 14     	jsr gfrm		; get frame data.
001236  3               
001236  3  E6 66        	inc z80_l		; point to frames.
001238  3  D0 02        	bne :+
00123A  3  E6 67        	inc z80_h
00123C  3               :
00123C  3  A0 07        	ldy #7
00123E  3  B1 68        	lda (z80_ix),y		; sprite frame.
001240  3  18           	clc
001241  3  69 01        	adc #1			; next one along.
001243  3  A0 00        	ldy #0
001245  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
001247  3  90 02        	bcc anims0		; no, not yet.
001249  3  A9 00        	lda #0			; start at first frame.
00124B  3               anims0:
00124B  3  A0 07        	ldy #7
00124D  3  91 68        	sta (z80_ix),y		; new frame.
00124F  3  60           	rts
001250  3               
001250  3               ;--------------------------------------------------------------
001250  3               ; Animate back
001250  3               ;
001250  3               ; Input:
001250  3               ;  IX = sprite address
001250  3               ;  HL = last sprite address
001250  3               ;--------------------------------------------------------------
001250  3               
001250  3               animbk:
001250  3  25 rr        	and frmno
001252  3  F0 01        	beq :+
001254  3  60           	rts
001255  3               :
001255  3  A0 06        	ldy #6
001257  3  B1 68        	lda (z80_ix),y		; sprite image.
001259  3  20 8E 14     	jsr gfrm		; get frame data.
00125C  3               
00125C  3  E6 66        	inc z80_l 		; point to frames.
00125E  3  D0 02        	bne :+
001260  3  E6 67        	inc z80_h
001262  3               :
001262  3  A0 07        	ldy #7
001264  3  B1 68        	lda (z80_ix),y 		; sprite frame.
001266  3  F0 03        	beq :+
001268  3  4C 6F 12     	jmp rtanb0 		; yes, start at end.
00126B  3               :
00126B  3  A0 00        	ldy #0
00126D  3  B1 66        	lda (z80_hl),y 		; last sprite.
00126F  3               rtanb0:
00126F  3  38           	sec
001270  3  E9 01        	sbc #1			; next one along.
001272  3  4C 4B 12     	jmp anims0		; set new frame.
001275  3               
001275  3               ;--------------------------------------------------------------
001275  3               ; Check for collision with other sprite, strict enforcement.
001275  3               ;
001275  3               ; Input:
001275  3               ;  b		= sprite to test for
001275  3               ;  ix		= current sprite pointer
001275  3               ;
001275  3               ; global:	b
001275  3               ; local:	x,y,hl,de,skptr
001275  3               ; calls:	-
001275  3               ;--------------------------------------------------------------
001275  3               
001275  3               sktyp:
001275  3  A9 6C        	lda #<sprtab				; sprite table.
001277  3  85 66        	sta z80_l
001279  3  A9 16        	lda #>sprtab
00127B  3  85 67        	sta z80_h
00127D  3               numsp2:
00127D  3  A9 0C        	lda #NUMSPR				; number of sprites.
00127F  3  85 rr        	sta sktptr
001281  3               sktyp0:
001281  3  A5 66        	lda z80_l 				; store pointer to sprite.
001283  3  85 rr        	sta skptr
001285  3  A5 67        	lda z80_h
001287  3  85 rr        	sta skptr+1
001289  3               
001289  3  A0 00        	ldy #0
00128B  3  B1 66        	lda (z80_hl),y 				; get sprite type.
00128D  3  C5 63        	cmp z80_b				; is it the type we seek?
00128F  3  F0 1D        	beq coltyp				; yes, we can use this one.
001291  3               sktyp1:
001291  3  18           	clc
001292  3  A5 rr        	lda skptr				; retrieve sprite pointer.
001294  3  69 11        	adc #TABSIZ				; size of each entry.
001296  3  85 66        	sta z80_l
001298  3  A5 rr        	lda skptr+1
00129A  3  69 00        	adc #0
00129C  3  85 67        	sta z80_h
00129E  3  C6 rr        	dec sktptr					; one less iteration.
0012A0  3  D0 DF        	bne sktyp0				; keep going until we find a slot.
0012A2  3  A9 00        	lda #0					; default to ROM address - no sprite.
0012A4  3  85 66        	sta z80_l
0012A6  3  85 67        	sta z80_h
0012A8  3  85 rr        	sta skptr				; store pointer to sprite.
0012AA  3  85 rr        	sta skptr+1
0012AC  3               
0012AC  3  18           	clc					; don't return with zero flag set.
0012AD  3  60           	rts 					; didn't find one.
0012AE  3               
0012AE  3               ;skptr:	.word 0					; search pointer.
0012AE  3               ;sktptr:	.byte 0
0012AE  3               
0012AE  3               coltyp:
0012AE  3  A0 00        	ldy #0
0012B0  3  B1 68        	lda (z80_ix),y				; current sprite type.
0012B2  3  C5 63        	cmp z80_b				; seeking sprite of same type?
0012B4  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
0012B6  3               colty0:
0012B6  3  A0 09        	ldy #9					; distance to x position in table.
0012B8  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
0012BA  3  85 64        	sta z80_e
0012BC  3  88           	dey
0012BD  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
0012BF  3  85 65        	sta z80_d
0012C1  3               
0012C1  3               ; Drop into collision detection.
0012C1  3               
0012C1  3               colc16:
0012C1  3  A0 09        	ldy #9
0012C3  3  B1 68        	lda (z80_ix),y			 	; x coord.
0012C5  3  38           	sec					; subtract x.
0012C6  3  E5 64        	sbc z80_e
0012C8  3  B0 05        	bcs  colc1a 				; result is positive.
0012CA  3  49 FF        	eor #$ff				; make negative positive.
0012CC  3  18           	clc
0012CD  3  69 01        	adc #1
0012CF  3               colc1a:
0012CF  3  C9 10        	cmp #16 				; within x range?
0012D1  3  B0 BE        	bcs sktyp1				; no - they"ve missed.
0012D3  3  85 62        	sta z80_c				; store difference.
0012D5  3               
0012D5  3  A0 08        	ldy #8
0012D7  3  B1 68        	lda (z80_ix),y				; y coord.
0012D9  3  38           	sec
0012DA  3  E5 65        	sbc z80_d				; subtract y.
0012DC  3  B0 05        	bcs colc1b				; result is positive.
0012DE  3  49 FF        	eor #$ff				; make negative positive.
0012E0  3  18           	clc
0012E1  3  69 01        	adc #1
0012E3  3               colc1b:
0012E3  3  C9 10        	cmp #16					; within y range?
0012E5  3  B0 AA        	bcs sktyp1 				; no - they've missed.
0012E7  3  18           	clc					; add x difference.
0012E8  3  65 62        	adc z80_c
0012EA  3  C9 1A        	cmp #26					; only 5 corner pixels touching?
0012EC  3  B0 02        	bcs :+
0012EE  3  38           	sec
0012EF  3  60           	rts 					; carry set if there's a collision.
0012F0  3               :
0012F0  3  4C 91 12     	jmp sktyp1				; try next sprite in table.
0012F3  3               colty1:
0012F3  3  A5 68        	lda z80_x  				; compare the two.
0012F5  3  C5 66        	cmp z80_l
0012F7  3  D0 09        	bne end_col
0012F9  3  A5 69        	lda z80_i
0012FB  3  C5 67        	cmp z80_h
0012FD  3  D0 03        	bne end_col
0012FF  3  4C 91 12     	jmp sktyp1 				; addresses are identical.
001302  3               end_col:
001302  3  4C B6 12     	jmp colty0
001305  3               
001305  3               ;-----------------------------------------------------------
001305  3               ; Display number, left aligned
001305  3               ;
001305  3               ; Input:
001305  3               ;  a		= number
001305  3               ;
001305  3               ; global:	-
001305  3               ; local:	a,y,bc,hl,displ0
001305  3               ; calls:	num2ch,dmsg3
001305  3               ;-----------------------------------------------------------
001305  3               
001305  3               disply:
001305  3  85 61        	sta z80_a
001307  3  A9 2D        	lda #<displ0				; display workspace.
001309  3  85 62        	sta z80_c
00130B  3  A9 13        	lda #>displ0
00130D  3  85 63        	sta z80_b
00130F  3  A5 61        	lda z80_a
001311  3  20 A8 04     	jsr num2ch				; convert accumulator to string.
001314  3               displ1:
001314  3  C6 62        	dec z80_c				; back one character.
001316  3  D0 02        	bne :+
001318  3  C6 63        	dec z80_b
00131A  3               :
00131A  3  A0 00        	ldy #0
00131C  3  B1 62        	lda (z80_bc),y				; fetch digit.
00131E  3  09 80        	ora #128				; insert end marker.
001320  3  91 62        	sta (z80_bc),y				; new value.
001322  3               
001322  3  A9 2D        	lda #<displ0				; display space.
001324  3  85 66        	sta z80_l
001326  3  A9 13        	lda #>displ0
001328  3  85 67        	sta z80_h
00132A  3  4C DB 0D     	jmp dmsg3				; display the string.
00132D  3               
00132D  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
001331  3               
001331  3               ;----------------------------------------------------------------
001331  3               ; Initialise screen.
001331  3               ;
001331  3               ; global:	roomtb,scno
001331  3               ; local:	-
001331  3               ; calls:	tstcs
001331  3               ;----------------------------------------------------------------
001331  3               
001331  3               initsc:
001331  3  AD 49 17     	lda roomtb 			; whereabouts in the map are we?
001334  3  20 3E 13     	jsr tstsc 			; find displacement.
001337  3  C9 FF        	cmp #255 			; is it valid?
001339  3  F0 02        	beq init_end 			; no, it's rubbish.
00133B  3  85 rr        	sta scno			; store new room number.
00133D  3               init_end:
00133D  3  60           	rts
00133E  3               
00133E  3               ;----------------------------------------------------------------
00133E  3               ; Test screen.
00133E  3               ;
00133E  3               ; global:	-
00133E  3               ; local:	x
00133E  3               ; calls:	-
00133E  3               ;----------------------------------------------------------------
00133E  3               
00133E  3               tstsc:
00133E  3  85 rr        	sta tmproom
001340  3  18           	clc
001341  3  69 0D        	adc #MAPWID 			; add width in case we"re negative.
001343  3  AA           	tax 				; add displacement to map data.
001344  3  BD 74 17     	lda mapdat-MAPWID,x 		; find room number there.
001347  3  60           	rts
001348  3               
001348  3               ;tmproom:	.byte 0
001348  3               
001348  3               ;--------------------------
001348  3               ; Screen left.
001348  3               ;--------------------------
001348  3               
001348  3               scrl:
001348  3  AD 49 17     	lda roomtb 			; present room table pointer.
00134B  3  38           	sec
00134C  3  E9 01        	sbc #1				; room left.
00134E  3               scrl0:
00134E  3  20 3E 13     	jsr tstsc			; test screen.
001351  3  C9 FF        	cmp #255			; is there a screen this way?
001353  3  D0 01        	bne :+
001355  3  60           	rts				; no, return to loop.
001356  3               :
001356  3  A5 rr        	lda tmproom			; restore room displacement.
001358  3  8D 49 17     	sta roomtb			; new room table position.
00135B  3               scrl1:
00135B  3  20 31 13     	jsr initsc 			; set new screen.
00135E  3  A9 02        	lda #2
001360  3  85 rr        	sta restfl 			; set it.
001362  3  60           	rts
001363  3               scrr:
001363  3  AD 49 17     	lda roomtb 			; room table pointer.
001366  3  18           	clc
001367  3  69 01        	adc #1				; room right.
001369  3  4C 4E 13     	jmp scrl0
00136C  3               scru:
00136C  3  AD 49 17     	lda roomtb 			; room table pointer.
00136F  3  38           	sec
001370  3  E9 0D        	sbc #MAPWID 			; room up.
001372  3  4C 4E 13     	jmp scrl0
001375  3               scrd:
001375  3  AD 49 17     	lda roomtb 			; room table pointer.
001378  3  18           	clc
001379  3  69 0D        	adc #MAPWID 			; room down.
00137B  3  4C 4E 13     	jmp scrl0
00137E  3               
00137E  3               ;-----------------------------------------
00137E  3               ; Jump to new screen.
00137E  3               ;-----------------------------------------
00137E  3               
00137E  3               nwscr:
00137E  3  A2 00        	ldx #0				; start of map data.
001380  3               nwscr0:
001380  3  DD 81 17     	cmp mapdat,x
001383  3  F0 06        	beq nwscr1			; have we found a match for screen?
001385  3  E8           	inx 				; next room.
001386  3  E0 50        	cpx #80				; zero room count, 80 to search.
001388  3  D0 F6        	bne nwscr0			; keep looking.
00138A  3  60           	rts
00138B  3               nwscr1:
00138B  3  8E 49 17     	stx roomtb			; set the map position.
00138E  3  4C 5B 13     	jmp scrl1			; draw new room.
001391  3               
001391  3               
001391  3               ;----------------------------------------------------------
001391  3               ; Gravity processing.
001391  3               ;----------------------------------------------------------
001391  3               
001391  3               grav:
001391  3  A0 0D        	ldy #13
001393  3  B1 68        	lda (z80_ix),y			; jump pointer low.
001395  3  85 66        	sta z80_l
001397  3  A0 0E        	ldy #14
001399  3  B1 68        	lda (z80_ix),y			; jump pointer high.
00139B  3  85 67        	sta z80_h
00139D  3  05 66        	ora z80_l			; merge in low byte.
00139F  3  D0 01        	bne :+
0013A1  3  60           	rts				; if neither is set, we're not in the air.
0013A2  3               :
0013A2  3  A0 00        	ldy #0
0013A4  3  B1 66        	lda (z80_hl),y			; pixels to move.
0013A6  3  85 61        	sta z80_a
0013A8  3  C9 63        	cmp #99				; reached the end?
0013AA  3  D0 0C        	bne grav0			; no, continue.
0013AC  3               grav2:
0013AC  3  C6 66        	dec z80_l			; go back to previous value.
0013AE  3  C9 FF        	cmp #$ff
0013B0  3  D0 02        	bne :+
0013B2  3  C6 67        	dec z80_h
0013B4  3               :
0013B4  3  B1 66        	lda (z80_hl),y			; fetch that from table.
0013B6  3  85 61        	sta z80_a
0013B8  3               grav0:
0013B8  3  E6 66        	inc z80_l			; point to next table entry.
0013BA  3  D0 02        	bne :+
0013BC  3  E6 67        	inc z80_h
0013BE  3               :
0013BE  3  A5 66        	lda z80_l
0013C0  3  A0 0D        	ldy #13
0013C2  3  91 68        	sta (z80_ix),y			; store new pointer low.
0013C4  3  A5 67        	lda z80_h
0013C6  3  A0 0E        	ldy #14
0013C8  3  91 68        	sta (z80_ix),y			; store new pointer high.
0013CA  3               grav1:
0013CA  3  A5 61        	lda z80_a
0013CC  3  D0 01        	bne :+				; any movement required?
0013CE  3  60           	rts				; no, not this time.
0013CF  3               :
0013CF  3  A5 61        	lda z80_a
0013D1  3  C9 80        	cmp #128			; is it up or down?
0013D3  3  B0 15        	bcs gravu			; it's up.
0013D5  3               gravd:
0013D5  3  85 63        	sta z80_b			; set pixels to move.
0013D7  3               gravd0:
0013D7  3  20 01 0B     	jsr cangd			; can we go down?
0013DA  3  D0 28        	bne gravst			; can't move down, so stop.
0013DC  3  A0 08        	ldy #8
0013DE  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
0013E0  3  18           	clc
0013E1  3  69 01        	adc #1
0013E3  3  91 68        	sta (z80_ix),y
0013E5  3  C6 63        	dec z80_b
0013E7  3  D0 EE        	bne gravd0
0013E9  3  60           	rts
0013EA  3               gravu:
0013EA  3  49 FF        	eor #$ff			; flip the sign so it's positive.
0013EC  3  18           	clc
0013ED  3  69 01        	adc #1
0013EF  3  85 63        	sta z80_b			; set pixels to move.
0013F1  3               gravu0:
0013F1  3  20 CC 0A     	jsr cangu			; can we go up?
0013F4  3  D0 6E        	bne ifalls			; can't move up, go down next.
0013F6  3  A0 08        	ldy #8
0013F8  3  B1 68        	lda (z80_ix),y
0013FA  3  38           	sec
0013FB  3  E9 01        	sbc #1
0013FD  3  91 68        	sta (z80_ix),y			; adjust new x coord.
0013FF  3  C6 63        	dec z80_b
001401  3  D0 EE        	bne gravu0
001403  3  60           	rts
001404  3               gravst:
001404  3  A0 0D        	ldy #13
001406  3  B1 68        	lda (z80_ix),y			; jump pointer low.
001408  3  85 66        	sta z80_l
00140A  3  A0 0E        	ldy #14
00140C  3  B1 68        	lda (z80_ix),y			; jump pointer high.
00140E  3  85 67        	sta z80_h
001410  3               
001410  3  A9 00        	lda #0				; null value in pointer.
001412  3  A0 0D        	ldy #13
001414  3  91 68        	sta (z80_ix),y			; store new pointer low.
001416  3  C8           	iny
001417  3  91 68        	sta (z80_ix),y			; store new pointer high.
001419  3               
001419  3  A0 00        	ldy #0
00141B  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
00141D  3  C9 63        	cmp #99				; is it the end marker?
00141F  3               evftf:
00141F  3  F0 01        	beq :+				; yes, fallen too far.
001421  3  60           	rts
001422  3               :
001422  3  4C F7 24     	jmp evnt15			; EVENT FELLTOOFAR
001425  3               
001425  3               ;------------------------------------------------
001425  3               ; Initiate fall check.
001425  3               ;------------------------------------------------
001425  3               
001425  3               ifall:
001425  3  A0 0D        	ldy #13
001427  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
001429  3  85 66        	sta z80_l
00142B  3  A0 0E        	ldy #14
00142D  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
00142F  3  85 67        	sta z80_h			; high byte in accumulator.
001431  3  05 66        	ora z80_l			; merge in low byte.
001433  3  F0 01        	beq :+
001435  3  60           	rts				; if either is set, we're already in the air.
001436  3               :
001436  3  A0 09        	ldy #9
001438  3  B1 68        	lda (z80_ix),y			; y coordinate.
00143A  3  85 rr        	sta dispx
00143C  3  A0 08        	ldy #8
00143E  3  B1 68        	lda (z80_ix),y			; look x coordinate.
001440  3  18           	clc
001441  3               numsp7:
001441  3  69 10        	adc #SPR_HGT			; add 16 pixels.
001443  3  85 rr        	sta dispy			; set up test coordinates.
001445  3  20 78 0C     	jsr tstbl			; get map address.
001448  3  20 93 0B     	jsr plchk			; block, platform check.
00144B  3  F0 01        	beq :+
00144D  3  60           	rts				; it's solid, don't fall.
00144E  3               :
00144E  3  E6 rr        	inc bufaddr			; look right one cell.
001450  3  20 93 0B     	jsr plchk			; block, platform check.
001453  3  F0 01        	beq :+
001455  3  60           	rts				; it's solid, don't fall.
001456  3               :
001456  3  A5 rr        	lda dispx			; y coordinate.
001458  3  29 07        	and #7				; position straddling block cells.
00145A  3  F0 08        	beq ifalls			; no more checks needed.
00145C  3  E6 rr        	inc bufaddr			; look to third cell.
00145E  3  20 93 0B     	jsr plchk			; block, platform check.
001461  3  F0 01        	beq :+
001463  3  60           	rts				; it's solid, don't fall.
001464  3               :
001464  3               ifalls:
001464  3  A9 BC        	lda #<jtab			; jump table start.
001466  3  85 66        	sta z80_l
001468  3  A9 7E        	lda #>jtab
00146A  3  85 67        	sta z80_h
00146C  3               ifal0:
00146C  3  E6 66        	inc z80_l			; point to next value.
00146E  3  D0 02        	bne :+
001470  3  E6 67        	inc z80_h
001472  3               :
001472  3  A0 00        	ldy #0
001474  3  B1 66        	lda (z80_hl),y			; fetch value.
001476  3  F0 F4        	beq ifal0			; no, get next value.
001478  3  C9 63        	cmp #99				; reached end of table?
00147A  3  D0 01        	bne :+
00147C  3  60           	rts				; yes, don't fall.
00147D  3               :
00147D  3  C9 80        	cmp #128			; is it going up?
00147F  3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
001481  3               
001481  3  A0 0D        	ldy #13
001483  3  A5 66        	lda z80_l
001485  3  91 68        	sta (z80_ix),y 			; set jump low.
001487  3  A0 0E        	ldy #14
001489  3  A5 67        	lda z80_h
00148B  3  91 68        	sta (z80_ix),y 			; set jump high.
00148D  3  60           	rts
00148E  3               
00148E  3               
00148E  3               ;----------------------------------------------------
00148E  3               ; Get frame data for a particular sprite.
00148E  3               ; Input:
00148E  3               ;  a		= framenumer
00148E  3               ; Output:
00148E  3               ;  hl		= frame address
00148E  3               ;
00148E  3               ; global:	hl,frmptr
00148E  3               ; local:	-
00148E  3               ; calls:	-
00148E  3               ;----------------------------------------------------
00148E  3               
00148E  3               gfrm:
00148E  3  0A           	asl a	 		 	; multiple of 2.
00148F  3  18           	clc
001490  3  6D 39 02     	adc frmptr 			; frames used by game.
001493  3  85 66        	sta z80_l
001495  3  AD 3A 02     	lda frmptr+1
001498  3  69 00        	adc #0
00149A  3  85 67        	sta z80_h 			; point to frame start.
00149C  3  60           	rts
00149D  3               
00149D  3               ;----------------------------------------------------
00149D  3               ; Find sprite list for current room.
00149D  3               ;
00149D  3               ; global:	hl
00149D  3               ; local:	x,y
00149D  3               ; calls:	-
00149D  3               ;----------------------------------------------------
00149D  3               
00149D  3               sprlst:
00149D  3  A9 F9        	lda #<nmedat 			; list of enemy sprites.
00149F  3  85 66        	sta z80_l
0014A1  3  A9 77        	lda #>nmedat
0014A3  3  85 67        	sta z80_h
0014A5  3  A6 rr        	ldx scno 			; screen number.
0014A7  3  D0 01        	bne sprls2 			; is it the first screen?
0014A9  3  60           	rts 				; yes, don't need to search data.
0014AA  3               sprls2:
0014AA  3  A0 00        	ldy #0
0014AC  3               sprls1:
0014AC  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
0014AE  3  C9 FF        	cmp #255			; is it an end marker?
0014B0  3  F0 0E        	beq sprls0 			; yes, end of this room.
0014B2  3               
0014B2  3  18           	clc 				; point to next sprite in list.
0014B3  3  A5 66        	lda z80_l
0014B5  3  69 04        	adc #NMESIZ
0014B7  3  85 66        	sta z80_l
0014B9  3  90 02        	bcc :+
0014BB  3  E6 67        	inc z80_h
0014BD  3               :
0014BD  3  4C AC 14     	jmp sprls1 			; continue until end of room.
0014C0  3               sprls0:
0014C0  3  E6 66        	inc z80_l 			; point to start of next screen.s
0014C2  3  D0 02        	bne :+
0014C4  3  E6 67        	inc z80_h
0014C6  3               :
0014C6  3  CA           	dex
0014C7  3  D0 E3        	bne sprls1 			; continue until room found.
0014C9  3  60           	rts
0014CA  3               
0014CA  3               
0014CA  3               ;----------------------------------------------------
0014CA  3               ; Clear all but a single player sprite.
0014CA  3               ;
0014CA  3               ; global:	-
0014CA  3               ; local:	x,y,ix
0014CA  3               ; calls:	-
0014CA  3               ;----------------------------------------------------
0014CA  3               
0014CA  3               nspr:
0014CA  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0014CC  3  85 rr        	sta sprcnt
0014CE  3  A9 6C        	lda #<sprtab 			; sprite table.
0014D0  3  85 68        	sta z80_x
0014D2  3  A9 16        	lda #>sprtab
0014D4  3  85 69        	sta z80_i
0014D6  3               nspr0:
0014D6  3  A0 00        	ldy #0 				; fetch sprite type.
0014D8  3  B1 68        	lda (z80_ix),y 			; is it a player?
0014DA  3  F0 1A        	beq nspr1 			; yes, keep this one.
0014DC  3               
0014DC  3  A9 FF        	lda #255
0014DE  3  A0 00        	ldy #0 				; fetch sprite type.
0014E0  3  91 68        	sta (z80_ix),y 			; delete sprite.
0014E2  3  A0 05        	ldy #5
0014E4  3  91 68        	sta (z80_ix),y 			; remove next type.
0014E6  3               
0014E6  3  18           	clc	 			; next sprite.
0014E7  3  A5 68        	lda z80_x
0014E9  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0014EB  3  85 68        	sta z80_x
0014ED  3  90 02        	bcc :+
0014EF  3  E6 69        	inc z80_i
0014F1  3               :
0014F1  3  C6 rr        	dec sprcnt	 			; one less space in the table.
0014F3  3  D0 E1        	bne nspr0
0014F5  3  60           	rts
0014F6  3               nspr1:
0014F6  3  A9 FF        	lda #255
0014F8  3  A0 00        	ldy #0
0014FA  3  91 68        	sta (z80_ix),y 			; delete sprite.
0014FC  3               
0014FC  3  18           	clc	 			; point to next sprite.
0014FD  3  A5 68        	lda z80_x
0014FF  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
001501  3  85 68        	sta z80_x
001503  3  90 02        	bcc :+
001505  3  E6 69        	inc z80_i
001507  3               :
001507  3  C6 rr        	dec sprcnt	 			; one less to do.
001509  3  D0 01        	bne nspr2
00150B  3  60           	rts
00150C  3               nspr2:
00150C  3  A9 FF        	lda #255
00150E  3  A0 00        	ldy #0
001510  3  91 68        	sta (z80_ix),y 			; delete sprite.
001512  3  A0 05        	ldy #5
001514  3  91 68        	sta (z80_ix),y 			; remove next type.
001516  3               
001516  3  18           	clc	 			; next sprite.
001517  3  A5 68        	lda z80_x
001519  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00151B  3  85 68        	sta z80_x
00151D  3  90 02        	bcc :+
00151F  3  E6 69        	inc z80_i
001521  3               :
001521  3  C6 rr        	dec sprcnt	 			; one less space in table.
001523  3  D0 E7        	bne nspr2
001525  3  60           	rts
001526  3               
001526  3               ;----------------------------------------------------------
001526  3               ; Two initialisation routines.
001526  3               ; Initialise sprites - copy everything from list to table.
001526  3               ;
001526  3               ; global:	-
001526  3               ; local:	x,y,ix
001526  3               ; calls:	cpsp
001526  3               ;----------------------------------------------------------
001526  3               
001526  3               ispr:
001526  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
001528  3  85 rr        	sta sprcnt
00152A  3  A9 6C        	lda #<sprtab			; sprite table.
00152C  3  85 68        	sta z80_x
00152E  3  A9 16        	lda #>sprtab
001530  3  85 69        	sta z80_i
001532  3               ispr2:
001532  3  A0 00        	ldy #0
001534  3  B1 66        	lda (z80_hl),y 			; fetch byte.
001536  3  C9 FF        	cmp #255 			; is it an end marker?
001538  3  D0 01        	bne :+
00153A  3  60           	rts 				; yes, no more to do.
00153B  3               :
00153B  3               ispr1:
00153B  3  A0 00        	ldy #0
00153D  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
00153F  3  C9 FF        	cmp #255 			; is it enabled yet?
001541  3  D0 08        	bne ispr4			; yes, try another slot.
001543  3               
001543  3  A0 05        	ldy #5
001545  3  B1 68        	lda (z80_ix),y		 	; next type.
001547  3  C9 FF        	cmp #255 			; is it enabled yet?
001549  3  F0 10        	beq ispr3 			; no, process this one.
00154B  3               ispr4:
00154B  3  18           	clc 				; next sprite.
00154C  3  A5 68        	lda z80_x
00154E  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
001550  3  85 68        	sta z80_x
001552  3  90 02        	bcc :+
001554  3  E6 69        	inc z80_i
001556  3               :
001556  3  C6 rr        	dec sprcnt
001558  3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
00155A  3  60           	rts  				; no more room in table.
00155B  3               ispr3:
00155B  3  20 AE 15     	jsr cpsp			; initialise a sprite.
00155E  3  C6 rr        	dec sprcnt			; one less space in the table.
001560  3  D0 D0        	bne ispr2
001562  3  60           	rts
001563  3               
001563  3               
001563  3               ;-----------------------------------------------------------------------
001563  3               ; Initialise sprites - but not player, we're keeping the old one.
001563  3               ;
001563  3               ; global:	-
001563  3               ; local:	x,y,ix
001563  3               ; calls:	cpsp
001563  3               ;-----------------------------------------------------------------------
001563  3               
001563  3               kspr:
001563  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
001565  3  A9 6C        	lda #<sprtab 			; sprite table.
001567  3  85 68        	sta z80_x
001569  3  A9 16        	lda #>sprtab
00156B  3  85 69        	sta z80_i
00156D  3               kspr2:
00156D  3  A0 00        	ldy #0
00156F  3  B1 66        	lda (z80_hl),y 			; fetch byte.
001571  3  C9 FF        	cmp #255 			; is it an end marker?
001573  3  D0 01        	bne :+
001575  3  60           	rts 				; yes, no more to do.
001576  3               :
001576  3  C9 00        	cmp #0
001578  3  D0 0E        	bne kspr1 			; no, add to table as normal.
00157A  3               
00157A  3  18           	clc 				; next sprite.
00157B  3  A5 66        	lda z80_l
00157D  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
00157F  3  85 66        	sta z80_l
001581  3  90 02        	bcc :+
001583  3  E6 67        	inc z80_h
001585  3               :
001585  3  4C 6D 15     	jmp kspr2
001588  3               kspr1:
001588  3  A0 00        	ldy #0 				; fetch sprite type.
00158A  3  B1 68        	lda (z80_ix),y
00158C  3  C9 FF        	cmp #255 			; is it enabled yet?
00158E  3  D0 08        	bne kspr4 			; yes, try another slot.
001590  3               
001590  3  A0 05        	ldy #5 				; next type.
001592  3  B1 68        	lda (z80_ix),y
001594  3  C9 FF        	cmp #255 			; is it enabled yet?
001596  3  F0 0F        	beq kspr3 			; no, process this one.
001598  3               kspr4:
001598  3  18           	clc 				; next sprite.
001599  3  A5 68        	lda z80_x
00159B  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
00159D  3  85 68        	sta z80_x
00159F  3  90 02        	bcc :+
0015A1  3  E6 69        	inc z80_i
0015A3  3               :
0015A3  3  CA           	dex	 			; repeat for remaining sprites.
0015A4  3  D0 E2        	bne kspr1
0015A6  3  60           	rts  				; no more room in table.
0015A7  3               kspr3:
0015A7  3  20 AE 15     	jsr cpsp 			; copy sprite to table.
0015AA  3  CA           	dex	 			; one less space in the table.
0015AB  3  D0 C0        	bne kspr2
0015AD  3  60           	rts
0015AE  3               
0015AE  3               ;----------------------------------------------
0015AE  3               ; Copy sprite from list to table.
0015AE  3               ;
0015AE  3               ; global:	hl,ix
0015AE  3               ; local:	y
0015AE  3               ; calls:	evnt09
0015AE  3               ;----------------------------------------------
0015AE  3               
0015AE  3               cpsp:
0015AE  3  A0 00        	ldy #0				; fetch byte from table.
0015B0  3  B1 66        	lda (z80_hl),y
0015B2  3  91 68        	sta (z80_ix),y			; set up type.
0015B4  3  A0 05        	ldy #PAM1ST
0015B6  3  91 68        	sta (z80_ix),y 			; set up type.
0015B8  3               
0015B8  3  E6 66        	inc z80_l 			; move to next byte.
0015BA  3  D0 02        	bne :+
0015BC  3  E6 67        	inc z80_h
0015BE  3               :
0015BE  3  A0 00        	ldy #0 				; fetch byte from table.
0015C0  3  B1 66        	lda (z80_hl),y
0015C2  3  A0 06        	ldy #6
0015C4  3  91 68        	sta (z80_ix),y			; set up image.
0015C6  3               
0015C6  3  E6 66        	inc z80_l 			; move to next byte.
0015C8  3  D0 02        	bne :+
0015CA  3  E6 67        	inc z80_h
0015CC  3               :
0015CC  3  A0 00        	ldy #0
0015CE  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
0015D0  3  A0 08        	ldy #8
0015D2  3  91 68        	sta (z80_ix),y 			; set up coordinate.
0015D4  3               
0015D4  3  A9 C8        	lda #200 			; set initial coordinate off screen.
0015D6  3  A0 03        	ldy #3
0015D8  3  91 68        	sta (z80_ix),y
0015DA  3               
0015DA  3  E6 66        	inc z80_l 			; move to next byte.
0015DC  3  D0 02        	bne :+
0015DE  3  E6 67        	inc z80_h
0015E0  3               :
0015E0  3  A0 00        	ldy #0 				; fetch byte from table.
0015E2  3  B1 66        	lda (z80_hl),y
0015E4  3  A0 09        	ldy #9
0015E6  3  91 68        	sta (z80_ix),y 			; set up coordinate.
0015E8  3               
0015E8  3  E6 66        	inc z80_l 			; move to next byte.
0015EA  3  D0 02        	bne :+
0015EC  3  E6 67        	inc z80_h
0015EE  3               :
0015EE  3  A9 00        	lda #0				; zeroes in accumulator.
0015F0  3  A0 07        	ldy #7 				; reset frame number.
0015F2  3  91 68        	sta (z80_ix),y
0015F4  3  A0 0A        	ldy #10 			; reset direction.
0015F6  3  91 68        	sta (z80_ix),y
0015F8  3  A0 0D        	ldy #13				; reset jump pointer low.
0015FA  3  91 68        	sta (z80_ix),y
0015FC  3  A0 0E        	ldy #14	 			; reset jump pointer high.
0015FE  3  91 68        	sta (z80_ix),y
001600  3               
001600  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
001602  3  A0 10        	ldy #16
001604  3  91 68        	sta (z80_ix),y
001606  3               evis0:
001606  3  A5 69        	lda z80_i
001608  3  48           	pha
001609  3  A5 68        	lda z80_x
00160B  3  48           	pha
00160C  3  A5 67        	lda z80_h
00160E  3  48           	pha
00160F  3  A5 66        	lda z80_l
001611  3  48           	pha
001612  3               
001612  3  20 3D 22     	jsr evnt09 			; perform event.
001615  3               
001615  3  68           	pla
001616  3  85 66        	sta z80_l
001618  3  68           	pla
001619  3  85 67        	sta z80_h
00161B  3  68           	pla
00161C  3  85 68        	sta z80_x
00161E  3  68           	pla
00161F  3  85 69        	sta z80_i
001621  3               
001621  3  18           	clc
001622  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
001624  3  69 11        	adc #TABSIZ		 	; next sprite.
001626  3  85 68        	sta z80_x
001628  3  90 02        	bcc :+
00162A  3  E6 69        	inc z80_i
00162C  3               :
00162C  3  60           	rts
00162D  3               
00162D  3               
00162D  3               ;-------------------------------------
00162D  3               ; Clear the play area window.
00162D  3               ;-------------------------------------
00162D  3               
00162D  3               clw:
00162D  3  AD 45 02     	lda wintop			; get coordinates of window.
001630  3  85 rr        	sta dispy			; put into dispx for calculation.
001632  3  AD 46 02     	lda winlft
001635  3  85 rr        	sta dispx
001637  3               
001637  3  AD 47 02     	lda winhgt			; height of window.
00163A  3  85 rr        	sta rrow			; copy to b register.
00163C  3               clw3:
00163C  3  AD 48 02     	lda winwid 			; width of window.
00163F  3  85 rr        	sta rcol
001641  3               clw2:
001641  3  20 65 08     	jsr gprad 			; get print address.
001644  3  A9 00        	lda #0				; zero byte to write.
001646  3  A2 07        	ldx #7				; pixel height of each cell.
001648  3               clw1:
001648  3  BC EB 08     	ldy scrtab,x
00164B  3  91 rr        	sta (scraddr),y 			; copy to screen.
00164D  3  CA           	dex				; next screen row down.
00164E  3  10 F8        	bpl clw1
001650  3               
001650  3  E6 rr        	inc dispx			; next column.
001652  3  C6 rr        	dec rcol			; one less to do.
001654  3  D0 EB        	bne clw2			; repeat for remaining columns.
001656  3               
001656  3  AD 46 02     	lda winlft			; get left edge.
001659  3  85 rr        	sta dispx 			; reset x.
00165B  3  E6 rr        	inc dispy 			; next line down.
00165D  3               
00165D  3  C6 rr        	dec rrow
00165F  3  D0 DB        	bne clw3			; repeat down the screen.
001661  3               
001661  3  AD 45 02     	lda wintop			; get coordinates of window.
001664  3  85 rr        	sta chary			; put into display position.
001666  3  AD 46 02     	lda winlft
001669  3  85 rr        	sta charx
00166B  3  60           	rts
00166C  3               
00166C  3               
00166C  3               ;----------------------------------------------------------
00166C  3               ; Effects code.
00166C  3               ; Ticker routine is called 25 times per second.
00166C  3               ;
00166C  3               ; HL = txtscr = left text screen address
00166C  3               ; DE = txtscr+txtwid-1 = right text screen address
00166C  3               ; BC = txtpos = text scroller position
00166C  3               ;
00166C  3               ;----------------------------------------------------------
00166C  3               
00166C  3               .if sflag
00166C  3               scrly:
00166C  3               	rts
00166C  3               	.word txtscr         	; get left screen address.
00166C  3               	sta scr_l
00166C  3               	lda txtscr+1
00166C  3               	sta scr_l+1
00166C  3               	sta scr_r+1
00166C  3               
00166C  3               	stx xtmp
00166C  3               
00166C  3               	clc         		; get right screen address.
00166C  3               	lda scr_l
00166C  3               	adc txtwid
00166C  3               	sta scr_r
00166C  3               	dec scr_r
00166C  3               scrly1:
00166C  3               	ldy txtwid		; set txtwide
00166C  3               	dey
00166C  3               	clc
00166C  3               scrly0:
00166C  3               	lda (scr_l),y		; scroll 1 line
00166C  3               	rol a
00166C  3               	sta (scr_l),y
00166C  3               	dey
00166C  3               	bpl scrly0
00166C  3               
00166C  3               	clc			; point to next line
00166C  3               	lda scr_l
00166C  3               	adc #32
00166C  3               	sta scr_l
00166C  3               	bcc scrly1		; repeat 8 times
00166C  3               
00166C  3               	lda txtpos 		; get text pointer.
00166C  3               	sta scr_txt
00166C  3               	lda txtpos+1
00166C  3               	sta scr_txt+1
00166C  3               
00166C  3               	ldy #0
00166C  3               	lda (scr_txt),y 		; find character we're displaying.
00166C  3               	and #127 		; remove end marker bit if applicable.
00166C  3               	cmp #13			; is it newline?
00166C  3               	bne scrly5 		; no, it's okay.
00166C  3               	lda #32			; convert to a space instead.
00166C  3               scrly5:
00166C  3               	sta fntaddr		; calculate char address
00166C  3               	lda #0
00166C  3               	sta fntaddr+1
00166C  3               	asl fntaddr  		; multiply char by 8.
00166C  3               	rol fntaddr+1
00166C  3               	asl fntaddr
00166C  3               	rol fntaddr+1
00166C  3               	asl fntaddr
00166C  3               	rol fntaddr+1
00166C  3               	lda fntaddr
00166C  3               	clc
00166C  3               	adc #<(FONT-256)
00166C  3               	sta scrly3+1		; that's the low byte.
00166C  3               	lda fntaddr+1
00166C  3               	adc #>(FONT-256)
00166C  3               	sta scrly3+2		; add displacement.
00166C  3               
00166C  3               	ldx #0
00166C  3               scrly3:
00166C  3               	lda $3333,x		; get image of char line.
00166C  3               	and txtbit
00166C  3               	beq scrly2		; don't plot pixel
00166C  3               	ldy scrline,x
00166C  3               	lda (scr_r),y
00166C  3               	clc
00166C  3               	ora #1
00166C  3               	sta (scr_r),y		; plot pixel
00166C  3               scrly2:
00166C  3               	inx			; next line of char.
00166C  3               	cpx #8
00166C  3               	bne scrly3
00166C  3               
00166C  3               	lsr txtbit		; bit of text to display.
00166C  3               	bcs :+
00166C  3               	rts
00166C  3               :
00166C  3               	ldy #0
00166C  3               	lda (scr_txt),y 	; what was the character?
00166C  3               	asl a	  		; end of message?
00166C  3               	bcs scrly4
00166C  3               	inc txtpos
00166C  3               	bne :+
00166C  3               	inc txtpos+1
00166C  3               :
00166C  3               	jmp scrly6 		; not yet - continue.
00166C  3               scrly4:
00166C  3               	lda txtini 		; start of scrolling message.
00166C  3               	sta txtpos
00166C  3               	lda txtini+1
00166C  3               	sta txtpos+1
00166C  3               scrly6:
00166C  3               	lda #128
00166C  3               	sta txtbit
00166C  3               	ldx xtmp
00166C  3               	rts
00166C  3               
00166C  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
00166C  3               
00166C  3               ;-------------------------------------------------------
00166C  3               ; Entry TICKER command
00166C  3               ;
00166C  3               ; Entry:
00166C  3               ;  z80_b = message nr
00166C  3               ;  z80_c = width
00166C  3               ;-------------------------------------------------------
00166C  3               
00166C  3               iscrly:
00166C  3               	jsr prescr 		; set up display position.
00166C  3               
00166C  3               	lda #<msgdat 		; text messages.
00166C  3               	sta z80_l
00166C  3               	lda #>msgdat
00166C  3               	sta z80_h
00166C  3               
00166C  3               	lda z80_c 		; width.
00166C  3               	sec
00166C  3               	sbc #1			; subtract one.
00166C  3               	cmp #32 		; is it between 1 and 32?
00166C  3               	bcc :+
00166C  3               	lda #$60
00166C  3               	jmp iscrl0		; no, disable messages.
00166C  3               :
00166C  3               	ldx z80_b		; message number.
00166C  3               	jsr getwrd 		; find message start.
00166C  3               
00166C  3               	lda z80_l		; set initial text position.
00166C  3               	sta txtini
00166C  3               	lda z80_h
00166C  3               	sta txtini+1
00166C  3               
00166C  3               	lda #$ad		; code for lda adrr
00166C  3               iscrl0:
00166C  3               	sta scrly		; enable/disable scrolling routine.
00166C  3               
00166C  3               	jsr prescr 		; set up display position.
00166C  3               	jsr gprad 		; get print address.
00166C  3               
00166C  3               	lda scraddr 		; set text screen address.
00166C  3               	sta txtscr
00166C  3               	lda scraddr+1
00166C  3               	sta txtscr+1
00166C  3               
00166C  3               	lda z80_c		; width.
00166C  3               	sta txtwid		; set width in working storage.
00166C  3               
00166C  3               	lda #128 		; start with leftmost bit.
00166C  3               	sta txtbit
00166C  3               
00166C  3               	jmp scrly4
00166C  3               .endif
00166C  3               
00166C  3               ;------------------------------------------------------------------
00166C  3               ; Dig routine, conditional assembly depending on dflag
00166C  3               ;------------------------------------------------------------------
00166C  3               .if dflag
00166C  3               dig:
00166C  3               	and #3
00166C  3               	beq digr		; dig right
00166C  3               	cmp #1
00166C  3               	beq digl		; dig left
00166C  3               	cmp #2
00166C  3               	beq digd		; dig down
00166C  3               
00166C  3               ; Dig up.
00166C  3               
00166C  3               digu:				; dig up
00166C  3               	ldy #8
00166C  3               	lda (z80_ix),y
00166C  3               	sec
00166C  3               	sbc #2
00166C  3               	sta dispy		; set y
00166C  3               
00166C  3               	iny
00166C  3               	lda (z80_ix),y
00166C  3               	sta dispx		; set x
00166C  3               	jmp digv
00166C  3               
00166C  3               ; Dig down.
00166C  3               
00166C  3               digd:
00166C  3               	ldy #9
00166C  3               	lda (z80_ix),y
00166C  3               	sta dispx		; set y
00166C  3               
00166C  3               	dey
00166C  3               	clc
00166C  3               	lda (z80_ix),y
00166C  3               	adc #16
00166C  3               	sta dispy		; set y
00166C  3               	jmp digv
00166C  3               
00166C  3               ; Dig left.
00166C  3               
00166C  3               digl:
00166C  3               	ldy #8
00166C  3               	lda (z80_ix),y
00166C  3               	sta dispy		; set y
00166C  3               
00166C  3               	iny
00166C  3               	lda (z80_ix),y
00166C  3               	sec
00166C  3               	sbc #2			; x=x-2
00166C  3               	sta dispx		; set x
00166C  3               	jmp digh
00166C  3               
00166C  3               ; Dig right.
00166C  3               
00166C  3               digr:
00166C  3               	ldy #8
00166C  3               	lda (z80_ix),y
00166C  3               	sta dispy		; set y
00166C  3               
00166C  3               	iny
00166C  3               	lda (z80_ix),y
00166C  3               	clc
00166C  3               	adc #16
00166C  3               	sta dispx		; set x+16
00166C  3               	jmp digh
00166C  3               
00166C  3               ; Vertical digging
00166C  3               
00166C  3               digv:
00166C  3               	jsr tstbl		; check blocktype in MAP
00166C  3               	jsr fdchk		; test if FODDER
00166C  3               
00166C  3               	clc
00166C  3               	lda dispx		; look 1 cell down
00166C  3               	adc #8
00166C  3               	sta dispx
00166C  3               	jsr tstbl		; check blocktype in MAP
00166C  3               	jsr fdchk
00166C  3               	lda dispx
00166C  3               	and #7
00166C  3               	bne :+
00166C  3               	rts
00166C  3               :
00166C  3               	clc
00166C  3               	lda dispx		; look 1 cell down
00166C  3               	adc #8
00166C  3               	sta dispx
00166C  3               	jsr tstbl		; check blocktype in MAP
00166C  3               	jmp fdchk
00166C  3               
00166C  3               ; Horizontal digging
00166C  3               
00166C  3               digh:
00166C  3               	jsr tstbl		; check blocktype in MAP
00166C  3               	jsr fdchk		; test if FODDER
00166C  3               
00166C  3               	clc
00166C  3               	lda dispy		; look 1 cell down
00166C  3               	adc #8
00166C  3               	sta dispy
00166C  3               	jsr tstbl		; check blocktype in MAP
00166C  3               	jsr fdchk
00166C  3               	lda dispy
00166C  3               	and #7
00166C  3               	bne :+
00166C  3               	rts
00166C  3               :
00166C  3               	clc
00166C  3               	lda dispy		; look 1 cell down
00166C  3               	adc #8
00166C  3               	sta dispy
00166C  3               	jsr tstbl		; check blocktype in MAP
00166C  3               	jmp fdchk
00166C  3               
00166C  3               digcnt:	.byte 0
00166C  3               
00166C  3               .endif
00166C  3               
00166C  3               ;------------------------------------------------------------------
00166C  3               ; Sprite table
00166C  3               ;------------------------------------------------------------------
00166C  3               
00166C  3               
00166C  3               ; ix+0  = type.
00166C  3               ; ix+1  = sprite image number.
00166C  3               ; ix+2  = frame.
00166C  3               ; ix+3  = y coord.
00166C  3               ; ix+4  = x coord.
00166C  3               
00166C  3               ; ix+5  = new type.
00166C  3               ; ix+6  = new image number.
00166C  3               ; ix+7  = new frame.
00166C  3               ; ix+8  = new y coord.
00166C  3               ; ix+9  = new x coord.
00166C  3               
00166C  3               ; ix+10 = direction.
00166C  3               ; ix+11 = parameter 1.
00166C  3               ; ix+12 = parameter 2.
00166C  3               ; ix+13 = jump pointer low.
00166C  3               ; ix+14 = jump pointer high.
00166C  3               ; ix+15 = data pointer low.
00166C  3               ; ix+16 = data pointer high.
00166C  3               
00166C  3               ; block NUMSPR * TABSIZ,255
00166C  3               
00166C  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
001670  3  FF FF FF FF  
001674  3  FF FF FF FF  
001738  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
00173C  3  FF FF FF 00  
001740  3  C0 78 00 00  
001749  3  07           roomtb:	.byte 7                      ; start room map offset.
00174A  3               
00174A  3               ; User routine.  Put your own code in here to be called with USER instruction.
00174A  3               ; if USER has an argument it will be passed in the accumulator.
00174A  3               
00174A  3               user:
00174A  3  60           	rts
00174B  3               
00174B  3               ;----------------------------------------------------
00174B  3               ; Missing vars
00174B  3               ;----------------------------------------------------
00174B  3               
00174B  3               MAP 		= $9800			; properties map buffer (3x256 bytes)
00174B  3               SCADTB_lb 	= MAP+3*256		; screen address table lo-byte (256 bytes)
00174B  3               SCADTB_hb 	= SCADTB_lb+256		; screen address table hi-byte (256 bytes)
00174B  3               SHRAPN 		= SCADTB_hb+256		; shrapnel table (55x6 bytes)
00174B  3               
00174B  3               ;Fontpointer:	.byte 0,0
00174B  3               ;TmpAddr:	.byte 0,0
00174B  3               
00174B  3               ;loopa:		.byte 0
00174B  3               ;loopb:		.byte 0
00174B  3               ;loopc:		.byte 0
00174B  3               
00174B  3               setfgcol:
00174B  3  29 03        	and #3
00174D  3  A8           	tay
00174E  3  B9 70 17     	lda codcol,y
001751  3  4C 67 17     	jmp calfgc
001754  3               
001754  3               setbgcol:
001754  3  29 03        	and #3
001756  3               calbgc:
001756  3  A8           	tay
001757  3  B9 70 17     	lda codcol,y
00175A  3  48           	pha
00175B  3  AD 6E 17     	lda andeor
00175E  3  4D 6F 17     	eor andeor+1
001761  3  AA           	tax
001762  3  68           	pla
001763  3  8D 6F 17     	sta andeor+1
001766  3  8A           	txa
001767  3               calfgc:
001767  3  4D 6F 17     	eor andeor+1
00176A  3  8D 6E 17     	sta andeor
00176D  3               calex1:
00176D  3  60           	rts
00176E  3               
00176E  3  00 00        andeor:	.byte 0,0
001770  3  00 55 AA FF  codcol:	.byte $00,$55,$aa,$ff
001774  3               
001774  3               ; Everything below here will be generated by the editors.
001774  3               
001774  3               WINDOWTOP = 1
001774  3               WINDOWLFT = 1
001774  3               WINDOWHGT = 19
001774  3               WINDOWWID = 30 ;"
001774  3               MAPWID = 13
001774  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255,255,255
001778  3  FF FF FF FF  
00177C  3  FF FF FF FF  
001781  3               mapdat:
001781  3  FF 11 06 14          .byte 255,17,6,20,16,7,26,2,1,18,19,21,255,255,255,255,14,23,5,4,8,9,25,255,22,255,255,255,255,13,12,11,10,0,15,255,255,255,255,255,255,255,3,255,255,255,255,24,255,255,255,255
001785  3  10 07 1A 02  
001789  3  01 12 13 15  
0017B5  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255,255,255
0017B9  3  FF FF FF FF  
0017BD  3  FF FF FF FF  
0017C2  3  05           stmap:  .byte 5
0017C3  3               
0017C3  3               evnt00:
0017C3  3  A5 rr                lda joyval	; KEY
0017C5  3  29 01                and #1
0017C7  3  F0 03                beq :+
0017C9  3  4C D5 17             jmp a00039
0017CC  3               :
0017CC  3  A9 01                lda #1
0017CE  3  A0 0B                ldy #11
0017D0  3  91 68                sta (z80_ix),y
0017D2  3  4C 2C 18             jmp a00218
0017D5  3  A5 rr        a00039: lda joyval	; KEY
0017D7  3  29 02                and #2
0017D9  3  F0 03                beq :+
0017DB  3  4C E7 17             jmp a00076
0017DE  3               :
0017DE  3  A9 01                lda #1
0017E0  3  A0 0B                ldy #11
0017E2  3  91 68                sta (z80_ix),y
0017E4  3  4C 2C 18             jmp a00218
0017E7  3  A5 rr        a00076: lda joyval	; KEY
0017E9  3  29 04                and #4
0017EB  3  F0 03                beq :+
0017ED  3  4C F9 17             jmp a00113
0017F0  3               :
0017F0  3  A9 01                lda #1
0017F2  3  A0 0B                ldy #11
0017F4  3  91 68                sta (z80_ix),y
0017F6  3  4C 2C 18             jmp a00218
0017F9  3  A5 rr        a00113: lda joyval	; KEY
0017FB  3  29 08                and #8
0017FD  3  F0 03                beq :+
0017FF  3  4C 0B 18             jmp a00151
001802  3               :
001802  3  A9 01                lda #1
001804  3  A0 0B                ldy #11
001806  3  91 68                sta (z80_ix),y
001808  3  4C 2C 18             jmp a00218
00180B  3  A5 rr        a00151: lda joyval	; KEY
00180D  3  29 10                and #16
00180F  3  F0 03                beq :+
001811  3  4C 1D 18             jmp a00188
001814  3               :
001814  3  A9 01                lda #1
001816  3  A0 0B                ldy #11
001818  3  91 68                sta (z80_ix),y
00181A  3  4C 2C 18             jmp a00218
00181D  3  A9 01        a00188: lda #1
00181F  3  C5 rr                cmp varb
001821  3  90 03                bcc *+5
001823  3  4C 2C 18             jmp a00218
001826  3  A9 00                lda #0
001828  3  A0 0B                ldy #11
00182A  3  91 68                sta (z80_ix),y
00182C  3  A9 00        a00218: lda #0
00182E  3  C5 rr                cmp varl
001830  3  F0 03                beq *+5
001832  3  4C 46 18             jmp a00271
001835  3  A9 00                lda #0
001837  3  A0 0B                ldy #11
001839  3  D1 68                cmp (z80_ix),y
00183B  3  F0 03                beq *+5
00183D  3  4C 46 18             jmp a00271
001840  3  A9 00                lda #0
001842  3  A0 07                ldy #7
001844  3  91 68                sta (z80_ix),y
001846  3  A5 rr        a00271: lda joyval	; KEY
001848  3  29 20                and #32
00184A  3  F0 03                beq :+
00184C  3  4C 76 18             jmp a00366
00184F  3               :
00184F  3  A9 00                lda #0
001851  3  C5 rr                cmp vara
001853  3  F0 03                beq *+5
001855  3  4C 76 18             jmp a00366
001858  3  A9 1E                lda #30
00185A  3  C5 rr                cmp varm
00185C  3  F0 03                beq *+5
00185E  3  4C 6D 18             jmp a00347
001861  3  A9 1F                lda #31
001863  3  85 rr                sta varm
001865  3  A9 05                lda #5 	; DELAY
001867  3  20 5D 02             jsr delay
00186A  3  4C 76 18             jmp a00366
00186D  3  A9 1E        a00347: lda #30
00186F  3  85 rr                sta varm
001871  3  A9 05                lda #5 	; DELAY
001873  3  20 5D 02             jsr delay
001876  3  A9 00        a00366: lda #0
001878  3  C5 rr                cmp varj
00187A  3  F0 03                beq *+5
00187C  3  4C AD 18             jmp a00482
00187F  3  A9 05                lda #DEADLY	; DEADLY
001881  3  85 63                sta z80_b
001883  3  20 BD 0B             jsr tded
001886  3  C5 63                cmp z80_b
001888  3  F0 03                beq :+
00188A  3  4C AD 18             jmp a00482
00188D  3               :
00188D  3  A9 01                lda #1
00188F  3  85 rr                sta varj
001891  3  A9 FF                lda #255	; REMOVE
001893  3  A0 05                ldy #5
001895  3  91 68                sta (z80_ix),y
001897  3  A9 05                lda #5	; SPAWN
001899  3  85 62                sta z80_c
00189B  3  A9 09                lda #9
00189D  3  85 63                sta z80_b
00189F  3  20 74 06             jsr spawn
0018A2  3  A9 08                lda #8	; SPAWN
0018A4  3  85 62                sta z80_c
0018A6  3  A9 07                lda #7
0018A8  3  85 63                sta z80_b
0018AA  3  20 74 06             jsr spawn
0018AD  3  A9 00        a00482: lda #0
0018AF  3  C5 rr                cmp vark
0018B1  3  F0 03                beq *+5
0018B3  3  4C E2 18             jmp a00591
0018B6  3  A9 01                lda #1
0018B8  3  C5 rr                cmp vars
0018BA  3  F0 03                beq *+5
0018BC  3  4C DF 18             jmp a00587
0018BF  3  20 1B 06             jsr skobj	; DETECTOBJECT
0018C2  3  85 rr                sta varobj
0018C4  3  A9 FF                lda #255
0018C6  3  C5 rr                cmp varobj
0018C8  3  D0 03                bne *+5
0018CA  3  4C DF 18             jmp a00587
0018CD  3  A5 rr                lda varobj	; GET
0018CF  3  20 9A 05             jsr getob
0018D2  3  A5 rr                lda varc
0018D4  3  18                   clc
0018D5  3  69 01                adc #1
0018D7  3  85 rr                sta varc
0018D9  3  A9 3C                lda #60		; BEEP
0018DB  3  0A                   asl a
0018DC  3  8D F1 02             sta sndtyp
0018DF  3  4C 02 19     a00587: jmp a00663
0018E2  3  20 1B 06     a00591: jsr skobj	; DETECTOBJECT
0018E5  3  85 rr                sta varobj
0018E7  3  A9 FF                lda #255
0018E9  3  C5 rr                cmp varobj
0018EB  3  D0 03                bne *+5
0018ED  3  4C 02 19             jmp a00663
0018F0  3  A5 rr                lda varobj	; GET
0018F2  3  20 9A 05             jsr getob
0018F5  3  A5 rr                lda numlif
0018F7  3  18                   clc
0018F8  3  69 01                adc #1
0018FA  3  85 rr                sta numlif
0018FC  3  A9 3C                lda #60		; BEEP
0018FE  3  0A                   asl a
0018FF  3  8D F1 02             sta sndtyp
001902  3  20 01 0B     a00663: jsr cangd	; CANGODOWN
001905  3  F0 03                beq :+
001907  3  4C 11 19             jmp a00695
00190A  3               :
00190A  3  20 25 14             jsr ifall	; TABLEFALL
00190D  3  A9 00                lda #0
00190F  3  85 rr                sta varb
001911  3  A9 00        a00695: lda #0
001913  3  C5 rr                cmp varl
001915  3  F0 03                beq *+5
001917  3  4C 2E 19             jmp a00752
00191A  3  A9 01                lda #1
00191C  3  C5 rr                cmp varb
00191E  3  F0 03                beq *+5
001920  3  4C 2E 19             jmp a00752
001923  3  A9 08                lda #8	; SPAWN
001925  3  85 62                sta z80_c
001927  3  A9 03                lda #3
001929  3  85 63                sta z80_b
00192B  3  20 74 06             jsr spawn
00192E  3  A9 E7        a00752: lda #231
001930  3  A0 09                ldy #9
001932  3  D1 68                cmp (z80_ix),y
001934  3  90 03                bcc *+5
001936  3  4C 52 19             jmp a00831
001939  3  20 63 13             jsr scrr	; SCREENRIGHT
00193C  3  A9 00                lda #0
00193E  3  85 rr                sta varf
001940  3  A9 0A                lda #10
001942  3  A0 09                ldy #9
001944  3  91 68                sta (z80_ix),y
001946  3  A0 08                ldy #8
001948  3  B1 68                lda (z80_ix),y
00194A  3  85 rr                sta varo
00194C  3  A0 09                ldy #9
00194E  3  B1 68                lda (z80_ix),y
001950  3  85 rr                sta varp
001952  3  A9 09        a00831: lda #9
001954  3  A0 09                ldy #9
001956  3  D1 68                cmp (z80_ix),y
001958  3  B0 03                bcs *+5
00195A  3  4C 76 19             jmp a00910
00195D  3  A9 01                lda #1
00195F  3  85 rr                sta varf
001961  3  20 48 13             jsr scrl	; SCREENLEFT
001964  3  A9 E6                lda #230
001966  3  A0 09                ldy #9
001968  3  91 68                sta (z80_ix),y
00196A  3  A0 08                ldy #8
00196C  3  B1 68                lda (z80_ix),y
00196E  3  85 rr                sta varo
001970  3  A0 09                ldy #9
001972  3  B1 68                lda (z80_ix),y
001974  3  85 rr                sta varp
001976  3  A9 8C        a00910: lda #140
001978  3  A0 08                ldy #8
00197A  3  D1 68                cmp (z80_ix),y
00197C  3  90 03                bcc *+5
00197E  3  4C 96 19             jmp a00981
001981  3  20 75 13             jsr scrd	; SCREENDOWN
001984  3  A9 0A                lda #10
001986  3  A0 08                ldy #8
001988  3  91 68                sta (z80_ix),y
00198A  3  A0 08                ldy #8
00198C  3  B1 68                lda (z80_ix),y
00198E  3  85 rr                sta varo
001990  3  A0 09                ldy #9
001992  3  B1 68                lda (z80_ix),y
001994  3  85 rr                sta varp
001996  3  A9 09        a00981: lda #9
001998  3  A0 08                ldy #8
00199A  3  D1 68                cmp (z80_ix),y
00199C  3  B0 03                bcs *+5
00199E  3  4C B6 19             jmp a01051
0019A1  3  20 6C 13             jsr scru	; SCREENUP
0019A4  3  A9 88                lda #136
0019A6  3  A0 08                ldy #8
0019A8  3  91 68                sta (z80_ix),y
0019AA  3  A0 08                ldy #8
0019AC  3  B1 68                lda (z80_ix),y
0019AE  3  85 rr                sta varo
0019B0  3  A0 09                ldy #9
0019B2  3  B1 68                lda (z80_ix),y
0019B4  3  85 rr                sta varp
0019B6  3  20 93 0A     a01051: jsr laddu	; CANGOUP
0019B9  3  F0 03                beq :+
0019BB  3  4C C5 19             jmp a01080
0019BE  3               :
0019BE  3  A9 01                lda #1
0019C0  3  85 rr                sta varl
0019C2  3  4C D8 19             jmp a01118
0019C5  3  20 7D 0A     a01080: jsr laddd	; LADDERBELOW
0019C8  3  F0 03                beq :+
0019CA  3  4C D4 19             jmp a01110
0019CD  3               :
0019CD  3  A9 02                lda #2
0019CF  3  85 rr                sta varl
0019D1  3  4C D8 19             jmp a01118
0019D4  3  A9 00        a01110: lda #0
0019D6  3  85 rr                sta varl
0019D8  3  A5 rr        a01118: lda joyval	; KEY
0019DA  3  29 01                and #1
0019DC  3  F0 03                beq :+
0019DE  3  4C 8A 1A             jmp a01502
0019E1  3               :
0019E1  3  20 48 0B             jsr cangr	; CANGORIGHT
0019E4  3  F0 03                beq :+
0019E6  3  4C 8A 1A             jmp a01502
0019E9  3               :
0019E9  3  A5 rr                lda joyval	; KEY
0019EB  3  29 04                and #4
0019ED  3  F0 03                beq :+
0019EF  3  4C 1D 1A             jmp a01266
0019F2  3               :
0019F2  3  20 7D 0A             jsr laddd	; LADDERBELOW
0019F5  3  F0 03                beq :+
0019F7  3  4C FD 19             jmp a01194
0019FA  3               :
0019FA  3  4C 1A 1A             jmp a01261
0019FD  3  A9 00        a01194: lda #0
0019FF  3  C5 rr                cmp vara
001A01  3  F0 03                beq *+5
001A03  3  4C 0B 1A             jmp a01222
001A06  3  A9 00                lda #0		; ANIMATE
001A08  3  20 2A 12             jsr animsp
001A0B  3  A9 01        a01222: lda #1
001A0D  3  A0 06                ldy #6
001A0F  3  91 68                sta (z80_ix),y
001A11  3  A0 09                ldy #9 		; SPRITERIGHT
001A13  3  B1 68                lda (z80_ix),y
001A15  3  18                   clc
001A16  3  69 02                adc #2
001A18  3  91 68                sta (z80_ix),y
001A1A  3  4C 8A 1A     a01261: jmp a01502
001A1D  3  A5 rr        a01266: lda joyval	; KEY
001A1F  3  29 08                and #8
001A21  3  F0 03                beq :+
001A23  3  4C 51 1A             jmp a01378
001A26  3               :
001A26  3  20 93 0A             jsr laddu	; CANGOUP
001A29  3  F0 03                beq :+
001A2B  3  4C 31 1A             jmp a01306
001A2E  3               :
001A2E  3  4C 4E 1A             jmp a01373
001A31  3  A9 01        a01306: lda #1
001A33  3  A0 06                ldy #6
001A35  3  91 68                sta (z80_ix),y
001A37  3  A9 00                lda #0
001A39  3  C5 rr                cmp vara
001A3B  3  F0 03                beq *+5
001A3D  3  4C 45 1A             jmp a01347
001A40  3  A9 00                lda #0		; ANIMATE
001A42  3  20 2A 12             jsr animsp
001A45  3  A0 09        a01347: ldy #9 		; SPRITERIGHT
001A47  3  B1 68                lda (z80_ix),y
001A49  3  18                   clc
001A4A  3  69 02                adc #2
001A4C  3  91 68                sta (z80_ix),y
001A4E  3  4C 8A 1A     a01373: jmp a01502
001A51  3  A9 01        a01378: lda #1
001A53  3  A0 06                ldy #6
001A55  3  91 68                sta (z80_ix),y
001A57  3  A9 00                lda #0
001A59  3  C5 rr                cmp vara
001A5B  3  F0 03                beq *+5
001A5D  3  4C 81 1A             jmp a01476
001A60  3  A9 00                lda #0		; ANIMATE
001A62  3  20 2A 12             jsr animsp
001A65  3  A9 00                lda #0
001A67  3  A0 07                ldy #7
001A69  3  D1 68                cmp (z80_ix),y
001A6B  3  F0 03                beq *+5
001A6D  3  4C 81 1A             jmp a01476
001A70  3  20 01 0B             jsr cangd	; CANGODOWN
001A73  3  F0 03                beq :+
001A75  3  4C 7B 1A             jmp a01462
001A78  3               :
001A78  3  4C 81 1A             jmp a01476
001A7B  3  A9 05        a01462: lda #5		; BEEP
001A7D  3  0A                   asl a
001A7E  3  8D F1 02             sta sndtyp
001A81  3  A0 09        a01476: ldy #9 		; SPRITERIGHT
001A83  3  B1 68                lda (z80_ix),y
001A85  3  18                   clc
001A86  3  69 02                adc #2
001A88  3  91 68                sta (z80_ix),y
001A8A  3  A5 rr        a01502: lda joyval	; KEY
001A8C  3  29 02                and #2
001A8E  3  F0 03                beq :+
001A90  3  4C 3C 1B             jmp a01886
001A93  3               :
001A93  3  20 36 0B             jsr cangl	; CANGOLEFT
001A96  3  F0 03                beq :+
001A98  3  4C 3C 1B             jmp a01886
001A9B  3               :
001A9B  3  A5 rr                lda joyval	; KEY
001A9D  3  29 04                and #4
001A9F  3  F0 03                beq :+
001AA1  3  4C CF 1A             jmp a01650
001AA4  3               :
001AA4  3  20 7D 0A             jsr laddd	; LADDERBELOW
001AA7  3  F0 03                beq :+
001AA9  3  4C AF 1A             jmp a01579
001AAC  3               :
001AAC  3  4C CC 1A             jmp a01646
001AAF  3  A9 00        a01579: lda #0
001AB1  3  C5 rr                cmp vara
001AB3  3  F0 03                beq *+5
001AB5  3  4C BD 1A             jmp a01607
001AB8  3  A9 00                lda #0		; ANIMATE
001ABA  3  20 2A 12             jsr animsp
001ABD  3  A9 02        a01607: lda #2
001ABF  3  A0 06                ldy #6
001AC1  3  91 68                sta (z80_ix),y
001AC3  3  A0 09                ldy #9 		; SPRITELEFT
001AC5  3  B1 68                lda (z80_ix),y
001AC7  3  38                   sec
001AC8  3  E9 02                sbc #2
001ACA  3  91 68                sta (z80_ix),y
001ACC  3  4C 3C 1B     a01646: jmp a01886
001ACF  3  A5 rr        a01650: lda joyval	; KEY
001AD1  3  29 08                and #8
001AD3  3  F0 03                beq :+
001AD5  3  4C 03 1B             jmp a01762
001AD8  3               :
001AD8  3  20 93 0A             jsr laddu	; CANGOUP
001ADB  3  F0 03                beq :+
001ADD  3  4C E3 1A             jmp a01690
001AE0  3               :
001AE0  3  4C 00 1B             jmp a01757
001AE3  3  A9 02        a01690: lda #2
001AE5  3  A0 06                ldy #6
001AE7  3  91 68                sta (z80_ix),y
001AE9  3  A9 00                lda #0
001AEB  3  C5 rr                cmp vara
001AED  3  F0 03                beq *+5
001AEF  3  4C F7 1A             jmp a01731
001AF2  3  A9 00                lda #0		; ANIMATE
001AF4  3  20 2A 12             jsr animsp
001AF7  3  A0 09        a01731: ldy #9 		; SPRITELEFT
001AF9  3  B1 68                lda (z80_ix),y
001AFB  3  38                   sec
001AFC  3  E9 02                sbc #2
001AFE  3  91 68                sta (z80_ix),y
001B00  3  4C 3C 1B     a01757: jmp a01886
001B03  3  A9 02        a01762: lda #2
001B05  3  A0 06                ldy #6
001B07  3  91 68                sta (z80_ix),y
001B09  3  A9 00                lda #0
001B0B  3  C5 rr                cmp vara
001B0D  3  F0 03                beq *+5
001B0F  3  4C 33 1B             jmp a01860
001B12  3  A9 00                lda #0		; ANIMATE
001B14  3  20 2A 12             jsr animsp
001B17  3  A9 00                lda #0
001B19  3  A0 07                ldy #7
001B1B  3  D1 68                cmp (z80_ix),y
001B1D  3  F0 03                beq *+5
001B1F  3  4C 33 1B             jmp a01860
001B22  3  20 01 0B             jsr cangd	; CANGODOWN
001B25  3  F0 03                beq :+
001B27  3  4C 2D 1B             jmp a01846
001B2A  3               :
001B2A  3  4C 33 1B             jmp a01860
001B2D  3  A9 05        a01846: lda #5		; BEEP
001B2F  3  0A                   asl a
001B30  3  8D F1 02             sta sndtyp
001B33  3  A0 09        a01860: ldy #9 		; SPRITELEFT
001B35  3  B1 68                lda (z80_ix),y
001B37  3  38                   sec
001B38  3  E9 02                sbc #2
001B3A  3  91 68                sta (z80_ix),y
001B3C  3  A5 rr        a01886: lda joyval	; KEY
001B3E  3  29 08                and #8
001B40  3  F0 03                beq :+
001B42  3  4C 6A 1B             jmp a01988
001B45  3               :
001B45  3  20 93 0A             jsr laddu	; CANGOUP
001B48  3  F0 03                beq :+
001B4A  3  4C 6A 1B             jmp a01988
001B4D  3               :
001B4D  3  A9 00                lda #0
001B4F  3  A0 06                ldy #6
001B51  3  91 68                sta (z80_ix),y
001B53  3  A9 00                lda #0
001B55  3  C5 rr                cmp vara
001B57  3  F0 03                beq *+5
001B59  3  4C 61 1B             jmp a01962
001B5C  3  A9 00                lda #0		; ANIMATE
001B5E  3  20 2A 12             jsr animsp
001B61  3  A0 08        a01962: ldy #8 		; SPRITEUP
001B63  3  B1 68                lda (z80_ix),y
001B65  3  38                   sec
001B66  3  E9 02                sbc #2
001B68  3  91 68                sta (z80_ix),y
001B6A  3  A5 rr        a01988: lda joyval	; KEY
001B6C  3  29 04                and #4
001B6E  3  F0 03                beq :+
001B70  3  4C 98 1B             jmp a02091
001B73  3               :
001B73  3  20 7D 0A             jsr laddd	; LADDERBELOW
001B76  3  F0 03                beq :+
001B78  3  4C 98 1B             jmp a02091
001B7B  3               :
001B7B  3  A9 00                lda #0
001B7D  3  A0 06                ldy #6
001B7F  3  91 68                sta (z80_ix),y
001B81  3  A9 00                lda #0
001B83  3  C5 rr                cmp vara
001B85  3  F0 03                beq *+5
001B87  3  4C 8F 1B             jmp a02065
001B8A  3  A9 00                lda #0		; ANIMATE
001B8C  3  20 2A 12             jsr animsp
001B8F  3  A0 08        a02065: ldy #8 		; SPRITEDOWN
001B91  3  B1 68                lda (z80_ix),y
001B93  3  18                   clc
001B94  3  69 02                adc #2
001B96  3  91 68                sta (z80_ix),y
001B98  3  20 CC 0A     a02091: jsr cangu	; CANGOUP
001B9B  3  F0 03                beq :+
001B9D  3  4C DB 1B             jmp a02230
001BA0  3               :
001BA0  3  A5 rr                lda joyval	; KEY
001BA2  3  29 10                and #16
001BA4  3  F0 03                beq :+
001BA6  3  4C DB 1B             jmp a02230
001BA9  3               :
001BA9  3  20 01 0B             jsr cangd	; CANGODOWN
001BAC  3  F0 03                beq :+
001BAE  3  4C B4 1B             jmp a02147
001BB1  3               :
001BB1  3  4C DB 1B             jmp a02230
001BB4  3  A9 00        a02147: lda #0
001BB6  3  C5 rr                cmp varl
001BB8  3  F0 03                beq *+5
001BBA  3  4C DB 1B             jmp a02230
001BBD  3  A9 01                lda #1
001BBF  3  C5 rr                cmp varb
001BC1  3  90 03                bcc *+5
001BC3  3  4C DB 1B             jmp a02230
001BC6  3  20 B2 0C             jsr jump	; TABLEJUMP
001BC9  3  A9 05                lda #5		; BEEP
001BCB  3  0A                   asl a
001BCC  3  8D F1 02             sta sndtyp
001BCF  3  A9 0A                lda #10		; BEEP
001BD1  3  0A                   asl a
001BD2  3  8D F1 02             sta sndtyp
001BD5  3  A9 0F                lda #15		; BEEP
001BD7  3  0A                   asl a
001BD8  3  8D F1 02             sta sndtyp
001BDB  3  4C 91 13     a02230: jmp grav
001BDE  3               evnt01:
001BDE  3  A9 00                lda #0 	; COLLISION
001BE0  3  85 63                sta z80_b
001BE2  3  20 75 12             jsr sktyp
001BE5  3  B0 03                bcs :+
001BE7  3  4C 12 1C             jmp b00117
001BEA  3               :
001BEA  3  A5 rr                lda skptr	; OTHER
001BEC  3  85 68                sta z80_x
001BEE  3  A5 rr                lda skptr+1
001BF0  3  85 69                sta z80_i
001BF2  3  A9 01                lda #1
001BF4  3  85 rr                sta varj
001BF6  3  A9 05                lda #5	; SPAWN
001BF8  3  85 62                sta z80_c
001BFA  3  A9 09                lda #9
001BFC  3  85 63                sta z80_b
001BFE  3  20 74 06             jsr spawn
001C01  3  A9 FF                lda #255	; REMOVE
001C03  3  A0 05                ldy #5
001C05  3  91 68                sta (z80_ix),y
001C07  3  A9 08                lda #8	; SPAWN
001C09  3  85 62                sta z80_c
001C0B  3  A9 07                lda #7
001C0D  3  85 63                sta z80_b
001C0F  3  20 74 06             jsr spawn
001C12  3  A9 06        b00117: lda #CUSTOM	; CUSTOM
001C14  3  85 63                sta z80_b
001C16  3  20 BD 0B             jsr tded
001C19  3  C5 63                cmp z80_b
001C1B  3  F0 03                beq :+
001C1D  3  4C 3A 1C             jmp b00201
001C20  3               :
001C20  3  A9 00                lda #0
001C22  3  A0 0B                ldy #11
001C24  3  D1 68                cmp (z80_ix),y
001C26  3  F0 03                beq *+5
001C28  3  4C 34 1C             jmp b00187
001C2B  3  A9 01                lda #1
001C2D  3  A0 0B                ldy #11
001C2F  3  91 68                sta (z80_ix),y
001C31  3  4C 3A 1C             jmp b00201
001C34  3  A9 00        b00187: lda #0
001C36  3  A0 0B                ldy #11
001C38  3  91 68                sta (z80_ix),y
001C3A  3  A9 00        b00201: lda #0
001C3C  3  A0 0B                ldy #11
001C3E  3  D1 68                cmp (z80_ix),y
001C40  3  F0 03                beq *+5
001C42  3  4C 94 1C             jmp b00401
001C45  3  20 36 0B             jsr cangl	; CANGOLEFT
001C48  3  F0 03                beq :+
001C4A  3  4C 8B 1C             jmp b00383
001C4D  3               :
001C4D  3  A0 09                ldy #9 		; SPRITELEFT
001C4F  3  B1 68                lda (z80_ix),y
001C51  3  38                   sec
001C52  3  E9 02                sbc #2
001C54  3  91 68                sta (z80_ix),y
001C56  3  A9 05                lda #5
001C58  3  A0 06                ldy #6
001C5A  3  91 68                sta (z80_ix),y
001C5C  3  A9 10                lda #16
001C5E  3  85 62                sta z80_c
001C60  3  A0 09                ldy #9
001C62  3  B1 68                lda (z80_ix),y
001C64  3  38                   sec
001C65  3  E5 62                sbc z80_c
001C67  3  A0 09                ldy #9
001C69  3  91 68                sta (z80_ix),y
001C6B  3  20 01 0B             jsr cangd	; CANGODOWN
001C6E  3  F0 03                beq :+
001C70  3  4C 79 1C             jmp b00343
001C73  3               :
001C73  3  A9 01                lda #1
001C75  3  A0 0B                ldy #11
001C77  3  91 68                sta (z80_ix),y
001C79  3  A9 10        b00343: lda #16
001C7B  3  85 62                sta z80_c
001C7D  3  A0 09                ldy #9
001C7F  3  B1 68                lda (z80_ix),y
001C81  3  18                   clc
001C82  3  65 62                adc z80_c
001C84  3  A0 09                ldy #9
001C86  3  91 68                sta (z80_ix),y
001C88  3  4C 91 1C             jmp b00397
001C8B  3  A9 01        b00383: lda #1
001C8D  3  A0 0B                ldy #11
001C8F  3  91 68                sta (z80_ix),y
001C91  3  4C E0 1C     b00397: jmp b00576
001C94  3  20 48 0B     b00401: jsr cangr	; CANGORIGHT
001C97  3  F0 03                beq :+
001C99  3  4C DA 1C             jmp b00562
001C9C  3               :
001C9C  3  A0 09                ldy #9 		; SPRITERIGHT
001C9E  3  B1 68                lda (z80_ix),y
001CA0  3  18                   clc
001CA1  3  69 02                adc #2
001CA3  3  91 68                sta (z80_ix),y
001CA5  3  A9 06                lda #6
001CA7  3  A0 06                ldy #6
001CA9  3  91 68                sta (z80_ix),y
001CAB  3  A9 10                lda #16
001CAD  3  85 62                sta z80_c
001CAF  3  A0 09                ldy #9
001CB1  3  B1 68                lda (z80_ix),y
001CB3  3  18                   clc
001CB4  3  65 62                adc z80_c
001CB6  3  A0 09                ldy #9
001CB8  3  91 68                sta (z80_ix),y
001CBA  3  20 01 0B             jsr cangd	; CANGODOWN
001CBD  3  F0 03                beq :+
001CBF  3  4C C8 1C             jmp b00522
001CC2  3               :
001CC2  3  A9 00                lda #0
001CC4  3  A0 0B                ldy #11
001CC6  3  91 68                sta (z80_ix),y
001CC8  3  A9 10        b00522: lda #16
001CCA  3  85 62                sta z80_c
001CCC  3  A0 09                ldy #9
001CCE  3  B1 68                lda (z80_ix),y
001CD0  3  38                   sec
001CD1  3  E5 62                sbc z80_c
001CD3  3  A0 09                ldy #9
001CD5  3  91 68                sta (z80_ix),y
001CD7  3  4C E0 1C             jmp b00576
001CDA  3  A9 00        b00562: lda #0
001CDC  3  A0 0B                ldy #11
001CDE  3  91 68                sta (z80_ix),y
001CE0  3  A9 00        b00576: lda #0
001CE2  3  C5 rr                cmp vara
001CE4  3  F0 03                beq *+5
001CE6  3  4C EE 1C             jmp b00604
001CE9  3  A9 00                lda #0		; ANIMATE
001CEB  3  20 2A 12             jsr animsp
001CEE  3  60           b00604: rts
001CEF  3               evnt02:
001CEF  3  A9 01                lda #1
001CF1  3  C5 rr                cmp scno
001CF3  3  F0 03                beq *+5
001CF5  3  4C 61 1D             jmp c00231
001CF8  3  A9 01                lda #1
001CFA  3  C5 rr                cmp vart
001CFC  3  F0 03                beq *+5
001CFE  3  4C 12 1D             jmp c00071
001D01  3  A9 0B                lda #11
001D03  3  A0 06                ldy #6
001D05  3  D1 68                cmp (z80_ix),y
001D07  3  F0 03                beq *+5
001D09  3  4C 12 1D             jmp c00071
001D0C  3  A9 0A                lda #10
001D0E  3  A0 06                ldy #6
001D10  3  91 68                sta (z80_ix),y
001D12  3  A9 00        c00071: lda #0 	; COLLISION
001D14  3  85 63                sta z80_b
001D16  3  20 75 12             jsr sktyp
001D19  3  B0 03                bcs :+
001D1B  3  4C 61 1D             jmp c00231
001D1E  3               :
001D1E  3  A9 0A                lda #10
001D20  3  A0 06                ldy #6
001D22  3  D1 68                cmp (z80_ix),y
001D24  3  F0 03                beq *+5
001D26  3  4C 4E 1D             jmp c00193
001D29  3  A9 02                lda #2
001D2B  3  C5 rr                cmp vars
001D2D  3  F0 03                beq *+5
001D2F  3  4C 3B 1D             jmp c00154
001D32  3  A9 32                lda #50		; BEEP
001D34  3  0A                   asl a
001D35  3  8D F1 02             sta sndtyp
001D38  3  4C 4E 1D             jmp c00193
001D3B  3  A9 00        c00154: lda #0
001D3D  3  C5 rr                cmp vars
001D3F  3  F0 03                beq *+5
001D41  3  4C 4E 1D             jmp c00193
001D44  3  A9 32                lda #50		; BEEP
001D46  3  0A                   asl a
001D47  3  8D F1 02             sta sndtyp
001D4A  3  A9 00                lda #0
001D4C  3  85 rr                sta vart
001D4E  3  A9 00        c00193: lda #0
001D50  3  C5 rr                cmp varc
001D52  3  F0 03                beq *+5
001D54  3  4C 61 1D             jmp c00231
001D57  3  A9 00                lda #0
001D59  3  85 rr                sta vart
001D5B  3  A9 0B                lda #11
001D5D  3  A0 06                ldy #6
001D5F  3  91 68                sta (z80_ix),y
001D61  3  A9 06        c00231: lda #6
001D63  3  C5 rr                cmp scno
001D65  3  F0 03                beq *+5
001D67  3  4C D7 1D             jmp c00472
001D6A  3  A9 00                lda #0
001D6C  3  C5 rr                cmp vart
001D6E  3  F0 03                beq *+5
001D70  3  4C A3 1D             jmp c00364
001D73  3  A9 00                lda #0
001D75  3  C5 rr                cmp vars
001D77  3  F0 03                beq *+5
001D79  3  4C A3 1D             jmp c00364
001D7C  3  A9 00                lda #0 	; COLLISION
001D7E  3  85 63                sta z80_b
001D80  3  20 75 12             jsr sktyp
001D83  3  B0 03                bcs :+
001D85  3  4C A3 1D             jmp c00364
001D88  3               :
001D88  3  A9 0B                lda #11
001D8A  3  A0 06                ldy #6
001D8C  3  D1 68                cmp (z80_ix),y
001D8E  3  F0 03                beq *+5
001D90  3  4C 99 1D             jmp c00343
001D93  3  A9 32                lda #50		; BEEP
001D95  3  0A                   asl a
001D96  3  8D F1 02             sta sndtyp
001D99  3  A9 0A        c00343: lda #10
001D9B  3  A0 06                ldy #6
001D9D  3  91 68                sta (z80_ix),y
001D9F  3  A9 01                lda #1
001DA1  3  85 rr                sta vars
001DA3  3  A9 0A        c00364: lda #10
001DA5  3  C5 rr                cmp varc
001DA7  3  F0 03                beq *+5
001DA9  3  4C D7 1D             jmp c00472
001DAC  3  A9 01                lda #1
001DAE  3  C5 rr                cmp vars
001DB0  3  F0 03                beq *+5
001DB2  3  4C D7 1D             jmp c00472
001DB5  3  A9 0A                lda #10
001DB7  3  A0 06                ldy #6
001DB9  3  91 68                sta (z80_ix),y
001DBB  3  A9 00                lda #0 	; COLLISION
001DBD  3  85 63                sta z80_b
001DBF  3  20 75 12             jsr sktyp
001DC2  3  B0 03                bcs :+
001DC4  3  4C D7 1D             jmp c00472
001DC7  3               :
001DC7  3  A9 32                lda #50		; BEEP
001DC9  3  0A                   asl a
001DCA  3  8D F1 02             sta sndtyp
001DCD  3  A9 0B                lda #11
001DCF  3  A0 06                ldy #6
001DD1  3  91 68                sta (z80_ix),y
001DD3  3  A9 02                lda #2
001DD5  3  85 rr                sta vars
001DD7  3  A9 06        c00472: lda #6
001DD9  3  C5 rr                cmp scno
001DDB  3  F0 03                beq *+5
001DDD  3  4C F8 1D             jmp c00536
001DE0  3  A9 09                lda #9
001DE2  3  C5 rr                cmp varc
001DE4  3  B0 03                bcs *+5
001DE6  3  4C F8 1D             jmp c00536
001DE9  3  A9 01                lda #1
001DEB  3  C5 rr                cmp vars
001DED  3  F0 03                beq *+5
001DEF  3  4C F8 1D             jmp c00536
001DF2  3  A9 0A                lda #10
001DF4  3  A0 06                ldy #6
001DF6  3  91 68                sta (z80_ix),y
001DF8  3  A9 01        c00536: lda #1
001DFA  3  C5 rr                cmp scno
001DFC  3  F0 03                beq *+5
001DFE  3  4C 39 1E             jmp c00669
001E01  3  A9 02                lda #2
001E03  3  C5 rr                cmp vars
001E05  3  F0 03                beq *+5
001E07  3  4C 39 1E             jmp c00669
001E0A  3  A9 0B                lda #11
001E0C  3  A0 06                ldy #6
001E0E  3  D1 68                cmp (z80_ix),y
001E10  3  F0 03                beq *+5
001E12  3  4C 39 1E             jmp c00669
001E15  3  A9 00                lda #0 	; COLLISION
001E17  3  85 63                sta z80_b
001E19  3  20 75 12             jsr sktyp
001E1C  3  B0 03                bcs :+
001E1E  3  4C 39 1E             jmp c00669
001E21  3               :
001E21  3  A9 32                lda #50		; BEEP
001E23  3  0A                   asl a
001E24  3  8D F1 02             sta sndtyp
001E27  3  A9 0A                lda #10
001E29  3  A0 06                ldy #6
001E2B  3  91 68                sta (z80_ix),y
001E2D  3  A9 03                lda #3
001E2F  3  85 rr                sta vars
001E31  3  A9 28                lda #40
001E33  3  85 rr                sta vari
001E35  3  A9 00                lda #0
001E37  3  85 rr                sta vart
001E39  3  60           c00669: rts
001E3A  3               evnt03:
001E3A  3  A9 03                lda #3
001E3C  3  C5 rr                cmp vars
001E3E  3  F0 03                beq *+5
001E40  3  4C 54 1E             jmp d00057
001E43  3  A9 FF                lda #255	; REMOVE
001E45  3  A0 05                ldy #5
001E47  3  91 68                sta (z80_ix),y
001E49  3  A9 05                lda #5	; SPAWN
001E4B  3  85 62                sta z80_c
001E4D  3  A9 09                lda #9
001E4F  3  85 63                sta z80_b
001E51  3  20 74 06             jsr spawn
001E54  3  A9 00        d00057: lda #0 	; COLLISION
001E56  3  85 63                sta z80_b
001E58  3  20 75 12             jsr sktyp
001E5B  3  B0 03                bcs :+
001E5D  3  4C 96 1E             jmp d00200
001E60  3               :
001E60  3  A9 01                lda #1
001E62  3  A0 07                ldy #7
001E64  3  D1 68                cmp (z80_ix),y
001E66  3  B0 03                bcs *+5
001E68  3  4C 6E 1E             jmp d00109
001E6B  3  4C 96 1E             jmp d00200
001E6E  3  A9 01        d00109: lda #1
001E70  3  85 rr                sta varj
001E72  3  A5 rr                lda skptr	; OTHER
001E74  3  85 68                sta z80_x
001E76  3  A5 rr                lda skptr+1
001E78  3  85 69                sta z80_i
001E7A  3  A9 05                lda #5	; SPAWN
001E7C  3  85 62                sta z80_c
001E7E  3  A9 09                lda #9
001E80  3  85 63                sta z80_b
001E82  3  20 74 06             jsr spawn
001E85  3  A9 FF                lda #255	; REMOVE
001E87  3  A0 05                ldy #5
001E89  3  91 68                sta (z80_ix),y
001E8B  3  A9 08                lda #8	; SPAWN
001E8D  3  85 62                sta z80_c
001E8F  3  A9 07                lda #7
001E91  3  85 63                sta z80_b
001E93  3  20 74 06             jsr spawn
001E96  3  A9 0C        d00200: lda #12
001E98  3  A0 06                ldy #6
001E9A  3  D1 68                cmp (z80_ix),y
001E9C  3  F0 03                beq *+5
001E9E  3  4C A1 1E             jmp d00222
001EA1  3  A9 32        d00222: lda #50
001EA3  3  85 65                sta z80_d	; GETRANDOM
001EA5  3  20 CA 0C             jsr random
001EA8  3  85 67                sta z80_h
001EAA  3  20 08 05             jsr imul
001EAD  3  A5 67                lda z80_h
001EAF  3  85 rr                sta varrnd
001EB1  3  A9 19                lda #25
001EB3  3  C5 rr                cmp varrnd
001EB5  3  B0 03                bcs *+5
001EB7  3  4C C1 1E             jmp d00287
001EBA  3  A9 19                lda #25
001EBC  3  85 rr                sta varopt
001EBE  3  4C C5 1E             jmp d00297
001EC1  3  A5 rr        d00287: lda varrnd
001EC3  3  85 rr                sta varopt
001EC5  3  A9 00        d00297: lda #0
001EC7  3  A0 0B                ldy #11
001EC9  3  D1 68                cmp (z80_ix),y
001ECB  3  F0 03                beq *+5
001ECD  3  4C 68 1F             jmp d00646
001ED0  3  A9 00                lda #0
001ED2  3  A0 0A                ldy #10
001ED4  3  D1 68                cmp (z80_ix),y
001ED6  3  F0 03                beq *+5
001ED8  3  4C 43 1F             jmp d00567
001EDB  3  A9 00                lda #0
001EDD  3  C5 rr                cmp vara
001EDF  3  F0 03                beq *+5
001EE1  3  4C 40 1F             jmp d00562
001EE4  3  A9 00                lda #0		; ANIMATE
001EE6  3  20 2A 12             jsr animsp
001EE9  3  A9 05                lda #5
001EEB  3  A0 07                ldy #7
001EED  3  D1 68                cmp (z80_ix),y
001EEF  3  F0 03                beq *+5
001EF1  3  4C 40 1F             jmp d00562
001EF4  3  A9 04                lda #4
001EF6  3  A0 06                ldy #6
001EF8  3  D1 68                cmp (z80_ix),y
001EFA  3  F0 03                beq *+5
001EFC  3  4C 3A 1F             jmp d00549
001EFF  3  A9 10                lda #16
001F01  3  85 62                sta z80_c
001F03  3  A0 08                ldy #8
001F05  3  B1 68                lda (z80_ix),y
001F07  3  38                   sec
001F08  3  E5 62                sbc z80_c
001F0A  3  A0 08                ldy #8
001F0C  3  91 68                sta (z80_ix),y
001F0E  3  A9 08                lda #8	; SPAWN
001F10  3  85 62                sta z80_c
001F12  3  A9 03                lda #3
001F14  3  85 63                sta z80_b
001F16  3  20 74 06             jsr spawn
001F19  3  A9 10                lda #16
001F1B  3  85 62                sta z80_c
001F1D  3  A0 08                ldy #8
001F1F  3  B1 68                lda (z80_ix),y
001F21  3  18                   clc
001F22  3  65 62                adc z80_c
001F24  3  A0 08                ldy #8
001F26  3  91 68                sta (z80_ix),y
001F28  3  A9 0F                lda #15		; BEEP
001F2A  3  0A                   asl a
001F2B  3  8D F1 02             sta sndtyp
001F2E  3  A9 0F                lda #15		; BEEP
001F30  3  0A                   asl a
001F31  3  8D F1 02             sta sndtyp
001F34  3  A9 0F                lda #15		; BEEP
001F36  3  0A                   asl a
001F37  3  8D F1 02             sta sndtyp
001F3A  3  A9 01        d00549: lda #1
001F3C  3  A0 0A                ldy #10
001F3E  3  91 68                sta (z80_ix),y
001F40  3  4C 68 1F     d00562: jmp d00646
001F43  3  A9 00        d00567: lda #0
001F45  3  C5 rr                cmp vara
001F47  3  F0 03                beq *+5
001F49  3  4C 68 1F             jmp d00646
001F4C  3  A9 00                lda #0		; ANIMATEBACK
001F4E  3  20 50 12             jsr animbk
001F51  3  A9 00                lda #0
001F53  3  A0 07                ldy #7
001F55  3  D1 68                cmp (z80_ix),y
001F57  3  F0 03                beq *+5
001F59  3  4C 68 1F             jmp d00646
001F5C  3  A5 rr                lda varopt
001F5E  3  A0 0B                ldy #11
001F60  3  91 68                sta (z80_ix),y
001F62  3  A9 00                lda #0
001F64  3  A0 0A                ldy #10
001F66  3  91 68                sta (z80_ix),y
001F68  3  A9 00        d00646: lda #0
001F6A  3  A0 0B                ldy #11
001F6C  3  D1 68                cmp (z80_ix),y
001F6E  3  90 03                bcc *+5
001F70  3  4C 7E 1F             jmp d00695
001F73  3  A0 0B                ldy #11
001F75  3  B1 68                lda (z80_ix),y
001F77  3  38                   sec
001F78  3  E9 01                sbc #1
001F7A  3  A0 0B                ldy #11
001F7C  3  91 68                sta (z80_ix),y
001F7E  3  60           d00695: rts
001F7F  3               evnt04:
001F7F  3  60                   rts
001F80  3               evnt05:
001F80  3  A9 14                lda #20
001F82  3  85 rr                sta varr
001F84  3  A9 06                lda #6
001F86  3  A0 07                ldy #7
001F88  3  D1 68                cmp (z80_ix),y
001F8A  3  B0 03                bcs *+5
001F8C  3  4C A6 1F             jmp f00077
001F8F  3  A9 00                lda #0
001F91  3  C5 rr                cmp varj
001F93  3  F0 03                beq *+5
001F95  3  4C 98 1F             jmp f00049
001F98  3  A9 00        f00049: lda #0
001F9A  3  C5 rr                cmp vara
001F9C  3  F0 03                beq *+5
001F9E  3  4C A6 1F             jmp f00077
001FA1  3  A9 00                lda #0		; ANIMATE
001FA3  3  20 2A 12             jsr animsp
001FA6  3  A9 07        f00077: lda #7
001FA8  3  A0 07                ldy #7
001FAA  3  D1 68                cmp (z80_ix),y
001FAC  3  F0 03                beq *+5
001FAE  3  4C C4 1F             jmp f00140
001FB1  3  A9 FF                lda #255	; REMOVE
001FB3  3  A0 05                ldy #5
001FB5  3  91 68                sta (z80_ix),y
001FB7  3  A9 03                lda #3
001FB9  3  C5 rr                cmp vars
001FBB  3  F0 03                beq *+5
001FBD  3  4C C4 1F             jmp f00140
001FC0  3  A9 14                lda #20
001FC2  3  85 rr                sta vari
001FC4  3  60           f00140: rts
001FC5  3               evnt06:
001FC5  3  A9 00                lda #0
001FC7  3  C5 rr                cmp varr
001FC9  3  90 03                bcc *+5
001FCB  3  4C D5 1F             jmp g00034
001FCE  3  A5 rr                lda varr
001FD0  3  38                   sec
001FD1  3  E9 01                sbc #1
001FD3  3  85 rr                sta varr
001FD5  3  A9 03        g00034: lda #3
001FD7  3  A0 07                ldy #7
001FD9  3  D1 68                cmp (z80_ix),y
001FDB  3  B0 03                bcs *+5
001FDD  3  4C 01 20             jmp g00127
001FE0  3  A0 08                ldy #8
001FE2  3  B1 68                lda (z80_ix),y
001FE4  3  A0 0B                ldy #11
001FE6  3  91 68                sta (z80_ix),y
001FE8  3  A0 09                ldy #9
001FEA  3  B1 68                lda (z80_ix),y
001FEC  3  A0 0C                ldy #12
001FEE  3  91 68                sta (z80_ix),y
001FF0  3  A9 00                lda #0
001FF2  3  C5 rr                cmp vara
001FF4  3  F0 03                beq *+5
001FF6  3  4C FE 1F             jmp g00122
001FF9  3  A9 00                lda #0		; ANIMATE
001FFB  3  20 2A 12             jsr animsp
001FFE  3  4C 4C 20     g00122: jmp g00293
002001  3  20 01 0B     g00127: jsr cangd	; CANGODOWN
002004  3  F0 03                beq :+
002006  3  4C 21 20             jmp g00196
002009  3               :
002009  3  A9 04                lda #4
00200B  3  A0 07                ldy #7
00200D  3  91 68                sta (z80_ix),y
00200F  3  A9 04                lda #4
002011  3  85 62                sta z80_c
002013  3  A0 08                ldy #8
002015  3  B1 68                lda (z80_ix),y
002017  3  18                   clc
002018  3  65 62                adc z80_c
00201A  3  A0 08                ldy #8
00201C  3  91 68                sta (z80_ix),y
00201E  3  4C 4C 20             jmp g00293
002021  3  A9 00        g00196: lda #0
002023  3  A0 07                ldy #7
002025  3  91 68                sta (z80_ix),y
002027  3  A9 05                lda #5	; SPAWN
002029  3  85 62                sta z80_c
00202B  3  A9 09                lda #9
00202D  3  85 63                sta z80_b
00202F  3  20 74 06             jsr spawn
002032  3  A9 14                lda #20		; BEEP
002034  3  0A                   asl a
002035  3  8D F1 02             sta sndtyp
002038  3  A9 14                lda #20
00203A  3  85 rr                sta varr
00203C  3  A0 0B                ldy #11
00203E  3  B1 68                lda (z80_ix),y
002040  3  A0 08                ldy #8
002042  3  91 68                sta (z80_ix),y
002044  3  A0 0C                ldy #12
002046  3  B1 68                lda (z80_ix),y
002048  3  A0 09                ldy #9
00204A  3  91 68                sta (z80_ix),y
00204C  3  A9 00        g00293: lda #0 	; COLLISION
00204E  3  85 63                sta z80_b
002050  3  20 75 12             jsr sktyp
002053  3  B0 03                bcs :+
002055  3  4C 8B 20             jmp g00431
002058  3               :
002058  3  A9 04                lda #4
00205A  3  A0 07                ldy #7
00205C  3  D1 68                cmp (z80_ix),y
00205E  3  F0 03                beq *+5
002060  3  4C 8B 20             jmp g00431
002063  3  A5 rr                lda skptr	; OTHER
002065  3  85 68                sta z80_x
002067  3  A5 rr                lda skptr+1
002069  3  85 69                sta z80_i
00206B  3  A9 01                lda #1
00206D  3  85 rr                sta varj
00206F  3  A9 05                lda #5	; SPAWN
002071  3  85 62                sta z80_c
002073  3  A9 09                lda #9
002075  3  85 63                sta z80_b
002077  3  20 74 06             jsr spawn
00207A  3  A9 FF                lda #255	; REMOVE
00207C  3  A0 05                ldy #5
00207E  3  91 68                sta (z80_ix),y
002080  3  A9 08                lda #8	; SPAWN
002082  3  85 62                sta z80_c
002084  3  A9 07                lda #7
002086  3  85 63                sta z80_b
002088  3  20 74 06             jsr spawn
00208B  3  A9 05        g00431: lda #DEADLY	; DEADLY
00208D  3  85 63                sta z80_b
00208F  3  20 BD 0B             jsr tded
002092  3  C5 63                cmp z80_b
002094  3  F0 03                beq :+
002096  3  4C DE 20             jmp g00619
002099  3               :
002099  3  A9 00                lda #0
00209B  3  A0 07                ldy #7
00209D  3  91 68                sta (z80_ix),y
00209F  3  A9 04                lda #4
0020A1  3  85 62                sta z80_c
0020A3  3  A0 08                ldy #8
0020A5  3  B1 68                lda (z80_ix),y
0020A7  3  38                   sec
0020A8  3  E5 62                sbc z80_c
0020AA  3  A0 08                ldy #8
0020AC  3  91 68                sta (z80_ix),y
0020AE  3  A9 05                lda #5	; SPAWN
0020B0  3  85 62                sta z80_c
0020B2  3  A9 09                lda #9
0020B4  3  85 63                sta z80_b
0020B6  3  20 74 06             jsr spawn
0020B9  3  A9 14                lda #20		; BEEP
0020BB  3  0A                   asl a
0020BC  3  8D F1 02             sta sndtyp
0020BF  3  A9 04                lda #4
0020C1  3  85 62                sta z80_c
0020C3  3  A0 08                ldy #8
0020C5  3  B1 68                lda (z80_ix),y
0020C7  3  18                   clc
0020C8  3  65 62                adc z80_c
0020CA  3  A0 08                ldy #8
0020CC  3  91 68                sta (z80_ix),y
0020CE  3  A0 0B                ldy #11
0020D0  3  B1 68                lda (z80_ix),y
0020D2  3  A0 08                ldy #8
0020D4  3  91 68                sta (z80_ix),y
0020D6  3  A0 0C                ldy #12
0020D8  3  B1 68                lda (z80_ix),y
0020DA  3  A0 09                ldy #9
0020DC  3  91 68                sta (z80_ix),y
0020DE  3  60           g00619: rts
0020DF  3               evnt07:
0020DF  3  A9 00                lda #0
0020E1  3  A0 0B                ldy #11
0020E3  3  D1 68                cmp (z80_ix),y
0020E5  3  F0 03                beq *+5
0020E7  3  4C 07 21             jmp h00088
0020EA  3  20 CC 0A             jsr cangu	; CANGOUP
0020ED  3  F0 03                beq :+
0020EF  3  4C FE 20             jmp h00070
0020F2  3               :
0020F2  3  A0 08                ldy #8 		; SPRITEUP
0020F4  3  B1 68                lda (z80_ix),y
0020F6  3  38                   sec
0020F7  3  E9 02                sbc #2
0020F9  3  91 68                sta (z80_ix),y
0020FB  3  4C 04 21             jmp h00083
0020FE  3  A9 01        h00070: lda #1
002100  3  A0 0B                ldy #11
002102  3  91 68                sta (z80_ix),y
002104  3  4C 21 21     h00083: jmp h00149
002107  3  20 01 0B     h00088: jsr cangd	; CANGODOWN
00210A  3  F0 03                beq :+
00210C  3  4C 1B 21             jmp h00135
00210F  3               :
00210F  3  A0 08                ldy #8 		; SPRITEDOWN
002111  3  B1 68                lda (z80_ix),y
002113  3  18                   clc
002114  3  69 02                adc #2
002116  3  91 68                sta (z80_ix),y
002118  3  4C 21 21             jmp h00149
00211B  3  A9 00        h00135: lda #0
00211D  3  A0 0B                ldy #11
00211F  3  91 68                sta (z80_ix),y
002121  3  A9 06        h00149: lda #CUSTOM	; CUSTOM
002123  3  85 63                sta z80_b
002125  3  20 BD 0B             jsr tded
002128  3  C5 63                cmp z80_b
00212A  3  F0 03                beq :+
00212C  3  4C 49 21             jmp h00232
00212F  3               :
00212F  3  A9 01                lda #1
002131  3  A0 0B                ldy #11
002133  3  D1 68                cmp (z80_ix),y
002135  3  F0 03                beq *+5
002137  3  4C 43 21             jmp h00219
00213A  3  A9 00                lda #0
00213C  3  A0 0B                ldy #11
00213E  3  91 68                sta (z80_ix),y
002140  3  4C 49 21             jmp h00232
002143  3  A9 01        h00219: lda #1
002145  3  A0 0B                ldy #11
002147  3  91 68                sta (z80_ix),y
002149  3  A9 05        h00232: lda #DEADLY	; DEADLY
00214B  3  85 63                sta z80_b
00214D  3  20 BD 0B             jsr tded
002150  3  C5 63                cmp z80_b
002152  3  F0 03                beq :+
002154  3  4C 71 21             jmp h00316
002157  3               :
002157  3  A9 01                lda #1
002159  3  A0 0B                ldy #11
00215B  3  D1 68                cmp (z80_ix),y
00215D  3  F0 03                beq *+5
00215F  3  4C 6B 21             jmp h00302
002162  3  A9 00                lda #0
002164  3  A0 0B                ldy #11
002166  3  91 68                sta (z80_ix),y
002168  3  4C 71 21             jmp h00316
00216B  3  A9 01        h00302: lda #1
00216D  3  A0 0B                ldy #11
00216F  3  91 68                sta (z80_ix),y
002171  3  A9 00        h00316: lda #0
002173  3  C5 rr                cmp vard
002175  3  F0 03                beq *+5
002177  3  4C 7F 21             jmp h00344
00217A  3  A9 00                lda #0		; ANIMATE
00217C  3  20 2A 12             jsr animsp
00217F  3  A9 00        h00344: lda #0 	; COLLISION
002181  3  85 63                sta z80_b
002183  3  20 75 12             jsr sktyp
002186  3  B0 03                bcs :+
002188  3  4C B3 21             jmp h00459
00218B  3               :
00218B  3  A9 01                lda #1
00218D  3  85 rr                sta varj
00218F  3  A5 rr                lda skptr	; OTHER
002191  3  85 68                sta z80_x
002193  3  A5 rr                lda skptr+1
002195  3  85 69                sta z80_i
002197  3  A9 05                lda #5	; SPAWN
002199  3  85 62                sta z80_c
00219B  3  A9 09                lda #9
00219D  3  85 63                sta z80_b
00219F  3  20 74 06             jsr spawn
0021A2  3  A9 FF                lda #255	; REMOVE
0021A4  3  A0 05                ldy #5
0021A6  3  91 68                sta (z80_ix),y
0021A8  3  A9 08                lda #8	; SPAWN
0021AA  3  85 62                sta z80_c
0021AC  3  A9 07                lda #7
0021AE  3  85 63                sta z80_b
0021B0  3  20 74 06             jsr spawn
0021B3  3  60           h00459: rts
0021B4  3               evnt08:
0021B4  3  A9 03                lda #3
0021B6  3  A0 06                ldy #6
0021B8  3  D1 68                cmp (z80_ix),y
0021BA  3  F0 03                beq *+5
0021BC  3  4C D8 21             jmp i00078
0021BF  3  A9 00                lda #0		; ANIMATE
0021C1  3  20 2A 12             jsr animsp
0021C4  3  A9 05                lda #5
0021C6  3  A0 07                ldy #7
0021C8  3  D1 68                cmp (z80_ix),y
0021CA  3  B0 03                bcs *+5
0021CC  3  4C D2 21             jmp i00062
0021CF  3  4C D8 21             jmp i00078
0021D2  3  A9 FF        i00062: lda #255	; REMOVE
0021D4  3  A0 05                ldy #5
0021D6  3  91 68                sta (z80_ix),y
0021D8  3  A9 07        i00078: lda #7
0021DA  3  A0 06                ldy #6
0021DC  3  D1 68                cmp (z80_ix),y
0021DE  3  F0 03                beq *+5
0021E0  3  4C 12 22             jmp i00200
0021E3  3  A9 00                lda #0
0021E5  3  C5 rr                cmp vard
0021E7  3  F0 03                beq *+5
0021E9  3  4C F1 21             jmp i00128
0021EC  3  A9 00                lda #0		; ANIMATE
0021EE  3  20 2A 12             jsr animsp
0021F1  3  A9 09        i00128: lda #9
0021F3  3  A0 08                ldy #8
0021F5  3  D1 68                cmp (z80_ix),y
0021F7  3  90 03                bcc *+5
0021F9  3  4C 0E 22             jmp i00189
0021FC  3  A9 02                lda #2
0021FE  3  85 62                sta z80_c
002200  3  A0 08                ldy #8
002202  3  B1 68                lda (z80_ix),y
002204  3  38                   sec
002205  3  E5 62                sbc z80_c
002207  3  A0 08                ldy #8
002209  3  91 68                sta (z80_ix),y
00220B  3  4C 12 22             jmp i00200
00220E  3  A9 01        i00189: lda #1 		; KILL
002210  3  85 rr                sta deadf
002212  3  A9 09        i00200: lda #9
002214  3  A0 06                ldy #6
002216  3  D1 68                cmp (z80_ix),y
002218  3  F0 03                beq *+5
00221A  3  4C 3C 22             jmp i00288
00221D  3  A9 00                lda #0
00221F  3  C5 rr                cmp vara
002221  3  F0 03                beq *+5
002223  3  4C 3C 22             jmp i00288
002226  3  A9 00                lda #0		; ANIMATE
002228  3  20 2A 12             jsr animsp
00222B  3  A9 07                lda #7
00222D  3  A0 07                ldy #7
00222F  3  D1 68                cmp (z80_ix),y
002231  3  F0 03                beq *+5
002233  3  4C 3C 22             jmp i00288
002236  3  A9 FF                lda #255	; REMOVE
002238  3  A0 05                ldy #5
00223A  3  91 68                sta (z80_ix),y
00223C  3  60           i00288: rts
00223D  3               evnt09:
00223D  3  A9 07                lda #7
00223F  3  A0 05                ldy #5
002241  3  D1 68                cmp (z80_ix),y
002243  3  F0 03                beq *+5
002245  3  4C 4E 22             jmp j00037
002248  3  A9 00                lda #0
00224A  3  A0 0B                ldy #11
00224C  3  91 68                sta (z80_ix),y
00224E  3  A9 00        j00037: lda #0
002250  3  A0 05                ldy #5
002252  3  D1 68                cmp (z80_ix),y
002254  3  F0 03                beq *+5
002256  3  4C 65 22             jmp j00087
002259  3  A5 rr                lda varo
00225B  3  A0 08                ldy #8
00225D  3  91 68                sta (z80_ix),y
00225F  3  A5 rr                lda varp
002261  3  A0 09                ldy #9
002263  3  91 68                sta (z80_ix),y
002265  3  A9 03        j00087: lda #3
002267  3  A0 05                ldy #5
002269  3  D1 68                cmp (z80_ix),y
00226B  3  F0 03                beq *+5
00226D  3  4C 7C 22             jmp j00136
002270  3  A9 00                lda #0
002272  3  A0 0B                ldy #11
002274  3  91 68                sta (z80_ix),y
002276  3  A9 00                lda #0
002278  3  A0 0A                ldy #10
00227A  3  91 68                sta (z80_ix),y
00227C  3  A9 06        j00136: lda #6
00227E  3  A0 05                ldy #5
002280  3  D1 68                cmp (z80_ix),y
002282  3  F0 03                beq *+5
002284  3  4C 8B 22             jmp j00166
002287  3  A9 00                lda #0
002289  3  85 rr                sta varr
00228B  3  A9 01        j00166: lda #1
00228D  3  A0 05                ldy #5
00228F  3  D1 68                cmp (z80_ix),y
002291  3  F0 03                beq *+5
002293  3  4C 9C 22             jmp j00201
002296  3  A9 00                lda #0
002298  3  A0 0C                ldy #12
00229A  3  91 68                sta (z80_ix),y
00229C  3  60           j00201: rts
00229D  3               evnt10:
00229D  3  A9 16                lda #22
00229F  3  C5 rr                cmp scno
0022A1  3  90 03                bcc *+5
0022A3  3  4C AD 22             jmp k00031
0022A6  3  A9 01                lda #1
0022A8  3  85 rr                sta vark
0022AA  3  4C C1 22             jmp k00069
0022AD  3  A9 13        k00031: lda #19
0022AF  3  C5 rr                cmp scno
0022B1  3  F0 03                beq *+5
0022B3  3  4C BD 22             jmp k00061
0022B6  3  A9 01                lda #1
0022B8  3  85 rr                sta vark
0022BA  3  4C C1 22             jmp k00069
0022BD  3  A9 00        k00061: lda #0
0022BF  3  85 rr                sta vark
0022C1  3  A9 00        k00069: lda #0
0022C3  3  C5 rr                cmp vart
0022C5  3  F0 03                beq *+5
0022C7  3  4C E0 22             jmp k00131
0022CA  3  A9 00                lda #0
0022CC  3  C5 rr                cmp vars
0022CE  3  F0 03                beq *+5
0022D0  3  4C E0 22             jmp k00131
0022D3  3  A9 16                lda #22
0022D5  3  85 rr                sta chary
0022D7  3  A9 03                lda #3
0022D9  3  85 rr                sta charx
0022DB  3  A9 0A                lda #10  	; MESSAGE
0022DD  3  20 CF 0D             jsr dmsg
0022E0  3  A9 01        k00131: lda #1
0022E2  3  C5 rr                cmp vart
0022E4  3  F0 03                beq *+5
0022E6  3  4C FF 22             jmp k00192
0022E9  3  A9 00                lda #0
0022EB  3  C5 rr                cmp vars
0022ED  3  F0 03                beq *+5
0022EF  3  4C FF 22             jmp k00192
0022F2  3  A9 16                lda #22
0022F4  3  85 rr                sta chary
0022F6  3  A9 03                lda #3
0022F8  3  85 rr                sta charx
0022FA  3  A9 09                lda #9  	; MESSAGE
0022FC  3  20 CF 0D             jsr dmsg
0022FF  3  A9 00        k00192: lda #0
002301  3  C5 rr                cmp vart
002303  3  F0 03                beq *+5
002305  3  4C 27 23             jmp k00270
002308  3  A9 01                lda #1
00230A  3  C5 rr                cmp vars
00230C  3  F0 03                beq *+5
00230E  3  4C 27 23             jmp k00270
002311  3  A9 00                lda #0
002313  3  C5 rr                cmp varc
002315  3  F0 03                beq *+5
002317  3  4C 27 23             jmp k00270
00231A  3  A9 16                lda #22
00231C  3  85 rr                sta chary
00231E  3  A9 02                lda #2
002320  3  85 rr                sta charx
002322  3  A9 0B                lda #11  	; MESSAGE
002324  3  20 CF 0D             jsr dmsg
002327  3  A9 01        k00270: lda #1
002329  3  C5 rr                cmp vars
00232B  3  F0 03                beq *+5
00232D  3  4C 46 23             jmp k00332
002330  3  A9 0A                lda #10
002332  3  C5 rr                cmp varc
002334  3  F0 03                beq *+5
002336  3  4C 46 23             jmp k00332
002339  3  A9 16                lda #22
00233B  3  85 rr                sta chary
00233D  3  A9 02                lda #2
00233F  3  85 rr                sta charx
002341  3  A9 0D                lda #13  	; MESSAGE
002343  3  20 CF 0D             jsr dmsg
002346  3  A9 02        k00332: lda #2
002348  3  C5 rr                cmp vars
00234A  3  F0 03                beq *+5
00234C  3  4C 65 23             jmp k00394
00234F  3  A9 0A                lda #10
002351  3  C5 rr                cmp varc
002353  3  F0 03                beq *+5
002355  3  4C 65 23             jmp k00394
002358  3  A9 16                lda #22
00235A  3  85 rr                sta chary
00235C  3  A9 02                lda #2
00235E  3  85 rr                sta charx
002360  3  A9 0C                lda #12  	; MESSAGE
002362  3  20 CF 0D             jsr dmsg
002365  3  A9 03        k00394: lda #3
002367  3  C5 rr                cmp vars
002369  3  F0 03                beq *+5
00236B  3  4C 8E 23             jmp k00475
00236E  3  A9 00                lda #0
002370  3  C5 rr                cmp vari
002372  3  90 03                bcc *+5
002374  3  4C 8A 23             jmp k00464
002377  3  A9 00                lda #0
002379  3  C5 rr                cmp vard
00237B  3  F0 03                beq *+5
00237D  3  4C 87 23             jmp k00459
002380  3  A5 rr                lda vari
002382  3  38                   sec
002383  3  E9 01                sbc #1
002385  3  85 rr                sta vari
002387  3  4C 8E 23     k00459: jmp k00475
00238A  3  A9 01        k00464: lda #1		; ENDGAME
00238C  3  85 rr                sta gamwon
00238E  3  A9 01        k00475: lda #1
002390  3  C5 rr                cmp vara
002392  3  F0 03                beq *+5
002394  3  4C AE 23             jmp k00537
002397  3  A9 00                lda #0
002399  3  85 rr                sta vara
00239B  3  A9 FE                lda #254
00239D  3  C5 rr                cmp varb
00239F  3  B0 03                bcs *+5
0023A1  3  4C AB 23             jmp k00532
0023A4  3  A5 rr                lda varb
0023A6  3  18                   clc
0023A7  3  69 01                adc #1
0023A9  3  85 rr                sta varb
0023AB  3  4C B5 23     k00532: jmp k00552
0023AE  3  A5 rr        k00537: lda vara
0023B0  3  18                   clc
0023B1  3  69 01                adc #1
0023B3  3  85 rr                sta vara
0023B5  3  A9 03        k00552: lda #3
0023B7  3  C5 rr                cmp vard
0023B9  3  F0 03                beq *+5
0023BB  3  4C C5 23             jmp k00582
0023BE  3  A9 00                lda #0
0023C0  3  85 rr                sta vard
0023C2  3  4C CC 23             jmp k00597
0023C5  3  A5 rr        k00582: lda vard
0023C7  3  18                   clc
0023C8  3  69 01                adc #1
0023CA  3  85 rr                sta vard
0023CC  3  60           k00597: rts
0023CD  3               evnt11:
0023CD  3  A9 15                lda #21
0023CF  3  85 rr                sta chary
0023D1  3  A9 04                lda #4
0023D3  3  85 rr                sta charx
0023D5  3  A9 07                lda #7  	; MESSAGE
0023D7  3  20 CF 0D             jsr dmsg
0023DA  3  A9 15                lda #21
0023DC  3  85 rr                sta chary
0023DE  3  A9 0A                lda #10
0023E0  3  85 rr                sta charx
0023E2  3  A5 rr                lda numlif	; DISPLAY
0023E4  3  20 05 13             jsr disply
0023E7  3  A9 15                lda #21
0023E9  3  85 rr                sta chary
0023EB  3  A9 14                lda #20
0023ED  3  85 rr                sta charx
0023EF  3  A9 08                lda #8  	; MESSAGE
0023F1  3  20 CF 0D             jsr dmsg
0023F4  3  A9 15                lda #21
0023F6  3  85 rr                sta chary
0023F8  3  A9 1B                lda #27
0023FA  3  85 rr                sta charx
0023FC  3  A5 rr                lda varc	; DISPLAY
0023FE  3  20 05 13             jsr disply
002401  3  60                   rts
002402  3               evnt12:
002402  3  60                   rts
002403  3               evnt13:
002403  3  A9 02                lda #2
002405  3  85 rr                sta varm
002407  3  A9 00                lda #0
002409  3  85 rr                sta varj
00240B  3  A9 58                lda #88
00240D  3  85 rr                sta varo
00240F  3  A9 58                lda #88
002411  3  85 rr                sta varp
002413  3  A9 00                lda #0
002415  3  85 rr                sta varc
002417  3  A9 00                lda #0
002419  3  85 rr                sta vars
00241B  3  A9 01                lda #1
00241D  3  85 rr                sta vart
00241F  3  A9 0F                lda #15
002421  3  85 rr                sta varh
002423  3  A9 C8                lda #200
002425  3  85 rr                sta vari
002427  3  A9 03                lda #3
002429  3  85 rr                sta numlif
00242B  3  20 33 03             jsr cls		; CLS
00242E  3  A9 00                lda #0
002430  3  85 rr                sta chary
002432  3  A9 00                lda #0
002434  3  85 rr                sta charx
002436  3  A9 02                lda #2  	; MESSAGE
002438  3  20 CF 0D             jsr dmsg
00243B  3  A9 04                lda #4  	; MESSAGE
00243D  3  20 CF 0D             jsr dmsg
002440  3  A9 04                lda #4  	; MESSAGE
002442  3  20 CF 0D             jsr dmsg
002445  3  A9 05                lda #5  	; MESSAGE
002447  3  20 CF 0D             jsr dmsg
00244A  3  A9 04                lda #4 	; REPEAT
00244C  3  85 rr                sta loopa
00244E  3  A9 04        n00160: lda #4  	; MESSAGE
002450  3  20 CF 0D             jsr dmsg
002453  3  C6 rr                dec loopa	; ENDREPEAT
002455  3  F0 03                beq :+
002457  3  4C 4E 24             jmp n00160
00245A  3               :
00245A  3  A9 05                lda #5  	; MESSAGE
00245C  3  20 CF 0D             jsr dmsg
00245F  3  A9 03                lda #3 	; REPEAT
002461  3  85 rr                sta loopa
002463  3  A9 04        n00210: lda #4  	; MESSAGE
002465  3  20 CF 0D             jsr dmsg
002468  3  C6 rr                dec loopa	; ENDREPEAT
00246A  3  F0 03                beq :+
00246C  3  4C 63 24             jmp n00210
00246F  3               :
00246F  3  A9 05                lda #5  	; MESSAGE
002471  3  20 CF 0D             jsr dmsg
002474  3  A9 04                lda #4 	; REPEAT
002476  3  85 rr                sta loopa
002478  3  A9 04        n00259: lda #4  	; MESSAGE
00247A  3  20 CF 0D             jsr dmsg
00247D  3  C6 rr                dec loopa	; ENDREPEAT
00247F  3  F0 03                beq :+
002481  3  4C 78 24             jmp n00259
002484  3               :
002484  3  A9 05                lda #5  	; MESSAGE
002486  3  20 CF 0D             jsr dmsg
002489  3  A9 04                lda #4  	; MESSAGE
00248B  3  20 CF 0D             jsr dmsg
00248E  3  A9 04                lda #4  	; MESSAGE
002490  3  20 CF 0D             jsr dmsg
002493  3  A9 02                lda #2  	; MESSAGE
002495  3  20 CF 0D             jsr dmsg
002498  3  A9 04                lda #4  	; MESSAGE
00249A  3  20 CF 0D             jsr dmsg
00249D  3  A9 04                lda #4  	; MESSAGE
00249F  3  20 CF 0D             jsr dmsg
0024A2  3  A9 02                lda #2  	; MESSAGE
0024A4  3  20 CF 0D             jsr dmsg
0024A7  3  A9 00                lda #0
0024A9  3  85 rr                sta chary
0024AB  3  A9 00                lda #0
0024AD  3  85 rr                sta charx
0024AF  3  A9 06                lda #6  	; MESSAGE
0024B1  3  20 CF 0D             jsr dmsg
0024B4  3  A9 00                lda #0
0024B6  3  85 rr                sta chary
0024B8  3  A9 1F                lda #31
0024BA  3  85 rr                sta charx
0024BC  3  A9 06                lda #6  	; MESSAGE
0024BE  3  20 CF 0D             jsr dmsg
0024C1  3  A9 17                lda #23
0024C3  3  85 rr                sta chary
0024C5  3  A9 1F                lda #31
0024C7  3  85 rr                sta charx
0024C9  3  A9 06                lda #6  	; MESSAGE
0024CB  3  20 CF 0D             jsr dmsg
0024CE  3  A9 17                lda #23
0024D0  3  85 rr                sta chary
0024D2  3  A9 00                lda #0
0024D4  3  85 rr                sta charx
0024D6  3  A9 06                lda #6  	; MESSAGE
0024D8  3  20 CF 0D             jsr dmsg
0024DB  3  A9 14                lda #20
0024DD  3  85 rr                sta chary
0024DF  3  A9 00                lda #0
0024E1  3  85 rr                sta charx
0024E3  3  A9 06                lda #6  	; MESSAGE
0024E5  3  20 CF 0D             jsr dmsg
0024E8  3  A9 14                lda #20
0024EA  3  85 rr                sta chary
0024EC  3  A9 1F                lda #31
0024EE  3  85 rr                sta charx
0024F0  3  A9 06                lda #6  	; MESSAGE
0024F2  3  20 CF 0D             jsr dmsg
0024F5  3  60                   rts
0024F6  3               evnt14:
0024F6  3  60                   rts
0024F7  3               evnt15:
0024F7  3  A9 00                lda #0
0024F9  3  A0 05                ldy #5
0024FB  3  D1 68                cmp (z80_ix),y
0024FD  3  F0 03                beq *+5
0024FF  3  4C 22 25             jmp p00094
002502  3  A9 01                lda #1
002504  3  85 rr                sta varj
002506  3  A9 05                lda #5	; SPAWN
002508  3  85 62                sta z80_c
00250A  3  A9 09                lda #9
00250C  3  85 63                sta z80_b
00250E  3  20 74 06             jsr spawn
002511  3  A9 FF                lda #255	; REMOVE
002513  3  A0 05                ldy #5
002515  3  91 68                sta (z80_ix),y
002517  3  A9 08                lda #8	; SPAWN
002519  3  85 62                sta z80_c
00251B  3  A9 07                lda #7
00251D  3  85 63                sta z80_b
00251F  3  20 74 06             jsr spawn
002522  3  60           p00094: rts
002523  3               evnt16:
002523  3  A9 0A                lda #10 	; DELAY
002525  3  20 5D 02             jsr delay
002528  3  A9 00                lda #0
00252A  3  85 rr                sta varj
00252C  3  A9 00                lda #0
00252E  3  85 rr                sta varb
002530  3  A5 rr                lda varo
002532  3  A0 08                ldy #8
002534  3  91 68                sta (z80_ix),y
002536  3  A5 rr                lda varp
002538  3  A0 09                ldy #9
00253A  3  91 68                sta (z80_ix),y
00253C  3  A9 0A                lda #10
00253E  3  85 rr                sta chary
002540  3  A9 08                lda #8
002542  3  85 rr                sta charx
002544  3  A9 0E                lda #14  	; MESSAGE
002546  3  20 CF 0D             jsr dmsg
002549  3  A5 rr                lda numlif
00254B  3  38                   sec
00254C  3  E9 01                sbc #1
00254E  3  85 rr                sta numlif
002550  3  A9 32                lda #50 	; DELAY
002552  3  20 5D 02             jsr delay
002555  3  60                   rts
002556  3               evnt17:
002556  3  A9 1F                lda #31
002558  3  85 rr                sta varm
00255A  3  A9 32                lda #50 	; DELAY
00255C  3  20 5D 02             jsr delay
00255F  3  60                   rts
002560  3               evnt18:
002560  3  A9 5A                lda #90 	; DELAY
002562  3  20 5D 02             jsr delay
002565  3  A9 05                lda #5
002567  3  85 rr                sta chary
002569  3  A9 08                lda #8
00256B  3  85 rr                sta charx
00256D  3  A9 13                lda #19  	; MESSAGE
00256F  3  20 CF 0D             jsr dmsg
002572  3  A9 5A                lda #90 	; DELAY
002574  3  20 5D 02             jsr delay
002577  3  A9 08                lda #8
002579  3  85 rr                sta chary
00257B  3  A9 04                lda #4
00257D  3  85 rr                sta charx
00257F  3  A9 14                lda #20  	; MESSAGE
002581  3  20 CF 0D             jsr dmsg
002584  3  A9 5A                lda #90 	; DELAY
002586  3  20 5D 02             jsr delay
002589  3  A9 0A                lda #10
00258B  3  85 rr                sta chary
00258D  3  A9 07                lda #7
00258F  3  85 rr                sta charx
002591  3  A9 15                lda #21  	; MESSAGE
002593  3  20 CF 0D             jsr dmsg
002596  3  A9 5A                lda #90 	; DELAY
002598  3  20 5D 02             jsr delay
00259B  3  A9 0C                lda #12
00259D  3  85 rr                sta chary
00259F  3  A9 07                lda #7
0025A1  3  85 rr                sta charx
0025A3  3  A9 16                lda #22  	; MESSAGE
0025A5  3  20 CF 0D             jsr dmsg
0025A8  3  A9 5A                lda #90 	; DELAY
0025AA  3  20 5D 02             jsr delay
0025AD  3  A9 0E                lda #14
0025AF  3  85 rr                sta chary
0025B1  3  A9 05                lda #5
0025B3  3  85 rr                sta charx
0025B5  3  A9 17                lda #23  	; MESSAGE
0025B7  3  20 CF 0D             jsr dmsg
0025BA  3  A9 C8                lda #200 	; DELAY
0025BC  3  20 5D 02             jsr delay
0025BF  3  A9 1E                lda #30 	; DELAY
0025C1  3  20 5D 02             jsr delay
0025C4  3  A9 09                lda #9
0025C6  3  85 rr                sta chary
0025C8  3  A9 0A                lda #10
0025CA  3  85 rr                sta charx
0025CC  3  A9 21                lda #33  	; MESSAGE
0025CE  3  20 CF 0D             jsr dmsg
0025D1  3  A9 5A                lda #90 	; DELAY
0025D3  3  20 5D 02             jsr delay
0025D6  3  A9 0B                lda #11
0025D8  3  85 rr                sta chary
0025DA  3  A9 0C                lda #12
0025DC  3  85 rr                sta charx
0025DE  3  A9 1F                lda #31  	; MESSAGE
0025E0  3  20 CF 0D             jsr dmsg
0025E3  3  A9 5A                lda #90 	; DELAY
0025E5  3  20 5D 02             jsr delay
0025E8  3  A9 0D                lda #13
0025EA  3  85 rr                sta chary
0025EC  3  A9 07                lda #7
0025EE  3  85 rr                sta charx
0025F0  3  A9 20                lda #32  	; MESSAGE
0025F2  3  20 CF 0D             jsr dmsg
0025F5  3  A9 64                lda #100 	; DELAY
0025F7  3  20 5D 02             jsr delay
0025FA  3  60                   rts
0025FB  3               evnt19:
0025FB  3  60                   rts
0025FC  3               evnt20:
0025FC  3  60                   rts
0025FD  3  60           ptcusr: rts
0025FE  3               msgdat:
0025FE  3  47 41 4D 45          .byte "GAMEfOVER",141
002602  3  66 4F 56 45  
002606  3  52 8D        
002608  3  47 45 54 20          .byte "GET READY",141
00260C  3  52 45 41 44  
002610  3  59 8D        
002612  3  61 62 62 62          .byte "abbbbbcbbbbbcbbbbbbcbbbbbcbbbbba",141
002616  3  62 62 63 62  
00261A  3  62 62 62 62  
002633  3  61 69 69 69          .byte "aiiiiijiiiiijiiiiiijiiiiijiiiiia",141
002637  3  69 69 6A 69  
00263B  3  69 69 69 69  
002654  3  64 66 66 66          .byte "dffffffffffffffffffffffffffffffg",141
002658  3  66 66 66 66  
00265C  3  66 66 66 66  
002675  3  65 66 66 66          .byte "effffffffffffffffffffffffffffffh",141
002679  3  66 66 66 66  
00267D  3  66 66 66 66  
002696  3  61 8D                .byte "a",141
002698  3  4C 49 56 45          .byte "LIVESk",141
00269C  3  53 6B 8D     
00269F  3  42 4C 4F 4F          .byte "BLOOMSk",141
0026A3  3  4D 53 6B 8D  
0026A7  3  66 66 66 46          .byte "fffFINDfTHEfGAIAfSTONEfffff",141
0026AB  3  49 4E 44 66  
0026AF  3  54 48 45 66  
0026C3  3  66 66 4E 4F          .byte "ffNOWfFINDfTHEfMOONfPOOLff",141
0026C7  3  57 66 46 49  
0026CB  3  4E 44 66 54  
0026DE  3  66 66 4E 4F          .byte "ffNOWfFINDfTENfMOONfBLOOMSff",141
0026E2  3  57 66 46 49  
0026E6  3  4E 44 66 54  
0026FB  3  66 66 66 66          .byte "ffffRETURNfTHEfGAIAfSTONEffff",141
0026FF  3  52 45 54 55  
002703  3  52 4E 66 54  
002719  3  66 54 41 4B          .byte "fTAKEfTHEfBLOOMSfTOfTHEfPOOLf",141
00271D  3  45 66 54 48  
002721  3  45 66 42 4C  
002737  3  4F 55 43 48          .byte "OUCHfTHATfHURTrr",141
00273B  3  66 54 48 41  
00273F  3  54 66 48 55  
002748  3  6C 6D 8D             .byte "lm",141
00274B  3  6F 6E 8D             .byte "on",141
00274E  3  71 8D                .byte "q",141
002750  3  70 8D                .byte "p",141
002752  3  43 4F 4E 47          .byte "CONGRATULATIONSrr",141
002756  3  52 41 54 55  
00275A  3  4C 41 54 49  
002764  3  4E 49 58 59          .byte "NIXYfHASfSAVEDfTHEfGLADE",141
002768  3  66 48 41 53  
00276C  3  66 53 41 56  
00277D  3  46 52 4F 4D          .byte "FROMfCERTAINfDOOM",141
002781  3  66 43 45 52  
002785  3  54 41 49 4E  
00278F  3  42 55 54 66          .byte "BUTfWHEREfDIDfTHE",141
002793  3  57 48 45 52  
002797  3  45 66 44 49  
0027A1  3  43 4F 52 52          .byte "CORRUPTIONfCOMEfFROM?",141
0027A5  3  55 50 54 49  
0027A9  3  4F 4E 66 43  
0027B7  3  61 66 4B 45          .byte "afKEYBOARDfa",141
0027BB  3  59 42 4F 41  
0027BF  3  52 44 66 61  
0027C4  3  61 66 4B 45          .byte "afKEMPSTONfa",141
0027C8  3  4D 50 53 54  
0027CC  3  4F 4E 66 61  
0027D1  3  61 66 53 49          .byte "afSINCLAIRfa",141
0027D5  3  4E 43 4C 41  
0027D9  3  49 52 66 61  
0027DE  3  73 74 8D             .byte "st",141
0027E1  3  43 48 41 4E          .byte "CHANGEKEYS",141
0027E5  3  47 45 4B 45  
0027E9  3  59 53 8D     
0027EC  3  66 50 4C 41          .byte "fPLAYGAMEf",141
0027F0  3  59 47 41 4D  
0027F4  3  45 66 8D     
0027F7  3  50 52 45 53          .byte "PRESSfANYfKEY",141
0027FB  3  53 66 41 4E  
0027FF  3  59 66 4B 45  
002805  3  4E 49 58 59          .byte "NIXYf2",141
002809  3  66 32 8D     
00280C  3  54 48 45 66          .byte "THEfSEEDSfOFfDOOM",141
002810  3  53 45 45 44  
002814  3  53 66 4F 46  
00281E  3  43 4F 4D 49          .byte "COMINGfSOON",141
002822  3  4E 47 66 53  
002826  3  4F 4F 4E 8D  
00282A  3               nummsg:
00282A  3  22                   .byte 34
00282B  3               chgfx:
00282B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00282F  3  00 00 00 00  
002833  3  61 D4 D0 66          .byte 97,212,208,102,13,77,6,8
002837  3  0D 4D 06 08  
00283B  3  86 29 0D 86          .byte 134,41,13,134,48,73,104,50
00283F  3  30 49 68 32  
002843  3  02 80 08 00          .byte 2,128,8,0,64,1,0,16
002847  3  40 01 00 10  
00284B  3  60 EE EE 06          .byte 96,238,238,6,112,119,55,6
00284F  3  70 77 37 06  
002853  3  E0 EE CE 0C          .byte 224,238,206,12,96,119,119,6
002857  3  60 77 77 06  
00285B  3  60 AE EA 06          .byte 96,174,234,6,112,87,53,6
00285F  3  70 57 35 06  
002863  3  60 AE CA 04          .byte 96,174,202,4,112,86,37,3
002867  3  70 56 25 03  
00286B  3  60 6C 0E 2E          .byte 96,108,14,46,0,11,3,0
00286F  3  00 0B 03 00  
002873  3  00 06 06 00          .byte 0,6,6,0,8,99,103,7
002877  3  08 63 67 07  
00287B  3  00 C0 D0 00          .byte 0,192,208,0,100,112,118,6
00287F  3  64 70 76 06  
002883  3  60 E6 E6 00          .byte 96,230,230,0,8,96,96,0
002887  3  08 60 60 00  
00288B  3  60 6C 0A 2E          .byte 96,108,10,46,0,11,3,0
00288F  3  00 0B 03 00  
002893  3  00 03 03 08          .byte 0,3,3,8,0,99,101,7
002897  3  00 63 65 07  
00289B  3  00 C0 D0 00          .byte 0,192,208,0,100,80,118,6
00289F  3  64 50 76 06  
0028A3  3  60 A6 E6 00          .byte 96,166,230,0,8,96,96,0
0028A7  3  08 60 60 00  
0028AB  3  60 F9 9E 9F          .byte 96,249,158,159,255,255,253,255
0028AF  3  FF FF FD FF  
0028B3  3  60 F9 FF F3          .byte 96,249,255,243,225,97,243,255
0028B7  3  E1 61 F3 FF  
0028BB  3  60 F9 FF BF          .byte 96,249,255,191,251,255,239,255
0028BF  3  FB FF EF FF  
0028C3  3  08 00 00 00          .byte 8,0,0,0,0,64,2,0
0028C7  3  00 40 02 00  
0028CB  3  38 74 DC F0          .byte 56,116,220,240,164,109,7,1
0028CF  3  A4 6D 07 01  
0028D3  3  0C 16 3D A3          .byte 12,22,61,163,202,112,128,0
0028D7  3  CA 70 80 00  
0028DB  3  00 1C 3E 63          .byte 0,28,62,99,73,44,4,12
0028DF  3  49 2C 04 0C  
0028E3  3  18 2C 3C 7A          .byte 24,44,60,122,70,18,24,56
0028E7  3  46 12 18 38  
0028EB  3  00 1E 3F 61          .byte 0,30,63,97,77,42,24,24
0028EF  3  4D 2A 18 18  
0028F3  3  00 CC 32 28          .byte 0,204,50,40,20,20,16,32
0028F7  3  14 14 10 20  
0028FB  3  00 33 4E 12          .byte 0,51,78,18,36,36,4,0
0028FF  3  24 24 04 00  
002903  3  00 00 40 A6          .byte 0,0,64,166,41,84,16,16
002907  3  29 54 10 10  
00290B  3  00 00 00 00          .byte 0,0,0,0,8,9,37,21
00290F  3  08 09 25 15  
002913  3  00 00 20 A0          .byte 0,0,32,160,146,84,85,85
002917  3  92 54 55 55  
00291B  3  00 38 CE 33          .byte 0,56,206,51,29,13,7,1
00291F  3  1D 0D 07 01  
002923  3  00 1C 33 6C          .byte 0,28,51,108,220,184,224,0
002927  3  DC B8 E0 00  
00292B  3  01 01 C1 30          .byte 1,1,193,48,13,7,3,0
00292F  3  0D 07 03 00  
002933  3  00 80 83 8C          .byte 0,128,131,140,80,224,192,128
002937  3  50 E0 C0 80  
00293B  3  00 80 80 80          .byte 0,128,128,128,0,128,128,128
00293F  3  00 80 80 80  
002943  3  01 01 01 00          .byte 1,1,1,0,1,1,1,0
002947  3  01 01 01 00  
00294B  3  00 6B DD 77          .byte 0,107,221,119,18,64,2,64
00294F  3  12 40 02 40  
002953  3  00 00 00 18          .byte 0,0,0,24,164,36,194,7
002957  3  A4 24 C2 07  
00295B  3  00 00 00 18          .byte 0,0,0,24,37,68,82,224
00295F  3  25 44 52 E0  
002963  3  18 1C 0B 10          .byte 24,28,11,16,24,24,8,16
002967  3  18 18 08 10  
00296B  3  18 18 08 D0          .byte 24,24,8,208,56,24,8,16
00296F  3  38 18 08 10  
002973  3  18 18 08 10          .byte 24,24,8,16,8,0,8,0
002977  3  08 00 08 00  
00297B  3  00 08 00 08          .byte 0,8,0,8,16,8,24,24
00297F  3  10 08 18 18  
002983  3  4C 14 0C 54          .byte 76,20,12,84,12,20,76,16
002987  3  0C 14 4C 10  
00298B  3  01 01 01 00          .byte 1,1,1,0,29,35,41,198
00298F  3  1D 23 29 C6  
002993  3  00 80 80 80          .byte 0,128,128,128,0,156,178,201
002997  3  00 9C B2 C9  
00299B  3  00 00 00 00          .byte 0,0,0,0,0,57,127,198
00299F  3  00 39 7F C6  
0029A3  3  00 01 03 1F          .byte 0,1,3,31,124,241,198,24
0029A7  3  7C F1 C6 18  
0029AB  3  80 C0 E0 7C          .byte 128,192,224,124,31,195,48,140
0029AF  3  1F C3 30 8C  
0029B3  3  00 00 00 00          .byte 0,0,0,0,192,248,60,131
0029B7  3  C0 F8 3C 83  
0029BB  3  55 6B 55 AB          .byte 85,107,85,171,213,235,46,50
0029BF  3  D5 EB 2E 32  
0029C3  3  DD EF FD AB          .byte 221,239,253,171,253,191,245,239
0029C7  3  FD BF F5 EF  
0029CB  3  DD EF FD AB          .byte 221,239,253,171,253,191,245,239
0029CF  3  FD BF F5 EF  
0029D3  3  01 EE 99 FF          .byte 1,238,153,255,85,170,21,0
0029D7  3  55 AA 15 00  
0029DB  3  60 E0 E8 02          .byte 96,224,232,2,112,123,75,120
0029DF  3  70 7B 4B 78  
0029E3  3  00 0E 0E 2E          .byte 0,14,14,46,0,119,87,118
0029E7  3  00 77 57 76  
0029EB  3  00 80 60 BF          .byte 0,128,96,191,217,102,157,0
0029EF  3  D9 66 9D 00  
0029F3  3  DD FF CD C7          .byte 221,255,205,199,197,191,245,239
0029F7  3  C5 BF F5 EF  
0029FB  3  00 00 30 F0          .byte 0,0,48,240,208,224,128,0
0029FF  3  D0 E0 80 00  
002A03  3  1C 1F 17 09          .byte 28,31,23,9,6,1,0,0
002A07  3  06 01 00 00  
002A0B  3  84 11 40 05          .byte 132,17,64,5,16,129,4,32
002A0F  3  10 81 04 20  
002A13  3  C0 50 88 B0          .byte 192,80,136,176,18,141,180,19
002A17  3  12 8D B4 13  
002A1B  3  C6 5A 89 B6          .byte 198,90,137,182,18,141,180,19
002A1F  3  12 8D B4 13  
002A23  3  06 0A 69 26          .byte 6,10,105,38,26,197,180,19
002A27  3  1A C5 B4 13  
002A2B  3  C0 56 02 58          .byte 192,86,2,88,10,96,43,1
002A2F  3  0A 60 2B 01  
002A33  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002A37  3  00 00 00 00  
002A3B  3  4C 14 00 54          .byte 76,20,0,84,0,16,0,0
002A3F  3  00 10 00 00  
002A43  3  E0 B8 FC 9E          .byte 224,184,252,158,159,253,223,251
002A47  3  9F FD DF FB  
002A4B  3  0F 3F 7D EF          .byte 15,63,125,239,127,251,191,255
002A4F  3  7F FB BF FF  
002A53  3  12 40 12 40          .byte 18,64,18,64,2,0,0,0
002A57  3  02 00 00 00  
002A5B  3  FF F5 F7 EA          .byte 255,245,247,234,156,248,176,224
002A5F  3  9C F8 B0 E0  
002A63  3  FF AF EF 77          .byte 255,175,239,119,57,31,13,7
002A67  3  39 1F 0D 07  
002A6B  3  07 0D 1F 39          .byte 7,13,31,57,119,235,175,255
002A6F  3  77 EB AF FF  
002A73  3  E0 B0 F8 9C          .byte 224,176,248,156,238,215,181,255
002A77  3  EE D7 B5 FF  
002A7B  3  9A 00 A4 00          .byte 154,0,164,0,1,8,64,0
002A7F  3  01 08 40 00  
002A83  3  00 00 B8 7C          .byte 0,0,184,124,190,156,64,60
002A87  3  BE 9C 40 3C  
002A8B  3  00 00 1D 3E          .byte 0,0,29,62,125,57,2,60
002A8F  3  7D 39 02 3C  
002A93  3  00 00 C6 29          .byte 0,0,198,41,16,169,70,0
002A97  3  10 A9 46 00  
002A9B  3  82 00 10 00          .byte 130,0,16,0,1,8,0,64
002A9F  3  01 08 00 40  
002AA3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002AA7  3  00 00 00 00  
002AAB  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002AAF  3  00 00 00 00  
002AB3  3  18 18 08 10          .byte 24,24,8,16,24,24,8,16
002AB7  3  18 18 08 10  
002ABB  3  93 54 20 20          .byte 147,84,32,32,32,16,146,84
002ABF  3  20 10 92 54  
002AC3  3  00 00 10 BA          .byte 0,0,16,186,166,78,108,56
002AC7  3  A6 4E 6C 38  
002ACB  3  18 26 24 30          .byte 24,38,36,48,216,86,20,16
002ACF  3  D8 56 14 10  
002AD3  3  00 00 44 54          .byte 0,0,68,84,146,186,186,84
002AD7  3  92 BA BA 54  
002ADB  3  60 F9 FF BF          .byte 96,249,255,191,251,255,239,255
002ADF  3  FB FF EF FF  
002AE3  3  00 00 40 02          .byte 0,0,64,2,0,0,4,0
002AE7  3  00 00 04 00  
002AEB  3  02 00 40 08          .byte 2,0,64,8,20,8,0,16
002AEF  3  14 08 00 10  
002AF3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002AF7  3  00 00 00 00  
002AFB  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002AFF  3  00 00 00 00  
002B03  3  20 80 20 20          .byte 32,128,32,32,128,32,0,32
002B07  3  80 20 00 20  
002B0B  3  4C 14 0C 54          .byte 76,20,12,84,12,20,76,16
002B0F  3  0C 14 4C 10  
002B13  3  40 A4 4A 04          .byte 64,164,74,4,32,82,37,2
002B17  3  20 52 25 02  
002B1B  3  00 03 18 40          .byte 0,3,24,64,0,128,32,0
002B1F  3  00 80 20 00  
002B23  3  6D 00 08 10          .byte 109,0,8,16,16,0,40,68
002B27  3  10 00 28 44  
002B2B  3  00 02 01 08          .byte 0,2,1,8,4,35,16,140
002B2F  3  04 23 10 8C  
002B33  3  BC 26 5E 25          .byte 188,38,94,37,37,16,14,0
002B37  3  25 10 0E 00  
002B3B  3  A0 80 20 A0          .byte 160,128,32,160,0,32,160,128
002B3F  3  00 20 A0 80  
002B43  3  05 01 04 05          .byte 5,1,4,5,0,5,4,1
002B47  3  00 05 04 01  
002B4B  3  00 05 01 04          .byte 0,5,1,4,5,0,1,0
002B4F  3  05 00 01 00  
002B53  3  20 A0 80 20          .byte 32,160,128,32,160,0,32,0
002B57  3  A0 00 20 00  
002B5B  3  24 08 04 28          .byte 36,8,4,40,4,8,36,8
002B5F  3  04 08 24 08  
002B63  3  00 6A D5 74          .byte 0,106,213,116,17,68,16,0
002B67  3  11 44 10 00  
002B6B  3  00 2B 55 17          .byte 0,43,85,23,68,17,4,0
002B6F  3  44 11 04 00  
002B73  3  24 08 04 28          .byte 36,8,4,40,0,8,0,0
002B77  3  00 08 00 00  
002B7B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002B7F  3  00 00 00 00  
002B83  3  14 28 80 20          .byte 20,40,128,32,128,0,0,0
002B87  3  80 00 00 00  
002B8B  3  28 14 01 04          .byte 40,20,1,4,1,0,0,0
002B8F  3  01 00 00 00  
002B93  3  21 04 50 02          .byte 33,4,80,2,168,1,68,16
002B97  3  A8 01 44 10  
002B9B  3  48 82 14 41          .byte 72,130,20,65,8,162,8,82
002B9F  3  08 A2 08 52  
002BA3  3  00 00 00 10          .byte 0,0,0,16,0,0,0,0
002BA7  3  00 00 00 00  
002BAB  3  E0 38 1C 0E          .byte 224,56,28,14,14,7,7,7
002BAF  3  0E 07 07 07  
002BB3  3  07 07 07 0E          .byte 7,7,7,14,14,28,56,224
002BB7  3  0E 1C 38 E0  
002BBB  3  00 6B DD 77          .byte 0,107,221,119,18,64,2,64
002BBF  3  12 40 02 40  
002BC3  3  02 07 06 0B          .byte 2,7,6,11,10,203,38,89
002BC7  3  0A CB 26 59  
002BCB  3  C0 60 E0 50          .byte 192,96,224,80,208,83,228,154
002BCF  3  D0 53 E4 9A  
002BD3  3  07 1F 3F 26          .byte 7,31,63,38,106,102,106,127
002BD7  3  6A 66 6A 7F  
002BDB  3  E0 F8 FC 9C          .byte 224,248,252,156,174,158,190,254
002BDF  3  AE 9E BE FE  
002BE3  3  79 76 77 77          .byte 121,118,119,119,123,125,126,87
002BE7  3  7B 7D 7E 57  
002BEB  3  9E 6E EE EE          .byte 158,110,238,238,222,190,126,218
002BEF  3  DE BE 7E DA  
002BF3  3  00 00 04 05          .byte 0,0,4,5,73,74,42,42
002BF7  3  49 4A 2A 2A  
002BFB  3  00 6B DD 77          .byte 0,107,221,119,170,85,136,0
002BFF  3  AA 55 88 00  
002C03  3  00 2B 55 17          .byte 0,43,85,23,68,17,4,0
002C07  3  44 11 04 00  
002C0B  3  00 92 D6 54          .byte 0,146,214,84,108,56,56,16
002C0F  3  6C 38 38 10  
002C13  3  00 6B DD 77          .byte 0,107,221,119,170,85,136,0
002C17  3  AA 55 88 00  
002C1B  3  00 00 EE 51          .byte 0,0,238,81,170,0,0,0
002C1F  3  AA 00 00 00  
002C23  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002C27  3  00 00 00 00  
002C2B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002C2F  3  00 00 00 00  
002C33  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002C37  3  00 00 00 00  
002C3B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002C3F  3  00 00 00 00  
002C43  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002C47  3  00 00 00 00  
002C4B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002C4F  3  00 00 00 00  
002C53  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002C57  3  00 00 00 00  
002C5B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002C5F  3  00 00 00 00  
002C63  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002C67  3  00 00 00 00  
002C6B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002C6F  3  00 00 00 00  
002C73  3  00 00 01 03          .byte 0,0,1,3,6,13,13,19
002C77  3  06 0D 0D 13  
002C7B  3  00 00 E0 90          .byte 0,0,224,144,96,160,176,224
002C7F  3  60 A0 B0 E0  
002C83  3  C0 00 40 40          .byte 192,0,64,64,192,96,144,192
002C87  3  C0 60 90 C0  
002C8B  3  23 20 01 03          .byte 35,32,1,3,3,6,9,1
002C8F  3  03 06 09 01  
002C93  3  00 3C 66 FB          .byte 0,60,102,251,253,255,255,255
002C97  3  FD FF FF FF  
002C9B  3  00 3C 66 FB          .byte 0,60,102,251,253,253,253,255
002C9F  3  FD FD FD FF  
002CA3  3  7F 3F 1F 0F          .byte 127,63,31,15,7,3,1,0
002CA7  3  07 03 01 00  
002CAB  3  FE FC F8 F0          .byte 254,252,248,240,224,192,128,0
002CAF  3  E0 C0 80 00  
002CB3  3  66 FF FF FF          .byte 102,255,255,255,126,60,24,0
002CB7  3  7E 3C 18 00  
002CBB  3  00 3C 4A BF          .byte 0,60,74,191,70,44,24,0
002CBF  3  46 2C 18 00  
002CC3  3  0A 65 B7 02          .byte 10,101,183,2,9,7,1,0
002CC7  3  09 07 01 00  
002CCB  3  50 A6 ED C0          .byte 80,166,237,192,64,144,224,128
002CCF  3  40 90 E0 80  
002CD3  3  80 00 00 00          .byte 128,0,0,0,0,0,0,0
002CD7  3  00 00 00 00  
002CDB  3  00 6B DD 77          .byte 0,107,221,119,18,64,2,64
002CDF  3  12 40 02 40  
002CE3  3  00 6B DD 77          .byte 0,107,221,119,170,85,136,0
002CE7  3  AA 55 88 00  
002CEB  3               bprop:
002CEB  3  00                   .byte 0
002CEC  3  02                   .byte 2
002CED  3  02                   .byte 2
002CEE  3  00                   .byte 0
002CEF  3  02                   .byte 2
002CF0  3  02                   .byte 2
002CF1  3  01                   .byte 1
002CF2  3  01                   .byte 1
002CF3  3  02                   .byte 2
002CF4  3  02                   .byte 2
002CF5  3  02                   .byte 2
002CF6  3  02                   .byte 2
002CF7  3  01                   .byte 1
002CF8  3  01                   .byte 1
002CF9  3  01                   .byte 1
002CFA  3  01                   .byte 1
002CFB  3  05                   .byte 5
002CFC  3  05                   .byte 5
002CFD  3  05                   .byte 5
002CFE  3  08                   .byte 8
002CFF  3  00                   .byte 0
002D00  3  00                   .byte 0
002D01  3  00                   .byte 0
002D02  3  00                   .byte 0
002D03  3  00                   .byte 0
002D04  3  00                   .byte 0
002D05  3  00                   .byte 0
002D06  3  00                   .byte 0
002D07  3  00                   .byte 0
002D08  3  00                   .byte 0
002D09  3  00                   .byte 0
002D0A  3  00                   .byte 0
002D0B  3  03                   .byte 3
002D0C  3  03                   .byte 3
002D0D  3  03                   .byte 3
002D0E  3  03                   .byte 3
002D0F  3  01                   .byte 1
002D10  3  00                   .byte 0
002D11  3  00                   .byte 0
002D12  3  00                   .byte 0
002D13  3  00                   .byte 0
002D14  3  00                   .byte 0
002D15  3  00                   .byte 0
002D16  3  00                   .byte 0
002D17  3  03                   .byte 3
002D18  3  03                   .byte 3
002D19  3  00                   .byte 0
002D1A  3  00                   .byte 0
002D1B  3  00                   .byte 0
002D1C  3  00                   .byte 0
002D1D  3  00                   .byte 0
002D1E  3  00                   .byte 0
002D1F  3  00                   .byte 0
002D20  3  01                   .byte 1
002D21  3  02                   .byte 2
002D22  3  02                   .byte 2
002D23  3  01                   .byte 1
002D24  3  00                   .byte 0
002D25  3  00                   .byte 0
002D26  3  00                   .byte 0
002D27  3  06                   .byte 6
002D28  3  06                   .byte 6
002D29  3  06                   .byte 6
002D2A  3  06                   .byte 6
002D2B  3  06                   .byte 6
002D2C  3  05                   .byte 5
002D2D  3  06                   .byte 6
002D2E  3  05                   .byte 5
002D2F  3  05                   .byte 5
002D30  3  06                   .byte 6
002D31  3  00                   .byte 0
002D32  3  00                   .byte 0
002D33  3  00                   .byte 0
002D34  3  00                   .byte 0
002D35  3  07                   .byte 7
002D36  3  00                   .byte 0
002D37  3  00                   .byte 0
002D38  3  00                   .byte 0
002D39  3  08                   .byte 8
002D3A  3  00                   .byte 0
002D3B  3  00                   .byte 0
002D3C  3  00                   .byte 0
002D3D  3  00                   .byte 0
002D3E  3  00                   .byte 0
002D3F  3  00                   .byte 0
002D40  3  00                   .byte 0
002D41  3  05                   .byte 5
002D42  3  07                   .byte 7
002D43  3  08                   .byte 8
002D44  3  06                   .byte 6
002D45  3  00                   .byte 0
002D46  3  00                   .byte 0
002D47  3  07                   .byte 7
002D48  3  00                   .byte 0
002D49  3  00                   .byte 0
002D4A  3  00                   .byte 0
002D4B  3  00                   .byte 0
002D4C  3  00                   .byte 0
002D4D  3  00                   .byte 0
002D4E  3  00                   .byte 0
002D4F  3  00                   .byte 0
002D50  3  00                   .byte 0
002D51  3  00                   .byte 0
002D52  3  01                   .byte 1
002D53  3  01                   .byte 1
002D54  3  00                   .byte 0
002D55  3  02                   .byte 2
002D56  3  00                   .byte 0
002D57  3  00                   .byte 0
002D58  3  00                   .byte 0
002D59  3  00                   .byte 0
002D5A  3  08                   .byte 8
002D5B  3  00                   .byte 0
002D5C  3  00                   .byte 0
002D5D  3  02                   .byte 2
002D5E  3  00                   .byte 0
002D5F  3  00                   .byte 0
002D60  3  00                   .byte 0
002D61  3  00                   .byte 0
002D62  3  00                   .byte 0
002D63  3  00                   .byte 0
002D64  3  00                   .byte 0
002D65  3  01                   .byte 1
002D66  3  02                   .byte 2
002D67  3  00                   .byte 0
002D68  3  00                   .byte 0
002D69  3  00                   .byte 0
002D6A  3  00                   .byte 0
002D6B  3  00                   .byte 0
002D6C  3  00                   .byte 0
002D6D  3  00                   .byte 0
002D6E  3  00                   .byte 0
002D6F  3  00                   .byte 0
002D70  3  00                   .byte 0
002D71  3  00                   .byte 0
002D72  3  00                   .byte 0
002D73  3  00                   .byte 0
002D74  3  00                   .byte 0
002D75  3  00                   .byte 0
002D76  3  00                   .byte 0
002D77  3  00                   .byte 0
002D78  3  00                   .byte 0
002D79  3  00                   .byte 0
002D7A  3  00                   .byte 0
002D7B  3  00                   .byte 0
002D7C  3  00                   .byte 0
002D7D  3  08                   .byte 8
002D7E  3  03                   .byte 3
002D7F  3  03                   .byte 3
002D80  3  00                   .byte 0
002D81  3  02                   .byte 2
002D82  3  01                   .byte 1
002D83  3               sprgfx:
002D83  3  00 00 03 E0          .byte 0,0,3,224,7,240,11,232,13,216,13,216,13,216,6,176,16,132,27,108,11,232,3,224,6,48,5,80,3,96,3,96
002D87  3  07 F0 0B E8  
002D8B  3  0D D8 0D D8  
002DA3  3  00 00 00 F8          .byte 0,0,0,248,1,252,2,250,3,118,3,118,3,118,1,172,4,33,6,219,2,250,0,248,1,140,1,84,0,216,0,216
002DA7  3  01 FC 02 FA  
002DAB  3  03 76 03 76  
002DC3  3  00 00 00 3E          .byte 0,0,0,62,0,127,128,190,128,221,128,221,128,221,0,107,65,8,193,182,128,190,0,62,0,99,0,85,0,54,0,54
002DC7  3  00 7F 80 BE  
002DCB  3  80 DD 80 DD  
002DE3  3  00 00 80 0F          .byte 0,0,128,15,192,31,160,47,96,55,96,55,96,55,192,26,16,66,176,109,160,47,128,15,192,24,64,21,128,13,128,13
002DE7  3  C0 1F A0 2F  
002DEB  3  60 37 60 37  
002E03  3  00 00 03 E0          .byte 0,0,3,224,7,240,11,232,13,232,13,232,14,216,23,80,24,64,11,168,3,236,7,244,12,24,3,72,3,96,0,96
002E07  3  07 F0 0B E8  
002E0B  3  0D E8 0D E8  
002E23  3  00 00 00 F8          .byte 0,0,0,248,1,252,2,250,3,122,3,122,3,182,5,212,6,16,2,234,0,251,1,253,3,6,0,210,0,216,0,24
002E27  3  01 FC 02 FA  
002E2B  3  03 7A 03 7A  
002E43  3  00 00 00 3E          .byte 0,0,0,62,0,127,128,190,128,222,128,222,128,237,1,117,1,132,128,186,192,62,64,127,128,193,128,52,0,54,0,6
002E47  3  00 7F 80 BE  
002E4B  3  80 DE 80 DE  
002E63  3  00 00 80 0F          .byte 0,0,128,15,192,31,160,47,160,55,160,55,96,59,64,93,0,97,160,46,176,15,208,31,96,48,32,13,128,13,128,1
002E67  3  C0 1F A0 2F  
002E6B  3  A0 37 A0 37  
002E83  3  00 00 03 E0          .byte 0,0,3,224,7,240,11,232,13,216,13,216,13,216,6,176,16,132,27,108,11,232,3,224,6,48,5,80,3,96,0,0
002E87  3  07 F0 0B E8  
002E8B  3  0D D8 0D D8  
002EA3  3  00 00 00 F8          .byte 0,0,0,248,1,252,2,250,3,118,3,118,3,118,1,172,4,33,6,219,2,250,0,248,1,140,1,84,0,216,0,0
002EA7  3  01 FC 02 FA  
002EAB  3  03 76 03 76  
002EC3  3  00 00 00 3E          .byte 0,0,0,62,0,127,128,190,128,221,128,221,128,221,0,107,65,8,193,182,128,190,0,62,0,99,0,85,0,54,0,0
002EC7  3  00 7F 80 BE  
002ECB  3  80 DD 80 DD  
002EE3  3  00 00 80 0F          .byte 0,0,128,15,192,31,160,47,96,55,96,55,96,55,192,26,16,66,176,109,160,47,128,15,192,24,64,21,128,13,0,0
002EE7  3  C0 1F A0 2F  
002EEB  3  60 37 60 37  
002F03  3  00 00 03 E0          .byte 0,0,3,224,7,240,11,232,11,216,11,216,13,184,5,116,1,12,10,232,27,224,23,240,12,24,9,96,3,96,3,0
002F07  3  07 F0 0B E8  
002F0B  3  0B D8 0B D8  
002F23  3  00 00 00 F8          .byte 0,0,0,248,1,252,2,250,2,246,2,246,3,110,1,93,0,67,2,186,6,248,5,252,3,6,2,88,0,216,0,192
002F27  3  01 FC 02 FA  
002F2B  3  02 F6 02 F6  
002F43  3  00 00 00 3E          .byte 0,0,0,62,0,127,128,190,128,189,128,189,128,219,64,87,192,16,128,174,1,190,1,127,128,193,0,150,0,54,0,48
002F47  3  00 7F 80 BE  
002F4B  3  80 BD 80 BD  
002F63  3  00 00 80 0F          .byte 0,0,128,15,192,31,160,47,96,47,96,47,224,54,208,21,48,4,160,43,128,111,192,95,96,48,128,37,128,13,0,12
002F67  3  C0 1F A0 2F  
002F6B  3  60 2F 60 2F  
002F83  3  00 00 01 B0          .byte 0,0,1,176,7,72,14,176,13,80,18,216,37,240,4,224,0,0,3,64,5,32,5,192,4,0,9,128,1,128,1,192
002F87  3  07 48 0E B0  
002F8B  3  0D 50 12 D8  
002FA3  3  00 00 00 6C          .byte 0,0,0,108,1,210,3,172,3,84,4,182,9,124,1,56,0,0,0,208,1,72,1,112,1,0,2,96,0,96,0,112
002FA7  3  01 D2 03 AC  
002FAB  3  03 54 04 B6  
002FC3  3  00 00 00 1B          .byte 0,0,0,27,128,116,0,235,0,213,129,45,2,95,0,78,0,0,0,52,0,82,0,92,0,64,0,152,0,24,0,28
002FC7  3  80 74 00 EB  
002FCB  3  00 D5 81 2D  
002FE3  3  00 00 C0 06          .byte 0,0,192,6,32,29,192,58,64,53,96,75,192,151,128,19,0,0,0,13,128,20,0,23,0,16,0,38,0,6,0,7
002FE7  3  20 1D C0 3A  
002FEB  3  40 35 60 4B  
003003  3  00 00 01 B0          .byte 0,0,1,176,7,72,14,176,29,80,34,216,5,240,8,224,0,0,3,192,5,240,9,192,16,0,3,96,6,96,7,112
003007  3  07 48 0E B0  
00300B  3  1D 50 22 D8  
003023  3  00 00 00 6C          .byte 0,0,0,108,1,210,3,172,7,84,8,182,1,124,2,56,0,0,0,240,1,124,2,112,4,0,0,216,1,152,1,220
003027  3  01 D2 03 AC  
00302B  3  07 54 08 B6  
003043  3  00 00 00 1B          .byte 0,0,0,27,128,116,0,235,1,213,130,45,0,95,0,142,0,0,0,60,0,95,0,156,1,0,0,54,0,102,0,119
003047  3  80 74 00 EB  
00304B  3  01 D5 82 2D  
003063  3  00 00 C0 06          .byte 0,0,192,6,32,29,192,58,64,117,96,139,192,23,128,35,0,0,0,15,192,23,0,39,0,64,128,13,128,25,192,29
003067  3  20 1D C0 3A  
00306B  3  40 75 60 8B  
003083  3  00 00 01 B0          .byte 0,0,1,176,7,72,30,176,37,80,2,216,5,240,8,224,0,0,2,224,13,24,49,192,0,32,7,104,12,56,14,48
003087  3  07 48 1E B0  
00308B  3  25 50 02 D8  
0030A3  3  00 00 00 6C          .byte 0,0,0,108,1,210,7,172,9,84,0,182,1,124,2,56,0,0,0,184,3,70,12,112,0,8,1,218,3,14,3,140
0030A7  3  01 D2 07 AC  
0030AB  3  09 54 00 B6  
0030C3  3  00 00 00 1B          .byte 0,0,0,27,128,116,1,235,2,85,128,45,0,95,0,142,0,0,0,46,128,209,3,28,0,2,128,118,128,195,0,227
0030C7  3  80 74 01 EB  
0030CB  3  02 55 80 2D  
0030E3  3  00 00 C0 06          .byte 0,0,192,6,32,29,192,122,64,149,96,11,192,23,128,35,0,0,128,11,96,52,0,199,128,0,160,29,224,48,192,56
0030E7  3  20 1D C0 7A  
0030EB  3  40 95 60 0B  
003103  3  01 B0 07 48          .byte 1,176,7,72,30,176,37,80,2,216,13,240,0,224,0,0,2,224,13,24,49,192,0,32,7,104,12,56,14,48,0,0
003107  3  1E B0 25 50  
00310B  3  02 D8 0D F0  
003123  3  00 6C 01 D2          .byte 0,108,1,210,7,172,9,84,0,182,3,124,0,56,0,0,0,184,3,70,12,112,0,8,1,218,3,14,3,140,0,0
003127  3  07 AC 09 54  
00312B  3  00 B6 03 7C  
003143  3  00 1B 80 74          .byte 0,27,128,116,1,235,2,85,128,45,0,223,0,14,0,0,0,46,128,209,3,28,0,2,128,118,128,195,0,227,0,0
003147  3  01 EB 02 55  
00314B  3  80 2D 00 DF  
003163  3  C0 06 20 1D          .byte 192,6,32,29,192,122,64,149,96,11,192,55,128,3,0,0,128,11,96,52,0,199,128,0,160,29,224,48,192,56,0,0
003167  3  C0 7A 40 95  
00316B  3  60 0B C0 37  
003183  3  00 00 01 B0          .byte 0,0,1,176,39,72,30,176,13,80,2,216,5,240,8,224,0,0,34,224,29,24,1,192,0,32,7,104,12,56,14,48
003187  3  27 48 1E B0  
00318B  3  0D 50 02 D8  
0031A3  3  00 00 00 6C          .byte 0,0,0,108,9,210,7,172,3,84,0,182,1,124,2,56,0,0,8,184,7,70,0,112,0,8,1,218,3,14,3,140
0031A7  3  09 D2 07 AC  
0031AB  3  03 54 00 B6  
0031C3  3  00 00 00 1B          .byte 0,0,0,27,130,116,1,235,0,213,128,45,0,95,0,142,0,0,2,46,129,209,0,28,0,2,128,118,128,195,0,227
0031C7  3  82 74 01 EB  
0031CB  3  00 D5 80 2D  
0031E3  3  00 00 C0 06          .byte 0,0,192,6,32,157,192,122,64,53,96,11,192,23,128,35,0,0,128,139,96,116,0,7,128,0,160,29,224,48,192,56
0031E7  3  20 9D C0 7A  
0031EB  3  40 35 60 0B  
003203  3  00 00 00 00          .byte 0,0,0,0,1,176,7,72,30,176,37,80,2,216,13,240,0,224,2,0,5,240,9,192,16,0,3,96,6,96,7,112
003207  3  01 B0 07 48  
00320B  3  1E B0 25 50  
003223  3  00 00 00 00          .byte 0,0,0,0,0,108,1,210,7,172,9,84,0,182,3,124,0,56,0,128,1,124,2,112,4,0,0,216,1,152,1,220
003227  3  00 6C 01 D2  
00322B  3  07 AC 09 54  
003243  3  00 00 00 00          .byte 0,0,0,0,0,27,128,116,1,235,2,85,128,45,0,223,0,14,0,32,0,95,0,156,1,0,0,54,0,102,0,119
003247  3  00 1B 80 74  
00324B  3  01 EB 02 55  
003263  3  00 00 00 00          .byte 0,0,0,0,192,6,32,29,192,122,64,149,96,11,192,55,128,3,0,8,192,23,0,39,0,64,128,13,128,25,192,29
003267  3  C0 06 20 1D  
00326B  3  C0 7A 40 95  
003283  3  00 00 0D 80          .byte 0,0,13,128,18,224,13,112,10,176,27,72,15,164,7,32,0,0,2,192,4,160,3,160,0,32,1,144,1,128,3,128
003287  3  12 E0 0D 70  
00328B  3  0A B0 1B 48  
0032A3  3  00 00 03 60          .byte 0,0,3,96,4,184,3,92,2,172,6,210,3,233,1,200,0,0,0,176,1,40,0,232,0,8,0,100,0,96,0,224
0032A7  3  04 B8 03 5C  
0032AB  3  02 AC 06 D2  
0032C3  3  00 00 00 D8          .byte 0,0,0,216,1,46,0,215,0,171,129,180,64,250,0,114,0,0,0,44,0,74,0,58,0,2,0,25,0,24,0,56
0032C7  3  01 2E 00 D7  
0032CB  3  00 AB 81 B4  
0032E3  3  00 00 00 36          .byte 0,0,0,54,128,75,192,53,192,42,32,109,144,62,128,28,0,0,0,11,128,18,128,14,128,0,64,6,0,6,0,14
0032E7  3  80 4B C0 35  
0032EB  3  C0 2A 20 6D  
003303  3  00 00 0D 80          .byte 0,0,13,128,18,224,13,112,10,184,27,68,15,160,7,16,0,0,3,192,15,160,3,144,0,8,6,192,6,96,14,224
003307  3  12 E0 0D 70  
00330B  3  0A B8 1B 44  
003323  3  00 00 03 60          .byte 0,0,3,96,4,184,3,92,2,174,6,209,3,232,1,196,0,0,0,240,3,232,0,228,0,2,1,176,1,152,3,184
003327  3  04 B8 03 5C  
00332B  3  02 AE 06 D1  
003343  3  00 00 00 D8          .byte 0,0,0,216,1,46,0,215,128,171,65,180,0,250,0,113,0,0,0,60,0,250,0,57,128,0,0,108,0,102,0,238
003347  3  01 2E 00 D7  
00334B  3  80 AB 41 B4  
003363  3  00 00 00 36          .byte 0,0,0,54,128,75,192,53,224,42,16,109,128,62,64,28,0,0,0,15,128,62,64,14,32,0,0,27,128,25,128,59
003367  3  80 4B C0 35  
00336B  3  E0 2A 10 6D  
003383  3  00 00 0D 80          .byte 0,0,13,128,18,224,13,120,10,164,27,64,15,160,7,16,0,0,7,64,24,176,3,140,4,0,22,224,28,48,12,112
003387  3  12 E0 0D 78  
00338B  3  0A A4 1B 40  
0033A3  3  00 00 03 60          .byte 0,0,3,96,4,184,3,94,2,169,6,208,3,232,1,196,0,0,1,208,6,44,0,227,1,0,5,184,7,12,3,28
0033A7  3  04 B8 03 5E  
0033AB  3  02 A9 06 D0  
0033C3  3  00 00 00 D8          .byte 0,0,0,216,1,46,128,215,64,170,1,180,0,250,0,113,0,0,0,116,1,139,192,56,0,64,1,110,1,195,0,199
0033C7  3  01 2E 80 D7  
0033CB  3  40 AA 01 B4  
0033E3  3  00 00 00 36          .byte 0,0,0,54,128,75,224,53,144,42,0,109,128,62,64,28,0,0,0,29,192,98,48,14,0,16,128,91,192,112,192,49
0033E7  3  80 4B E0 35  
0033EB  3  90 2A 00 6D  
003403  3  0D 80 12 E0          .byte 13,128,18,224,13,120,10,164,27,64,15,176,7,0,0,0,7,64,24,176,3,140,4,0,22,224,28,48,12,112,0,0
003407  3  0D 78 0A A4  
00340B  3  1B 40 0F B0  
003423  3  03 60 04 B8          .byte 3,96,4,184,3,94,2,169,6,208,3,236,1,192,0,0,1,208,6,44,0,227,1,0,5,184,7,12,3,28,0,0
003427  3  03 5E 02 A9  
00342B  3  06 D0 03 EC  
003443  3  00 D8 01 2E          .byte 0,216,1,46,128,215,64,170,1,180,0,251,0,112,0,0,0,116,1,139,192,56,0,64,1,110,1,195,0,199,0,0
003447  3  80 D7 40 AA  
00344B  3  01 B4 00 FB  
003463  3  00 36 80 4B          .byte 0,54,128,75,224,53,144,42,0,109,192,62,0,28,0,0,0,29,192,98,48,14,0,16,128,91,192,112,192,49,0,0
003467  3  E0 35 90 2A  
00346B  3  00 6D C0 3E  
003483  3  00 00 0D 80          .byte 0,0,13,128,18,228,13,120,10,176,27,64,15,160,7,16,0,0,7,68,24,184,3,128,4,0,22,224,28,48,12,112
003487  3  12 E4 0D 78  
00348B  3  0A B0 1B 40  
0034A3  3  00 00 03 60          .byte 0,0,3,96,4,185,3,94,2,172,6,208,3,232,1,196,0,0,1,209,6,46,0,224,1,0,5,184,7,12,3,28
0034A7  3  04 B9 03 5E  
0034AB  3  02 AC 06 D0  
0034C3  3  00 00 00 D8          .byte 0,0,0,216,65,46,128,215,0,171,1,180,0,250,0,113,0,0,64,116,129,139,0,56,0,64,1,110,1,195,0,199
0034C7  3  41 2E 80 D7  
0034CB  3  00 AB 01 B4  
0034E3  3  00 00 00 36          .byte 0,0,0,54,144,75,224,53,192,42,0,109,128,62,64,28,0,0,16,29,224,98,0,14,0,16,128,91,192,112,192,49
0034E7  3  90 4B E0 35  
0034EB  3  C0 2A 00 6D  
003503  3  00 00 0D 80          .byte 0,0,13,128,18,224,13,112,10,184,27,68,15,160,7,16,0,0,3,192,15,160,3,156,0,0,6,192,6,96,14,224
003507  3  12 E0 0D 70  
00350B  3  0A B8 1B 44  
003523  3  00 00 03 60          .byte 0,0,3,96,4,184,3,92,2,174,6,209,3,232,1,196,0,0,0,240,3,232,0,231,0,0,1,176,1,152,3,184
003527  3  04 B8 03 5C  
00352B  3  02 AE 06 D1  
003543  3  00 00 00 D8          .byte 0,0,0,216,1,46,0,215,128,171,65,180,0,250,0,113,0,0,0,60,0,250,192,57,0,0,0,108,0,102,0,238
003547  3  01 2E 00 D7  
00354B  3  80 AB 41 B4  
003563  3  00 00 00 36          .byte 0,0,0,54,128,75,192,53,224,42,16,109,128,62,64,28,0,0,0,15,128,62,112,14,0,0,0,27,128,25,128,59
003567  3  80 4B C0 35  
00356B  3  E0 2A 10 6D  
003583  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,10,48
003587  3  00 00 00 00  
00358B  3  00 00 00 00  
0035A3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,2,140
0035A7  3  00 00 00 00  
0035AB  3  00 00 00 00  
0035C3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,163
0035C7  3  00 00 00 00  
0035CB  3  00 00 00 00  
0035E3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,192,40
0035E7  3  00 00 00 00  
0035EB  3  00 00 00 00  
003603  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,136,4,32,0,0
003607  3  00 00 00 00  
00360B  3  00 00 00 00  
003623  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,34,1,8,0,0
003627  3  00 00 00 00  
00362B  3  00 00 00 00  
003643  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,8,0,66,0,0
003647  3  00 00 00 00  
00364B  3  00 00 00 00  
003663  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,66,128,16,0,0
003667  3  00 00 00 00  
00366B  3  00 00 00 00  
003683  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,132,4,32,0,0,0,0
003687  3  00 00 00 00  
00368B  3  00 00 00 00  
0036A3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,33,1,8,0,0,0,0
0036A7  3  00 00 00 00  
0036AB  3  00 00 00 00  
0036C3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,8,0,66,0,0,0,0
0036C7  3  00 00 00 00  
0036CB  3  00 00 00 00  
0036E3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,130,128,16,0,0,0,0
0036E7  3  00 00 00 00  
0036EB  3  00 00 00 00  
003703  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,145,0,0,0,0
003707  3  00 00 00 00  
00370B  3  00 00 00 00  
003723  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,36,0,0,0,0
003727  3  00 00 00 00  
00372B  3  00 00 00 00  
003743  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,137,0,0,0,0
003747  3  00 00 00 00  
00374B  3  00 00 00 00  
003763  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,34,0,0,0,0
003767  3  00 00 00 00  
00376B  3  00 00 00 00  
003783  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,129,128,8
003787  3  00 00 00 00  
00378B  3  00 00 00 00  
0037A3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,32,32,2
0037A7  3  00 00 00 00  
0037AB  3  00 00 00 00  
0037C3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,8,136,0
0037C7  3  00 00 00 00  
0037CB  3  00 00 00 00  
0037E3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,66,34,0
0037E7  3  00 00 00 00  
0037EB  3  00 00 00 00  
003803  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,137
003807  3  00 00 00 00  
00380B  3  00 00 00 00  
003823  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,34
003827  3  00 00 00 00  
00382B  3  00 00 00 00  
003843  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,153,8
003847  3  00 00 00 00  
00384B  3  00 00 00 00  
003863  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,66
003867  3  00 00 00 00  
00386B  3  00 00 00 00  
003883  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003887  3  00 00 00 00  
00388B  3  00 00 00 00  
0038A3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0038A7  3  00 00 00 00  
0038AB  3  00 00 00 00  
0038C3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0038C7  3  00 00 00 00  
0038CB  3  00 00 00 00  
0038E3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0038E7  3  00 00 00 00  
0038EB  3  00 00 00 00  
003903  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,136,114,76,188,62,158,250,47,124,55,252,79,242
003907  3  00 00 00 00  
00390B  3  00 00 00 00  
003923  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,98,28,147,175,15,167,190,11,223,13,255,147,252
003927  3  00 00 00 00  
00392B  3  00 00 00 00  
003943  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,24,199,36,235,195,169,239,194,247,195,127,36,255
003947  3  00 00 00 00  
00394B  3  00 00 00 00  
003963  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,134,49,201,250,240,234,123,240,189,240,223,201,63
003967  3  00 00 00 00  
00396B  3  00 00 00 00  
003983  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,17,136,98,70,244,45,185,28,46,188,95,126,94,254,47,124,55,252,79,242
003987  3  00 00 00 00  
00398B  3  00 00 00 00  
0039A3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,4,98,152,145,125,11,46,71,11,175,151,223,151,191,11,223,13,255,147,252
0039A7  3  00 00 00 00  
0039AB  3  00 00 00 00  
0039C3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,129,24,102,36,223,66,203,145,194,235,229,247,229,239,194,247,195,127,36,255
0039C7  3  00 00 00 00  
0039CB  3  00 00 00 00  
0039E3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,32,70,25,137,183,208,114,228,240,186,249,125,249,123,240,189,240,223,201,63
0039E7  3  00 00 00 00  
0039EB  3  00 00 00 00  
003A03  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,2,145,129,226,74,116,38,56,46,45,28,46,188,95,126,94,254,47,124,55,252,79,242
003A07  3  00 00 00 00  
003A0B  3  00 02 91 81  
003A23  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,128,0,100,96,184,146,157,9,142,11,11,71,11,175,151,223,151,191,11,223,13,255,147,252
003A27  3  00 00 00 00  
003A2B  3  80 00 64 60  
003A43  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,32,0,25,24,174,36,103,66,227,130,194,209,194,235,229,247,229,239,194,247,195,127,36,255
003A47  3  00 00 00 00  
003A4B  3  20 00 19 18  
003A63  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,8,0,6,70,43,137,153,208,184,224,112,180,240,186,249,125,249,123,240,189,240,223,201,63
003A67  3  00 00 00 00  
003A6B  3  08 00 06 46  
003A83  3  00 00 00 00          .byte 0,0,0,0,17,136,34,68,52,44,24,24,20,56,22,120,44,56,46,252,94,124,95,126,94,254,47,124,55,252,79,242
003A87  3  11 88 22 44  
003A8B  3  34 2C 18 18  
003AA3  3  00 00 00 00          .byte 0,0,0,0,4,98,8,145,13,11,6,6,5,14,5,158,11,14,11,191,23,159,151,223,151,191,11,223,13,255,147,252
003AA7  3  04 62 08 91  
003AAB  3  0D 0B 06 06  
003AC3  3  00 00 00 00          .byte 0,0,0,0,129,24,66,36,195,66,129,129,129,67,129,103,130,195,194,239,197,231,229,247,229,239,194,247,195,127,36,255
003AC7  3  81 18 42 24  
003ACB  3  C3 42 81 81  
003AE3  3  00 00 00 00          .byte 0,0,0,0,32,70,16,137,176,208,96,96,224,80,224,89,224,176,240,187,241,121,249,125,249,123,240,189,240,223,201,63
003AE7  3  20 46 10 89  
003AEB  3  B0 D0 60 60  
003B03  3  00 00 01 00          .byte 0,0,1,0,2,192,3,64,6,224,5,96,14,240,21,120,22,248,47,124,46,252,95,126,94,254,47,124,63,252,79,242
003B07  3  02 C0 03 40  
003B0B  3  06 E0 05 60  
003B23  3  00 00 00 40          .byte 0,0,0,64,0,176,0,208,1,184,1,88,3,188,5,94,5,190,11,223,11,191,151,223,151,191,11,223,15,255,147,252
003B27  3  00 B0 00 D0  
003B2B  3  01 B8 01 58  
003B43  3  00 00 00 10          .byte 0,0,0,16,0,44,0,52,0,110,0,86,0,239,129,87,129,111,194,247,194,239,229,247,229,239,194,247,195,255,36,255
003B47  3  00 2C 00 34  
003B4B  3  00 6E 00 56  
003B63  3  00 00 00 04          .byte 0,0,0,4,0,11,0,13,128,27,128,21,192,59,224,85,224,91,240,189,240,187,249,125,249,123,240,189,240,255,201,63
003B67  3  00 0B 00 0D  
003B6B  3  80 1B 80 15  
003B83  3  00 00 01 00          .byte 0,0,1,0,2,192,3,64,6,224,5,96,14,240,21,120,22,248,47,124,46,252,95,126,94,254,47,124,63,252,79,242
003B87  3  02 C0 03 40  
003B8B  3  06 E0 05 60  
003BA3  3  00 00 00 40          .byte 0,0,0,64,0,176,0,208,1,184,1,88,3,188,5,94,5,190,11,223,11,191,151,223,151,191,11,223,15,255,147,252
003BA7  3  00 B0 00 D0  
003BAB  3  01 B8 01 58  
003BC3  3  00 00 00 10          .byte 0,0,0,16,0,44,0,52,0,110,0,86,0,239,129,87,129,111,194,247,194,239,229,247,229,239,194,247,195,255,36,255
003BC7  3  00 2C 00 34  
003BCB  3  00 6E 00 56  
003BE3  3  00 00 00 04          .byte 0,0,0,4,0,11,0,13,128,27,128,21,192,59,224,85,224,91,240,189,240,187,249,125,249,123,240,189,240,255,201,63
003BE7  3  00 0B 00 0D  
003BEB  3  80 1B 80 15  
003C03  3  07 80 1E E0          .byte 7,128,30,224,59,240,95,184,112,236,22,62,5,142,15,162,3,156,0,0,2,128,3,64,0,0,6,192,6,96,14,224
003C07  3  3B F0 5F B8  
003C0B  3  70 EC 16 3E  
003C23  3  01 E0 07 B8          .byte 1,224,7,184,14,252,23,238,28,59,133,143,129,99,131,232,0,231,0,0,0,160,0,208,0,0,1,176,1,152,3,184
003C27  3  0E FC 17 EE  
003C2B  3  1C 3B 85 8F  
003C43  3  00 78 01 EE          .byte 0,120,1,238,3,191,133,251,199,14,225,99,224,88,32,250,192,57,0,0,0,40,0,52,0,0,0,108,0,102,0,238
003C47  3  03 BF 85 FB  
003C4B  3  C7 0E E1 63  
003C63  3  00 1E 80 7B          .byte 0,30,128,123,192,239,225,126,177,195,248,88,56,22,136,62,112,14,0,0,0,10,0,13,0,0,0,27,128,25,128,59
003C67  3  C0 EF E1 7E  
003C6B  3  B1 C3 F8 58  
003C83  3  00 00 07 80          .byte 0,0,7,128,30,224,27,240,127,184,112,236,23,62,5,142,15,162,3,156,0,0,11,160,0,16,1,128,1,128,3,128
003C87  3  1E E0 1B F0  
003C8B  3  7F B8 70 EC  
003CA3  3  00 00 01 E0          .byte 0,0,1,224,7,184,6,252,31,238,28,59,133,207,129,99,131,232,0,231,0,0,2,232,0,4,0,96,0,96,0,224
003CA7  3  07 B8 06 FC  
003CAB  3  1F EE 1C 3B  
003CC3  3  00 00 00 78          .byte 0,0,0,120,1,238,1,191,135,251,199,14,225,115,224,88,32,250,192,57,0,0,0,186,0,1,0,24,0,24,0,56
003CC7  3  01 EE 01 BF  
003CCB  3  87 FB C7 0E  
003CE3  3  00 00 00 1E          .byte 0,0,0,30,128,123,192,111,225,254,177,195,248,92,56,22,136,62,112,14,0,0,128,46,64,0,0,6,0,6,0,14
003CE7  3  80 7B C0 6F  
003CEB  3  E1 FE B1 C3  
003D03  3  07 80 1E E0          .byte 7,128,30,224,59,240,95,184,112,236,22,62,5,142,15,162,3,156,0,0,2,128,3,64,0,0,6,192,6,96,14,224
003D07  3  3B F0 5F B8  
003D0B  3  70 EC 16 3E  
003D23  3  01 E0 07 B8          .byte 1,224,7,184,14,252,23,238,28,59,133,143,129,99,131,232,0,231,0,0,0,160,0,208,0,0,1,176,1,152,3,184
003D27  3  0E FC 17 EE  
003D2B  3  1C 3B 85 8F  
003D43  3  00 78 01 EE          .byte 0,120,1,238,3,191,133,251,199,14,225,99,224,88,32,250,192,57,0,0,0,40,0,52,0,0,0,108,0,102,0,238
003D47  3  03 BF 85 FB  
003D4B  3  C7 0E E1 63  
003D63  3  00 1E 80 7B          .byte 0,30,128,123,192,239,225,126,177,195,248,88,56,22,136,62,112,14,0,0,0,10,0,13,0,0,0,27,128,25,128,59
003D67  3  C0 EF E1 7E  
003D6B  3  B1 C3 F8 58  
003D83  3  07 80 1E E0          .byte 7,128,30,224,59,240,95,184,112,236,22,62,5,142,15,162,3,156,0,0,7,128,11,160,0,0,22,224,28,48,12,112
003D87  3  3B F0 5F B8  
003D8B  3  70 EC 16 3E  
003DA3  3  01 E0 07 B8          .byte 1,224,7,184,14,252,23,238,28,59,133,143,129,99,131,232,0,231,0,0,1,224,2,232,0,0,5,184,7,12,3,28
003DA7  3  0E FC 17 EE  
003DAB  3  1C 3B 85 8F  
003DC3  3  00 78 01 EE          .byte 0,120,1,238,3,191,133,251,199,14,225,99,224,88,32,250,192,57,0,0,0,120,0,186,0,0,1,110,1,195,0,199
003DC7  3  03 BF 85 FB  
003DCB  3  C7 0E E1 63  
003DE3  3  00 1E 80 7B          .byte 0,30,128,123,192,239,225,126,177,195,248,88,56,22,136,62,112,14,0,0,0,30,128,46,0,0,128,91,192,112,192,49
003DE7  3  C0 EF E1 7E  
003DEB  3  B1 C3 F8 58  
003E03  3  01 E0 07 78          .byte 1,224,7,120,15,220,29,250,55,14,124,104,113,160,69,240,57,192,0,0,1,64,2,192,0,0,3,96,6,96,7,112
003E07  3  0F DC 1D FA  
003E0B  3  37 0E 7C 68  
003E23  3  00 78 01 DE          .byte 0,120,1,222,3,247,135,126,141,195,31,26,28,104,17,124,14,112,0,0,0,80,0,176,0,0,0,216,1,152,1,220
003E27  3  03 F7 87 7E  
003E2B  3  8D C3 1F 1A  
003E43  3  00 1E 80 77          .byte 0,30,128,119,192,253,161,223,227,112,135,198,7,26,4,95,3,156,0,0,0,20,0,44,0,0,0,54,0,102,0,119
003E47  3  C0 FD A1 DF  
003E4B  3  E3 70 87 C6  
003E63  3  80 07 E0 1D          .byte 128,7,224,29,112,63,232,119,56,220,161,241,129,198,193,23,0,231,0,0,0,5,0,11,0,0,128,13,128,25,192,29
003E67  3  70 3F E8 77  
003E6B  3  38 DC A1 F1  
003E83  3  00 00 01 E0          .byte 0,0,1,224,7,120,15,216,29,254,55,14,124,232,113,160,69,240,57,192,0,0,5,208,8,0,1,128,1,128,1,192
003E87  3  07 78 0F D8  
003E8B  3  1D FE 37 0E  
003EA3  3  00 00 00 78          .byte 0,0,0,120,1,222,3,246,135,127,141,195,31,58,28,104,17,124,14,112,0,0,1,116,2,0,0,96,0,96,0,112
003EA7  3  01 DE 03 F6  
003EAB  3  87 7F 8D C3  
003EC3  3  00 00 00 1E          .byte 0,0,0,30,128,119,128,253,225,223,227,112,135,206,7,26,4,95,3,156,0,0,0,93,0,128,0,24,0,24,0,28
003EC7  3  80 77 80 FD  
003ECB  3  E1 DF E3 70  
003EE3  3  00 00 80 07          .byte 0,0,128,7,224,29,96,63,248,119,56,220,161,243,129,198,193,23,0,231,0,0,64,23,0,32,0,6,0,6,0,7
003EE7  3  E0 1D 60 3F  
003EEB  3  F8 77 38 DC  
003F03  3  01 E0 07 78          .byte 1,224,7,120,15,220,29,250,55,14,124,104,113,160,69,240,57,192,0,0,1,64,1,160,0,0,3,96,6,96,7,112
003F07  3  0F DC 1D FA  
003F0B  3  37 0E 7C 68  
003F23  3  00 78 01 DE          .byte 0,120,1,222,3,247,135,126,141,195,31,26,28,104,17,124,14,112,0,0,0,80,0,104,0,0,0,216,1,152,1,220
003F27  3  03 F7 87 7E  
003F2B  3  8D C3 1F 1A  
003F43  3  00 1E 80 77          .byte 0,30,128,119,192,253,161,223,227,112,135,198,7,26,4,95,3,156,0,0,0,20,0,26,0,0,0,54,0,102,0,119
003F47  3  C0 FD A1 DF  
003F4B  3  E3 70 87 C6  
003F63  3  80 07 E0 1D          .byte 128,7,224,29,112,63,232,119,56,220,161,241,129,198,193,23,0,231,0,0,0,5,128,6,0,0,128,13,128,25,192,29
003F67  3  70 3F E8 77  
003F6B  3  38 DC A1 F1  
003F83  3  01 E0 07 78          .byte 1,224,7,120,15,220,29,250,55,14,124,104,113,160,69,240,57,192,0,0,1,224,5,208,0,0,7,104,12,56,14,48
003F87  3  0F DC 1D FA  
003F8B  3  37 0E 7C 68  
003FA3  3  00 78 01 DE          .byte 0,120,1,222,3,247,135,126,141,195,31,26,28,104,17,124,14,112,0,0,0,120,1,116,0,0,1,218,3,14,3,140
003FA7  3  03 F7 87 7E  
003FAB  3  8D C3 1F 1A  
003FC3  3  00 1E 80 77          .byte 0,30,128,119,192,253,161,223,227,112,135,198,7,26,4,95,3,156,0,0,0,30,0,93,0,0,128,118,128,195,0,227
003FC7  3  C0 FD A1 DF  
003FCB  3  E3 70 87 C6  
003FE3  3  80 07 E0 1D          .byte 128,7,224,29,112,63,232,119,56,220,161,241,129,198,193,23,0,231,0,0,128,7,64,23,0,0,160,29,224,48,192,56
003FE7  3  70 3F E8 77  
003FEB  3  38 DC A1 F1  
004003  3  02 00 01 00          .byte 2,0,1,0,1,0,3,0,7,128,15,192,10,192,10,192,7,128,3,0,0,32,15,192,23,128,3,192,1,192,0,96
004007  3  01 00 03 00  
00400B  3  07 80 0F C0  
004023  3  00 80 00 40          .byte 0,128,0,64,0,64,0,192,1,224,3,240,2,176,2,176,1,224,0,192,0,8,3,240,5,224,0,240,0,112,0,24
004027  3  00 40 00 C0  
00402B  3  01 E0 03 F0  
004043  3  00 20 00 10          .byte 0,32,0,16,0,16,0,48,0,120,0,252,0,172,0,172,0,120,0,48,0,2,0,252,1,120,0,60,0,28,0,6
004047  3  00 10 00 30  
00404B  3  00 78 00 FC  
004063  3  00 08 00 04          .byte 0,8,0,4,0,4,0,12,0,30,0,63,0,43,0,43,0,30,0,12,128,0,0,63,0,94,0,15,0,7,128,1
004067  3  00 04 00 0C  
00406B  3  00 1E 00 3F  
004083  3  00 80 01 00          .byte 0,128,1,0,0,128,1,128,3,192,7,224,5,96,5,96,3,192,1,128,12,0,3,240,3,192,1,192,1,128,0,128
004087  3  00 80 01 80  
00408B  3  03 C0 07 E0  
0040A3  3  00 20 00 40          .byte 0,32,0,64,0,32,0,96,0,240,1,248,1,88,1,88,0,240,0,96,3,0,0,252,0,240,0,112,0,96,0,32
0040A7  3  00 20 00 60  
0040AB  3  00 F0 01 F8  
0040C3  3  00 08 00 10          .byte 0,8,0,16,0,8,0,24,0,60,0,126,0,86,0,86,0,60,0,24,0,192,0,63,0,60,0,28,0,24,0,8
0040C7  3  00 08 00 18  
0040CB  3  00 3C 00 7E  
0040E3  3  00 02 00 04          .byte 0,2,0,4,0,2,0,6,0,15,128,31,128,21,128,21,0,15,0,6,0,48,192,15,0,15,0,7,0,6,0,2
0040E7  3  00 02 00 06  
0040EB  3  00 0F 80 1F  
004103  3  00 40 00 80          .byte 0,64,0,128,0,128,0,192,1,224,3,240,3,80,3,80,1,224,0,192,4,0,3,240,1,232,3,192,3,128,6,0
004107  3  00 80 00 C0  
00410B  3  01 E0 03 F0  
004123  3  00 10 00 20          .byte 0,16,0,32,0,32,0,48,0,120,0,252,0,212,0,212,0,120,0,48,1,0,0,252,0,122,0,240,0,224,1,128
004127  3  00 20 00 30  
00412B  3  00 78 00 FC  
004143  3  00 04 00 08          .byte 0,4,0,8,0,8,0,12,0,30,0,63,0,53,0,53,0,30,0,12,0,64,0,63,128,30,0,60,0,56,0,96
004147  3  00 08 00 0C  
00414B  3  00 1E 00 3F  
004163  3  00 01 00 02          .byte 0,1,0,2,0,2,0,3,128,7,192,15,64,13,64,13,128,7,0,3,0,16,192,15,160,7,0,15,0,14,0,24
004167  3  00 02 00 03  
00416B  3  80 07 C0 0F  
004183  3  01 00 00 80          .byte 1,0,0,128,1,0,1,128,3,192,7,224,6,160,6,160,3,192,1,128,0,48,15,192,3,192,3,128,1,128,1,0
004187  3  01 00 01 80  
00418B  3  03 C0 07 E0  
0041A3  3  00 40 00 20          .byte 0,64,0,32,0,64,0,96,0,240,1,248,1,168,1,168,0,240,0,96,0,12,3,240,0,240,0,224,0,96,0,64
0041A7  3  00 40 00 60  
0041AB  3  00 F0 01 F8  
0041C3  3  00 10 00 08          .byte 0,16,0,8,0,16,0,24,0,60,0,126,0,106,0,106,0,60,0,24,0,3,0,252,0,60,0,56,0,24,0,16
0041C7  3  00 10 00 18  
0041CB  3  00 3C 00 7E  
0041E3  3  00 04 00 02          .byte 0,4,0,2,0,4,0,6,0,15,128,31,128,26,128,26,0,15,0,6,192,0,0,63,0,15,0,14,0,6,0,4
0041E7  3  00 04 00 06  
0041EB  3  00 0F 80 1F  
004203  3  0F E0 00 00          .byte 15,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004207  3  00 00 00 00  
00420B  3  00 00 00 00  
004223  3  03 F8 00 00          .byte 3,248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004227  3  00 00 00 00  
00422B  3  00 00 00 00  
004243  3  00 FE 00 00          .byte 0,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004247  3  00 00 00 00  
00424B  3  00 00 00 00  
004263  3  80 3F 00 00          .byte 128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004267  3  00 00 00 00  
00426B  3  00 00 00 00  
004283  3  07 C0 03 80          .byte 7,192,3,128,3,128,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004287  3  03 80 01 00  
00428B  3  00 00 00 00  
0042A3  3  01 F0 00 E0          .byte 1,240,0,224,0,224,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0042A7  3  00 E0 00 40  
0042AB  3  00 00 00 00  
0042C3  3  00 7C 00 38          .byte 0,124,0,56,0,56,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0042C7  3  00 38 00 10  
0042CB  3  00 00 00 00  
0042E3  3  00 1F 00 0E          .byte 0,31,0,14,0,14,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0042E7  3  00 0E 00 04  
0042EB  3  00 00 00 00  
004303  3  03 80 01 00          .byte 3,128,1,0,2,128,2,128,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004307  3  02 80 02 80  
00430B  3  01 00 00 00  
004323  3  00 E0 00 40          .byte 0,224,0,64,0,160,0,160,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004327  3  00 A0 00 A0  
00432B  3  00 40 00 00  
004343  3  00 38 00 10          .byte 0,56,0,16,0,40,0,40,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004347  3  00 28 00 28  
00434B  3  00 10 00 00  
004363  3  00 0E 00 04          .byte 0,14,0,4,0,10,0,10,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004367  3  00 0A 00 0A  
00436B  3  00 04 00 00  
004383  3  01 00 01 00          .byte 1,0,1,0,1,0,3,128,3,128,7,64,7,64,2,128,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004387  3  01 00 03 80  
00438B  3  03 80 07 40  
0043A3  3  00 40 00 40          .byte 0,64,0,64,0,64,0,224,0,224,1,208,1,208,0,160,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0043A7  3  00 40 00 E0  
0043AB  3  00 E0 01 D0  
0043C3  3  00 10 00 10          .byte 0,16,0,16,0,16,0,56,0,56,0,116,0,116,0,40,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0043C7  3  00 10 00 38  
0043CB  3  00 38 00 74  
0043E3  3  00 04 00 04          .byte 0,4,0,4,0,4,0,14,0,14,0,29,0,29,0,10,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0043E7  3  00 04 00 0E  
0043EB  3  00 0E 00 1D  
004403  3  00 00 00 00          .byte 0,0,0,0,1,0,1,0,1,0,3,128,3,128,2,128,7,64,7,64,7,64,2,128,1,0,0,0,0,0,0,0
004407  3  01 00 01 00  
00440B  3  01 00 03 80  
004423  3  00 00 00 00          .byte 0,0,0,0,0,64,0,64,0,64,0,224,0,224,0,160,1,208,1,208,1,208,0,160,0,64,0,0,0,0,0,0
004427  3  00 40 00 40  
00442B  3  00 40 00 E0  
004443  3  00 00 00 00          .byte 0,0,0,0,0,16,0,16,0,16,0,56,0,56,0,40,0,116,0,116,0,116,0,40,0,16,0,0,0,0,0,0
004447  3  00 10 00 10  
00444B  3  00 10 00 38  
004463  3  00 00 00 00          .byte 0,0,0,0,0,4,0,4,0,4,0,14,0,14,0,10,0,29,0,29,0,29,0,10,0,4,0,0,0,0,0,0
004467  3  00 04 00 04  
00446B  3  00 04 00 0E  
004483  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,128,7,192
004487  3  00 00 00 00  
00448B  3  00 00 00 00  
0044A3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,1,240
0044A7  3  00 00 00 00  
0044AB  3  00 00 00 00  
0044C3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,124
0044C7  3  00 00 00 00  
0044CB  3  00 00 00 00  
0044E3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,31
0044E7  3  00 00 00 00  
0044EB  3  00 00 00 00  
004503  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,4,64,1,0,27,176
004507  3  00 00 00 00  
00450B  3  00 00 00 00  
004523  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,64,1,16,0,64,6,236
004527  3  00 00 00 00  
00452B  3  00 00 00 00  
004543  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,16,0,68,0,16,1,187
004547  3  00 00 00 00  
00454B  3  00 00 00 00  
004563  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,0,17,0,4,192,110
004567  3  00 00 00 00  
00456B  3  00 00 00 00  
004583  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,17,16,8,32,0,0,0,0,49,24
004587  3  00 00 00 00  
00458B  3  00 00 00 00  
0045A3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,4,68,2,8,0,0,0,0,12,70
0045A7  3  00 00 00 00  
0045AB  3  00 00 00 00  
0045C3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,1,17,0,130,0,0,0,0,131,17
0045C7  3  00 00 00 00  
0045CB  3  00 00 00 00  
0045E3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,64,68,128,32,0,0,0,0,96,196
0045E7  3  00 00 00 00  
0045EB  3  00 00 00 00  
004603  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,48,24,0,0,0,0,0,0,65,4
004607  3  00 00 00 00  
00460B  3  00 00 00 00  
004623  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,64,12,6,0,0,0,0,0,0,16,65
004627  3  00 00 00 00  
00462B  3  00 00 00 00  
004643  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,16,131,1,0,0,0,0,0,0,68,16
004647  3  00 00 00 00  
00464B  3  00 00 00 00  
004663  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,96,192,0,0,0,0,0,0,17,4
004667  3  00 00 00 00  
00466B  3  00 00 00 00  
004683  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,33,8,64,4,0,0,0,0,0,0
004687  3  00 00 00 00  
00468B  3  00 00 00 00  
0046A3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,8,66,16,1,0,0,0,0,0,0
0046A7  3  00 00 00 00  
0046AB  3  00 00 00 00  
0046C3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,130,16,68,0,0,0,0,0,0,0
0046C7  3  00 00 00 00  
0046CB  3  00 00 00 00  
0046E3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,32,132,17,0,0,0,0,0,0,0
0046E7  3  00 00 00 00  
0046EB  3  00 00 00 00  
004703  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,65,4,64,4,0,0,0,0
004707  3  00 00 00 00  
00470B  3  00 00 00 00  
004723  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,16,65,16,1,0,0,0,0
004727  3  00 00 00 00  
00472B  3  00 00 00 00  
004743  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,68,16,68,0,0,0,0,0
004747  3  00 00 00 00  
00474B  3  00 00 00 00  
004763  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,4,17,0,0,0,0,0
004767  3  00 00 00 00  
00476B  3  00 00 00 00  
004783  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,64,4,0,0
004787  3  00 00 00 00  
00478B  3  00 00 00 00  
0047A3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,16,1,0,0
0047A7  3  00 00 00 00  
0047AB  3  00 00 00 00  
0047C3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,68,0,0,0
0047C7  3  00 00 00 00  
0047CB  3  00 00 00 00  
0047E3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,0,0,0
0047E7  3  00 00 00 00  
0047EB  3  00 00 00 00  
004803  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004807  3  00 00 00 00  
00480B  3  00 00 00 00  
004823  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004827  3  00 00 00 00  
00482B  3  00 00 00 00  
004843  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004847  3  00 00 00 00  
00484B  3  00 00 00 00  
004863  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004867  3  00 00 00 00  
00486B  3  00 00 00 00  
004883  3  00 00 03 80          .byte 0,0,3,128,6,64,15,160,14,160,31,208,28,80,31,208,60,104,58,168,59,168,28,112,26,176,15,224,5,64,0,0
004887  3  06 40 0F A0  
00488B  3  0E A0 1F D0  
0048A3  3  00 00 00 E0          .byte 0,0,0,224,1,144,3,232,3,168,7,244,7,20,7,244,15,26,14,170,14,234,7,28,6,172,3,248,1,80,0,0
0048A7  3  01 90 03 E8  
0048AB  3  03 A8 07 F4  
0048C3  3  00 00 00 38          .byte 0,0,0,56,0,100,0,250,0,234,1,253,1,197,1,253,131,198,131,170,131,186,1,199,1,171,0,254,0,84,0,0
0048C7  3  00 64 00 FA  
0048CB  3  00 EA 01 FD  
0048E3  3  00 00 00 0E          .byte 0,0,0,14,0,25,128,62,128,58,64,127,64,113,64,127,160,241,160,234,160,238,192,113,192,106,128,63,0,21,0,0
0048E7  3  00 19 80 3E  
0048EB  3  80 3A 40 7F  
004903  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004907  3  00 00 00 00  
00490B  3  00 00 00 00  
004923  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004927  3  00 00 00 00  
00492B  3  00 00 00 00  
004943  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004947  3  00 00 00 00  
00494B  3  00 00 00 00  
004963  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004967  3  00 00 00 00  
00496B  3  00 00 00 00  
004983  3  4A A9 37 F6          .byte 74,169,55,246,12,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004987  3  0C 18 00 00  
00498B  3  00 00 00 00  
0049A3  3  52 AA 8D FD          .byte 82,170,141,253,3,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0049A7  3  03 06 00 00  
0049AB  3  00 00 00 00  
0049C3  3  94 AA 63 7F          .byte 148,170,99,127,128,193,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0049C7  3  80 C1 00 00  
0049CB  3  00 00 00 00  
0049E3  3  A5 2A D8 DF          .byte 165,42,216,223,96,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0049E7  3  60 30 00 00  
0049EB  3  00 00 00 00  
004A03  3  4A A9 37 F6          .byte 74,169,55,246,12,24,1,192,13,192,3,160,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004A07  3  0C 18 01 C0  
004A0B  3  0D C0 03 A0  
004A23  3  52 AA 8D FD          .byte 82,170,141,253,3,6,0,112,3,112,0,232,1,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004A27  3  03 06 00 70  
004A2B  3  03 70 00 E8  
004A43  3  94 AA 63 7F          .byte 148,170,99,127,128,193,0,28,0,220,0,58,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004A47  3  80 C1 00 1C  
004A4B  3  00 DC 00 3A  
004A63  3  A5 2A D8 DF          .byte 165,42,216,223,96,48,0,7,0,55,128,14,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004A67  3  60 30 00 07  
004A6B  3  00 37 80 0E  
004A83  3  4A A9 37 F6          .byte 74,169,55,246,12,24,1,192,1,192,27,128,7,0,14,128,12,64,12,0,10,0,0,0,0,0,0,0,0,0,0,0
004A87  3  0C 18 01 C0  
004A8B  3  01 C0 1B 80  
004AA3  3  52 AA 8D FD          .byte 82,170,141,253,3,6,0,112,0,112,6,224,1,192,3,160,3,16,3,0,2,128,0,0,0,0,0,0,0,0,0,0
004AA7  3  03 06 00 70  
004AAB  3  00 70 06 E0  
004AC3  3  94 AA 63 7F          .byte 148,170,99,127,128,193,0,28,0,28,1,184,0,112,0,232,0,196,0,192,0,160,0,0,0,0,0,0,0,0,0,0
004AC7  3  80 C1 00 1C  
004ACB  3  00 1C 01 B8  
004AE3  3  A5 2A D8 DF          .byte 165,42,216,223,96,48,0,7,0,7,0,110,0,28,0,58,0,49,0,48,0,40,0,0,0,0,0,0,0,0,0,0
004AE7  3  60 30 00 07  
004AEB  3  00 07 00 6E  
004B03  3  4A A9 37 F6          .byte 74,169,55,246,12,24,1,192,1,192,3,128,3,192,3,32,7,0,3,128,1,224,0,192,1,192,0,192,0,128,0,0
004B07  3  0C 18 01 C0  
004B0B  3  01 C0 03 80  
004B23  3  52 AA 8D FD          .byte 82,170,141,253,3,6,0,112,0,112,0,224,0,240,0,200,1,192,0,224,0,120,0,48,0,112,0,48,0,32,0,0
004B27  3  03 06 00 70  
004B2B  3  00 70 00 E0  
004B43  3  94 AA 63 7F          .byte 148,170,99,127,128,193,0,28,0,28,0,56,0,60,0,50,0,112,0,56,0,30,0,12,0,28,0,12,0,8,0,0
004B47  3  80 C1 00 1C  
004B4B  3  00 1C 00 38  
004B63  3  A5 2A D8 DF          .byte 165,42,216,223,96,48,0,7,0,7,0,14,0,15,128,12,0,28,0,14,128,7,0,3,0,7,0,3,0,2,0,0
004B67  3  60 30 00 07  
004B6B  3  00 07 00 0E  
004B83  3  4A A9 37 F6          .byte 74,169,55,246,12,24,1,192,1,192,0,216,0,224,0,224,1,100,2,120,0,48,0,56,0,88,0,12,0,0,0,0
004B87  3  0C 18 01 C0  
004B8B  3  01 C0 00 D8  
004BA3  3  52 AA 8D FD          .byte 82,170,141,253,3,6,0,112,0,112,0,54,0,56,0,56,0,89,0,158,0,12,0,14,0,22,0,3,0,0,0,0
004BA7  3  03 06 00 70  
004BAB  3  00 70 00 36  
004BC3  3  94 AA 63 7F          .byte 148,170,99,127,128,193,0,28,0,28,128,13,0,14,0,14,64,22,128,39,0,3,128,3,128,5,192,0,0,0,0,0
004BC7  3  80 C1 00 1C  
004BCB  3  00 1C 80 0D  
004BE3  3  A5 2A D8 DF          .byte 165,42,216,223,96,48,0,7,0,7,96,3,128,3,128,3,144,5,224,9,192,0,224,0,96,1,48,0,0,0,0,0
004BE7  3  60 30 00 07  
004BEB  3  00 07 60 03  
004C03  3  4A A9 37 F6          .byte 74,169,55,246,12,24,1,192,1,192,0,216,0,224,0,224,1,100,2,121,0,62,0,28,0,0,0,0,0,0,0,0
004C07  3  0C 18 01 C0  
004C0B  3  01 C0 00 D8  
004C23  3  52 AA 8D FD          .byte 82,170,141,253,3,6,0,112,0,112,0,54,0,56,0,56,0,89,64,158,128,15,0,7,0,0,0,0,0,0,0,0
004C27  3  03 06 00 70  
004C2B  3  00 70 00 36  
004C43  3  94 AA 63 7F          .byte 148,170,99,127,128,193,0,28,0,28,128,13,0,14,0,14,64,22,144,39,224,3,192,1,0,0,0,0,0,0,0,0
004C47  3  80 C1 00 1C  
004C4B  3  00 1C 80 0D  
004C63  3  A5 2A D8 DF          .byte 165,42,216,223,96,48,0,7,0,7,96,3,128,3,128,3,144,5,228,9,248,0,112,0,0,0,0,0,0,0,0,0
004C67  3  60 30 00 07  
004C6B  3  00 07 60 03  
004C83  3               frmlst:
004C83  3  00 04                .byte 0,4
004C85  3  04 06                .byte 4,6
004C87  3  0A 06                .byte 10,6
004C89  3  10 07                .byte 16,7
004C8B  3  17 06                .byte 23,6
004C8D  3  1D 04                .byte 29,4
004C8F  3  21 04                .byte 33,4
004C91  3  25 04                .byte 37,4
004C93  3  29 05                .byte 41,5
004C95  3  2E 08                .byte 46,8
004C97  3  36 01                .byte 54,1
004C99  3  37 01                .byte 55,1
004C9B  3  38 06 3E 00          .byte 56,6,62,0
004C9F  3               scdat:
004C9F  3  8E 01 A0 01          .word 398,416,332,458,428,440,440,427,380,471,415,374,457,398,433,474,417,423,297,451,292,525,475,244,450,421
004CA3  3  4C 01 CA 01  
004CA7  3  AC 01 B8 01  
004CD3  3  33 01                .word 307
004CD5  3  03 02 01 09          .byte 3,2,1,9,4,4,32,33,4,14,13,5,7,4,4,11,255,106,6,8,5,6,5,4,4,10,1,1,9,4,11,3,39
004CD9  3  04 04 20 21  
004CDD  3  04 0E 0D 05  
004CF6  3  23 22 1A 08          .byte 35,34,26,8,11,3,0,0,3,98,255,0,9,3,40,3,8,10,9,11,100,0,0,41,35,33,30,3,255,0,16,41,0
004CFA  3  0B 03 00 00  
004CFE  3  03 62 FF 00  
004D17  3  03 07 06 FF          .byte 3,7,6,255,0,4,31,32,34,255,0,9,128,127,255,0,9,3,4,12,4,11,0,0,0,35,34,255,0,7,28,29,128
004D1B  3  00 04 1F 20  
004D1F  3  22 FF 00 09  
004D38  3  7F 1D 1C FF          .byte 127,29,28,255,0,7,13,11,13,11,3,0,76,37,44,45,38,255,0,5,104,36,103,147,148,104,36,103,255,0,5,26,8
004D3C  3  00 07 0D 0B  
004D40  3  0D 0B 03 00  
004D59  3  0A 04 19 00          .byte 10,4,25,0,0,26,104,36,36,103,0,27,255,0,4,101,0,35,34,0,0,98,255,0,6,3,5,7,255,0,8,104,103
004D5D  3  00 1A 68 24  
004D61  3  24 67 00 1B  
004D7A  3  FF 00 05 1F          .byte 255,0,5,31,32,33,75,255,0,9,7,8,10,255,0,6,26,8,11,255,0,6,44,45,28,29,255,0,6,37,38,5,26
004D7E  3  20 21 4B FF  
004D82  3  00 09 07 08  
004D9B  3  08 0A FF 00          .byte 8,10,255,0,6,100,255,0,7,12,7,7,6,6,15,255,0,4,147,148,4,0,3,4,25,255,0,13,99,255,0,8,31
004D9F  3  06 64 FF 00  
004DA3  3  07 0C 07 07  
004DBC  3  20 22 06 00          .byte 32,34,6,0,0,99,255,0,17,80,80,255,0,5,35,33,4,0,0,100,255,0,14,29,0,0,79,79,0,0,0,76,37
004DC0  3  00 63 FF 00  
004DC4  3  11 50 50 FF  
004DDD  3  2C 2D 07 FF          .byte 44,45,7,255,0,16,9,6,7,4,6,5,11,0,0,0,12,5,6,15,255,0,5,28,115,116,29,23,29,0,0,0,9
004DE1  3  00 10 09 06  
004DE5  3  07 04 06 05  
004DFE  3  04 0B 01 02          .byte 4,11,1,2,1,2,1,3,255,0,4,3,1,2,6,6,4,7,6,5,6,4,5,6,6,5,4,6,11,2,1,255,3,5
004E02  3  01 02 01 03  
004E06  3  FF 00 04 03  
004E20  3  FF 00 06 03          .byte 255,0,6,3,3,3,2,1,2,1,2,1,2,1,2,1,1,2,1,2,3,3,255,0,13,255,3,15,255,0,6,65,65
004E24  3  03 03 02 01  
004E28  3  02 01 02 01  
004E41  3  00 00 41 41          .byte 0,0,65,65,65,0,0,18,17,18,16,18,17,18,16,18,16,18,17,18,16,17,18,16,16,18,17,18,255,86,6,17,18
004E45  3  41 00 00 12  
004E49  3  11 12 10 12  
004E62  3  10                   .byte 16
004E63  3  FF 00 07 6F          .byte 255,0,7,111,0,0,63,255,62,6,61,255,0,6,111,255,0,9,111,255,0,4,63,64,62,62,62,64,62,62,64,62,61
004E67  3  00 00 3F FF  
004E6B  3  3E 06 3D FF  
004E84  3  00 6F FF 00          .byte 0,111,255,0,5,111,255,0,10,63,62,62,64,64,64,62,64,62,64,62,62,61,255,0,10,111,255,0,5,63,62,62,64
004E88  3  05 6F FF 00  
004E8C  3  0A 3F 3E 3E  
004EA5  3  3E 40 3E 40          .byte 62,64,62,64,62,64,62,64,62,62,255,0,16,60,109,64,62,64,60,64,60,64,60,64,62,64,60,0,0,0,111,255,0,10
004EA9  3  3E 40 3E 40  
004EAD  3  3E 3E FF 00  
004EC7  3  6F 00 29 3C          .byte 111,0,41,60,109,60,109,60,109,60,109,60,64,62,60,41,255,0,7,111,255,0,10,39,60,60,59,52,52,109,60,60,39
004ECB  3  6D 3C 6D 3C  
004ECF  3  6D 3C 6D 3C  
004EE8  3  29 FF 00 0C          .byte 41,255,0,12,111,255,0,4,111,0,41,0,39,26,52,57,58,39,0,41,0,0,0,111,255,0,18,41,0,52,51,25,39
004EEC  3  6F FF 00 04  
004EF0  3  6F 00 29 00  
004F09  3  FF 00 07 3F          .byte 255,0,7,63,62,62,62,61,255,0,6,63,62,61,255,0,5,57,51,0,41,255,0,6,63,63,255,64,4,61,255,0,4
004F0D  3  3E 3E 3E 3D  
004F11  3  FF 00 06 3F  
004F2A  3  3F 3C 3C 3E          .byte 63,60,60,62,61,255,0,4,52,51,58,0,0,0,63,63,63,109,60,64,60,60,60,64,60,255,0,4,41,60,60,60,41
004F2E  3  3D FF 00 04  
004F32  3  34 33 3A 00  
004F4B  3  FF 00 04 46          .byte 255,0,4,70,71,0,0,0,63,64,62,64,62,109,41,102,60,43,60,41,255,0,6,43,41,0,0,0,59,53,73,72,0,0,0
004F4F  3  47 00 00 00  
004F53  3  3F 40 3E 40  
004F6E  3  29 FF 3C 04          .byte 41,255,60,4,0,0,102,0,66,255,0,8,66,132,131,255,0,4,57,51,0,0,0,134,133,108,43,0,0,85,255,0,8
004F72  3  00 00 66 00  
004F76  3  42 FF 00 08  
004F8F  3  1B 00 1C 1D          .byte 27,0,28,29,132,131,28,38,46,47,50,50,48,49,37,134,133,0,66,28,0,82,28,255,0,4,7,255,6,6,7,7,6,6
004F93  3  84 83 1C 26  
004F97  3  2E 2F 32 32  
004FB1  3  07 07 07 06          .byte 7,7,7,6,7,6,6,6,7,7,6,6,7,7,6,7,6,6,7,1,1,2,1,2,1,2,1,2,1,1,2,1,1
004FB5  3  07 06 06 06  
004FB9  3  07 07 06 06  
004FD2  3  02 01 02 01          .byte 2,1,2,1,1,2,1,2,1,2,1,2,1,2,1,2,255,3,30,16,17,16,18,16,18,16,17,16,18,16,18,17,16
004FD6  3  01 02 01 02  
004FDA  3  01 02 01 02  
004FF3  3  12 10 12 11          .byte 18,16,18,17,16,18,16,18,16,18,17,16,18,16,17,18
004FF7  3  10 12 10 12  
004FFB  3  10 12 11 10  
005003  3  FF 00 0D 6F          .byte 255,0,13,111,255,0,15,111,255,0,4,111,255,0,18,111,255,0,16,111,255,0,6,111,255,0,13,111,255,0,4,111,255,0,14
005007  3  FF 00 0F 6F  
00500B  3  FF 00 04 6F  
005026  3  6F 00 00 00          .byte 111,0,0,0,111,255,0,20,63,62,62,62,61,255,0,24,109,60,64,62,64,61,61,255,0,6,111,255,0,4,111,255,0,5
00502A  3  6F FF 00 14  
00502E  3  3F 3E 3E 3E  
005048  3  6F 00 00 00          .byte 111,0,0,0,63,62,61,109,60,60,64,64,109,255,0,20,63,64,62,64,61,108,43,109,60,60,0,0,111,255,0,17,64
00504C  3  3F 3E 3D 6D  
005050  3  3C 3C 40 40  
005069  3  FF 3C 04 00          .byte 255,60,4,0,43,41,255,0,22,41,40,43,107,0,0,43,255,0,8,63,62,61,255,0,13,41,43,0,0,0,66,255,0,8
00506D  3  2B 29 FF 00  
005071  3  16 29 28 2B  
00508B  3  40 3C 40 FF          .byte 64,60,64,255,0,6,29,0,83,255,0,5,66,255,0,6,135,136,255,0,4,41,43,255,0,6,9,6,10,82,255,0,10
00508F  3  00 06 1D 00  
005093  3  53 FF 00 05  
0050AC  3  4C 25 87 88          .byte 76,37,135,136,38,75,0,0,0,66,255,0,5,9,11,1,8,6,10,255,0,10,9,6,6,6,10,255,0,7,28,29,5
0050B0  3  26 4B 00 00  
0050B4  3  00 42 FF 00  
0050CD  3  01 03 01 02          .byte 1,3,1,2,8,10,0,28,0,0,28,24,29,28,9,11,2,1,2,12,10,28,29,0,0,6,7,6,7,11,2,3,3,3
0050D1  3  08 0A 00 1C  
0050D5  3  00 00 1C 18  
0050EF  3  02 08 04 06          .byte 2,8,4,6,7,6,7,6,7,6,11,1,3,3,3,2,12,6,7,6,7,1,2,1,1,2,3,0,0,0,3,2,1
0050F3  3  07 06 07 06  
0050F7  3  07 06 0B 01  
005110  3  02 01 02 01          .byte 2,1,2,1,2,1,2,1,3,0,0,0,3,1,2,1,2,1,255,3,5,255,0,5,255,3,10,255,0,5,255,3,5
005114  3  02 01 02 01  
005118  3  03 00 00 00  
005131  3  12 12 10 12          .byte 18,18,16,18,17,18,16,18,16,18,17,18,16,18,17,18,16,18,18,18,16,17,18,16,17,18,18,16,17,18
005135  3  11 12 10 12  
005139  3  10 12 11 12  
00514F  3  FF 00 07 03          .byte 255,0,7,3,2,5,32,34,6,2,3,255,0,6,255,3,4,255,0,12,3,1,4,35,34,5,1,3,255,0,5,3,1
005153  3  02 05 20 22  
005157  3  06 02 03 FF  
005170  3  02 01 02 03          .byte 2,1,2,3,3,255,0,8,3,3,1,9,11,35,33,8,10,1,3,0,0,0,3,2,9,6,5,10,1,2,3,3,255,0,5
005174  3  03 FF 00 08  
005178  3  03 03 01 09  
005193  3  03 02 01 09          .byte 3,2,1,9,11,31,32,34,26,5,2,3,0,0,3,2,1,5,39,0,8,5,10,1,2,3,0,0,0,3,2,9,5
005197  3  0B 1F 20 22  
00519B  3  1A 05 02 03  
0051B4  3  0B 00 00 23          .byte 11,0,0,35,34,0,6,5,1,3,3,1,9,4,15,41,0,0,69,12,6,10,1,0,0,3,2,9,11,0,0,37,38
0051B8  3  22 00 06 05  
0051BC  3  01 03 03 01  
0051D5  3  2C 2D 1C 05          .byte 44,45,28,5,11,2,3,2,9,15,69,255,0,6,26,5,2,0,0,3,1,4,25,0,31,147,148,8,5,4,11,1,3,3
0051D9  3  0B 02 03 02  
0051DD  3  09 0F 45 FF  
0051F7  3  01 05 00 50          .byte 1,5,0,80,80,255,0,6,6,1,0,0,3,2,8,10,0,0,35,34,20,5,1,1,3,0,3,2,8,10,79,79,255,0,6
0051FB  3  50 FF 00 06  
0051FF  3  06 01 00 00  
00521A  3  04 02 00 00          .byte 4,2,0,0,0,3,2,7,21,31,32,34,26,6,2,1,255,3,4,1,6,104,125,103,255,0,5,6,1,0,0,3,2
00521E  3  00 03 02 07  
005222  3  15 1F 20 22  
00523B  3  09 0B 00 00          .byte 9,11,0,0,35,34,0,8,6,10,2,1,2,1,2,5,126,107,255,0,5,9,11,2,0,0,3,1,5,91,0,0,35
00523F  3  23 22 00 08  
005243  3  06 0A 02 01  
00525C  3  21 1E 00 51          .byte 33,30,0,81,8,6,5,4,7,6,11,25,255,0,4,104,103,7,1,3,0,0,3,2,7,0,0,0,35,34,0,0,81
005260  3  08 06 05 04  
005264  3  07 06 0B 19  
00527D  3  00 45 51 45          .byte 0,69,81,69,81,255,0,7,108,9,11,2,3,0,0,3,1,8,10,23,0,35,34,0,0,41,0,0,81,0,41,255,0,7
005281  3  51 FF 00 07  
005285  3  6C 09 0B 02  
00529F  3  17 05 01 03          .byte 23,5,1,3,255,0,4,3,1,8,5,11,35,33,30,255,0,4,41,255,0,5,9,7,6,5,6,11,2,3,255,0,5
0052A3  3  FF 00 04 03  
0052A7  3  01 08 05 0B  
0052C0  3  03 01 08 0A          .byte 3,1,8,10,44,45,0,0,83,255,0,4,22,0,0,9,11,1,2,1,2,1,3,255,0,7,3,1,8,4,7,10,0
0052C4  3  2C 2D 00 00  
0052C8  3  53 FF 00 04  
0052E1  3  52 00 18 09          .byte 82,0,24,9,4,7,5,4,11,1,255,3,5,255,0,9,3,1,2,1,8,7,5,6,5,11,1,2,1,2,1,3,255,0,15
0052E5  3  04 07 05 04  
0052E9  3  0B 01 FF 03  
005304  3  03 03 03 02          .byte 3,3,3,2,1,2,1,2,1,255,3,5,255,0,19,255,3,6,255,0,14
005308  3  01 02 01 02  
00530C  3  01 FF 03 05  
005319  3  05 04 05 06          .byte 5,4,5,6,5,4,4,5,6,11,35,34,12,6,5,4,5,6,14,2,1,2,1,2,13,6,5,4,6,6,3,3,91
00531D  3  05 04 04 05  
005321  3  06 0B 23 22  
00533A  3  03 03 03 64          .byte 3,3,3,100,98,3,0,35,33,75,255,3,5,12,4,4,6,5,5,11,255,3,4,4,255,0,7,98,0,0,35,34,255,0,6
00533E  3  62 03 00 23  
005342  3  21 4B FF 03  
00535D  3  03 03 51 08          .byte 3,3,81,8,10,3,3,0,0,80,80,6,255,0,9,31,32,34,255,0,7,31,40,3,8,10,0,0,0,79,79,4,255,0,4
005361  3  0A 03 03 00  
005365  3  00 50 50 06  
005380  3  1C 00 00 00          .byte 28,0,0,0,28,29,44,45,38,28,255,0,6,41,0,3,4,0,0,0,4,5,15,4,6,7,6,6,7,6,6,7,7,7
005384  3  1C 1D 2C 2D  
005388  3  26 1C FF 00  
0053A2  3  06 06 07 0F          .byte 6,6,7,15,0,0,0,83,0,0,0,20,6,0,0,0,100,41,0,3,3,100,255,3,11,255,0,4,82,29,0,0,3
0053A6  3  00 00 00 53  
0053AA  3  00 00 00 14  
0053C3  3  08 0A FF 00          .byte 8,10,255,0,22,12,7,15,0,0,0,3,12,7,5,4,7,5,255,0,4,130,129,0,0,0,132,131,255,0,12,13,11
0053C7  3  16 0C 07 0F  
0053CB  3  00 00 00 03  
0053E4  3  03 29 28 03          .byte 3,41,40,3,3,0,0,76,37,130,129,38,0,37,132,131,38,75,255,0,7,28,29,0,5,3,0,0,39,30,0,6,7,7
0053E8  3  03 00 00 4C  
0053EC  3  25 82 81 26  
005406  3  06 06 06 07          .byte 6,6,6,7,7,7,4,4,7,7,7,6,6,7,6,7,6,6,6,7,15,3,0,0,41,0,0,255,3,5,100,81,98
00540A  3  07 07 04 04  
00540E  3  07 07 07 06  
005427  3  03 03 03 63          .byte 3,3,3,99,3,100,3,91,3,81,41,3,3,3,100,3,255,0,11,31,40,101,0,0,0,99,255,0,5,41,255,0,18
00542B  3  03 64 03 5B  
00542F  3  03 51 29 03  
005448  3  29 FF 00 1C          .byte 41,255,0,28,124,255,0,5,28,29,0,23,28,255,0,11,85,255,0,5,28,29,82,28,0,0,0,104,255,36,6,103,0,0,0
00544C  3  7C FF 00 05  
005450  3  1C 1D 00 17  
00546B  3  1C FF 00 04          .byte 28,255,0,4,37,82,38,0,255,36,7,103,0,0,0,108,43,107,69,43,107,0,0,0,104,36,103,0,0,0,104,36,36,36
00546F  3  25 52 26 00  
005473  3  FF 24 07 67  
00548D  3  FF 03 05 6C          .byte 255,3,5,108,43,255,65,5,43,0,0,43,0,65,65,65,3,43,65,65,65,0,0,108,43,3,18,16,17,18,18,16,92
005491  3  2B FF 41 05  
005495  3  2B 00 00 2B  
0054AE  3  12 10 12 12          .byte 18,16,18,18,16,92,18,17,92,18,18,17,18,18,92,18,18,16,17,18,16,92,16
0054B2  3  10 5C 12 11  
0054B6  3  5C 12 12 11  
0054C5  3  02 01 04 00          .byte 2,1,4,0,35,33,30,0,4,1,2,3,3,2,13,4,5,6,4,4,6,11,0,5,6,5,4,11,0,5,3,2,5
0054C9  3  23 21 1E 00  
0054CD  3  04 01 02 03  
0054E6  3  00 23 22 00          .byte 0,35,34,0,0,12,4,10,1,2,13,11,255,3,5,39,0,0,41,3,3,3,0,0,3,3,1,8,4,35,34,0,0
0054EA  3  00 0C 04 0A  
0054EE  3  01 02 0D 0B  
005507  3  03 29 08 06          .byte 3,41,8,6,4,11,25,255,0,5,40,255,0,9,3,2,13,11,35,33,30,0,0,0,3,0,0,3,255,0,6,41,255,0,9
00550B  3  04 0B 19 FF  
00550F  3  00 05 28 FF  
00552A  3  03 01 04 65          .byte 3,1,4,101,35,34,255,0,10,134,133,255,0,12,2,13,11,31,32,34,255,0,10,134,133,255,0,5,28,29,0,0,9
00552E  3  23 22 FF 00  
005532  3  0A 86 85 FF  
00554B  3  05 04 01 04          .byte 5,4,1,4,0,0,35,34,255,0,9,31,147,148,75,8,7,6,5,4,4,6,4,11,3,3,2,4,23,0,35,33,30
00554F  3  00 00 23 22  
005553  3  FF 00 09 1F  
00556C  3  FF 00 09 23          .byte 255,0,9,35,34,0,0,9,11,3,3,40,3,41,3,3,0,1,8,11,37,44,45,38,255,0,9,35,33,30,0,6,3
005570  3  22 00 00 09  
005574  3  0B 03 03 28  
00558D  3  00 00 28 FF          .byte 0,0,40,255,0,5,3,1,8,6,5,4,11,255,0,8,31,32,34,0,0,5,3,0,0,39,255,0,6,3,1,2,1
005591  3  00 05 03 01  
005595  3  08 06 05 04  
0055AE  3  06 68 67 FF          .byte 6,104,103,255,0,6,28,37,44,45,38,9,11,3,0,0,41,0,0,9,4,5,2,1,3,3,2,5,107,0,0,0,83
0055B2  3  00 06 1C 25  
0055B6  3  2C 2D 26 09  
0055CF  3  00 00 68 24          .byte 0,0,104,36,122,122,122,36,103,3,255,0,5,9,11,3,3,5,10,2,1,9,11,255,0,4,82,0,0,0,69,108,102
0055D3  3  7A 7A 7A 24  
0055D7  3  67 03 FF 00  
0055F0  3  6B 45 FF 00          .byte 107,69,255,0,6,8,11,3,0,0,1,8,5,5,11,25,0,0,104,36,103,255,0,5,102,255,0,4,84,0,0,0,100
0055F4  3  06 08 0B 03  
0055F8  3  00 00 01 08  
005611  3  03 00 00 00          .byte 3,0,0,0,3,3,0,0,0,80,80,0,0,102,107,255,0,5,105,255,0,4,82,29,255,0,12,79,79,0,0,105,255,0,10
005615  3  03 03 00 00  
005619  3  00 50 50 00  
005634  3  1A 08 05 04          .byte 26,8,5,4,10,0,28,29,0,0,255,5,4,6,5,6,10,255,0,14,3,3,8,104,122,122,36,36,255,3,8,65,65,65
005638  3  0A 00 1C 1D  
00563C  3  00 00 FF 05  
005656  3  00 00 FF 41          .byte 0,0,255,65,10,0,3,3,43,107,3,3,18,18,17,18,18,16,18,16,18,255,86,6,18,18,16,17,18,18,16,18,17
00565A  3  0A 00 03 03  
00565E  3  2B 6B 03 03  
005677  3  12 10 5C 10          .byte 18,16,92,16,16,17
00567B  3  10 11        
00567D  3  FF 00 0E 6F          .byte 255,0,14,111,255,0,18,111,0,63,62,62,62,61,255,0,8,111,0,0,0,63,62,62,61,255,0,4,111,0,0,63,62,62
005681  3  FF 00 12 6F  
005685  3  00 3F 3E 3E  
00569F  3  40 3E 40 3E          .byte 64,62,64,62,62,61,0,0,0,112,255,0,5,63,62,62,64,62,61,0,111,0,0,0,63,64,62,64,62,64,62,64,62
0056A3  3  3E 3D 00 00  
0056A7  3  00 70 FF 00  
0056C0  3  40 3D 00 00          .byte 64,61,0,0,113,0,0,0,63,62,64,62,64,62,64,62,62,61,0,0,63,62,255,64,10,255,0,5,63,62,64,62,64
0056C4  3  71 00 00 00  
0056C8  3  3F 3E 40 3E  
0056E1  3  3E 40 3E 40          .byte 62,64,62,64,62,62,0,0,64,62,62,64,62,64,62,64,62,64,62,62,255,0,4,63,62,64,62,64,62,64,62,64,62
0056E5  3  3E 3E 00 00  
0056E9  3  40 3E 3E 40  
005702  3  40 3E 3D 00          .byte 64,62,61,0,60,64,60,64,60,109,60,109,64,60,60,64,111,0,0,0,109,62,64,60,109,60,109,60,109,60,64,62,64
005706  3  3C 40 3C 40  
00570A  3  3C 6D 3C 6D  
005723  3  00 45 3C 3C          .byte 0,69,60,60,59,53,52,52,56,58,60,60,69,255,0,4,109,60,109,60,59,52,52,56,60,109,109,64,64,0,111,0,40
005727  3  3B 35 34 34  
00572B  3  38 3A 3C 3C  
005744  3  3C 29 34 34          .byte 60,41,52,52,60,60,40,41,255,0,5,69,255,60,4,52,52,56,58,60,60,60,69,0,0,0,41,0,108,52,51,0,0
005748  3  3C 3C 28 29  
00574C  3  FF 00 05 45  
005765  3  29 FF 00 07          .byte 41,255,0,7,40,41,59,53,52,52,41,0,0,39,255,0,8,52,51,255,0,10,41,0,0,0,52,51,107,0,0,41,255,0,8
005769  3  28 29 3B 35  
00576D  3  34 34 29 00  
005788  3  34 33 3A 00          .byte 52,51,58,0,0,19,255,0,6,19,0,0,0,52,51,255,0,11,59,52,51,255,0,4,88,19,0,0,19,88,255,0,4
00578C  3  00 13 FF 00  
005790  3  06 13 00 00  
0057A9  3  34 33 3A FF          .byte 52,51,58,255,0,8,85,0,0,52,51,0,124,0,0,19,78,0,0,78,0,0,0,124,0,52,51,0,0,83,255,0,4
0057AD  3  00 08 55 00  
0057B1  3  00 34 33 00  
0057CA  3  1C 1D 52 2E          .byte 28,29,82,46,47,50,50,48,82,19,19,19,88,0,0,88,19,19,19,82,47,50,50,48,49,82,0,0,28,255,4,10,54
0057CE  3  2F 32 32 30  
0057D2  3  52 13 13 13  
0057EB  3  FF 4A 08 37          .byte 255,74,8,55,255,4,10,2,1,2,1,2,1,2,1,2,1,8,5,6,4,7,4,6,5,4,11,2,1,2,1,2,1
0057EF  3  FF 04 0A 02  
0057F3  3  01 02 01 02  
00580C  3  02 01 02 01          .byte 2,1,2,1,255,3,10,1,2,1,2,1,2,1,2,1,2,255,3,10,18,17,16,18,16,17,18,18,67,255,3,12,68
005810  3  FF 03 0A 01  
005814  3  02 01 02 01  
00582D  3  11 10 11 12          .byte 17,16,17,18,16,18,17,16
005831  3  10 12 11 10  
005835  3  00 03 02 09          .byte 0,3,2,9,4,4,6,6,6,10,109,110,109,110,110,109,110,109,110,110,110,60,0,0,111,255,0,5,3,2,9,4,11
005839  3  04 04 06 06  
00583D  3  06 0A 6D 6E  
005856  3  03 27 1E 03          .byte 3,39,30,3,12,6,10,108,9,6,10,107,110,13,107,41,81,255,0,7,111,3,1,4,11,41,0,41,0,0,3,3,12
00585A  3  0C 06 0A 6C  
00585E  3  09 06 0A 6B  
005877  3  06 0B 03 0C          .byte 6,11,3,12,6,6,11,3,0,39,255,0,4,111,0,0,0,3,2,6,3,255,0,7,3,3,3,0,255,3,4,0,0
00587B  3  06 06 0B 03  
00587F  3  00 27 FF 00  
005898  3  29 FF 00 08          .byte 41,255,0,8,3,1,12,10,255,0,9,134,133,0,0,80,80,255,0,4,111,255,0,6,3,146,1,4,255,0,8,37,134
00589C  3  03 01 0C 0A  
0058A0  3  FF 00 09 86  
0058B9  3  85 26 00 4F          .byte 133,38,0,79,79,255,0,11,3,2,9,4,21,0,0,0,9,10,0,9,4,6,5,10,0,9,4,11,255,0,7,111,0,0
0058BD  3  4F FF 00 0B  
0058C1  3  03 02 09 04  
0058DB  3  01 09 04 0B          .byte 1,9,4,11,0,0,104,103,4,12,4,11,0,0,0,12,7,11,3,101,255,0,10,2,4,11,3,0,0,0,108,12,10
0058DF  3  00 00 68 67  
0058E3  3  04 0C 04 0B  
0058FC  3  03 03 00 00          .byte 3,3,0,0,0,3,3,3,255,0,12,1,12,4,104,103,0,0,0,13,11,255,0,20,2,9,4,107,255,0,4,4,255,0,21
005900  3  00 03 03 03  
005904  3  FF 00 0C 01  
00591F  3  09 04 0B FF          .byte 9,4,11,255,0,5,4,29,255,0,20,4,11,3,0,0,0,104,151,151,122,122,103,255,0,8,132,131,255,0,8,6,25
005923  3  00 05 04 1D  
005927  3  FF 00 14 04  
005940  3  FF 00 05 6C          .byte 255,0,5,108,8,5,107,28,0,85,0,0,0,76,77,37,132,131,38,75,29,255,0,5,4,0,0,0,37,38,0,0,0
005944  3  08 05 6B 1C  
005948  3  00 55 00 00  
005961  3  08 04 06 0A          .byte 8,4,6,10,82,9,7,6,4,7,6,4,5,6,4,6,4,10,0,0,0,6,0,0,0,147,148,0,0,37,9,5,2
005965  3  52 09 07 06  
005969  3  04 07 06 04  
005982  3  0C 04 07 04          .byte 12,4,7,4,11,2,1,2,1,2,1,2,1,2,8,7,6,4,8,10,0,0,35,33,30,0,9,11,12,10,1,2,1
005986  3  0B 02 01 02  
00598A  3  01 02 01 02  
0059A3  3  02 01 FF 03          .byte 2,1,255,3,7,146,3,1,2,1,2,2,8,10,31,32,34,0,0,7,1,1,6,255,3,6,255,0,7,255,3,6,1
0059A7  3  07 92 03 01  
0059AB  3  02 01 02 02  
0059C4  3  05 00 23 22          .byte 5,0,35,34,0,0,5,1,1,4,18,17,16,18,18,16,18,16,18,17,18,18,16,17,18,18,16,18
0059C8  3  00 00 05 01  
0059CC  3  01 04 12 11  
0059E0  3  92 03 03 02          .byte 146,3,3,2,13,5,11,10,2,1,2,255,3,8,2,9,11,0,8,10,1,2,1,2,1,3,1,2,13,11,3,3,8
0059E4  3  0D 05 0B 0A  
0059E8  3  02 01 02 FF  
005A01  3  05 06 0A 01          .byte 5,6,10,1,2,1,2,1,2,1,2,9,11,0,0,26,8,7,6,4,5,4,2,9,5,11,25,255,0,4,98,6,5
005A05  3  02 01 02 01  
005A09  3  02 01 02 09  
005A22  3  06 05 04 06          .byte 6,5,4,6,5,4,6,11,25,0,0,0,255,3,6,9,11,3,81,255,0,5,101,0,0,0,101,99,100,255,0,14,11
005A26  3  05 04 06 0B  
005A2A  3  19 00 00 00  
005A43  3  62 00 29 FF          .byte 98,0,41,255,0,10,100,255,0,21,9,5,10,28,255,0,9,28,255,0,4,83,255,0,10,9,11,81,8,6,4,5,4
005A47  3  00 0A 64 FF  
005A4B  3  00 15 09 05  
005A64  3  06 04 07 04          .byte 6,4,7,4,5,6,7,6,10,0,0,82,255,0,5,5,6,4,7,5,11,25,81,3,3,76,40,0,31,40,41,3,3
005A68  3  05 06 07 06  
005A6C  3  0A 00 00 52  
005A85  3  00 51 03 08          .byte 0,81,3,8,5,6,7,5,6,4,5,7,3,3,81,3,81,3,0,39,30,0,0,39,30,0,41,0,0,0,31,40,0
005A89  3  05 06 07 05  
005A8D  3  06 04 05 07  
005AA6  3  03 51 00 00          .byte 3,81,0,0,255,3,5,0,31,40,0,39,30,0,81,0,0,0,41,255,0,7,41,0,31,40,255,0,9,81,0,81,0,0
005AAA  3  FF 03 05 00  
005AAE  3  1F 28 00 27  
005AC8  3  29 FF 00 0E          .byte 41,255,0,14,81,255,0,9,41,31,40,255,0,17,41,255,0,11,81,255,0,29,41,255,0,9,28,29,0,24,255,0,24
005ACC  3  51 FF 00 09  
005AD0  3  29 1F 28 FF  
005AE9  3  09 07 04 06          .byte 9,7,4,6,5,6,4,5,6,11,25,0,0,26,12,5,6,4,0,0,28,27,0,0,37,38,0,23,28,9,11,2,1
005AED  3  05 06 04 05  
005AF1  3  06 0B 19 00  
005B0A  3  02 01 02 01          .byte 2,1,2,1,2,1,101,255,0,5,1,2,1,7,6,6,5,11,31,147,148,104,122,103,6,255,3,8,255,0,8,3,3
005B0E  3  02 01 65 FF  
005B12  3  00 05 01 02  
005B2B  3  02 01 02 07          .byte 2,1,2,7,98,0,35,33,30,9,7,11,255,0,9,65,65,0,0,255,65,4,0,18,17,16,6,0,76,32,34,0,6
005B2F  3  62 00 23 21  
005B33  3  1E 09 07 0B  
005B4C  3  11 12 10 12          .byte 17,18,16,18,18,16,18,17,18,16,18,255,86,7,17,18
005B50  3  12 10 12 11  
005B54  3  12 10 12 FF  
005B5C  3  02 01 02 01          .byte 2,1,2,1,9,4,5,5,6,5,10,1,2,1,2,9,4,6,5,5,6,5,10,1,255,3,6,5,6,5,4,11,3
005B60  3  09 04 05 05  
005B64  3  06 05 0A 01  
005B7D  3  51 03 51 03          .byte 81,3,81,3,8,6,5,4,7,11,3,0,0,81,3,81,8,10,2,1,2,1,2,1,3,3,81,3,0,0,81,0,39
005B81  3  08 06 05 04  
005B85  3  07 0B 03 00  
005B9E  3  1E FF 03 04          .byte 30,255,3,4,81,3,0,0,0,81,76,40,3,8,6,4,5,5,5,10,0,0,41,0,0,0,39,77,40,255,0,4,76
005BA2  3  51 03 00 00  
005BA6  3  00 51 4C 28  
005BBF  3  28 FF 00 04          .byte 40,255,0,4,81,0,41,0,3,81,255,3,4,5,255,0,6,39,30,41,255,0,5,41,255,0,4,41,134,133,0,0,81
005BC3  3  51 00 29 00  
005BC7  3  03 51 FF 03  
005BE0  3  00 00 00 09          .byte 0,0,0,9,11,0,0,84,0,0,0,41,255,0,13,134,133,0,0,41,0,0,9,11,2,0,0,82,255,0,5,130,129
005BE4  3  0B 00 00 54  
005BE8  3  00 00 00 29  
005C01  3  FF 00 04 1C          .byte 255,0,4,28,255,0,4,123,147,148,103,0,0,0,9,11,1,3,5,4,6,11,255,0,4,130,129,0,28,23,123,151,122,122
005C05  3  FF 00 04 7B  
005C09  3  93 94 67 00  
005C23  3  72 67 00 23          .byte 114,103,0,35,34,0,0,0,26,12,10,2,255,3,4,0,0,0,104,36,147,148,104,151,151,103,8,6,107,0,0,0,35
005C27  3  22 00 00 00  
005C2B  3  1A 0C 0A 02  
005C44  3  22 FF 00 04          .byte 34,255,0,4,3,8,10,1,255,0,8,35,34,0,0,108,8,7,7,10,0,0,0,35,33,30,255,0,4,3,12,5,255,0,8
005C48  3  03 08 0A 01  
005C4C  3  FF 00 08 23  
005C67  3  23 21 1E 00          .byte 35,33,30,0,0,26,8,6,11,0,0,0,35,34,255,0,6,3,3,255,0,7,31,32,34,255,0,4,20,5,25,0,0,0
005C6B  3  00 1A 08 06  
005C6F  3  0B 00 00 00  
005C89  3  23 22 FF 00          .byte 35,34,255,0,16,35,34,255,0,5,6,21,0,0,31,32,34,255,0,10,28,29,0,0,76,37,44,45,38,75,0,0,9
005C8D  3  10 23 22 FF  
005C91  3  00 05 06 15  
005CAA  3  0B FF 00 04          .byte 11,255,0,4,35,34,255,0,8,12,7,5,4,5,4,7,6,7,6,6,6,7,6,15,98,255,0,4,35,33,75,255,0,4
005CAE  3  23 22 FF 00  
005CB2  3  08 0C 07 05  
005CCC  3  1C 00 00 09          .byte 28,0,0,9,11,3,3,0,0,0,255,3,4,100,3,3,3,101,255,0,4,35,34,255,0,5,8,6,5,5,255,0,12
005CD0  3  0B 03 03 00  
005CD4  3  00 00 FF 03  
005CED  3  53 FF 00 06          .byte 83,255,0,6,35,34,255,0,5,9,11,2,4,37,38,75,0,28,0,0,0,89,0,0,0,82,255,0,5,28,44,45,38
005CF1  3  23 22 FF 00  
005CF5  3  05 09 0B 02  
005D0E  3  4B 00 09 06          .byte 75,0,9,6,11,2,3,5,32,33,8,4,5,6,11,0,8,7,5,5,4,4,7,4,5,6,4,5,6,7,5,4,11
005D12  3  0B 02 03 05  
005D16  3  20 21 08 04  
005D2F  3  02 01 03 92          .byte 2,1,3,146
005D33  3  00 08 06 04          .byte 0,8,6,4,10,1,1,1,9,6,4,6,11,255,106,4,8,5,11,255,106,5,8,6,10,2,3,0,100,3,3,8,10
005D37  3  0A 01 01 01  
005D3B  3  09 06 04 06  
005D54  3  09 06 0B 00          .byte 9,6,11,0,0,3,255,0,6,3,255,0,7,3,8,10,1,255,0,4,3,12,11,25,3,255,0,18,26,4,2,255,0,5
005D58  3  00 03 FF 00  
005D5C  3  06 03 FF 00  
005D76  3  03 03 FF 00          .byte 3,3,255,0,20,3,5,1,255,0,18,27,0,0,28,255,0,5,3,4,2,255,0,17,9,4,10,104,151,122,103,0,0,0
005D7A  3  14 03 05 01  
005D7E  3  FF 00 12 1B  
005D98  3  03 06 01 FF          .byte 3,6,1,255,0,13,28,29,0,0,4,2,5,0,102,107,255,0,4,28,8,10,255,0,5,128,127,255,0,4,104,36,122,122
005D9C  3  00 0D 1C 1D  
005DA0  3  00 00 04 02  
005DBA  3  67 09 0B 01          .byte 103,9,11,1,4,21,102,255,0,4,104,151,103,8,255,0,4,28,128,127,255,0,6,108,102,0,6,1,2,4,0,105,255,0,5
005DBE  3  04 15 66 FF  
005DC2  3  00 04 68 97  
005DDD  3  69 6B FF 00          .byte 105,107,255,0,4,104,36,147,148,36,103,255,0,5,105,9,11,2,1,5,104,151,122,103,132,131,255,0,9,35,34,69,255,0,6
005DE1  3  04 68 24 93  
005DE5  3  94 24 67 FF  
005E00  3  09 0B 02 92          .byte 9,11,2,146,2,8,10,102,107,0,132,131,255,0,9,35,33,30,255,0,6,5,1,3,3,3,1,8,7,10,31,147,148
005E04  3  02 08 0A 66  
005E08  3  6B 00 84 83  
005E21  3  4B FF 00 07          .byte 75,255,0,7,31,32,34,255,0,6,26,4,2,3,0,0,3,1,2,5,0,35,34,255,0,9,35,34,255,0,7,8,10
005E25  3  1F 20 22 FF  
005E29  3  00 06 1A 04  
005E42  3  01 03 00 00          .byte 1,3,0,0,3,1,4,25,35,33,30,255,0,5,76,77,37,44,45,38,9,4,5,10,28,24,29,5,2,3,0,0,3
005E46  3  03 01 04 19  
005E4A  3  23 21 1E FF  
005E63  3  02 08 0A 2C          .byte 2,8,10,44,45,38,0,0,0,4,5,6,4,5,6,4,5,11,1,2,8,5,6,5,11,1,3,0,0,0,3,1,8
005E67  3  2D 26 00 00  
005E6B  3  00 04 05 06  
005E84  3  07 05 04 06          .byte 7,5,4,6,5,4,2,1,2,1,2,1,2,1,2,3,3,1,2,1,2,1,3,255,0,5,3,2,1,2,1,2,1
005E88  3  05 04 02 01  
005E8C  3  02 01 02 01  
005EA5  3  02 FF 03 09          .byte 2,255,3,9,0,0,255,3,5,255,0,7,255,3,7,17,18,16,18,17,18,16,18,18,16,18,17,18,16,17,18,18,16
005EA9  3  00 00 FF 03  
005EAD  3  05 FF 00 07  
005EC6  3  12 12 12 10          .byte 18,18,18,16,18,17,18,18,16,17,18,16
005ECA  3  12 11 12 12  
005ECE  3  10 11 12 10  
005ED2  3  FF 00 04 03          .byte 255,0,4,3,2,5,0,8,5,4,7,4,14,2,1,2,13,6,4,11,106,106,106,8,10,2,1,2,3,0,3,3,3
005ED6  3  02 05 00 08  
005EDA  3  05 04 07 04  
005EF3  3  02 09 0F 00          .byte 2,9,15,0,3,39,30,41,3,8,7,5,6,11,41,40,3,0,0,0,99,8,6,5,10,1,3,2,2,2,9,15,3
005EF7  3  03 27 1E 29  
005EFB  3  03 08 07 05  
005F14  3  00 4C 28 00          .byte 0,76,40,0,0,0,3,39,3,40,3,0,39,30,0,0,0,100,3,40,41,8,10,2,9,5,5,11,25,0,0,0,39
005F18  3  00 00 03 27  
005F1C  3  03 28 03 00  
005F35  3  1E 00 00 1F          .byte 30,0,0,31,40,0,41,0,31,40,255,0,6,41,0,3,8,9,15,40,41,98,255,0,4,41,255,0,4,39,30,0,0,0
005F39  3  28 00 29 00  
005F3D  3  1F 28 FF 00  
005F57  3  29 FF 00 09          .byte 41,255,0,9,9,15,3,39,75,98,0,28,121,255,0,6,39,75,255,0,12,9,6,0,31,40,0,101,104,151,122,103,255,0,4
005F5B  3  09 0F 03 27  
005F5F  3  4B 62 00 1C  
005F7A  3  4C 28 FF 00          .byte 76,40,255,0,12,26,8,7,0,0,41,0,0,0,102,107,255,0,6,41,255,0,6,28,29,121,255,0,4,100,8,255,0,6
005F7E  3  0C 1A 08 07  
005F82  3  00 00 29 00  
005F9C  3  69 FF 00 0E          .byte 105,255,0,14,104,151,122,103,255,0,4,3,255,0,69,132,131,0,0,134,133,0,0,130,129,255,0,18,76,37,132,131,38
005FA0  3  68 97 7A 67  
005FA4  3  FF 00 04 03  
005FBD  3  25 86 85 26          .byte 37,134,133,38,37,130,129,38,75,255,0,15,29,9,4,7,5,4,7,7,4,5,7,5,4,7,10,255,0,12,28,29,9
005FC1  3  25 82 81 26  
005FC5  3  4B FF 00 0F  
005FDE  3  04 0B 02 01          .byte 4,11,2,1,2,1,2,1,2,1,2,1,2,1,8,10,28,29,23,255,0,4,28,4,7,4,5,4,11,2,1,255,3,12
005FE2  3  02 01 02 01  
005FE6  3  02 01 02 01  
006000  3  01 08 05 07          .byte 1,8,5,7,4,7,4,5,6,4,1,2,1,2,1,2,3,3,3,255,0,10,3,3,1,2,1,2,1,2,1,2,1
006004  3  04 07 04 05  
006008  3  06 04 01 02  
006021  3  FF 03 07 FF          .byte 255,3,7,255,0,13,255,3,10,18,16,17,18,16,18,18,16,17,18,18,16,17,18,16,18,16,18,17,16,18,18,16,18
006025  3  00 0D FF 03  
006029  3  0A 12 10 11  
006042  3  11 12 10 12          .byte 17,18,16,18,18,16
006046  3  12 10        
006048  3  04 04 0A 02          .byte 4,4,10,2,1,9,4,11,0,8,4,10,1,2,13,6,4,4,10,2,1,2,13,6,4,5,6,14,1,3,3,3,12
00604C  3  01 09 04 0B  
006050  3  00 08 04 0A  
006069  3  06 04 05 06          .byte 6,4,5,6,101,0,0,0,8,4,4,4,11,81,81,12,6,10,13,11,3,0,0,3,8,14,1,0,0,255,3,4,8
00606D  3  65 00 00 00  
006071  3  08 04 04 04  
00608A  3  0A 00 00 00          .byte 10,0,0,0,3,81,3,3,3,81,81,3,99,8,11,25,255,0,4,3,8,6,255,0,6,3,6,21,0,0,0,81,0,0,0
00608E  3  03 51 03 03  
006092  3  03 51 51 03  
0060AD  3  29 27 1E 64          .byte 41,39,30,100,3,3,255,0,6,3,8,255,0,6,3,8,10,0,0,0,39,30,0,0,0,41,255,0,10,3,9,4,6
0060B1  3  03 03 FF 00  
0060B5  3  06 03 08 FF  
0060CE  3  0F FF 00 04          .byte 15,255,0,4,3,6,0,0,0,81,0,132,131,255,0,11,3,9,11,0,41,98,255,0,4,9,15,0,0,0,41,0,132
0060D2  3  03 06 00 00  
0060D6  3  00 51 00 84  
0060EF  3  83 00 26 4B          .byte 131,0,38,75,255,0,8,26,8,10,0,0,101,0,0,12,7,15,255,0,5,31,147,148,8,6,6,6,10,255,0,7,3
0060F3  3  FF 00 08 1A  
0060F7  3  08 0A 00 00  
006110  3  05 FF 00 05          .byte 5,255,0,5,23,5,98,255,0,6,35,34,100,41,81,0,8,104,103,255,0,5,3,5,0,0,28,29,9,6,11,255,0,6
006114  3  17 05 62 FF  
006118  3  00 06 23 22  
006132  3  4C 20 22 00          .byte 76,32,34,0,0,81,13,11,107,101,255,0,6,5,7,6,7,7,4,11,255,0,8,35,33,30,0,41,6,255,0,7,104
006136  3  00 51 0D 0B  
00613A  3  6B 65 FF 00  
006153  3  24 67 00 00          .byte 36,103,0,0,31,40,100,41,255,0,8,35,34,0,0,0,12,10,255,0,6,31,40,101,0,0,0,41,255,0,9,31,32
006157  3  1F 28 64 29  
00615B  3  FF 00 08 23  
006174  3  22 00 00 00          .byte 34,0,0,0,100,12,6,104,103,255,0,4,41,255,0,5,130,129,255,0,8,35,33,75,0,0,22,0,100,8,10,255,0,8
006178  3  64 0C 06 68  
00617C  3  67 FF 00 04  
006196  3  4C 25 82 81          .byte 76,37,130,129,38,77,75,0,0,76,77,37,44,45,38,9,4,5,10,24,23,5,255,0,6,5,5,6,5,7,7,6,4
00619A  3  26 4D 4B 00  
00619E  3  00 4C 4D 25  
0061B7  3  05 07 07 06          .byte 5,7,7,6,4,5,7,5,5,11,2,1,8,7,5,5,4,5,6,4,5,4,1,2,1,2,1,2,1,2,1,2,1
0061BB  3  04 05 07 05  
0061BF  3  05 0B 02 01  
0061D8  3  02 02 01 02          .byte 2,2,1,2,2,1,2,3,3,1,2,1,2,1,2,1,2,1,2,255,3,18,0,0,255,3,10,18,16,17,18,16,18
0061DC  3  02 01 02 03  
0061E0  3  03 01 02 01  
0061F9  3  11 10 12 12          .byte 17,16,18,18,18,16,18,18,17,16,18,16,18,17,16,18,16,18,18,16,17,18,18,16
0061FD  3  12 10 12 12  
006201  3  11 10 12 10  
006211  3  04 23 21 1E          .byte 4,35,33,30,8,6,5,11,0,8,5,6,5,11,0,8,6,11,0,8,11,0,8,5,11,0,8,6,4,4,5,35,34
006215  3  08 06 05 0B  
006219  3  00 08 05 06  
006232  3  00 00 00 03          .byte 0,0,0,3,3,0,3,3,39,41,3,0,31,40,3,0,3,3,0,3,41,3,0,100,41,81,3,7,35,33,75,255,0,4
006236  3  03 00 03 03  
00623A  3  27 29 03 00  
006254  3  84 83 00 29          .byte 132,131,0,41,255,0,4,41,255,0,4,128,127,255,0,5,39,30,4,44,45,38,0,0,0,37,132,131,38,75,255,0,7
006258  3  FF 00 04 29  
00625C  3  FF 00 04 80  
006275  3  4C 25 80 7F          .byte 76,37,128,127,38,255,0,4,41,0,8,4,7,10,0,0,0,9,7,4,7,10,255,0,4,28,29,0,9,4,6,4,6
006279  3  26 FF 00 04  
00627D  3  29 00 08 04  
006296  3  0A FF 00 05          .byte 10,255,0,5,3,2,1,5,5,7,7,11,30,0,26,12,6,6,15,0,12,7,6,15,3,3,3,26,8,4,6,4,6
00629A  3  03 02 01 05  
00629E  3  05 07 07 0B  
0062B7  3  04 92 01 09          .byte 4,146,1,9,11,31,40,3,3,0,0,0,3,3,3,0,0,0,3,3,3,0,0,0,255,3,7,1,9,11,101,0,39
0062BB  3  0B 1F 28 03  
0062BF  3  03 00 00 00  
0062D8  3  1E FF 00 17          .byte 30,255,0,23,9,11,98,0,0,41,255,0,24,7,21,101,255,0,27,5,255,0,6,104,6,10,0,28,29,255,0,5,24
0062DC  3  09 0B 62 00  
0062E0  3  00 29 FF 00  
0062F9  3  00 00 00 1B          .byte 0,0,0,27,0,0,9,4,7,6,6,8,10,255,0,6,101,12,6,7,6,7,6,6,255,7,4,6,6,6,7,6,11
0062FD  3  00 00 09 04  
006301  3  07 06 06 08  
00631A  3  19 00 00 00          .byte 25,0,0,0,2,8,4,11,25,255,0,5,101,255,0,5,100,255,0,7,100,255,0,5,3,2,8,10,255,0,27,3,2
00631E  3  02 08 04 0B  
006322  3  19 FF 00 05  
00633B  3  08 07 06 0A          .byte 8,7,6,10,27,255,0,9,76,37,0,0,38,28,255,0,9,3,2,1,2,8,7,10,76,37,38,75,0,9,7,4,5
00633F  3  1B FF 00 09  
006343  3  4C 25 00 00  
00635C  3  06 07 05 06          .byte 6,7,5,6,4,7,4,7,5,6,4,7,0,0,0,3,3,3,2,1,8,10,147,148,9,7,11,2,1,2,1,2,1
006360  3  04 07 04 07  
006364  3  05 06 04 07  
00637D  3  02 01 02 01          .byte 2,1,2,1,2,1,2,1,2,255,0,6,3,3,2,5,35,33,7,1,2,255,3,15,255,18,9,4,32,34,5,255,18,17
006381  3  02 01 02 01  
006385  3  02 FF 00 06  
00639F  3  04 23 21 1E          .byte 4,35,33,30,8,7,5,10,1,2,1,2,3,3,1,2,1,2,9,7,4,7,4,10,1,2,1,3,0,0,7,35,34
0063A3  3  08 07 05 0A  
0063A7  3  01 02 01 02  
0063C0  3  00 00 03 03          .byte 0,0,3,3,8,6,5,4,10,8,5,5,4,6,4,11,3,3,39,3,8,7,5,10,2,3,3,5,35,34,255,0,4
0063C4  3  08 06 05 04  
0063C8  3  0A 08 05 05  
0063E1  3  03 64 00 00          .byte 3,100,0,0,255,3,4,25,3,41,3,0,76,40,0,3,40,3,8,10,1,2,7,35,34,255,0,18,41,0,31,40,0
0063E5  3  FF 03 04 19  
0063E9  3  03 29 03 00  
006402  3  03 08 04 0A          .byte 3,8,4,10,4,35,33,30,255,0,20,39,30,0,3,3,4,5,35,34,255,0,21,41,0,134,133,9,11,7,44,45,38
006406  3  04 23 21 1E  
00640A  3  FF 00 14 27  
006423  3  FF 00 0B 1B          .byte 255,0,11,27,255,0,10,134,133,4,1,8,4,7,10,0,28,29,255,0,5,104,36,122,122,122,103,8,6,5,4,4,6
006427  3  FF 00 0A 86  
00642B  3  85 04 01 08  
006444  3  0B 1F 93 94          .byte 11,31,147,148,8,10,2,1,2,8,4,7,4,5,10,0,0,0,100,0,0,0,80,80,100,81,91,4,25,0,0,0,35
006448  3  08 0A 02 01  
00644C  3  02 08 04 07  
006465  3  21 1E 05 03          .byte 33,30,5,3,3,3,1,2,1,2,4,11,255,0,4,115,116,0,79,79,31,40,0,11,255,0,4,35,34,20,4,0,0,0
006469  3  03 03 01 02  
00646D  3  01 02 04 0B  
006487  3  03 03 02 01          .byte 3,3,2,1,4,25,255,0,4,147,148,104,36,103,0,41,0,98,0,0,0,37,44,45,38,6,0,0,3,3,1,9,4
00648B  3  04 19 FF 00  
00648F  3  04 93 94 68  
0064A8  3  0B FF 00 05          .byte 11,255,0,5,35,33,30,255,0,9,12,5,6,4,11,3,3,2,1,2,4,25,255,0,6,35,34,255,0,11,4,1,2
0064AC  3  23 21 1E FF  
0064B0  3  00 09 0C 05  
0064C9  3  01 03 01 09          .byte 1,3,1,9,4,7,11,255,0,7,35,33,75,0,0,124,255,0,5,28,29,7,2,3,3,2,9,11,255,0,9,31,32
0064CD  3  04 07 0B FF  
0064D1  3  00 07 23 21  
0064EA  3  22 00 00 00          .byte 34,0,0,0,82,0,0,0,22,9,4,7,11,1,3,0,9,11,25,255,0,9,37,44,45,38,9,4,6,7,4,7,4
0064EE  3  52 00 00 00  
0064F2  3  16 09 04 07  
00650B  3  0B 01 02 01          .byte 11,1,2,1,2,3,0,4,255,0,10,8,5,5,4,6,11,1,2,1,2,1,2,1,255,3,5,0,7,115,116,255,0,4
00650F  3  02 03 00 04  
006513  3  FF 00 0A 08  
00652D  3  1D 17 00 00          .byte 29,23,0,0,9,11,1,2,1,2,255,3,8,255,0,5,4,147,148,8,6,5,6,7,6,4,5,11,2,255,3,5,255,0,12
006531  3  09 0B 01 02  
006535  3  01 02 FF 03  
006550  3  05 23 21 4B          .byte 5,35,33,75,5,1,3,255,0,23,4,32,34,3,8,10,2,3,0,0,0,255,3,6,255,0,13,7,35,34,0,3,8
006554  3  05 01 03 FF  
006558  3  00 17 04 20  
006571  3  0A 01 03 03          .byte 10,1,3,3,3,2,1,2,1,2,1,3,255,0,4,3,3,255,0,6,5,32,34,0,0,3,8,10,2,1,2,13,5,5
006575  3  03 02 01 02  
006579  3  01 02 01 03  
006593  3  04 04 0A 01          .byte 4,4,10,1,3,3,3,2,1,2,3,3,255,0,4,7,35,33,30,134,133,3,8,5,4,4,11,100,3,81,3,8,10
006597  3  03 03 03 02  
00659B  3  01 02 03 03  
0065B4  3  01 02 01 09          .byte 1,2,1,9,5,10,1,2,3,0,0,0,4,44,45,29,134,133,0,3,81,101,81,3,0,0,41,31,40,8,7,5,5
0065B8  3  05 0A 01 02  
0065BC  3  03 00 00 00  
0065D5  3  0B 51 08 07          .byte 11,81,8,7,10,2,3,0,0,8,4,6,4,147,148,30,0,41,0,39,30,255,0,4,41,39,30,0,0,31,40,0,3
0065D9  3  0A 02 03 00  
0065DD  3  00 08 04 06  
0065F6  3  05 01 03 00          .byte 5,1,3,0,0,3,1,13,11,35,34,255,0,4,41,255,0,6,41,255,0,4,41,0,0,6,2,3,0,0,3,2,5
0065FA  3  00 03 01 0D  
0065FE  3  0B 23 22 FF  
006617  3  65 23 22 FF          .byte 101,35,34,255,0,18,20,5,1,3,0,0,3,1,5,31,32,33,75,255,0,15,80,80,0,8,10,2,3,0,2,13,11
00661B  3  00 12 14 05  
00661F  3  01 03 00 00  
006638  3  00 23 22 FF          .byte 0,35,34,255,0,9,128,127,255,0,5,79,79,28,0,4,1,3,0,1,5,21,0,35,33,30,0,0,28,13,5,10,0
00663C  3  00 09 80 7F  
006640  3  FF 00 05 4F  
006659  3  25 80 7F 26          .byte 37,128,127,38,0,0,0,104,151,36,36,36,6,2,3,0,13,11,0,76,32,34,0,0,9,5,11,2,8,10,104,151,36,36
00665D  3  00 00 00 68  
006661  3  97 24 24 24  
00667B  3  67 00 00 00          .byte 103,0,0,0,105,0,69,43,8,10,1,3,5,0,0,0,35,34,0,0,5,11,1,3,1,8,10,69,108,43,0,0,0
00667F  3  69 00 45 2B  
006683  3  08 0A 01 03  
00669C  3  68 24 67 00          .byte 104,36,103,0,43,0,5,2,3,4,0,0,37,44,45,38,9,11,2,3,0,3,2,8,4,74,92,255,74,4,92,74,74
0066A0  3  2B 00 05 02  
0066A4  3  03 04 00 00  
0066BD  3  5C 4A 05 01          .byte 92,74,5,1,3,5,147,148,30,9,5,5,11,2,3,0,0,0,3,1,6,87,92,87,87,55,5,4,6,5,4,6,11
0066C1  3  03 05 93 94  
0066C5  3  1E 09 05 05  
0066DE  3  02 03 06 23          .byte 2,3,6,35,34,0,5,11,2,1,3,255,0,4,3,2,5,87,92,87,55,11,1,2,1,2,1,2,1,3,0,5,35
0066E2  3  22 00 05 0B  
0066E6  3  02 01 03 FF  
0066FF  3  21 1E 06 01          .byte 33,30,6,1,146,3,3,255,0,4,3,1,8,6,6,6,11,2,255,3,7,0,0,5,32,34,0,5,2,3,255,0,7
006703  3  92 03 03 FF  
006707  3  00 04 03 01  
006720  3  03 01 02 01          .byte 3,1,2,1,2,1,3,255,0,9
006724  3  02 01 03 FF  
006728  3  00 09        
00672A  3  FF 00 04 6F          .byte 255,0,4,111,255,0,6,63,62,62,61,255,0,8,106,111,255,0,5,111,255,0,6,111,0,63,63,255,62,5,61,0,111
00672E  3  FF 00 06 3F  
006732  3  3E 3E 3D FF  
00674B  3  FF 00 04 6A          .byte 255,0,4,106,0,0,0,111,255,0,9,63,62,62,62,64,62,64,62,64,62,62,61,0,0,0,111,106,255,0,4,9,5
00674F  3  00 00 00 6F  
006753  3  FF 00 09 3F  
00676C  3  00 00 6F 00          .byte 0,0,111,0,0,0,63,62,64,62,64,62,64,62,64,62,64,62,64,61,255,106,4,0,0,9,5,11,1,255,0,6,64,64
006770  3  00 00 3F 3E  
006774  3  40 3E 40 3E  
00678E  3  3E 40 3E 40          .byte 62,64,62,64,62,64,62,64,62,64,62,64,106,0,0,9,5,7,11,1,2,3,255,0,6,60,64,64,64,60,64,60,64
006792  3  3E 40 3E 40  
006796  3  3E 40 3E 40  
0067AF  3  3C 40 3C 3E          .byte 60,64,60,62,60,64,0,0,0,5,2,1,2,3,3,0,111,255,0,5,255,60,4,59,53,52,52,56,58,255,60,4,0,0
0067B3  3  3C 40 00 00  
0067B7  3  00 05 02 01  
0067D1  3  1A 0C 0A 02          .byte 26,12,10,2,3,146,3,255,0,4,111,0,0,0,255,60,5,52,52,255,60,4,81,0,0,0,80,80,5,1,3,3,255,0,9
0067D5  3  03 92 03 FF  
0067D9  3  00 04 6F 00  
0067F4  3  29 3C 3C 51          .byte 41,60,60,81,108,57,51,25,60,60,0,81,0,0,0,79,79,5,2,3,255,0,13,41,0,52,51,107,0,41,0,41,0,0,0
0067F8  3  6C 39 33 19  
0067FC  3  3C 3C 00 51  
006817  3  09 05 0B 01          .byte 9,5,11,1,3,255,0,15,52,51,58,255,0,4,135,136,0,6,1,2,3,255,0,15,59,52,51,255,0,4,37,135,136
00681B  3  03 FF 00 0F  
00681F  3  34 33 3A FF  
006838  3  09 0B 02 03          .byte 9,11,2,3,255,0,17,57,51,255,0,4,8,5,6,11,1,3,255,0,13,83,255,0,4,52,51,0,0,0,84,0,100
00683C  3  FF 00 11 39  
006840  3  33 FF 00 04  
006859  3  05 01 92 03          .byte 5,1,146,3,255,0,10,28,28,29,82,28,23,46,47,50,50,48,49,28,82,29,9,11,2,3,255,0,7,4,6,5,6
00685D  3  FF 00 0A 1C  
006861  3  1C 1D 52 1C  
00687A  3  07 05 06 04          .byte 7,5,6,4,5,4,4,6,5,6,6,6,5,6,7,11,1,3,255,0,8,1,2,1,2,1,2,1,2,1,2,1,2
00687E  3  05 04 04 06  
006882  3  05 06 06 06  
00689B  3  01 02 01 02          .byte 1,2,1,2,1,2,1,2,3,255,0,9,255,3,20,255,0,10,18,17,18,16,18,18,16,17,18,18,16,18,18,16,18
00689F  3  01 02 01 02  
0068A3  3  03 FF 00 09  
0068BC  3  11 10 12 10          .byte 17,16,18,16,18,17,18,18,16,18,16,18,17,16,18
0068C0  3  12 11 12 12  
0068C4  3  10 12 10 12  
0068CB  3  FF 00 05 6F          .byte 255,0,5,111,255,0,8,111,255,0,9,111,255,0,6,111,255,0,7,111,0,63,62,61,0,0,111,0,63,62,62,61,255,0,4
0068CF  3  FF 00 08 6F  
0068D3  3  FF 00 09 6F  
0068EE  3  6F FF 00 07          .byte 111,255,0,7,63,61,0,63,62,61,109,62,62,62,61,109,62,61,109,62,62,63,62,61,255,0,6,106,0,63,64,62,62
0068F2  3  3F 3D 00 3F  
0068F6  3  3E 3D 6D 3E  
00690F  3  6D 3E 3E 3E          .byte 109,62,62,62,64,109,62,62,64,109,62,64,109,62,62,64,62,62,61,255,0,4,111,111,0,64,62,64,109,64,62,64,62
006913  3  40 6D 3E 3E  
006917  3  40 6D 3E 40  
006930  3  40 6D 40 3E          .byte 64,109,64,62,64,62,62,62,64,109,64,62,64,62,64,62,0,111,0,0,106,0,64,64,64,109,64,64,60,64,64,60,60,60
006934  3  40 3E 3E 3E  
006938  3  40 6D 40 3E  
006952  3  40 6D 3C 40          .byte 64,109,60,64,60,60,60,64,60,64,64,64,255,0,4,106,0,0,60,108,102,60,60,43,60,60,60,43,60,60,60,102,60,60
006956  3  3C 3C 3C 40  
00695A  3  3C 40 40 40  
006974  3  2B 3C 3C 66          .byte 43,60,60,102,60,60,255,0,5,106,255,0,4,102,89,89,43,0,0,108,43,107,89,89,102,0,0,43,107,0,102,255,0,5
006978  3  3C 3C FF 00  
00697C  3  05 6A FF 00  
006996  3  6F 00 6A FF          .byte 111,0,106,255,0,4,105,0,0,43,0,0,0,43,0,0,0,105,0,0,43,0,0,105,255,0,7,106,0,0,0,80,80
00699A  3  00 04 69 00  
00699E  3  00 2B 00 00  
0069B7  3  FF 00 06 2B          .byte 255,0,6,43,255,0,6,66,255,0,10,106,0,0,0,79,79,255,0,6,66,255,0,17,106,0,0,104,122,103,255,0,4
0069BB  3  FF 00 06 42  
0069BF  3  FF 00 0A 6A  
0069D8  3  82 81 FF 00          .byte 130,129,255,0,18,106,0,0,0,102,0,0,0,76,37,130,129,38,75,255,0,5,29,28,22,255,0,8,106,0,0,0,105
0069DC  3  12 6A 00 00  
0069E0  3  00 66 00 00  
0069F9  3  00 00 00 68          .byte 0,0,0,104,151,122,122,36,103,255,0,4,104,151,122,36,103,255,0,7,106,255,0,8,69,43,107,255,0,7,69,43,107
0069FD  3  97 7A 7A 24  
006A01  3  67 FF 00 04  
006A1A  3  00 00 00 1C          .byte 0,0,0,28,28,29,0,0,106,255,0,9,43,255,0,9,43,0,0,0,8,5,6,7,5,4,106,255,0,9,43,255,0,9
006A1E  3  1C 1D 00 00  
006A22  3  6A FF 00 09  
006A3C  3  2B 00 00 00          .byte 43,0,0,0,3,2,1,2,1,2,255,65,10,43,255,65,9,43,255,65,4,255,3,5,16,18,18,18,16,16,18,17,18
006A40  3  03 02 01 02  
006A44  3  01 02 FF 41  
006A5D  3  10 5C 12 10          .byte 16,92,18,16,17,18,18,16,18,17,18,92,18,18,16,17,18,16,18,16,18
006A61  3  11 12 12 10  
006A65  3  12 11 12 5C  
006A72  3  00 00 00 6F          .byte 0,0,0,111,255,0,10,111,0,8,10,2,1,2,1,2,1,3,3,3,0,0,0,111,255,0,6,111,255,0,8,26,8
006A76  3  FF 00 0A 6F  
006A7A  3  00 08 0A 02  
006A93  3  05 04 05 06          .byte 5,4,5,6,5,10,1,2,1,3,255,0,15,111,0,0,0,3,81,98,0,0,26,8,6,5,10,1,3,3,0,0,111
006A97  3  05 0A 01 02  
006A9B  3  01 03 FF 00  
006AB4  3  FF 00 05 6F          .byte 255,0,5,111,255,0,9,81,101,0,0,0,99,81,98,8,10,1,2,255,0,18,81,255,0,4,99,81,0,26,8,6,5
006AB8  3  FF 00 09 51  
006ABC  3  65 00 00 00  
006AD5  3  FF 00 0B 6F          .byte 255,0,11,111,255,0,6,41,255,0,4,100,41,0,0,3,81,98,111,255,0,27,41,255,0,6,111,255,0,81,24,255,0,16
006AD9  3  FF 00 06 29  
006ADD  3  FF 00 04 64  
006AF7  3  55 FF 00 07          .byte 85,255,0,7,27,28,29,9,4,6,4,4,255,0,14,82,0,0,28,29,9,7,4,6,4,6,11,1,2,1,2,255,0,9
006AFB  3  1B 1C 1D 09  
006AFF  3  04 06 04 04  
006B19  3  54 00 00 00          .byte 84,0,0,0,9,4,7,4,6,7,11,1,2,1,2,1,2,255,3,4,255,0,6,83,0,0,82,28,27,9,11,2,1
006B1D  3  09 04 07 04  
006B21  3  06 07 0B 01  
006B3A  3  02 01 02 01          .byte 2,1,2,1,255,3,7,255,0,4,23,0,28,29,0,82,9,4,6,7,4,11,2,255,3,7,255,0,9,4,7,6,4
006B3E  3  FF 03 07 FF  
006B42  3  00 04 17 00  
006B5B  3  07 06 04 0B          .byte 7,6,4,11,2,1,2,1,2,3,3,255,0,15,1,2,1,2,1,2,1,2,255,3,6,255,0,16,255,3,9,255,0,21
006B5F  3  02 01 02 01  
006B63  3  02 03 03 FF  
006B7D  3  12 10 12 11          .byte 18,16,18,17,18,16,18,17,18,18,16,18,18,16,17,18,18,16,17,18,16,18,18,16,18,18,16,18,17,18
006B81  3  12 10 12 11  
006B85  3  12 12 10 12  
006B9B  3  FF 00 06 FF          .byte 255,0,6,255,3,5,146,3,3,2,1,2,1,9,5,4,6,4,6,6,5,10,2,1,2,255,0,4,3,3,2,1,2
006B9F  3  03 05 92 03  
006BA3  3  03 02 01 02  
006BBC  3  01 02 03 01          .byte 1,2,3,1,2,9,5,4,6,11,81,0,0,3,81,3,99,8,4,7,4,255,3,4,2,1,9,4,6,5,10,2,9
006BC0  3  02 09 05 04  
006BC4  3  06 0B 51 00  
006BDD  3  06 0B 03 64          .byte 6,11,3,100,81,3,81,0,0,0,81,0,100,3,81,3,3,1,2,1,2,9,5,11,0,0,3,8,5,11,81,0,0,0
006BE1  3  51 03 51 00  
006BE5  3  00 00 51 00  
006BFF  3  51 1F 28 00          .byte 81,31,40,0,0,0,41,0,0,0,81,0,0,4,5,6,4,11,81,255,0,4,3,25,3,39,0,0,0,41,0,81,0,0
006C03  3  00 00 29 00  
006C07  3  00 00 51 00  
006C21  3  54 00 86 85          .byte 84,0,134,133,0,41,0,0,3,100,99,3,3,81,255,0,7,41,255,0,5,81,0,0,82,0,134,133,0,0,28,0,0,0
006C25  3  00 29 00 00  
006C29  3  03 64 63 03  
006C43  3  64 00 00 27          .byte 100,0,0,39,75,255,0,10,90,90,41,0,0,8,15,147,148,8,4,5,7,255,0,4,31,40,255,0,10,22,255,0,7
006C47  3  4B FF 00 0A  
006C4B  3  5A 5A 29 00  
006C64  3  23 22 00 63          .byte 35,34,0,99,0,4,255,0,5,41,255,0,10,104,151,122,103,255,0,4,35,33,30,0,26,5,255,0,17,102,107,255,0,4
006C68  3  00 04 FF 00  
006C6C  3  05 29 FF 00  
006C86  3  4C 20 22 00          .byte 76,32,34,0,0,0,6,5,5,5,10,255,0,13,105,255,0,6,35,34,0,0,0,4,2,1,8,6,10,24,23,255,0,17
006C8A  3  00 00 06 05  
006C8E  3  05 05 0A FF  
006CA8  3  23 21 4B 00          .byte 35,33,75,0,0,5,3,3,1,8,255,5,4,10,255,0,8,135,136,255,0,4,31,32,34,0,0,9,11,0,0,3,1
006CAC  3  00 05 03 03  
006CB0  3  01 08 FF 05  
006CC9  3  02 01 02 01          .byte 2,1,2,1,4,83,255,0,6,37,135,136,38,255,0,4,35,34,0,26,4,1,0,0,0,255,3,4,2,6,82,255,0,4
006CCD  3  04 53 FF 00  
006CD1  3  06 25 87 88  
006CEB  3  08 07 05 06          .byte 8,7,5,6,4,5,6,5,10,37,44,45,38,0,5,2,255,0,6,3,1,8,5,10,28,29,0,22,5,2,1,2,1
006CEF  3  04 05 06 05  
006CF3  3  0A 25 2C 2D  
006D0C  3  02 01 0C 05          .byte 2,1,12,5,6,4,5,6,11,1,255,0,7,3,1,2,8,5,4,6,5,11,1,255,3,5,1,2,1,2,1,2,1
006D10  3  06 04 05 06  
006D14  3  0B 01 FF 00  
006D2D  3  02 FF 00 08          .byte 2,255,0,8,3,3,1,2,1,2,1,2,3,255,0,5,255,3,8,18,16,17,18,16,18,18,16,17,18,16,17,18,18
006D31  3  03 03 01 02  
006D35  3  01 02 01 02  
006D4E  3  10 12 12 12          .byte 16,18,18,18,16,18,16,18,18,17,18,16,18,18,67,0
006D52  3  10 12 10 12  
006D56  3  12 11 12 10  
006D5E  3  FF 00 08 6F          .byte 255,0,8,111,255,0,16,111,255,0,5,111,255,0,18,111,255,0,49,111,255,0,5,111,255,0,17,63,62,62,62,61,255,0,13
006D62  3  FF 00 10 6F  
006D66  3  FF 00 05 6F  
006D81  3  3F 3E 3E 3E          .byte 63,62,62,62,61,0,0,111,0,0,0,109,255,62,5,61,255,0,8,111,0,0,109,109,255,62,4,61,255,0,4,111,109,109
006D85  3  3D 00 00 6F  
006D89  3  00 00 00 6D  
006DA3  3  40 3E 40 3E          .byte 64,62,64,62,64,255,0,11,109,62,64,62,64,62,64,255,0,5,26,64,60,60,60,109,25,0,0,0,111,255,0,7,26
006DA7  3  40 FF 00 0B  
006DAB  3  6D 3E 40 3E  
006DC4  3  40 6D 3C 6D          .byte 64,109,60,109,64,25,255,0,6,26,108,43,107,25,255,0,13,26,60,43,107,25,255,0,9,43,255,0,17,43,0,0,0
006DC8  3  40 19 FF 00  
006DCC  3  06 1A 6C 2B  
006DE5  3  6F FF 00 07          .byte 111,255,0,7,66,255,0,17,66,255,0,43,84,0,0,132,131,255,0,5,128,127,0,0,85,255,0,13,83,0,82,28,37
006DE9  3  42 FF 00 11  
006DED  3  42 FF 00 2B  
006E06  3  84 83 26 79          .byte 132,131,38,121,0,76,37,128,127,38,75,82,0,121,0,83,255,0,4,115,116,0,28,29,82,9,255,5,17,10,82,28,29
006E0A  3  00 4C 25 80  
006E0E  3  7F 26 4B 52  
006E27  3  00 0A 93 94          .byte 0,10,147,148,9,6,6,7,11,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,8,6,4,5,4,6,35
006E2B  3  09 06 06 07  
006E2F  3  0B 02 01 02  
006E48  3  22 08 0A 01          .byte 34,8,10,1,2,1,255,3,17,1,2,1,2,1,5,35,33,30,8,10,3,3,255,0,17,255,3,5,4,32,34,0,100
006E4C  3  02 01 FF 03  
006E50  3  11 01 02 01  
006E69  3  06 11 12 12          .byte 6,17,18,18,16,18,18,16,18,17,18,18,16,18,17,18,18,16,18,18,18,16,18,17,18
006E6D  3  10 12 12 10  
006E71  3  12 11 12 12  
006E82  3  01 02 01 02          .byte 1,2,1,2,1,3,3,3,146,255,0,4,3,2,1,2,3,3,3,1,2,1,9,10,2,3,3,0,0,4,6,5,4
006E86  3  01 03 03 03  
006E8A  3  92 FF 00 04  
006EA3  3  0E 02 01 02          .byte 14,2,1,2,3,0,0,0,3,1,13,4,14,1,2,1,9,4,7,15,8,10,1,2,3,0,3,3,81,8,4,5,4
006EA7  3  03 00 00 00  
006EAB  3  03 01 0D 04  
006EC4  3  0E 02 03 00          .byte 14,2,3,0,3,2,13,11,0,12,4,7,4,11,81,3,0,0,8,4,10,1,3,0,0,81,81,0,0,3,5,1,3
006EC8  3  03 02 0D 0B  
006ECC  3  00 0C 04 07  
006EE5  3  00 03 01 04          .byte 0,3,1,4,0,0,3,3,0,0,3,39,30,0,0,3,3,8,10,2,0,0,41,40,0,0,0,6,2,3,3,2,13
006EE9  3  00 00 03 03  
006EED  3  00 00 03 27  
006F06  3  0B FF 00 07          .byte 11,255,0,7,81,255,0,5,3,4,1,0,0,0,81,0,0,0,8,14,1,1,13,11,98,255,0,7,41,255,0,5,3
006F0A  3  51 FF 00 05  
006F0E  3  03 04 01 00  
006F27  3  07 02 06 05          .byte 7,2,6,5,0,41,0,0,0,26,5,2,2,4,0,98,255,0,4,9,4,10,255,0,6,3,4,1,1,4,104,103,255,0,4
006F2B  3  00 29 00 00  
006F2F  3  00 1A 05 02  
006F4A  3  06 01 01 05          .byte 6,1,1,5,0,101,255,0,4,7,1,8,10,255,0,5,3,7,2,2,6,107,255,0,5,5,2,2,7,255,0,5,9
006F4E  3  00 65 FF 00  
006F52  3  04 07 01 08  
006F6B  3  0B 02 01 05          .byte 11,2,1,5,103,255,0,4,9,11,1,9,11,255,0,4,12,4,11,1,1,4,104,103,0,0,0,4,2,1,9,11,107
006F6F  3  67 FF 00 04  
006F73  3  09 0B 01 09  
006F8C  3  FF 00 04 07          .byte 255,0,4,7,1,3,5,23,255,0,4,26,4,2,3,2,7,107,255,0,4,5,1,2,4,101,255,0,5,4,2,3,6
006F90  3  01 03 05 17  
006F94  3  FF 00 04 1A  
006FAD  3  68 24 67 00          .byte 104,36,103,0,0,0,7,1,3,2,4,255,0,4,104,103,10,1,8,10,0,0,0,104,36,5,1,3,8,10,107,98,0,0,0
006FB1  3  00 00 07 01  
006FB5  3  03 02 04 FF  
006FD0  3  04 02 03 01          .byte 4,2,3,1,12,10,255,0,4,108,7,2,1,5,255,0,4,108,6,2,3,2,6,255,0,4,12,4,1,2,2,1,12
006FD4  3  0C 0A FF 00  
006FD8  3  04 6C 07 02  
006FF1  3  0A 00 00 00          .byte 10,0,0,0,26,4,1,13,11,255,0,5,8,10,1,1,5,25,255,0,4,8,4,7,4,10,9,11,255,0,4,5,2
006FF5  3  1A 04 01 0D  
006FF9  3  0B FF 00 05  
007012  3  05 68 67 59          .byte 5,104,103,89,89,0,0,24,4,2,2,4,255,0,5,31,40,100,81,8,11,101,0,0,0,22,4,1,4,107,0,0,0
007016  3  59 00 00 18  
00701A  3  04 02 02 04  
007033  3  68 24 05 0B          .byte 104,36,5,11,1,1,8,4,15,255,0,4,81,83,41,255,0,5,12,4,11,2,7,0,115,116,0,0,108,4,2,3,3
007037  3  01 01 08 04  
00703B  3  0F FF 00 04  
007054  3  01 08 0A 00          .byte 1,8,10,0,0,28,29,41,82,0,28,29,0,0,0,13,11,1,1,8,10,147,148,30,0,9,11,1,3,0,3,1,8
007058  3  00 1C 1D 29  
00705C  3  52 00 1C 1D  
007075  3  04 05 04 04          .byte 4,5,4,4,5,5,4,4,5,4,5,4,11,2,3,3,2,4,35,34,0,0,4,2,3,146
007079  3  05 05 04 04  
00707D  3  05 04 05 04  
00708F  3  FF 00 13 03          .byte 255,0,19,3,1,5,32,33,30,0,7,2,3,255,0,8,255,3,7,255,0,5,3,2,4,35,34,0,0,4,1,3,0,0,0
007093  3  01 05 20 21  
007097  3  1E 00 07 02  
0070B2  3  FF 03 06 02          .byte 255,3,6,2,1,2,1,2,255,3,5,0,3,1,7,35,34,0,0,6,2,3,0,0,3,2,1,2,1,2,1,9,7
0070B6  3  01 02 01 02  
0070BA  3  FF 03 05 00  
0070D3  3  04 05 0A 01          .byte 4,5,10,1,2,1,2,3,3,2,9,11,32,33,30,26,4,10,1,3,3,2,9,7,4,5,7,4,11,0,3,81,8
0070D7  3  02 01 02 03  
0070DB  3  03 02 09 0B  
0070F4  3  05 06 04 0A          .byte 5,6,4,10,1,2,1,7,25,35,34,0,0,81,8,10,2,3,1,4,3,81,39,30,81,0,0,31,40,3,81,101,3
0070F8  3  01 02 01 07  
0070FC  3  19 23 22 00  
007115  3  08 06 04 07          .byte 8,6,4,7,11,0,35,34,0,31,40,3,4,1,1,9,11,3,41,41,31,40,0,0,0,41,0,41,0,80,80,3,81,81
007119  3  0B 00 23 22  
00711D  3  00 1F 28 03  
007137  3  00 1F 20 21          .byte 0,31,32,33,75,0,41,3,8,10,9,11,3,255,0,4,81,255,0,4,28,29,0,79,79,31,40,39,30,0,35,34,255,0,4
00713B  3  4B 00 29 03  
00713F  3  08 0A 09 0B  
00715A  3  03 06 05 03          .byte 3,6,5,3,255,0,5,41,0,0,104,36,122,122,122,114,103,0,81,41,0,0,35,33,30,0,0,0,23,4,4,25,0,0
00715E  3  FF 00 05 29  
007162  3  00 00 68 24  
00717C  3  16 73 74 FF          .byte 22,115,116,255,0,4,69,108,102,107,0,0,0,41,0,0,76,32,34,255,0,4,5,11,8,10,0,0,104,151,122,103,255,0,5
007180  3  00 04 45 6C  
007184  3  66 6B 00 00  
00719F  3  66 FF 00 08          .byte 102,255,0,8,35,34,255,0,4,6,1,1,8,10,0,0,43,107,255,0,5,29,105,255,0,7,31,32,34,0,0,0,9
0071A3  3  23 22 FF 00  
0071A7  3  04 06 01 01  
0071C0  3  0B 02 02 09          .byte 11,2,2,9,11,0,0,43,255,0,5,104,151,122,103,255,0,7,35,33,75,0,9,11,1,3,9,11,101,0,0,43,255,0,6
0071C4  3  0B 00 00 2B  
0071C8  3  FF 00 05 68  
0071E3  3  2B 6B 00 00          .byte 43,107,0,0,0,130,129,0,0,37,44,45,38,9,11,1,3,0,5,24,0,0,0,43,0,0,65,65,0,0,43,0,0
0071E7  3  00 82 81 00  
0071EB  3  00 25 2C 2D  
007204  3  4C 25 82 81          .byte 76,37,130,129,38,75,9,5,6,4,11,1,3,0,0,8,5,18,16,17,92,16,18,17,18,18,16,92,18,16,5,6,5
007208  3  26 4B 09 05  
00720C  3  06 04 0B 01  
007225  3  06 06 05 04          .byte 6,6,5,4,11,1,2,1,3,0,0,0,1,8,4,6,4,7,5,4,6,5,6,4,5,6,5,11,2,1,2,1,2
007229  3  0B 01 02 01  
00722D  3  03 00 00 00  
007246  3  01 02 92 03          .byte 1,2,146,3,3,255,0,4,3,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,255,3,8,255,0,7,255,3,16
00724A  3  03 FF 00 04  
00724E  3  03 01 02 01  
007267  3  FF 00 0D             .byte 255,0,13
00726A  3  FF 00 60 03          .byte 255,0,96,3,0,0,3,255,0,24,3,0,255,3,5,255,0,23,3,3,96,95,97,3,3,255,0,21,3,3,94,95,255,3,4
00726E  3  00 00 03 FF  
007272  3  00 18 03 00  
00728D  3  FF 00 17 FF          .byte 255,0,23,255,3,4,0,3,0,3,255,0,10,3,3,3,255,0,10,3,0,3,255,0,11,3,3,3,2,1,2,3,255,0,19
007291  3  03 04 00 03  
007295  3  00 03 FF 00  
0072B0  3  03 03 03 92          .byte 3,3,3,146,1,2,1,9,6,10,1,3,255,0,17,3,1,2,1,2,9,6,6,11,3,8,10,2,255,3,4,255,0,12
0072B4  3  01 02 01 09  
0072B8  3  06 0A 01 03  
0072D2  3  03 02 09 06          .byte 3,2,9,6,6,6,11,81,81,3,0,26,8,10,2,1,2,1,255,0,11,3,1,9,11,98,101,81,3,81,39,75,0,0
0072D6  3  06 06 0B 51  
0072DA  3  51 03 00 1A  
0072F4  3  03 08 FF 06          .byte 3,8,255,6,4,255,0,11,3,2,6,3,101,0,81,76,40,41,255,0,4,3,101,99,3,3,255,0,11,3,1,6,21
0072F8  3  04 FF 00 0B  
0072FC  3  03 02 06 03  
007315  3  00 00 29 00          .byte 0,0,41,0,41,255,0,7,100,255,0,13,3,2,8,10,90,90,255,0,8,28,29,255,0,15,3,1,6,255,0,8,9
007319  3  29 FF 00 07  
00731D  3  64 FF 00 0D  
007336  3  FF 06 06 FF          .byte 255,6,6,255,0,12,3,2,8,6,6,10,0,0,22,23,9,11,2,1,2,1,2,1,255,0,13,3,1,2,1,8,255,6,4
00733A  3  00 0C 03 02  
00733E  3  08 06 06 0A  
007359  3  0B 01 FF 00          .byte 11,1,255,0,6
00735D  3  06           
00735E  3  04 23 21 04          .byte 4,35,33,4,2,3,3,1,2,1,9,4,6,4,7,10,2,1,255,3,4,255,0,8,5,35,34,8,5,6,5,4,4,4
007362  3  02 03 03 01  
007366  3  02 01 09 04  
007380  3  0B 03 03 00          .byte 11,3,3,0,0,8,4,10,1,2,1,2,3,255,0,7,6,32,34,0,3,3,3,81,3,81,3,255,0,4,3,3,8
007384  3  00 08 04 0A  
007388  3  01 02 01 02  
0073A1  3  07 04 06 0A          .byte 7,4,6,10,2,3,255,0,6,4,35,34,0,0,0,31,40,0,41,255,0,7,3,81,101,3,8,10,2,3,255,0,5
0073A5  3  02 03 FF 00  
0073A9  3  06 04 23 22  
0073C2  3  04 2C 21 1E          .byte 4,44,33,30,0,0,0,41,255,0,10,41,0,0,3,4,1,3,255,0,5,8,6,10,255,0,18,3,8,10,1,3,255,0,4
0073C6  3  00 00 00 29  
0073CA  3  FF 00 0A 29  
0073E5  3  03 02 08 0A          .byte 3,2,8,10,255,0,4,28,29,0,121,0,0,0,8,6,10,27,0,115,116,3,6,2,3,255,0,4,3,146,2,12,6
0073E9  3  FF 00 04 1C  
0073ED  3  1D 00 79 00  
007406  3  0A 68 97 97          .byte 10,104,151,151,122,122,122,103,0,0,99,81,12,4,11,147,148,30,5,1,3,3,0,0,0,1,2,1,2,9,4,5,4
00740A  3  7A 7A 7A 67  
00740E  3  00 00 63 51  
007427  3  06 0B 51 65          .byte 6,11,81,101,91,0,0,100,81,3,3,3,35,34,3,8,10,1,2,3,0,0,9,4,7,5,4,11,101,81,3,3,81
00742B  3  5B 00 00 64  
00742F  3  51 03 03 03  
007448  3  FF 00 05 29          .byte 255,0,5,41,0,0,31,32,34,0,3,8,4,10,1,97,0,4,25,3,99,3,3,0,39,30,0,41,255,0,9,35,33
00744C  3  00 00 1F 20  
007450  3  22 00 03 08  
007469  3  4B 00 03 64          .byte 75,0,3,100,8,10,2,3,8,10,0,100,0,0,0,41,255,0,12,35,34,255,0,4,20,4,2,3,1,7,21,0,0,0
00746D  3  08 0A 02 03  
007471  3  08 0A 00 64  
00748B  3  5A 5A 00 00          .byte 90,90,0,0,0,132,131,255,0,7,35,33,30,0,0,84,26,5,1,3,2,4,255,0,6,28,24,29,132,131,0,0,28
00748F  3  00 84 83 FF  
007493  3  00 07 23 21  
0074AC  3  17 1D 00 1F          .byte 23,29,0,31,32,34,0,0,27,82,9,11,2,3,1,4,11,83,0,9,4,7,4,4,6,4,5,4,4,7,7,4,10
0074B0  3  20 22 00 00  
0074B4  3  1B 52 09 0B  
0074CD  3  25 2C 2D 26          .byte 37,44,45,38,9,4,5,11,1,3,0,2,7,0,82,9,11,2,1,2,1,2,1,2,1,2,1,2,1,8,4,7,5
0074D1  3  09 04 05 0B  
0074D5  3  01 03 00 02  
0074EE  3  04 0B 02 01          .byte 4,11,2,1,2,3,0,0,1,8,4,4,11,2,255,3,12,1,2,1,2,1,2,3,3,3,0,0,0,3,1,2,1
0074F2  3  02 03 00 00  
0074F6  3  01 08 04 04  
00750F  3  02 03 FF 00          .byte 2,3,255,0,12,255,3,6,255,0,7,255,3,4,255,0,25
007513  3  0C FF 03 06  
007517  3  FF 00 07 FF  
007520  3  00 00 03 01          .byte 0,0,3,1,9,7,5,6,5,5,4,10,1,2,3,3,1,2,1,2,9,5,5,6,5,10,2,3,146,3,0,3,1
007524  3  09 07 05 06  
007528  3  05 05 04 0A  
007541  3  09 0B FF 03          .byte 9,11,255,3,4,0,0,8,5,10,1,2,9,4,6,7,5,11,3,3,3,8,10,2,1,3,3,1,9,11,3,255,0,6
007545  3  04 00 00 08  
007549  3  05 0A 01 02  
007563  3  03 03 08 05          .byte 3,3,8,5,6,11,3,3,0,0,3,0,0,0,26,8,5,10,1,3,2,4,25,255,0,9,3,0,0,3,255,0,9
007567  3  06 0B 03 03  
00756B  3  00 00 03 00  
007584  3  03 03 08 0A          .byte 3,3,8,10,3,1,6,3,128,127,255,0,18,134,133,0,0,3,4,1,9,11,0,128,127,255,0,18,134,133,0,0,20
007588  3  03 01 06 03  
00758C  3  80 7F FF 00  
0075A5  3  05 02 04 03          .byte 5,2,4,3,31,147,148,104,36,103,255,0,12,104,36,103,147,148,30,0,3,6,1,6,0,0,35,33,75,102,255,0,13
0075A9  3  1F 93 94 68  
0075AD  3  24 67 FF 00  
0075C6  3  64 66 00 23          .byte 100,102,0,35,34,0,0,3,5,9,11,0,0,35,34,0,102,0,0,0,104,36,103,0,0,104,36,103,0,0,0,102,31
0075CA  3  22 00 00 03  
0075CE  3  05 09 0B 00  
0075E7  3  20 22 00 17          .byte 32,34,0,23,9,11,15,25,0,76,32,34,0,105,255,0,4,102,107,0,0,0,102,101,0,0,0,105,0,35,34,8,6
0075EB  3  09 0B 0F 19  
0075EF  3  00 4C 20 22  
007608  3  0B 02 FF 00          .byte 11,2,255,0,4,35,34,255,0,6,105,255,0,4,105,255,0,5,76,32,34,0,8,10,1,255,0,4,35,33,75,255,0,17
00760C  3  04 23 22 FF  
007610  3  00 06 69 FF  
00762A  3  23 21 4B 1A          .byte 35,33,75,26,5,2,255,0,4,35,34,255,0,18,35,34,0,0,8,10,0,0,0,31,32,34,0,0,85,255,0,8,90,90
00762E  3  05 02 FF 00  
007632  3  04 23 22 FF  
00764C  3  00 00 53 00          .byte 0,0,83,0,0,35,33,30,0,0,4,0,0,76,37,44,45,38,75,82,255,0,12,82,76,37,44,45,38,75,0,4,5
007650  3  00 23 21 1E  
007654  3  00 00 04 00  
00766D  3  06 05 06 07          .byte 6,5,6,7,7,5,6,11,255,0,8,8,6,5,6,5,7,7,6,6,5,5,4,11,2,1,2,1,2,1,2,3,255,0,10
007671  3  07 05 06 0B  
007675  3  FF 00 08 08  
007690  3  03 02 01 02          .byte 3,2,1,2,1,2,1,2,1,2,1,2,255,3,7,65,65,0,0,65,65,65,0,0,65,65,0,255,3,11,18,16,18
007694  3  01 02 01 02  
007698  3  01 02 01 02  
0076B1  3  11 12 12 10          .byte 17,18,18,16,17,255,86,10,18,16,17,18,16,18,18,16,18,17,16,18
0076B5  3  11 FF 56 0A  
0076B9  3  12 10 11 12  
0076C5  3  FF 00 06 6F          .byte 255,0,6,111,255,0,18,111,255,0,17,111,255,0,6,111,255,0,19,111,255,0,6,111,255,0,14,111,255,0,25,111,255,0,14
0076C9  3  FF 00 12 6F  
0076CD  3  FF 00 11 6F  
0076E8  3  6F FF 00 04          .byte 111,255,0,4,111,255,0,20,111,255,0,14,111,255,0,6,111,255,0,18,111,255,0,19,63,64,62,61,255,0,24,63,62
0076EC  3  6F FF 00 14  
0076F0  3  6F FF 00 0E  
007709  3  40 3E 40 FF          .byte 64,62,64,255,62,4,61,255,0,9,111,255,0,7,63,62,109,62,64,62,64,64,62,64,109,64,62,62,61,255,0,14,63
00770D  3  3E 04 3D FF  
007711  3  00 09 6F FF  
00772A  3  40 40 6D 40          .byte 64,64,109,64,64,255,60,5,109,60,64,60,64,61,255,0,13,255,60,4,109,60,60,60,43,60,109,255,60,6,255,0,13
00772E  3  40 FF 3C 05  
007732  3  6D 3C 40 3C  
00774B  3  64 3C 3C 3C          .byte 100,60,60,60,41,98,100,108,43,0,101,41,100,60,43,107,41,255,0,12,83,0,0,43,0,0,0,132,131,66,0,0,0
00774F  3  29 62 64 6C  
007753  3  2B 00 65 29  
00776C  3  54 00 42 00          .byte 84,0,66,0,24,255,0,11,28,82,0,23,66,0,0,0,132,131,255,0,4,82,29,9,7,6,7,10,115,116,38,255,0,4
007770  3  18 FF 00 0B  
007774  3  1C 52 00 17  
00778E  3  06 07 07 07          .byte 6,7,7,7,5,6,7,6,10,31,147,148,30,9,7,4,7,6,11,2,1,2,12,6,7,6,6,5,7,6,1,2,1
007792  3  05 06 07 06  
007796  3  0A 1F 93 94  
0077AF  3  02 01 02 01          .byte 2,1,2,1,2,5,0,35,34,0,6,1,2,1,2,1,3,3,3,2,1,2,1,2,1,2,1,255,3,8,6,0,35
0077B3  3  02 05 00 23  
0077B7  3  22 00 06 01  
0077D0  3  21 1E 05 FF          .byte 33,30,5,255,3,6,0,255,3,9,16,17,16,18,18,18,16,17,5,0,35,34,0,5,16,17,18,16,18,16,18,16,17
0077D4  3  03 06 00 FF  
0077D8  3  03 09 10 11  
0077F1  3  10 12 10 12          .byte 16,18,16,18,16,17,16
0077F5  3  10 11 10     
0077F8  3               numsc:
0077F8  3  1B                   .byte 27
0077F9  3               nmedat:
0077F9  3  00 01 70 20          .byte 0,1,112,32,6,8,16,104,3,4,32,144,6,8,16,192,255
0077FD  3  06 08 10 68  
007801  3  03 04 20 90  
00780A  3  02 0B 58 60          .byte 2,11,88,96,0,1,112,24,3,4,112,64,3,4,112,152,255
00780E  3  00 01 70 18  
007812  3  03 04 70 40  
00781B  3  00 01 70 08          .byte 0,1,112,8,3,4,96,176,255
00781F  3  03 04 60 B0  
007823  3  FF           
007824  3  00 01 60 38          .byte 0,1,96,56,7,7,88,192,255
007828  3  07 07 58 C0  
00782C  3  FF           
00782D  3  00 01 20 10          .byte 0,1,32,16,3,4,72,40,3,4,72,80,255
007831  3  03 04 48 28  
007835  3  03 04 48 50  
00783A  3  00 01 28 D0          .byte 0,1,40,208,3,4,40,136,6,8,32,96,3,12,120,24,255
00783E  3  03 04 28 88  
007842  3  06 08 20 60  
00784B  3  00 01 70 18          .byte 0,1,112,24,2,11,112,120,255
00784F  3  02 0B 70 78  
007853  3  FF           
007854  3  03 04 28 70          .byte 3,4,40,112,0,1,88,88,3,4,104,168,3,12,64,112,255
007858  3  00 01 58 58  
00785C  3  03 04 68 A8  
007865  3  00 01 78 10          .byte 0,1,120,16,6,8,72,192,1,5,104,168,3,12,32,96,3,12,32,144,255
007869  3  06 08 48 C0  
00786D  3  01 05 68 A8  
00787A  3  00 01 68 10          .byte 0,1,104,16,7,7,96,144,7,7,64,40,1,6,136,96,3,12,128,48,3,4,56,72,3,4,40,168,255
00787E  3  07 07 60 90  
007882  3  07 07 40 28  
007897  3  00 01 30 60          .byte 0,1,48,96,3,4,64,48,3,4,80,200,6,8,16,80,255
00789B  3  03 04 40 30  
00789F  3  03 04 50 C8  
0078A8  3  00 01 70 D8          .byte 0,1,112,216,3,4,96,80,3,4,96,112,3,4,96,144,3,12,80,184,255
0078AC  3  03 04 60 50  
0078B0  3  03 04 60 70  
0078BD  3  00 01 70 D8          .byte 0,1,112,216,7,7,56,200,7,7,104,80,3,4,112,40,3,4,48,120,255
0078C1  3  07 07 38 C8  
0078C5  3  07 07 68 50  
0078D2  3  00 01 20 28          .byte 0,1,32,40,3,12,104,160,1,5,80,184,3,4,24,72,3,4,24,176,255
0078D6  3  03 0C 68 A0  
0078DA  3  01 05 50 B8  
0078E7  3  03 04 30 D8          .byte 3,4,48,216,0,1,56,48,6,8,24,80,255
0078EB  3  00 01 38 30  
0078EF  3  06 08 18 50  
0078F4  3  00 01 70 10          .byte 0,1,112,16,3,4,40,40,3,12,56,160,3,4,88,128,255
0078F8  3  03 04 28 28  
0078FC  3  03 0C 38 A0  
007905  3  00 01 70 10          .byte 0,1,112,16,3,4,88,160,255
007909  3  03 04 58 A0  
00790D  3  FF           
00790E  3  00 02 70 D8          .byte 0,2,112,216,3,4,96,88,7,7,112,120,7,7,96,56,255
007912  3  03 04 60 58  
007916  3  07 07 70 78  
00791F  3  00 01 70 10          .byte 0,1,112,16,7,7,24,168,255
007923  3  07 07 18 A8  
007927  3  FF           
007928  3  00 01 48 10          .byte 0,1,72,16,7,7,48,64,7,7,104,120,7,7,16,168,3,4,104,144,3,4,40,200,255
00792C  3  07 07 30 40  
007930  3  07 07 68 78  
007941  3  00 01 70 18          .byte 0,1,112,24,1,5,104,120,3,4,104,96,3,4,104,152,255
007945  3  01 05 68 78  
007949  3  03 04 68 60  
007952  3  00 01 28 10          .byte 0,1,40,16,7,7,120,40,7,7,64,120,7,7,24,192,3,12,32,152,255
007956  3  07 07 78 28  
00795A  3  07 07 40 78  
007967  3  00 02 68 C0          .byte 0,2,104,192,3,4,112,144,7,7,64,72,255
00796B  3  03 04 70 90  
00796F  3  07 07 40 48  
007974  3  00 01 88 A0          .byte 0,1,136,160,255
007978  3  FF           
007979  3  00 01 30 28          .byte 0,1,48,40,7,7,16,112,3,4,104,96,255
00797D  3  07 07 10 70  
007981  3  03 04 68 60  
007986  3  00 01 70 10          .byte 0,1,112,16,3,4,40,40,3,4,40,200,6,8,16,80,6,8,24,160,6,8,32,120,255
00798A  3  03 04 28 28  
00798E  3  03 04 28 C8  
00799F  3  00 01 70 18          .byte 0,1,112,24,3,4,112,88,255
0079A3  3  03 04 70 58  
0079A7  3  FF           
0079A8  3               NUMOBJ = 14
0079A8  3               objdta:
0079A8  3  01 00 13 90          .byte 1,0,19,144,27,176,29,112,13,96,11,160,5,64,0,0,2,128,25,0,37,0,90,0,114,112,66,140,1,120,1,0,16,64,184,16,64,184
0079AC  3  1B B0 1D 70  
0079B0  3  0D 60 0B A0  
0079CE  3  01 00 13 90          .byte 1,0,19,144,27,176,29,112,13,96,11,160,5,64,0,0,2,128,25,0,37,0,90,0,114,112,66,140,1,120,1,0,5,120,48,5,120,48
0079D2  3  1B B0 1D 70  
0079D6  3  0D 60 0B A0  
0079F4  3  01 00 13 90          .byte 1,0,19,144,27,176,29,112,13,96,11,160,5,64,0,0,2,128,25,0,37,0,90,0,114,112,66,140,1,120,1,0,7,40,144,7,40,144
0079F8  3  1B B0 1D 70  
0079FC  3  0D 60 0B A0  
007A1A  3  01 00 13 90          .byte 1,0,19,144,27,176,29,112,13,96,11,160,5,64,0,0,2,128,25,0,37,0,90,0,114,112,66,140,1,120,1,0,4,24,224,4,24,224
007A1E  3  1B B0 1D 70  
007A22  3  0D 60 0B A0  
007A40  3  01 00 13 90          .byte 1,0,19,144,27,176,29,112,13,96,11,160,5,64,0,0,2,128,25,0,37,0,90,0,114,112,66,140,1,120,1,0,3,56,168,3,56,168
007A44  3  1B B0 1D 70  
007A48  3  0D 60 0B A0  
007A66  3  01 00 13 90          .byte 1,0,19,144,27,176,29,112,13,96,11,160,5,64,0,0,2,128,25,0,37,0,90,0,114,112,66,140,1,120,1,0,14,72,136,14,72,136
007A6A  3  1B B0 1D 70  
007A6E  3  0D 60 0B A0  
007A8C  3  01 00 13 90          .byte 1,0,19,144,27,176,29,112,13,96,11,160,5,64,0,0,2,128,25,0,37,0,90,0,114,112,66,140,1,120,1,0,17,80,40,17,80,40
007A90  3  1B B0 1D 70  
007A94  3  0D 60 0B A0  
007AB2  3  01 00 13 90          .byte 1,0,19,144,27,176,29,112,13,96,11,160,5,64,0,0,2,128,25,0,37,0,90,0,114,112,66,140,1,120,1,0,0,96,168,0,96,168
007AB6  3  1B B0 1D 70  
007ABA  3  0D 60 0B A0  
007AD8  3  01 00 13 90          .byte 1,0,19,144,27,176,29,112,13,96,11,160,5,64,0,0,2,128,25,0,37,0,90,0,114,112,66,140,1,120,1,0,15,80,184,15,80,184
007ADC  3  1B B0 1D 70  
007AE0  3  0D 60 0B A0  
007AFE  3  01 00 13 90          .byte 1,0,19,144,27,176,29,112,13,96,11,160,5,64,0,0,2,128,25,0,37,0,90,0,114,112,66,140,1,120,1,0,22,56,128,22,56,128
007B02  3  1B B0 1D 70  
007B06  3  0D 60 0B A0  
007B24  3  00 00 07 E0          .byte 0,0,7,224,31,216,54,124,126,102,203,230,207,254,120,60,2,128,3,128,2,192,1,64,1,192,1,64,2,160,3,96,23,128,128,23,128,128
007B28  3  1F D8 36 7C  
007B2C  3  7E 66 CB E6  
007B4A  3  00 00 07 E0          .byte 0,0,7,224,31,216,54,124,126,102,203,230,207,254,120,60,2,128,3,128,2,192,1,64,1,192,1,64,2,160,3,96,24,104,56,24,104,56
007B4E  3  1F D8 36 7C  
007B52  3  7E 66 CB E6  
007B70  3  00 00 07 E0          .byte 0,0,7,224,31,216,54,124,126,102,203,230,207,254,120,60,2,128,3,128,2,192,1,64,1,192,1,64,2,160,3,96,19,56,144,19,56,144
007B74  3  1F D8 36 7C  
007B78  3  7E 66 CB E6  
007B96  3  00 00 07 E0          .byte 0,0,7,224,31,216,54,124,126,102,203,230,207,254,120,60,2,128,3,128,2,192,1,64,1,192,1,64,2,160,3,96,25,112,144,25,112,144
007B9A  3  1F D8 36 7C  
007B9E  3  7E 66 CB E6  
007BBC  3               font:
007BBC  3  CD 9A 8A 3E          .byte 205,154,138,62,70,50,141,92
007BC0  3  46 32 8D 5C  
007BC4  3  32 8F 5C 3E          .byte 50,143,92,62,100,71,205,236
007BC8  3  64 47 CD EC  
007BCC  3  7E CD 18 81          .byte 126,205,24,129,201,0,0,0
007BD0  3  C9 00 00 00  
007BD4  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
007BD8  3  6C FE 6C 00  
007BDC  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
007BE0  3  7E 1E 7E 18  
007BE4  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
007BE8  3  30 6E CE 00  
007BEC  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
007BF0  3  7E CC 7E 00  
007BF4  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
007BF8  3  00 00 00 00  
007BFC  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
007C00  3  18 18 0C 00  
007C04  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
007C08  3  30 30 60 00  
007C0C  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
007C10  3  7E 18 3C 00  
007C14  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
007C18  3  7E 18 18 00  
007C1C  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
007C20  3  00 18 18 30  
007C24  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
007C28  3  7E 00 00 00  
007C2C  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
007C30  3  00 38 38 00  
007C34  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
007C38  3  18 30 60 00  
007C3C  3  00 3C 42 42          .byte 0,60,66,66,132,132,120,0
007C40  3  84 84 78 00  
007C44  3  00 18 28 10          .byte 0,24,40,16,16,32,112,0
007C48  3  10 20 70 00  
007C4C  3  00 3C 42 04          .byte 0,60,66,4,124,128,248,0
007C50  3  7C 80 F8 00  
007C54  3  00 1C 22 02          .byte 0,28,34,2,28,132,120,0
007C58  3  1C 84 78 00  
007C5C  3  00 06 0A 14          .byte 0,6,10,20,36,126,8,0
007C60  3  24 7E 08 00  
007C64  3  00 3E 20 78          .byte 0,62,32,120,4,132,120,0
007C68  3  04 84 78 00  
007C6C  3  00 3C 42 78          .byte 0,60,66,120,132,132,120,0
007C70  3  84 84 78 00  
007C74  3  00 3E 02 04          .byte 0,62,2,4,28,8,8,0
007C78  3  1C 08 08 00  
007C7C  3  00 18 24 7C          .byte 0,24,36,124,132,132,120,0
007C80  3  84 84 78 00  
007C84  3  00 1C 22 42          .byte 0,28,34,66,60,132,120,0
007C88  3  3C 84 78 00  
007C8C  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
007C90  3  00 00 30 00  
007C94  3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
007C98  3  00 30 30 60  
007C9C  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
007CA0  3  30 18 0C 00  
007CA4  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
007CA8  3  00 7E 00 00  
007CAC  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
007CB0  3  0C 18 30 00  
007CB4  3  00 0E 11 01          .byte 0,14,17,1,6,0,8,0
007CB8  3  06 00 08 00  
007CBC  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
007CC0  3  FE C0 7C 00  
007CC4  3  00 1C 22 42          .byte 0,28,34,66,124,132,132,0
007CC8  3  7C 84 84 00  
007CCC  3  00 38 24 7C          .byte 0,56,36,124,66,130,252,0
007CD0  3  42 82 FC 00  
007CD4  3  00 3C 42 40          .byte 0,60,66,64,128,132,120,0
007CD8  3  80 84 78 00  
007CDC  3  00 3C 22 42          .byte 0,60,34,66,68,132,248,0
007CE0  3  44 84 F8 00  
007CE4  3  00 3E 20 7C          .byte 0,62,32,124,64,128,252,0
007CE8  3  40 80 FC 00  
007CEC  3  00 3E 20 78          .byte 0,62,32,120,64,128,128,0
007CF0  3  40 80 80 00  
007CF4  3  00 3C 42 40          .byte 0,60,66,64,140,132,120,0
007CF8  3  8C 84 78 00  
007CFC  3  00 22 22 7C          .byte 0,34,34,124,68,136,136,0
007D00  3  44 88 88 00  
007D04  3  00 3E 08 08          .byte 0,62,8,8,16,16,124,0
007D08  3  10 10 7C 00  
007D0C  3  00 0E 02 04          .byte 0,14,2,4,68,136,112,0
007D10  3  44 88 70 00  
007D14  3  00 24 28 70          .byte 0,36,40,112,72,132,132,0
007D18  3  48 84 84 00  
007D1C  3  00 10 10 20          .byte 0,16,16,32,32,66,124,0
007D20  3  20 42 7C 00  
007D24  3  00 14 2A 4A          .byte 0,20,42,74,66,132,132,0
007D28  3  42 84 84 00  
007D2C  3  00 22 22 54          .byte 0,34,34,84,84,136,136,0
007D30  3  54 88 88 00  
007D34  3  00 3C 42 42          .byte 0,60,66,66,132,132,120,0
007D38  3  84 84 78 00  
007D3C  3  00 3C 22 44          .byte 0,60,34,68,120,128,128,0
007D40  3  78 80 80 00  
007D44  3  00 3C 42 42          .byte 0,60,66,66,148,140,122,0
007D48  3  94 8C 7A 00  
007D4C  3  00 3C 22 42          .byte 0,60,34,66,124,136,132,0
007D50  3  7C 88 84 00  
007D54  3  00 3C 42 38          .byte 0,60,66,56,4,132,120,0
007D58  3  04 84 78 00  
007D5C  3  00 7E 08 10          .byte 0,126,8,16,16,32,32,0
007D60  3  10 20 20 00  
007D64  3  00 22 22 44          .byte 0,34,34,68,68,136,240,0
007D68  3  44 88 F0 00  
007D6C  3  00 44 48 48          .byte 0,68,72,72,80,80,96,0
007D70  3  50 50 60 00  
007D74  3  00 21 21 42          .byte 0,33,33,66,82,148,236,0
007D78  3  52 94 EC 00  
007D7C  3  00 22 24 18          .byte 0,34,36,24,24,36,68,0
007D80  3  18 24 44 00  
007D84  3  00 22 44 44          .byte 0,34,68,68,56,8,136,112
007D88  3  38 08 88 70  
007D8C  3  00 3F 02 0C          .byte 0,63,2,12,48,64,252,0
007D90  3  30 40 FC 00  
007D94  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
007D98  3  18 18 1E 00  
007D9C  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
007DA0  3  30 18 0C 00  
007DA4  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
007DA8  3  30 30 F0 00  
007DAC  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
007DB0  3  30 30 30 00  
007DB4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
007DB8  3  00 00 00 FF  
007DBC  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
007DC0  3  60 60 FE 00  
007DC4  3  30 46 92 9C          .byte 48,70,146,156,57,73,98,12
007DC8  3  39 49 62 0C  
007DCC  3  00 C3 24 08          .byte 0,195,36,8,16,36,195,0
007DD0  3  10 24 C3 00  
007DD4  3  00 C3 3C 42          .byte 0,195,60,66,66,60,195,0
007DD8  3  42 3C C3 00  
007DDC  3  42 42 24 10          .byte 66,66,36,16,8,36,66,66
007DE0  3  08 24 42 42  
007DE4  3  42 5A 24 24          .byte 66,90,36,36,36,36,90,66
007DE8  3  24 24 5A 42  
007DEC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
007DF0  3  00 00 00 00  
007DF4  3  42 42 24 08          .byte 66,66,36,8,16,36,66,66
007DF8  3  10 24 42 42  
007DFC  3  42 5A 24 24          .byte 66,90,36,36,36,36,90,66
007E00  3  24 24 5A 42  
007E04  3  00 C3 24 10          .byte 0,195,36,16,8,36,195,0
007E08  3  08 24 C3 00  
007E0C  3  00 C3 3C 42          .byte 0,195,60,66,66,60,195,0
007E10  3  42 3C C3 00  
007E14  3  00 00 00 08          .byte 0,0,0,8,0,16,0,0
007E18  3  00 10 00 00  
007E1C  3  0F 1F 3F 3F          .byte 15,31,63,63,102,106,102,106
007E20  3  66 6A 66 6A  
007E24  3  E0 F0 F8 FC          .byte 224,240,248,252,156,172,156,188
007E28  3  9C AC 9C BC  
007E2C  3  FC 9C 6C EC          .byte 252,156,108,236,220,188,124,252
007E30  3  DC BC 7C FC  
007E34  3  7F 79 76 77          .byte 127,121,118,119,123,125,126,127
007E38  3  7B 7D 7E 7F  
007E3C  3  00 00 00 00          .byte 0,0,0,0,72,80,82,84
007E40  3  48 50 52 54  
007E44  3  00 00 00 02          .byte 0,0,0,2,1,9,5,21
007E48  3  01 09 05 15  
007E4C  3  00 04 04 08          .byte 0,4,4,8,8,0,16,0
007E50  3  08 00 10 00  
007E54  3  00 78 86 91          .byte 0,120,134,145,96,0,0,0
007E58  3  60 00 00 00  
007E5C  3  00 00 06 89          .byte 0,0,6,137,97,30,0,0
007E60  3  61 1E 00 00  
007E64  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
007E68  3  CC CC 78 00  
007E6C  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
007E70  3  78 78 30 00  
007E74  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
007E78  3  FC FC 78 00  
007E7C  3  21 00 FD 01          .byte 33,0,253,1,64,2,62,8
007E80  3  40 02 3E 08  
007E84  3  5F 7E BB C2          .byte 95,126,187,194,223,124,124,198
007E88  3  DF 7C 7C C6  
007E8C  3  5B 57 5D C5          .byte 91,87,93,197,229,1,7,7
007E90  3  E5 01 07 07  
007E94  3  CD F1 89 E1          .byte 205,241,137,225,193,60,18,35
007E98  3  C1 3C 12 23  
007E9C  3  0B 78 B1 C2          .byte 11,120,177,194,198,124,201,0
007EA0  3  C6 7C C9 00  
007EA4  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
007EA8  3  30 30 F0 00  
007EAC  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
007EB0  3  00 00 00 00  
007EB4  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
007EB8  3  E3 BB C6 7C  
007EBC  3               jtab:
007EBC  3  F8 FA FC FE          .byte 248,250,252,254,254,255,255,255,0,0,0,2,3,4,4,5,6,7,8,9,10,99
007EC0  3  FE FF FF FF  
007EC4  3  00 00 00 02  
007ED2  3  14 24 63 04  keys:   .byte 20,36,99,4,144,133,98,33,17,1,146
007ED6  3  90 85 62 21  
007EDA  3  11 01 92     
007EDD  3               
007EDD  2               
007EDD  1               	.include "z80.asm"
007EDD  2               ;------------------------------------------------------
007EDD  2               ; z80.asm
007EDD  2               ; spectrum stuff
007EDD  2               ; adresses
007EDD  2               
007EDD  2               ;ws	 = $60
007EDD  2               
007EDD  2               ;z80_f	 = ws+$00
007EDD  2               ;z80_a	 = ws+$01
007EDD  2               ;z80_af	 = z80_f
007EDD  2               
007EDD  2               ;z80_c	 = ws+$02
007EDD  2               ;z80_b	 = ws+$03
007EDD  2               ;z80_bc	 = z80_c
007EDD  2               
007EDD  2               ;z80_e	 = ws+$04
007EDD  2               ;z80_d	 = ws+$05
007EDD  2               ;z80_de	 = z80_e
007EDD  2               
007EDD  2               ;z80_l	 = ws+$06
007EDD  2               ;z80_h	 = ws+$07
007EDD  2               ;z80_hl	 = z80_l
007EDD  2               
007EDD  2               ;z80_x    = ws+$08
007EDD  2               ;z80_i    = ws+$09
007EDD  2               ;z80_ix	 = z80_x
007EDD  2               
007EDD  2               ;z80_iy	 = ws+$0a
007EDD  2               
007EDD  2               ;z80_fp	 = ws+$0c
007EDD  2               ;z80_ap	 = ws+$0d
007EDD  2               
007EDD  2               ;z80_cp	 = ws+$0e
007EDD  2               ;z80_bp	 = ws+$0f
007EDD  2               ;z80_bcp = z80_cp
007EDD  2               
007EDD  2               ;z80_ep	 = ws+$10
007EDD  2               ;z80_dp	 = ws+$11
007EDD  2               ;z80_dep = z80_ep
007EDD  2               
007EDD  2               ;z80_lp	 = ws+$12
007EDD  2               ;z80_hp	 = ws+$13
007EDD  2               ;z80_hlp = z80_lp
007EDD  2               
007EDD  2               ;z80_sp   = ws+$14
007EDD  2               
007EDD  2               ;z80_reg0 = ws+$16
007EDD  2               ;z80_reg1 = ws+$17
007EDD  2               ;z80_reg2 = ws+$18
007EDD  2               ;z80_reg3 = ws+$19
007EDD  2               
007EDD  2               ;z80_r	 = ws+$1a
007EDD  2               
007EDD  2               ; Contains seperatly 1 bit set
007EDD  2               
007EDD  2               _bitmem0	= $f8
007EDD  2               _bitmem1	= $f9
007EDD  2               _bitmem2	= $fa
007EDD  2               _bitmem3	= $fb
007EDD  2               _bitmem4	= $fc
007EDD  2               _bitmem5	= $fd
007EDD  2               _bitmem6	= $fe
007EDD  2               _bitmem7	= $ff
007EDD  2               
007EDD  2               ; constants
007EDD  2               _bitvalue0	= $01
007EDD  2               _bitvalue1	= $02
007EDD  2               _bitvalue2	= $04
007EDD  2               _bitvalue3	= $08
007EDD  2               _bitvalue4	= $10
007EDD  2               _bitvalue5	= $20
007EDD  2               _bitvalue6	= $40
007EDD  2               _bitvalue7	= $80
007EDD  2               
007EDD  2               _notbitvalue0	= $fe
007EDD  2               _notbitvalue1	= $fd
007EDD  2               _notbitvalue2	= $fb
007EDD  2               _notbitvalue3	= $f7
007EDD  2               _notbitvalue4	= $ef
007EDD  2               _notbitvalue5	= $df
007EDD  2               _notbitvalue6	= $bf
007EDD  2               _notbitvalue7	= $7f
007EDD  2               
007EDD  2               
007EDD  2               ;add_hl_bc:
007EDD  2               ;		lda z80_l
007EDD  2               ;		clc
007EDD  2               ;		adc z80_c
007EDD  2               ;		sta z80_l
007EDD  2               ;		lda z80_h
007EDD  2               ;		adc z80_b
007EDD  2               ;		sta z80_h
007EDD  2               ;		rts
007EDD  2               ;
007EDD  2               ;add_ix_de:
007EDD  2               ;		lda z80_ix
007EDD  2               ;		clc
007EDD  2               ;		adc z80_e
007EDD  2               ;		sta z80_ix
007EDD  2               ;		lda z80_ix+1
007EDD  2               ;		adc z80_d
007EDD  2               ;		sta z80_ix+1
007EDD  2               ;		rts
007EDD  2               ;
007EDD  2               ;add_iy_de:
007EDD  2               ;		lda z80_iy
007EDD  2               ;		clc
007EDD  2               ;		adc z80_e
007EDD  2               ;		sta z80_iy
007EDD  2               ;		lda z80_iy+1
007EDD  2               ;		adc z80_d
007EDD  2               ;		sta z80_iy+1
007EDD  2               ;		rts
007EDD  2               ;
007EDD  2               ;add_hl_de:
007EDD  2               ;		lda z80_l
007EDD  2               ;		clc
007EDD  2               ;		adc z80_e
007EDD  2               ;		sta z80_l
007EDD  2               ;		lda z80_h
007EDD  2               ;		adc z80_d
007EDD  2               ;		sta z80_h
007EDD  2               ;		rts
007EDD  2               ;
007EDD  2               ;add_ix_bc:
007EDD  2               ;		lda z80_ix
007EDD  2               ;		clc
007EDD  2               ;		adc z80_c
007EDD  2               ;		sta z80_ix
007EDD  2               ;		lda z80_ix+1
007EDD  2               ;		adc z80_b
007EDD  2               ;		sta z80_ix+1
007EDD  2               ;		rts
007EDD  2               ;
007EDD  2               ;add_iy_bc:
007EDD  2               ;		lda z80_iy
007EDD  2               ;		clc
007EDD  2               ;		adc z80_c
007EDD  2               ;		sta z80_iy
007EDD  2               ;		lda z80_iy+1
007EDD  2               ;		adc z80_b
007EDD  2               ;		sta z80_iy+1
007EDD  2               ;		rts
007EDD  2               ;
007EDD  2               ;sbc_hl_de:
007EDD  2               ;		lda z80_l
007EDD  2               ;		sbc z80_e
007EDD  2               ;		sta z80_l
007EDD  2               ;		lda z80_h
007EDD  2               ;		sbc z80_d
007EDD  2               ;		sta z80_h
007EDD  2               ;		rts
007EDD  2               ;
007EDD  2               ;sbc_hl_bc:
007EDD  2               ;		lda z80_l
007EDD  2               ;		sbc z80_c
007EDD  2               ;		sta z80_l
007EDD  2               ;		lda z80_h
007EDD  2               ;		sbc z80_b
007EDD  2               ;		sta z80_h
007EDD  2               ;		rts
007EDD  2               ;
007EDD  2               ;cmp_hl_bc:
007EDD  2               ;		lda z80_l
007EDD  2               ;		cmp z80_c
007EDD  2               ;		bne cmp_hl_bc_end
007EDD  2               ;		lda z80_h
007EDD  2               ;		cmp z80_b
007EDD  2               ;cmp_hl_bc_end:
007EDD  2               ;		rts
007EDD  2               ;
007EDD  2               ;cmp_iy_ix:
007EDD  2               ;		lda z80_iy
007EDD  2               ;		cmp z80_ix
007EDD  2               ;		bne cmp_iy_ix_end
007EDD  2               ;		lda z80_iy+1
007EDD  2               ;		cmp z80_ix+1
007EDD  2               ;cmp_iy_ix_end:
007EDD  2               ;		rts
007EDD  2               ;
007EDD  2               ;dec_hl:
007EDD  2               ;		lda z80_l
007EDD  2               ;		bne dec_hl_no_dec_h
007EDD  2               ;		dec z80_h
007EDD  2               ;dec_hl_no_dec_h:
007EDD  2               ;		dec z80_l
007EDD  2               ;		rts
007EDD  2               ;
007EDD  2               ;dec_ix:
007EDD  2               ;		lda z80_ix
007EDD  2               ;		bne dec_ix_no_dec_h
007EDD  2               ;		dec z80_ix+1
007EDD  2               ;dec_ix_no_dec_h:
007EDD  2               ;		dec z80_ix
007EDD  2               ;		rts
007EDD  2               ;
007EDD  2               ;dec_bc:
007EDD  2               ;		lda z80_c
007EDD  2               ;		bne dec_bc_no_dec_b
007EDD  2               ;		dec z80_b
007EDD  2               ;dec_bc_no_dec_b:
007EDD  2               ;		dec z80_c
007EDD  2               ;		rts
007EDD  2               ;
007EDD  2               ;dec_de:
007EDD  2               ;		lda z80_e
007EDD  2               ;		bne dec_de_no_dec_d
007EDD  2               ;		dec z80_d
007EDD  2               ;dec_de_no_dec_d:
007EDD  2               ;		dec z80_e
007EDD  2               ;		rts
007EDD  2               ;
007EDD  2               ;ex_af_afs:
007EDD  2               ;	rts
007EDD  2               ;ex_de_hl:
007EDD  2               ;		lda z80_e
007EDD  2               ;		ldx z80_l
007EDD  2               ;		stx z80_e
007EDD  2               ;		sta z80_l
007EDD  2               ;		lda z80_d
007EDD  2               ;		ldx z80_h
007EDD  2               ;		stx z80_d
007EDD  2               ;		sta z80_h
007EDD  2               ;		rts
007EDD  2               ;
007EDD  2               exx:
007EDD  2  A5 62        		lda z80_c
007EDF  2  A4 6E        		ldy z80_cp
007EE1  2  84 62        		sty z80_c
007EE3  2  85 6E        		sta z80_cp
007EE5  2  A5 63        		lda z80_b
007EE7  2  A4 6F        		ldy z80_bp
007EE9  2  84 63        		sty z80_b
007EEB  2  85 6F        		sta z80_bp
007EED  2  A5 64        		lda z80_e
007EEF  2  A4 70        		ldy z80_ep
007EF1  2  84 64        		sty z80_e
007EF3  2  85 70        		sta z80_ep
007EF5  2  A5 65        		lda z80_d
007EF7  2  A4 71        		ldy z80_dp
007EF9  2  84 65        		sty z80_d
007EFB  2  85 71        		sta z80_dp
007EFD  2  A5 rr        		lda scraddr
007EFF  2  A4 72        		ldy z80_lp
007F01  2  84 rr        		sty scraddr
007F03  2  85 72        		sta z80_lp
007F05  2  A5 rr        		lda scraddr+1
007F07  2  A4 73        		ldy z80_hp
007F09  2  84 rr        		sty scraddr+1
007F0B  2  85 73        		sta z80_hp
007F0D  2  60           		rts
007F0E  2               
007F0E  2               ;ex_sp_hl:
007F0E  2               ;		tsx
007F0E  2               ;		lda $0103,x
007F0E  2               ;		ldy z80_h
007F0E  2               ;		sta z80_h
007F0E  2               ;		tya
007F0E  2               ;		sta $0103,x
007F0E  2               ;		lda $0104,x
007F0E  2               ;		ldy z80_l
007F0E  2               ;		sta z80_l
007F0E  2               ;		tya
007F0E  2               ;		sta $104,x
007F0E  2               ;		rts
007F0E  2               ;
007F0E  2               ;ldi:
007F0E  2               ;	rts
007F0E  2               ;ldir:
007F0E  2               ;		ldy #$00
007F0E  2               ;		ldx z80_b
007F0E  2               ;		beq ldir_last_page
007F0E  2               ;ldir_loop:
007F0E  2               ;		lda (z80_hl),y
007F0E  2               ;		sta (z80_de),y
007F0E  2               ;		iny
007F0E  2               ;		bne ldir_loop
007F0E  2               ;		inc z80_h
007F0E  2               ;		inc z80_d
007F0E  2               ;		dex
007F0E  2               ;		bne ldir_loop
007F0E  2               ;ldir_last_page:
007F0E  2               ;		lda z80_c
007F0E  2               ;		beq ldir_end
007F0E  2               ;ldir_last_page_loop:
007F0E  2               ;		lda (z80_hl),y
007F0E  2               ;		sta (z80_de),y
007F0E  2               ;		iny
007F0E  2               ;		cpy z80_c
007F0E  2               ;		bne ldir_last_page_loop
007F0E  2               ;ldir_end:
007F0E  2               ;		stx z80_c
007F0E  2               ;		stx z80_b
007F0E  2               ;		tya
007F0E  2               ;		clc
007F0E  2               ;		adc z80_l
007F0E  2               ;		sta z80_l
007F0E  2               ;		bcc *+4
007F0E  2               ;		inc z80_h
007F0E  2               ;		tya
007F0E  2               ;		clc
007F0E  2               ;		adc z80_e
007F0E  2               ;		sta z80_e
007F0E  2               ;		bcc *+4
007F0E  2               ;		inc z80_d
007F0E  2               ;		rts
007F0E  2               ;
007F0E  2               ;lddr:		ldy #$00
007F0E  2               ;lddr_loop:
007F0E  2               ;		lda (z80_hl),y
007F0E  2               ;		sta (z80_de),y
007F0E  2               ;		jsr dec_hl
007F0E  2               ;		jsr dec_de
007F0E  2               ;		jsr dec_bc
007F0E  2               ;		lda z80_b
007F0E  2               ;		ora z80_c
007F0E  2               ;		bne lddr_loop
007F0E  2               ;		rts
007F0E  2               ;ei:
007F0E  2               ;		rts
007F0E  2               ;di:
007F0E  2               ;		rts
007F0E  2               
007F0E  2               ;-------------------------------------------------------------
007F0E  2               ; Set bits in bitmem
007F0E  2               ;-------------------------------------------------------------
007F0E  2               
007F0E  2               ;z80_init:
007F0E  2               ;	ldx #$00
007F0E  2               ;	lda #$01
007F0E  2               ;z80_init_loop:
007F0E  2               ;	sta _bitmem0,x
007F0E  2               ;	inx
007F0E  2               ;	asl a
007F0E  2               ;	bne z80_init_loop
007F0E  2               ;	rts
007F0E  2               
007F0E  2               push_af:
007F0E  2               push_bc:
007F0E  2               push_de:
007F0E  2               push_hl:
007F0E  2               
007F0E  2               pop_af:
007F0E  2               pop_bc:
007F0E  2               pop_de:
007F0E  2               pop_ix:
007F0E  2               pop_hl:
007F0E  2               
007F0E  2               add_hl_hl:
007F0E  2               
007F0E  2               inc_bc:
007F0E  2               inc_de:
007F0E  2               inc_hl:
007F0E  2               inc_ix:
007F0E  2               inc_sp:
007F0E  2               
007F0E  2               cpir:
007F0E  2               
007F0E  2               ex_af_af:
007F0E  2               ;	rts
007F0E  2               
007F0E  1               eind_asm:
007F0E  1               eop:					; End Of Program
007F0E  1               
