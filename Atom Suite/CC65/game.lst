ca65 V2.17 - Git d13d068
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2017
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $0220
000000r 1               	.DEFINE header   1		; Header Wouter Ras emulator
000000r 1               	.DEFINE filenaam "AGD"
000000r 1               
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               mflag = 0 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               cflag = 0 ;
000000r 2               oflag = 1 ;
000000r 2               lflag = 0 ;
000000r 2               
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "z80-zp.inc"
000000r 2               ;.segment "ZEROPAGE"
000000r 2               
000000r 2               ws	 = $60
000000r 2               
000000r 2               z80_f	 = ws+$00
000000r 2               z80_a	 = ws+$01
000000r 2               z80_af	 = z80_f
000000r 2               
000000r 2               z80_c	 = ws+$02
000000r 2               z80_b	 = ws+$03
000000r 2               z80_bc	 = z80_c
000000r 2               
000000r 2               z80_e	 = ws+$04
000000r 2               z80_d	 = ws+$05
000000r 2               z80_de	 = z80_e
000000r 2               
000000r 2               z80_l	 = ws+$06
000000r 2               z80_h	 = ws+$07
000000r 2               z80_hl	 = z80_l
000000r 2               
000000r 2               z80_x    = ws+$08
000000r 2               z80_i    = ws+$09
000000r 2               z80_ix	 = z80_x
000000r 2               
000000r 2               z80_iy	 = ws+$0a
000000r 2               
000000r 2               z80_fp	 = ws+$0c
000000r 2               z80_ap	 = ws+$0d
000000r 2               
000000r 2               z80_cp	 = ws+$0e
000000r 2               z80_bp	 = ws+$0f
000000r 2               z80_bcp	 = z80_cp
000000r 2               
000000r 2               z80_ep	 = ws+$10
000000r 2               z80_dp	 = ws+$11
000000r 2               z80_dep	 = z80_ep
000000r 2               
000000r 2               z80_lp	 = ws+$12
000000r 2               z80_hp	 = ws+$13
000000r 2               z80_hlp	 = z80_lp
000000r 2               
000000r 2               z80_sp   = ws+$14
000000r 2               
000000r 2               z80_reg0 = ws+$16
000000r 2               z80_reg1 = ws+$17
000000r 2               z80_reg2 = ws+$18
000000r 2               z80_reg3 = ws+$19
000000r 2               
000000r 2               z80_r	 = ws+$1a
000000r 2               
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        	; last random number.
00001Er 2  xx           varobj:	.res 1  	   	; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:	    .res 1
00002Br 2  xx           loopb:	    .res 1
00002Cr 2  xx           loopc:	    .res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2               
000037r 2  xx xx        tmp:        .res 2
000039r 2  xx xx        scr_l:      .res 2
00003Br 2  xx xx        scr_r:      .res 2
00003Dr 2  xx xx        scr_txt:    .res 2
00003Fr 2               
00003Fr 2  xx           xtmp:	    .res 1
000040r 2  xx           spcnt:	    .res 1
000041r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000043r 2  xx           seed:	    .res 1		; seed for random numbers.
000044r 2               
000044r 2  xx           ccnt:       .res 1
000045r 2  xx           flag:	    .res 1
000046r 2  xx           rcol:	    .res 1
000047r 2  xx           rrow:	    .res 1
000048r 2               
000048r 2  xx           combyt:	    .res 1		; byte type compressed.
000049r 2  xx           comcnt:	    .res 1		; compression counter.
00004Ar 2  xx           prtmod:	    .res 1      	; print mode, 0 = standard, 1 = double-height.
00004Br 2  xx           qscnt:	    .res 1
00004Cr 2               
00004Cr 2  xx           sprptr:	    .res 1      	; not a ptr
00004Dr 2  xx           sprcnt:	    .res 1
00004Er 2               
00004Er 2  xx xx        skptr:	    .res 2		; search pointer.
000050r 2  xx           sktptr:	    .res 1      	; not a ptr
000051r 2  xx           tmproom:    .res 1
000052r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000054r 2               
000054r 2               .if mflag
000054r 2               TmpAddr:    .res 2
000054r 2               bwid:	    .res 1     		; box/menu width.
000054r 2               blen:	    .res 1     		; box/menu height.
000054r 2               btop:	    .res 1    	 	; box coordinates.
000054r 2               blft:	    .res 1
000054r 2               .endif
000054r 2               
000054r 2               .if pflag
000054r 2               shrctr:	    .res 1
000054r 2               explcnt:    .res 1
000054r 2               seed3:	    .res 1
000054r 2               .endif
000054r 2               
000054r 2               .if aflag
000054r 2               pbptr:       .res 2
000054r 2               .endif
000054r 2               
000054r 1               
000054r 1               .segment "CODE"
000000r 1               
000000r 1               .if header
000000r 1               ;********************************************************************
000000r 1               ; ATM Header for Atom emulator Wouter Ras
000000r 1               
000000r 1               .org asm_code-22*header
00020A  1               name_start:
00020A  1  41 47 44     	.byte filenaam			; Filename
00020D  1               name_end:
00020D  1  00 00 00 00  	.repeat 16-name_end+name_start	; Fill with 0 till 16 chars
000211  1  00 00 00 00  
000215  1  00 00 00 00  
00021A  1               	  .byte $0
00021A  1               	.endrep
00021A  1               
00021A  1  20 02        	.word asm_code			; 2 bytes startaddress
00021C  1  20 02        	.word exec			; 2 bytes linkaddress
00021E  1  CD 57        	.word eind_asm-start_asm	; 2 bytes filelength
000220  1               
000220  1               ;********************************************************************
000220  1               .else
000220  1               .org asm_code
000220  1               .endif
000220  1               
000220  1               exec:
000220  1               start_asm:
000220  1               	.include "game.inc"
000220  2               .include "raiders.inc"
000220  3               ;--------------------------------------------------------------
000220  3               ; Arcade Game Designer.
000220  3               ; (C) 2008 Jonathan Cauldwell.
000220  3               ; ZX Spectrum Next Engine v0.7.
000220  3               ; Acorn Atom port by K.v.Oss 2018
000220  3               ;--------------------------------------------------------------
000220  3               
000220  3               ; Conditional compilation flags
000220  3               ; Code is installed if flag is set
000220  3               ; Flags are set in commandline assembly or by the compiler
000220  3               
000220  3               ; Flags set by AGD compiler
000220  3               ;	mflag  			; MENU + INV
000220  3               ;	pflag 			; particle engine
000220  3               ;	sflag 			; scrollytext
000220  3               ;	dflag 			; digging mode
000220  3               ;	cflag			; collectable blocks
000220  3               ;	oflag			; objects
000220  3               ;	lflag			; ladders
000220  3               ;
000220  3               ; Flags set manually
000220  3               ;	aflag			; adventure mode
000220  3               ;	bflag			; big sprites (16x24)
000220  3               ;	gflag			; graphic colour mode
000220  3               ;	hflag			; hidden sprite mode
000220  3               ;	iflag			; invert mode
000220  3               
000220  3               .if mflag
000220  3               	.out "- MEN/INV enabled"
000220  3               .endif
000220  3               .if pflag
000220  3               	.out "- Particles enabled"
000220  3               .endif
000220  3               .if sflag
000220  3               	.out "- Scrolling enabled"
000220  3               .endif
000220  3               .if dflag
000220  3               	.out "- Digging enabled"
000220  3               .endif
000220  3               .if cflag
000220  3               	.out "- Collectable blocks enabled"
000220  3               .endif
000220  3               .if oflag
000220  3               	.out "- Objects enabled"
000220  3               .endif
000220  3               .if lflag
000220  3               	.out "- Ladders enabled"
000220  3               .endif
000220  3               .if aflag
000220  3               	.out "- Adventure mode enabled"
000220  3               .endif
000220  3               .if bflag
000220  3               	.out "- Big Sprites (16x24) enabled"
000220  3               .endif
000220  3               .if gflag
000220  3               	.out "- Colourmode enabled"
000220  3               .endif
000220  3               .if hflag
000220  3               	.out "- Hidden sprites/foregroundblocks enabled"
000220  3               .endif
000220  3               .if iflag
000220  3               	.out "- Invert mode enabled"
000220  3               .endif
000220  3               
000220  3               ; Global definitions ------------------------------------------------------------
000220  3               
000220  3               	FONT = font		; Font address
000220  3               
000220  3               	green	= $00		; Colour definition filters
000220  3               	yellow	= $55
000220  3               	blue	= $aa
000220  3               	red	= $ff
000220  3               
000220  3               ; Block characteristics.
000220  3               
000220  3               	PLATFM	= 1		; platform.
000220  3               	WALL	= PLATFM + 1	; solid wall.
000220  3               	LADDER	= WALL + 1	; ladder.
000220  3               	FODDER	= LADDER + 1	; fodder block.
000220  3               	DEADLY	= FODDER + 1	; deadly block.
000220  3               	CUSTOM	= DEADLY + 1	; custom block.
000220  3               	WATER	= CUSTOM + 1	; water block.
000220  3                       COLECT	= WATER + 1	; collectable block.
000220  3                       NUMTYP	= COLECT + 1	; number of types.
000220  3               
000220  3               ; Sprites.
000220  3               
000220  3               .if bflag
000220  3               	SPR_HGT	= 24		; Sprite height
000220  3               	SPR_WID = 16		; Sprite width
000220  3               	NUMSPR	= 8		; number of sprites.
000220  3               .else				; 16x16 sprites
000220  3               	SPR_HGT = 16		; Sprite height
000220  3               	SPR_WID = 16		; Sprite width
000220  3               	NUMSPR	= 12		; number of sprites.
000220  3               .endif
000220  3               
000220  3               	TABSIZ = 17		; size of each entry.
000220  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
000220  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
000220  3               	var_X  = 8		; new x coordinate of sprite.
000220  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
000220  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
000220  3               
000220  3               ; Particle engine.
000220  3               
000220  3               	NUMSHR = 55		; pieces of shrapnel.
000220  3               	SHRSIZ = 6		; bytes per particle.
000220  3               
000220  3               ; System constants
000220  3               
000220  3               	ScreenAddr  = $8000	; Startaddress video RAM
000220  3               	ScrSelAddr  = $b000	; Screen selection address
000220  3               	KeyRowAddr  = $b000	; PIA key matrix row
000220  3               	KeyColAddr  = $b001	; PIA key matrix column
000220  3               	SpeakerBit  = $b002	; Speaker bit
000220  3               	CmdReg      = $b400	; Command register AtoMMC
000220  3               	DatReg      = $b401	; Data register AtoMMC
000220  3               	Timer2_Low  = $b808	; Timer 2 low byte
000220  3               	Timer2_High = $b809	; Timer 2 high byte
000220  3               
000220  3               ; System calls
000220  3               
000220  3               	SCRSYNC	 = $fe66	; wait for next CRT field flyback 60 Hz
000220  3               	SCRSYNC1 = $fe6b	; wait for CRT field flyback 60 Hz
000220  3               	OSRDCH   = $fe94	; get key subroutine
000220  3                       READKEY  = $fe71	; scan key matrix subroutine
000220  3               	OSWRCH	 = $fff4	; write character
000220  3               
000220  3               
000220  3               .if iflag
000220  3               	TxtInvert   = $ff	; Invert byte for character printing
000220  3               	ScrFillByte = $ff	; Screen fill byte for CLS
000220  3               .else
000220  3               	TxtInvert   = $00	; Invert byte for character printing
000220  3               	ScrFillByte = $00	; Screen fill byte for CLS
000220  3               .endif
000220  3               
000220  3               .if gflag
000220  3               	ScrMode     = $d0	;  $d0 = CLEAR4a colour
000220  3               .else
000220  3               	ScrMode     = $f0	;  $f0 = CLEAR4  mono
000220  3               .endif
000220  3               
000220  3               ;===============================================================
000220  3               ; Game starts here
000220  3               ;===============================================================
000220  3               
000220  3               .segment "CODE"
000220  3               
000220  3  20 48 03     	jsr game	 	; start the game.
000223  3  A9 0C        	lda #12			; Clear screen + exit to Basic
000225  3  4C F4 FF     	jmp OSWRCH
000228  3               
000228  3               ; Definition of variables
000228  3               ; Make sure pointers are arranged in the same order as the data itself.
000228  3               
000228  3  32 2D        msgptr:		.word msgdat	; messages
00022A  3  5B 2D        blkptr:		.word chgfx	; block graphics.
00022C  3  3B 31        proptr:		.word bprop	; address of char properties.
00022E  3  B7 31        sptptr:		.word sprgfx	; sprite graphics
000230  3  37 45        frmptr:		.word frmlst	; sprite frames.
000232  3  51 45        scrptr:		.word scdat	; address of screens.
000234  3  88 53        nmeptr:		.word nmedat	; enemy start positions.
000236  3  87 54        objptr:		.word objdta	; object graphics
000238  3               
000238  3  FF           TxtFilter:	.byte $ff
000239  3  00 55 AA FF  txtcol:		.byte green,yellow,blue,red
00023D  3               
00023D  3               ; Don't change the order of these four.
00023D  3               ; Menu routine relies on winlft following wintop.
00023D  3               
00023D  3  01           wintop:		.byte WINDOWTOP	; top of window.
00023E  3  01           winlft:		.byte WINDOWLFT	; left edge.
00023F  3  14           winhgt:		.byte WINDOWHGT	; window height.
000240  3  1E           winwid:		.byte WINDOWWID	; window width.
000241  3  0E           numob:		.byte NUMOBJ	; number of objects in game.
000242  3               
000242  3               ; Variables start here.
000242  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
000242  3               
000242  3  08           wntopx:		.byte (8 * WINDOWTOP)
000243  3  08           wnlftx:		.byte (8 * WINDOWLFT)
000244  3  98           wnbotx:		.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
000245  3  E6           wnrgtx:		.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
000246  3               
000246  3               ; Assorted game routines which can go in contended memory.
000246  3               
000246  3               ;--------------------------------------------------------------
000246  3               ; Entry for inventory called by the INV command
000246  3               ;
000246  3               ; Input:
000246  3               ;  X   = message nr with objects seperated with ,
000246  3               ;
000246  3               ; Output:
000246  3               ;  OPT = selected objectnr of INV menu
000246  3               ;--------------------------------------------------------------
000246  3               
000246  3               .if mflag
000246  3               minve:
000246  3               .if gflag
000246  3               	lda #$ff		; blue frontcolour
000246  3               	sta andeor
000246  3               	lda #$aa		; yellow backcoloour
000246  3               	sta andeor+1
000246  3               .endif
000246  3               	lda #<(invdis)		; routine address.
000246  3               	sta mod0+1		; set up menu routine.
000246  3               	sta mod2+1		; set up count routine.
000246  3               	lda #>(invdis)
000246  3               	sta mod0+2
000246  3               	sta mod2+2
000246  3               	lda #<(fopt)		; find option from available objects.
000246  3               	sta mod1+1		; set up routine.
000246  3               	lda #>(fopt)
000246  3               	sta mod1+1+1
000246  3               	jmp dbox		; do menu routine.
000246  3               
000246  3               ;--------------------------------------------------------------
000246  3               ; Entry for menu called by the MENU command
000246  3               ;
000246  3               ; Input:
000246  3               ;  X   = message nr with menu items seperated with ,
000246  3               ;
000246  3               ; Output:
000246  3               ;  OPT = selected line nr of MENU menu
000246  3               ;--------------------------------------------------------------
000246  3               
000246  3               mmenu:
000246  3               	lda #<(always)		; routine address.
000246  3               	sta mod0+1		; set up routine.
000246  3               	sta mod2+1		; set up count routine.
000246  3               	lda #>(always)
000246  3               	sta mod0+2
000246  3               	sta mod2+2
000246  3               
000246  3               	lda #<(fstd)		; standard option selection.
000246  3               	sta mod1+1		; set up routine.
000246  3               	lda #>(fstd)
000246  3               	sta mod1+2
000246  3               
000246  3               ; Drop through into box routine.
000246  3               
000246  3               ;--------------------------------------------------------------
000246  3               ; Work out size of box for message or menu.
000246  3               ;--------------------------------------------------------------
000246  3               
000246  3               dbox:
000246  3               	lda #<(msgdat)		; pointer to messages.
000246  3               	sta z80_l
000246  3               	lda #>(msgdat)
000246  3               	sta z80_h
000246  3               
000246  3               	jsr getwrd		; get message number.
000246  3               
000246  3               	lda z80_h		; store pointer to message.
000246  3               	sta TmpAddr
000246  3               	lda z80_l
000246  3               	sta TmpAddr+1
000246  3               
000246  3               	lda #1			; height.
000246  3               	sta z80_d
000246  3               	lda #0			; start at object zero.
000246  3               	sta combyt		; store number of object in combyt.
000246  3               	sta z80_e		; maximum width.
000246  3               dbox5:
000246  3               	lda #0			; this line"s width.
000246  3               	sta z80_b
000246  3               mod2:
000246  3               	jsr always		; item in player"s possession?
000246  3               	cmp #255
000246  3               	bne dbox6		; not in inventory, skip this line.
000246  3               	inc z80_d		; add to tally.
000246  3               dbox6:
000246  3               	ldy #0			; get character.
000246  3               	lda (z80_hl),y
000246  3               	sta z80_a
000246  3               	inc z80_l		; next character.
000246  3               	bne :+
000246  3               	inc z80_h
000246  3               :
000246  3               	lda z80_a		; reached end of line?
000246  3               	cmp #','
000246  3               	beq dbox3		; yes.
000246  3               	cmp #13
000246  3               	beq dbox3		; yes.
000246  3               	inc z80_b		; add to this line"s width.
000246  3               	lda z80_a
000246  3               	bmi dbox4		; end of message? yes, end count.
000246  3               	jmp dbox6		; repeat until we find the end.
000246  3               dbox3:
000246  3               	lda z80_e		; maximum line width.
000246  3               	cmp z80_b		; have we exceeded longest so far?
000246  3               	bpl dbox5		; no, carry on looking.
000246  3               	lda z80_b		; make this the widest so far.
000246  3               	sta z80_e
000246  3               	jmp dbox5		; keep looking.
000246  3               dbox4:
000246  3               	lda z80_e		; maximum line width.
000246  3               	cmp z80_b		; have we exceeded longest so far?
000246  3               	bpl dbox8		; no, carry on looking.
000246  3               	lda z80_b		; final line is the longest so far.
000246  3               	sta z80_e
000246  3               dbox8:
000246  3               	dec z80_d		; decrement items found.
000246  3               	bne :+			; total was zero.
000246  3               	lda #255
000246  3               	sta varopt
000246  3               	jmp dbox15
000246  3               :
000246  3               	lda z80_e		; longest line.
000246  3               	bne :+			; was it zero?
000246  3               	jmp dbox15		; total was zero.
000246  3               :
000246  3               	sta bwid		; set up size.
000246  3               	lda z80_d
000246  3               	sta blen
000246  3               
000246  3               ;--------------------------------------------------------------
000246  3               ; That's set up our box size.
000246  3               ;--------------------------------------------------------------
000246  3               
000246  3               	lda winhgt		; window height in characters.
000246  3               	sec
000246  3               	sbc z80_d		; subtract height of box.
000246  3               	lsr a			; divide by 2.
000246  3               	clc
000246  3               	adc wintop		; add top edge of window.
000246  3               	sta btop		; set up box top.
000246  3               
000246  3               	lda winwid		; window width in characters.
000246  3               	sec
000246  3               	sbc z80_e		; subtract box width.
000246  3               	lsr a			; divide by 2.
000246  3               	clc
000246  3               	adc winlft		; add left edge of window.
000246  3               	sta blft		; box left.
000246  3               
000246  3               	lda #<(FONT-256)		; font.
000246  3               	sta grbase		; set up for text display.
000246  3               	lda #>(FONT-256)
000246  3               	sta grbase+1
000246  3               
000246  3               	lda TmpAddr+1		; restore message pointer.
000246  3               	sta z80_l
000246  3               	lda TmpAddr
000246  3               	sta z80_h
000246  3               
000246  3               	lda btop		; box top.
000246  3               	sta dispy		; set display coordinate.
000246  3               	lda #0			; start at object zero.
000246  3               	sta combyt		; store number of object in combyt.
000246  3               dbox2:
000246  3               	lda combyt		; get object number.
000246  3               	sta z80_a
000246  3               mod0:
000246  3               	jsr always		; check inventory for display.
000246  3               	cmp #255
000246  3               	beq :+
000246  3               	jmp dbox13		; not in inventory, skip this line.
000246  3               :
000246  3               	lda blft		; box left.
000246  3               	sta dispx		; set left display position.
000246  3               	lda bwid		; box width.
000246  3               	sta z80_b		; store width.
000246  3               dbox0:
000246  3               	ldy #0
000246  3               	lda (z80_hl),y		; get character.
000246  3               	cmp #','		; end of line?
000246  3               	beq dbox1		; yes, next one.
000246  3               	cmp #13			; end of line?
000246  3               	beq dbox1		; yes, next one.
000246  3               
000246  3               	cmp #141			; end of line?
000246  3               	bne :+
000246  3               	dec bwid
000246  3               	jmp dbox7		; yes, next one.
000246  3               :
000246  3               	dec z80_b		; one less to display.
000246  3               	and #127		; remove terminator.
000246  3               
000246  3               	jsr pchr		; display on screen.
000246  3               
000246  3               	ldy #0
000246  3               	lda (z80_hl),y		; get character.
000246  3               	sta z80_a
000246  3               	inc z80_l		; next character.
000246  3               	bne :+
000246  3               	inc z80_h
000246  3               :
000246  3               	lda z80_a
000246  3               	cmp #128		; end of message?
000246  3               	bmi :+
000246  3               	jmp dbox7		; yes, job done.
000246  3               :
000246  3               	lda z80_b		; chars remaining.
000246  3               	beq :+			; are any left?
000246  3               	jmp dbox0		; yes, continue.
000246  3               :
000246  3               ;---------------------------------------------------
000246  3               ; Reached limit of characters per line.
000246  3               ;---------------------------------------------------
000246  3               
000246  3               dbox9:
000246  3               	ldy #0
000246  3               	lda (z80_hl),y		; get character.
000246  3               	inc z80_l		; next one.
000246  3               	bne :+
000246  3               	inc z80_h
000246  3               :
000246  3               	cmp #','		; another line?
000246  3               	beq dbox10		; yes, do next line.
000246  3               	cmp #13			; another line?
000246  3               	beq dbox10		; yes, do next line.
000246  3               	cmp #128		; end of message?
000246  3               	bcs :+
000246  3               	jmp dbox11		; yes, finish message.
000246  3               :
000246  3               	jmp dbox9
000246  3               
000246  3               ;---------------------------------------------------
000246  3               ; Fill box to end of line.
000246  3               ;---------------------------------------------------
000246  3               
000246  3               dboxf:
000246  3               	lda #32			; space character.
000246  3               	jsr pchr		; display character.
000246  3               	dec z80_b
000246  3               	beq :+
000246  3               	jmp dboxf		; repeat for remaining chars on line.
000246  3               :
000246  3               	rts
000246  3               dbox1:
000246  3               	inc z80_l		; skip character.
000246  3               	bne :+
000246  3               	inc z80_h
000246  3               :
000246  3               	jsr dboxf		; fill box out to right side.
000246  3               dbox10:
000246  3               	inc dispy		; y coordinate down a line next position.
000246  3               	jmp dbox2		; next line.
000246  3               dbox7:
000246  3               	lda z80_b		; chars remaining.
000246  3               	bne :+			; are any left?
000246  3               	jmp dbox11		; no, nothing to draw.
000246  3               :
000246  3               	jsr dboxf		; fill message to line.
000246  3               
000246  3               ;------------------------------------------------------
000246  3               ; Drawn the box menu, now select option.
000246  3               ;------------------------------------------------------
000246  3               
000246  3               dbox11:
000246  3               	lda btop		; box top.
000246  3               	sta dispy		; set bar position.
000246  3               dbox14:
000246  3               	jsr joykey		; get controls.
000246  3               	cmp #$7f		; anything pressed?
000246  3               	bne dbox14		; yes, debounce it.
000246  3               	jsr dbar		; draw bar.
000246  3               dbox12:
000246  3               	jsr joykey		; get controls.
000246  3               	cmp #$7f		; anything pressed?
000246  3               	beq dbox12		; no, nothing.
000246  3               	and #16			; fire button pressed?
000246  3               	bne :+
000246  3               mod1:
000246  3               	jmp fstd		; yes, job done.
000246  3               :
000246  3               	jsr dbar		; delete bar.
000246  3               
000246  3               	lda joyval		; joystick reading.
000246  3               	and #8			; going up?
000246  3               	beq dboxu		; yes, go up.
000246  3               
000246  3               	ldx dispy		; vertical position of bar.
000246  3               	inx			; look down.
000246  3               	txa
000246  3               	sec
000246  3               	sbc btop		; find distance from top.
000246  3               	cmp blen		; top of box.
000246  3               	bne :+
000246  3               	jmp dbox14		; yes, go no further.
000246  3               :
000246  3               	inc dispy		; move bar.
000246  3               	jmp dbox14		; continue.
000246  3               dboxu:
000246  3               	lda dispy		; vertical position of bar.
000246  3               	cmp btop		; are we at the top?
000246  3               	bne :+
000246  3               	jmp dbox14		; yes, go no further.
000246  3               :
000246  3               	dec dispy		; move bar.
000246  3               	jmp dbox14		; continue.
000246  3               fstd:
000246  3               	lda dispy		; bar position.
000246  3               	sec
000246  3               	sbc btop		; find selected option.
000246  3               	sta varopt		; store the option.
000246  3               	jmp redraw		; redraw the screen.
000246  3               
000246  3               ;------------------------------------------------------
000246  3               ; Option not available.  Skip this line.
000246  3               ;------------------------------------------------------
000246  3               
000246  3               dbox13:
000246  3               	ldy #0
000246  3               	lda (z80_hl),y		; get character.
000246  3               	inc z80_l		; next one.
000246  3               	bne :+
000246  3               	inc z80_h
000246  3               :
000246  3               	cmp #','		; another line?
000246  3               	bne :+
000246  3               	jmp dbox2		; yes, do next line.
000246  3               :
000246  3               	cmp #13			; another line?
000246  3               	bne :+
000246  3               	jmp dbox2		; yes, do next line.
000246  3               :
000246  3               
000246  3               	bpl :+			; end of message?
000246  3               	jmp dbox11		; yes, finish message.
000246  3               :
000246  3               	jmp dbox13
000246  3               dbox15:
000246  3               	lda TmpAddr		; pop message pointer from the stack.
000246  3               	sta z80_h
000246  3               	lda TmpAddr+1
000246  3               	sta z80_l
000246  3               	rts
000246  3               
000246  3               ;------------------------------------------------------
000246  3               ; Invert bar
000246  3               ;------------------------------------------------------
000246  3               
000246  3               dbar:
000246  3               	lda blft		; box left.
000246  3               	sta dispx		; set display coordinate.
000246  3               	jsr gprad		; get printing address.
000246  3               
000246  3               	lda bwid		; box width.
000246  3               	sta z80_c		; loop counter in c.
000246  3               	lda z80_h
000246  3               	sta z80_d		; store screen address high byte.
000246  3               dbar1:
000246  3               	ldx #7			; pixel height in b.
000246  3               dbar0:
000246  3               	ldy scrtab,x
000246  3               	lda (scraddr),y		; get screen byte.
000246  3               	eor #255		; reverse all bits.
000246  3               	sta (scraddr),y		; write back to screen.
000246  3               	dex			; next line down.
000246  3               	bpl dbar0		; draw rest of character.
000246  3               
000246  3               	inc scraddr		; one char right.
000246  3               	dec z80_c		; decrement character counter.
000246  3               	bne dbar1		; repeat for whole line.
000246  3               	rts
000246  3               
000246  3               ;------------------------------------------------------
000246  3               ; Point to object
000246  3               ;
000246  3               ; Input:
000246  3               ;  combyt
000246  3               ;
000246  3               ; Output:
000246  3               ;  A = object number, A=255 if already in possession
000246  3               ;------------------------------------------------------
000246  3               
000246  3               invdis:
000246  3               	lda z80_l		; store message text pointer.
000246  3               	pha
000246  3               	lda z80_h
000246  3               	pha
000246  3               	lda combyt		; object number.
000246  3               	inc combyt		; ready for next one.
000246  3               	jsr gotob		; check if we have object.
000246  3               	tay
000246  3               	pla
000246  3               	sta z80_h
000246  3               	pla
000246  3               	sta z80_l
000246  3               	tya
000246  3               	rts
000246  3               
000246  3               ;------------------------------------------------------
000246  3               ; Find option selected.
000246  3               ;
000246  3               ; Input:
000246  3               ;  -
000246  3               ;
000246  3               ; Output:
000246  3               ;  OPT = selected object
000246  3               ;------------------------------------------------------
000246  3               
000246  3               fopt:
000246  3               	lda dispy
000246  3               	sec
000246  3               	sbc btop		; find selected option.
000246  3               	sta tmp+2		; option selected in b register.
000246  3               	inc tmp+2
000246  3               
000246  3               	lda #0			; set to first item.
000246  3               	sta combyt		; object number.
000246  3               fopt0:
000246  3               	jsr fobj		; find next object in inventory.
000246  3               	dec tmp+2
000246  3               	bne fopt0		; repeat for relevant steps down the list.
000246  3               
000246  3               	lda combyt		; get option.
000246  3               	sta varopt		; store the option.
000246  3               	dec varopt		; one less, due to where we increment combyt.
000246  3               	jmp redraw		; redraw the screen.
000246  3               fobj:
000246  3               	ldy combyt		; object number.
000246  3               	inc combyt		; ready for next item.
000246  3               	tya
000246  3               	jsr gotob		; do we have this item?
000246  3               	cmp #255
000246  3               	bne :+
000246  3               	rts
000246  3               :
000246  3               	jmp fobj		; yes, it's on the list.
000246  3               
000246  3               ;bwid:	.byte 0              ; box/menu width.
000246  3               ;blen:	.byte 0              ; box/menu height.
000246  3               ;btop:	.byte 0              ; box coordinates.
000246  3               ;blft:	.byte 0
000246  3               .endif
000246  3               
000246  3               ;----------------------------------------------------
000246  3               ; Wait for keypress.
000246  3               ;----------------------------------------------------
000246  3               
000246  3               prskey:
000246  3  98           	tya
000247  3  48           	pha
000248  3               prsloop:
000248  3  20 A9 02     	jsr vsync
00024B  3  20 71 FE     	jsr READKEY
00024E  3  C0 FF        	cpy #255
000250  3  F0 F6        	beq prsloop		; wait until key pressed
000252  3  68           	pla
000253  3  A8           	tay
000254  3  60           	rts
000255  3               
000255  3               ;----------------------------------------------------
000255  3               ; Delay routine 1/50 sec
000255  3               ;
000255  3               ; Wait 1/60 sec = 16666 usec
000255  3               ; Wait 208 x 16 =  3328 usec
000255  3               ;                 19994 usec
000255  3               ; rts           =     6 usec
000255  3               ; Total         = 20000 usec
000255  3               ;----------------------------------------------------
000255  3               
000255  3               delay:
000255  3  85 rr        	sta xtmp
000257  3               del_loop:
000257  3  20 66 FE     	jsr SCRSYNC		; wait for flyback
00025A  3               
00025A  3  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
00025C  3               delay1:
00025C  3  61 80        	adc ($80,x)		;	 6 usec
00025E  3  61 80        	adc ($80,x)		;	 6 usec
000260  3  88           	dey			;	 2 usec
000261  3  D0 F9        	bne delay1		;	 2 usec
000263  3  EA           	nop			; 2 usec
000264  3  EA           	nop			; 2 usec
000265  3               				; tot: 20000 usec
000265  3  C6 rr        	dec xtmp
000267  3  D0 EE        	bne del_loop
000269  3  60           	rts
00026A  3               
00026A  3               ;----------------------------------------------------
00026A  3               ; Clear sprite table.
00026A  3               ;
00026A  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
00026A  3               ;----------------------------------------------------
00026A  3               
00026A  3               xspr:
00026A  3  A9 FF        	lda #255		; clear byte.
00026C  3  A2 00        	ldx #0			; length of table.
00026E  3               xspr0:
00026E  3  9D A6 15     	sta sprtab,x		; sprite table.
000271  3  E8           	inx			; move to next byte.
000272  3  E0 CC        	cpx #SPRBUF
000274  3  D0 F8        	bne xspr0		; repeat for rest of table.
000276  3  60           	rts
000277  3               
000277  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
000277  3               ; Sound, NOT IMPLEMENTED!!!
000277  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
000277  3               ;
000277  3               ;silenc:
000277  3               ;	jsr silen1 		; silence channel 1.
000277  3               ;	jsr silen2 		; silence channel 2.
000277  3               ;	jsr silen3 		; silence channel 3.
000277  3               ;	jmp plsnd 		; play all channels to switch them off.
000277  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
000277  3               
000277  3               ;-------------------------------------------------------------
000277  3               ; Initialise all objects.
000277  3               ;
000277  3               ; Reset current room,y,x to start room,y,x for all objects
000277  3               ;-------------------------------------------------------------
000277  3               
000277  3               .if oflag
000277  3               iniob:
000277  3  A9 87        	lda #<objdta 		; objects table.
000279  3  85 68        	sta z80_x
00027B  3  A9 54        	lda #>objdta
00027D  3  85 69        	sta z80_i
00027F  3               
00027F  3  AE 41 02     	ldx numob 		; number of objects in the game.
000282  3               iniob0:
000282  3  A0 23        	ldy #35
000284  3  B1 68        	lda (z80_ix),y 		; start screen.
000286  3  A0 20        	ldy #32
000288  3  91 68        	sta (z80_ix),y 		; set start screen.
00028A  3               
00028A  3  A0 24        	ldy #36
00028C  3  B1 68        	lda (z80_ix),y 		; find start y.
00028E  3  A0 21        	ldy #33
000290  3  91 68        	sta (z80_ix),y 		; set start y.
000292  3               
000292  3  A0 25        	ldy #37
000294  3  B1 68        	lda (z80_ix),y 		; get initial x.
000296  3  A0 22        	ldy #34
000298  3  91 68        	sta (z80_ix),y 		; set x coord.
00029A  3               
00029A  3  18           	clc 			; point to next object.
00029B  3  A5 68        	lda z80_x
00029D  3  69 26        	adc #38			; distance between objects.
00029F  3  85 68        	sta z80_x
0002A1  3  90 02        	bcc :+
0002A3  3  E6 69        	inc z80_i
0002A5  3               :
0002A5  3  CA           	dex 			; repeat.
0002A6  3  D0 DA        	bne iniob0
0002A8  3               
0002A8  3  60           	rts
0002A9  3               .endif
0002A9  3               
0002A9  3               ;-------------------------------------------------------------
0002A9  3               ; Screen synchronisation.
0002A9  3               ;
0002A9  3               ;  - read joystick/keyboard
0002A9  3               ;  - handle sound
0002A9  3               ;  - sync framerate with clock
0002A9  3               ;  - handle shrapnel every even frame
0002A9  3               ;-------------------------------------------------------------
0002A9  3               
0002A9  3               vsync:
0002A9  3  48           	pha
0002AA  3  98           	tya
0002AB  3  48           	pha
0002AC  3  8A           	txa
0002AD  3  48           	pha
0002AE  3  20 99 0C     	jsr joykey		; read joystick/keyboard.
0002B1  3               vsync1:
0002B1  3  AD 09 B8     	lda Timer2_High		; sync framerate with clock
0002B4  3  C9 FF        	cmp #$ff
0002B6  3  D0 F9        	bne vsync1
0002B8  3  A9 C3        	lda #>50000
0002BA  3  8D 09 B8     	sta Timer2_High
0002BD  3  A9 50        	lda #<50000
0002BF  3  8D 08 B8     	sta Timer2_Low
0002C2  3               
0002C2  3  A5 rr        	lda clock
0002C4  3  29 01        	and #1
0002C6  3  D0 03        	bne:+
0002C8  3  20 47 03     	jsr proshr		; handle shrapnel every even frame
0002CB  3               :
0002CB  3  AD E9 02     	lda sndtyp
0002CE  3  F0 13        	beq sndskip
0002D0  3               sndloop:
0002D0  3  AD 02 B0     	lda SpeakerBit		; handle sound
0002D3  3  AC E9 02     	ldy sndtyp
0002D6  3               sndwait:
0002D6  3  88           	dey
0002D7  3  D0 FD        	bne sndwait
0002D9  3  49 04        	eor #4
0002DB  3  8D 02 B0     	sta SpeakerBit
0002DE  3  CE E9 02     	dec sndtyp
0002E1  3  D0 ED        	bne sndloop
0002E3  3               sndskip:
0002E3  3  68           	pla
0002E4  3  AA           	tax
0002E5  3  68           	pla
0002E6  3  A8           	tay
0002E7  3  68           	pla
0002E8  3  60           	rts
0002E9  3               
0002E9  3  00           sndtyp:	.byte 0
0002EA  3               
0002EA  3               ;-----------------------------------------------
0002EA  3               ; Redraw the screen.
0002EA  3               ;
0002EA  3               ; Remove old copy of all sprites for redraw.
0002EA  3               ;-----------------------------------------------
0002EA  3               
0002EA  3               redraw:
0002EA  3               .if gflag
0002EA  3               	lda #$ff
0002EA  3               	sta andeor
0002EA  3               	lda #$00
0002EA  3               	sta andeor+1
0002EA  3               .endif
0002EA  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
0002EC  3  48           	pha
0002ED  3  A5 68        	lda z80_x
0002EF  3  48           	pha
0002F0  3               
0002F0  3  20 0B 0A     	jsr droom		; show screen layout.
0002F3  3               .if oflag
0002F3  3  20 45 05     	jsr shwob		; draw objects.
0002F6  3               .endif
0002F6  3               numsp0:
0002F6  3  A9 0C        	lda #NUMSPR		; sprites to draw.
0002F8  3  85 rr        	sta tmp
0002FA  3               
0002FA  3  A9 A6        	lda #<sprtab		; sprite table.
0002FC  3  85 68        	sta z80_x
0002FE  3  A9 15        	lda #>sprtab
000300  3  85 69        	sta z80_i
000302  3               redrw0:
000302  3  A0 00        	ldy #0
000304  3  B1 68        	lda (z80_ix),y		; old sprite type.
000306  3  C9 FF        	cmp #255		; is it enabled?
000308  3  F0 0B        	beq redrw1 		; no, find next one.
00030A  3               
00030A  3  A0 03        	ldy #3
00030C  3  B1 68        	lda (z80_ix),y 		; sprite y.
00030E  3  C9 B1        	cmp #177		; beyond maximum?
000310  3  B0 03        	bcs redrw1		; yes, nothing to draw.
000312  3               
000312  3  20 BC 10     	jsr sspria		; show single sprite.
000315  3               redrw1:
000315  3  18           	clc			; next sprite.
000316  3  A5 68        	lda z80_x
000318  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
00031A  3  85 68        	sta z80_x
00031C  3  90 02        	bcc :+
00031E  3  E6 69        	inc z80_i
000320  3               :
000320  3  C6 rr        	dec tmp			; repeat for remaining sprites.
000322  3  D0 DE        	bne redrw0
000324  3               rpblc1:
000324  3               ;	jsr dshrp		; redraw shrapnel.
000324  3               
000324  3               .if aflag
000324  3               	jsr rbloc		; draw blocks for this screen
000324  3               .endif
000324  3  68           	pla			; retrieve sprite pointer.
000325  3  85 68        	sta z80_x
000327  3  68           	pla
000328  3  85 69        	sta z80_i
00032A  3               
00032A  3  60           	rts
00032B  3               
00032B  3               ;----------------------------------------------------------------------
00032B  3               ; Clear screen routine.
00032B  3               ;
00032B  3               ; Fill screenmem $8000-$97ff with ScrFillByte
00032B  3               ;----------------------------------------------------------------------
00032B  3               
00032B  3               cls:
00032B  3  A9 80        	lda #>ScreenAddr		; screen address.
00032D  3  8D 37 03     	sta clsloop+2
000330  3  AD A9 16     	lda andeor+1
000333  3               .if iflag
000333  3               	eor #$ff
000333  3               .endif
000333  3  A0 00        	ldy #0
000335  3               clsloop:
000335  3  99 00 80     	sta ScreenAddr,y
000338  3  C8           	iny
000339  3  D0 FA        	bne clsloop
00033B  3  EE 37 03     	inc clsloop+2
00033E  3  AE 37 03     	ldx clsloop+2
000341  3  E0 98        	cpx #>(ScreenAddr+$1800)
000343  3  D0 F0        	bne clsloop
000345  3  60           	rts
000346  3               
000346  3               ;----------------------------------------------------------------------
000346  3               ; Atomic palette is static
000346  3               ;----------------------------------------------------------------------
000346  3               
000346  3               setpal:
000346  3  60           	rts
000347  3               
000347  3               ;----------------------------------------------------------------------
000347  3               ; FODDER check
000347  3               ;----------------------------------------------------------------------
000347  3               
000347  3               .if pflag .or dflag
000347  3               fdchk:
000347  3               	cmp #FODDER 		; is it fodder?
000347  3               	beq :+
000347  3               	rts 			; no.
000347  3               :
000347  3               	lda #0			; wipe fodder in MAP
000347  3               	ldy #0
000347  3               	sta (bufaddr),y 	; rewrite block type.
000347  3               
000347  3               	lda dispx		; x=x/8
000347  3               	pha
000347  3               	lsr a
000347  3               	lsr a
000347  3               	lsr a
000347  3               	sta dispx
000347  3               
000347  3               	lda dispy		; y=y/8
000347  3               	pha
000347  3               	lsr a
000347  3               	lsr a
000347  3               	lsr a
000347  3               	sta dispy
000347  3               
000347  3               	lda #0 			; block to write.
000347  3               	jsr pattr 		; write block.
000347  3               
000347  3               	pla
000347  3               	sta dispy
000347  3               	pla
000347  3               	sta dispx
000347  3               	rts
000347  3               .endif
000347  3               
000347  3               ;----------------------------------------------------
000347  3               ; Scrolly text and puzzle variables.
000347  3               ;----------------------------------------------------
000347  3               
000347  3               .if sflag
000347  3               txtbit:	.byte 128		; bit to write.
000347  3               txtwid:	.byte 16		; width of ticker message.
000347  3               txtpos:	.word msgdat
000347  3               txtini:	.word msgdat
000347  3               txtscr:	.word ScreenAddr
000347  3               .endif
000347  3               
000347  3               ;----------------------------------------------------
000347  3               ; Specialist routines.
000347  3               ; Process shrapnel.
000347  3               ;----------------------------------------------------
000347  3               proshr:
000347  3               .if pflag
000347  3               	lda #<SHRAPN		; table.
000347  3               	sta z80_x
000347  3               	lda #>SHRAPN
000347  3               	sta z80_i
000347  3               
000347  3               	lda #NUMSHR		; shrapnel pieces to process.
000347  3               	sta shrctr
000347  3               prosh0:
000347  3               	ldy #0
000347  3               	lda (z80_ix),y		; on/off marker.
000347  3               	asl a
000347  3               proshx:
000347  3               	bcs :+
000347  3               	jsr prosh1 		; on, so process it.
000347  3               :
000347  3               	clc
000347  3               	lda z80_x
000347  3               	adc #SHRSIZ
000347  3               	sta z80_x
000347  3               	bcc :+
000347  3               	inc z80_i
000347  3               :
000347  3               	dec shrctr		; round again.
000347  3               	bne prosh0
000347  3               .endif
000347  3               .if sflag
000347  3               	jsr scrly
000347  3               .endif
000347  3  60           	rts
000348  3               
000348  3               .if pflag
000348  3               ;shrctr:	.byte 0
000348  3               
000348  3               ;----------------------------------------------------
000348  3               ; Proces shrapnel piece
000348  3               ;----------------------------------------------------
000348  3               
000348  3               prosh1:
000348  3               	jsr plot 		; delete the pixel.
000348  3               
000348  3               	lda #<shrptr		; shrapnel routine pointers.
000348  3               	sta z80_l
000348  3               	lda #>shrptr
000348  3               	sta z80_h
000348  3               
000348  3               	ldy #0
000348  3               	lda (z80_ix),y		; restore shrapnel type.
000348  3               	jsr prosh2 		; run the routine.
000348  3               	jsr chkxy		; check x and y are good before we redisplay.
000348  3               
000348  3               	lda #<SHRSIZ 		; distance to next.
000348  3               	sta z80_e
000348  3               	lda #>SHRSIZ
000348  3               	sta z80_d
000348  3               	rts
000348  3               
000348  3               ;----------------------------------------------------
000348  3               ; Run the routine
000348  3               ;----------------------------------------------------
000348  3               
000348  3               prosh2:
000348  3               	asl a 			; 2 bytes per address.
000348  3               	tay
000348  3               	lda shrptr,y
000348  3               	sta z80_l
000348  3               	lda shrptr+1,y 		; fetch high byte from table.
000348  3               	sta z80_h
000348  3               	jmp (z80_hl) 		; jump to routine.
000348  3               
000348  3               ;----------------------------------------------------
000348  3               ; Paricle routine table
000348  3               ;----------------------------------------------------
000348  3               
000348  3               shrptr:	.word laser		; laser.
000348  3               	.word trail		; vapour trail.
000348  3               	.word shrap		; shrapnel from explosion.
000348  3               	.word dotl		; horizontal starfield left.
000348  3               	.word dotr		; horizontal starfield right.
000348  3               	.word dotu		; vertical starfield up.
000348  3               	.word dotd		; vertical starfield down.
000348  3               	.word ptcusr		; user particle.
000348  3               
000348  3               ;----------------------------------------------------
000348  3               ; Explosion shrapnel.
000348  3               ;----------------------------------------------------
000348  3               
000348  3               shrap:
000348  3               	ldy #1
000348  3               	lda (z80_ix),y 		; get the angle.
000348  3               	clc
000348  3               	adc #<shrsin		; shrapnel sine table.
000348  3               	sta z80_l
000348  3               	lda #>shrsin
000348  3               	adc #0
000348  3               	sta z80_h
000348  3               
000348  3               	ldy #0
000348  3               	lda (z80_hl),y 		; fetch value from table.
000348  3               	sta z80_e
000348  3               	inc z80_l 		; next byte of table.
000348  3               	bne :+
000348  3               	inc z80_h
000348  3               :
000348  3               	ldy #0
000348  3               	lda (z80_hl),y		; fetch value from table.
000348  3               	sta z80_d
000348  3               	inc z80_l		; next byte of table.
000348  3               	bne :+
000348  3               	inc z80_h
000348  3               :
000348  3               	ldy #0
000348  3               	lda (z80_hl),y 		; fetch value from table.
000348  3               	sta z80_c
000348  3               	inc z80_l 		; next byte of table.
000348  3               	bne :+
000348  3               	inc z80_h
000348  3               :
000348  3               	ldy #0
000348  3               	lda (z80_hl),y 		; fetch value from table.
000348  3               	sta z80_b
000348  3               
000348  3               	ldy #2
000348  3               	lda (z80_ix),y 		; x coordinate in hl.
000348  3               	clc
000348  3               	adc z80_e		; add sine lb
000348  3               	sta (z80_ix),y		; store new coordinate lb.
000348  3               	ldy #3
000348  3               	lda (z80_ix),y
000348  3               	adc z80_d		; add sine hb
000348  3               	sta (z80_ix),y		; store new coordinate hb.
000348  3               
000348  3               	ldy #4
000348  3               	lda (z80_ix),y	 	; y coordinate in hl.
000348  3               	clc
000348  3               	adc z80_c		; add cosine lb
000348  3               	sta (z80_ix),y		; store new coordinate lb.
000348  3               	ldy #5
000348  3               	lda (z80_ix),y
000348  3               	adc z80_b		; add cosine lb
000348  3               	sta (z80_ix),y		; store new coordinate hb.
000348  3               
000348  3               	rts
000348  3               
000348  3               ;----------------------------------------------------
000348  3               ; Move dots
000348  3               ;----------------------------------------------------
000348  3               
000348  3               dotl:
000348  3               	ldy #5
000348  3               	lda (z80_ix),y
000348  3               	sec
000348  3               	sbc #1		 	; move left.
000348  3               	sta (z80_ix),y
000348  3               	rts
000348  3               dotr:
000348  3               	ldy #5
000348  3               	lda (z80_ix),y
000348  3               	clc
000348  3               	adc #1		 	; move left.
000348  3               	sta (z80_ix),y
000348  3               	rts
000348  3               dotu:
000348  3               	ldy #3
000348  3               	lda (z80_ix),y
000348  3               	sec
000348  3               	sbc #1		 	; move up.
000348  3               	sta (z80_ix),y
000348  3               	rts
000348  3               dotd:
000348  3               	ldy #3
000348  3               	lda (z80_ix),y
000348  3               	clc
000348  3               	adc #1			; move down.
000348  3               	sta (z80_ix),y
000348  3               	rts
000348  3               
000348  3               ;----------------------------------------------------
000348  3               ; Check if coordinates are ok before redrawing at new position.
000348  3               ;
000348  3               ; left:   X>L		X=L	Ok
000348  3               ; right:  R+15>X	X=R	Ok
000348  3               ; top:    Y>T		Y=T	Ok
000348  3               ; bottom: B+15>Y	Y=B	Ok
000348  3               ;----------------------------------------------------
000348  3               
000348  3               chkxy:
000348  3               
000348  3               ; top:    Y>T		Y=T	Ok
000348  3               
000348  3               	ldy #3
000348  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000348  3               	cmp wntopx		; window top.
000348  3               	bcs :+			; compare with top window limit.
000348  3               	jmp kilshr		; out of window, kill shrapnel.
000348  3               :
000348  3               ; left:   X>L		X=L	Ok
000348  3               
000348  3               	ldy #5
000348  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000348  3               	cmp wnlftx		; left edge.
000348  3               	bcs :+			; compare with left window limit.
000348  3               	jmp kilshr		; out of window, kill shrapnel.
000348  3               :
000348  3               ; bottom: B+15>Y	Y=B	Ok
000348  3               
000348  3               	lda wnbotx		; point to bottom.
000348  3               	clc
000348  3               	adc #15
000348  3               	ldy #3
000348  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
000348  3               	bcs :+			; compare with shrapnel x coordinate.
000348  3               	jmp kilshr		; off screen, kill shrapnel..
000348  3               :
000348  3               ; right:  R+15>X	X=R	Ok
000348  3               
000348  3               	lda wnrgtx		; point to right edge.
000348  3               	clc
000348  3               	adc #15
000348  3               	ldy #5
000348  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
000348  3               	bcs :+			; compare with window limit.
000348  3               	jmp kilshr		; off screen, kill shrapnel.
000348  3               :
000348  3               
000348  3               ;----------------------------------------------------
000348  3               ; Drop through.
000348  3               ; Display shrapnel.
000348  3               ;----------------------------------------------------
000348  3               
000348  3               plot:
000348  3               	ldy #3
000348  3               	lda (z80_ix),y		; y integer.
000348  3               	sta dispy	 	; workspace coordinates.
000348  3               	ldy #5
000348  3               	lda (z80_ix),y	 	; x integer.
000348  3               	sta dispx 		; workspace coordinates.
000348  3               
000348  3               	ldy #0
000348  3               	lda (z80_ix),y 		; type.
000348  3               	bne :+			; is it a laser?
000348  3               	jmp plot1 		; yes, draw laser instead.
000348  3               :
000348  3               plot0:
000348  3               	lda dispx		; which pixel within byte do we
000348  3               	and #7			; want to set first?
000348  3               	tay
000348  3               	lda dots,y 		; table of small pixel positions.
000348  3               	sta z80_e 		; get value.
000348  3               
000348  3               	jsr scadd 		; screen address.
000348  3               	ldy #0
000348  3               	lda (scraddr),y		; see what's already there.
000348  3               	eor z80_e
000348  3               	sta (scraddr),y 	; put back on screen.
000348  3               	rts
000348  3               
000348  3               plot1:
000348  3               	jsr scadd 		; screen address.
000348  3               	ldy #0
000348  3               	lda (scraddr),y 	; fetch byte there.
000348  3               	eor #255 		; toggle all bits.
000348  3               	sta (scraddr),y 	; new byte.
000348  3               	rts
000348  3               
000348  3               ;----------------------------------------------------
000348  3               ; Switch off shrapnel
000348  3               ;----------------------------------------------------
000348  3               
000348  3               kilshr:
000348  3               	lda #128
000348  3               	ldy #0
000348  3               	sta (z80_ix),y	; switch off shrapnel.
000348  3               	rts
000348  3               
000348  3               ;----------------------------------------------------
000348  3               ; Sine/cosine table
000348  3               ;----------------------------------------------------
000348  3               
000348  3               shrsin:	.word 0,1024,391,946,724,724,946,391
000348  3               	.word 1024,0,946,65144,724,64811,391,64589
000348  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
000348  3               	.word 64512,0,64589,391,64811,724,65144,946
000348  3               
000348  3               ;----------------------------------------------------
000348  3               ; Create trail
000348  3               ;----------------------------------------------------
000348  3               
000348  3               trail:
000348  3               	ldy #1
000348  3               	lda (z80_ix),y 	; time remaining.
000348  3               	sec
000348  3               	sbc #1
000348  3               	sta (z80_ix),y
000348  3               	bne :+
000348  3               	jmp trailk		; time to switch it off.
000348  3               :
000348  3               	jsr qrand		; get a random number.
000348  3               	lsr a 			; x or y axis?
000348  3               	bcc :+
000348  3               	jmp trailv		; use y.
000348  3               :
000348  3               ; Trail horizontal
000348  3               
000348  3               	lsr a 			; which direction?
000348  3               	bcc :+
000348  3               	jmp traill		; go left.
000348  3               :
000348  3               ; Trail right
000348  3               
000348  3               	ldy #5
000348  3               	lda (z80_ix),y
000348  3               	clc
000348  3               	adc #1	 		; go right.
000348  3               	sta (z80_ix),y
000348  3               	rts
000348  3               
000348  3               ; Trail left
000348  3               
000348  3               traill:
000348  3               	ldy #5
000348  3               	lda (z80_ix),y
000348  3               	sec
000348  3               	sbc #1 			; go left.
000348  3               	sta (z80_ix),y
000348  3               	rts
000348  3               
000348  3               ; Trail vertical
000348  3               
000348  3               trailv:
000348  3               	lsr a		 	; which direction?
000348  3               	bcc :+
000348  3               	jmp trailu		; go up.
000348  3               :
000348  3               ; Trail down
000348  3               
000348  3               	ldy #3
000348  3               	lda (z80_ix),y
000348  3               	clc
000348  3               	adc #1 			; go down.
000348  3               	sta (z80_ix),y
000348  3               	rts
000348  3               
000348  3               ; Trail up
000348  3               
000348  3               trailu:
000348  3               	ldy #3
000348  3               	lda (z80_ix),y
000348  3               	sec
000348  3               	sbc #1 			; go up.
000348  3               	sta (z80_ix),y
000348  3               	rts
000348  3               
000348  3               ; Kill trail
000348  3               
000348  3               trailk:
000348  3               	lda #200		; set off-screen to kill vapour trail.
000348  3               	ldy #3
000348  3               	sta (z80_ix),y
000348  3               	rts
000348  3               
000348  3               ;----------------------------------------------------
000348  3               ; Create laser beam
000348  3               ;----------------------------------------------------
000348  3               
000348  3               laser:
000348  3               	ldy #1
000348  3               	lda (z80_ix),y 		; direction.
000348  3               	ror a 			; left or right?
000348  3               	bcs :+
000348  3               	jmp laserl		; move left.
000348  3               :
000348  3               ; Laser right
000348  3               
000348  3               	lda #8			; distance to travel.
000348  3               	sta z80_b
000348  3               	jmp laserm		; move laser.
000348  3               
000348  3               ; Laser left
000348  3               
000348  3               laserl:
000348  3               	lda #248		; distance to travel.
000348  3               	sta z80_b
000348  3               laserm:
000348  3               	ldy #5
000348  3               	lda (z80_ix),y		; x position.
000348  3               	clc
000348  3               	adc z80_b		; add distance.
000348  3               	sta (z80_ix),y		; set new x coordinate.
000348  3               
000348  3               ; Test new block.
000348  3               
000348  3               	sta dispx 		; set x for block collision detection purposes.
000348  3               	ldy #3
000348  3               	lda (z80_ix),y 		; get y.
000348  3               	sta dispy		; set coordinate for collision test.
000348  3               	jsr tstbl 		; get block type there.
000348  3               	cmp #WALL		; is it solid?
000348  3               	bne :+
000348  3               	jmp trailk		; yes, it cannot pass.
000348  3               :
000348  3               .if pflag .or dflag
000348  3                       cmp #FODDER             ; is it fodder?
000348  3                       bne :+
000348  3                       jsr fdchk               ; remove fodder block.
000348  3                       jmp trailk              ; destroy laser.
000348  3               :
000348  3               .endif
000348  3                       rts                     ; no, ignore it.
000348  3               
000348  3               ;----------------------------------------------------
000348  3               ; Dots mask
000348  3               ;----------------------------------------------------
000348  3               
000348  3               dots:	.byte 128,64,32,16,8,4,2,1
000348  3               
000348  3               
000348  3               ;----------------------------------------------------
000348  3               ; Plot, preserving de.
000348  3               ;----------------------------------------------------
000348  3               
000348  3               plotde:
000348  3               	lda z80_d 		; put de on stack.
000348  3               	pha
000348  3               	lda z80_e
000348  3               	pha
000348  3               
000348  3               	jsr plot 		; plot pixel.
000348  3               
000348  3               	pla			; restore de from stack.
000348  3               	sta z80_e
000348  3               	pla
000348  3               	sta z80_d
000348  3               
000348  3               	rts
000348  3               
000348  3               ;----------------------------------------------------
000348  3               ; Shoot a laser.
000348  3               ;----------------------------------------------------
000348  3               
000348  3               shoot:
000348  3               	sta z80_c		; store direction in c register.
000348  3               	ldy #8
000348  3               	lda (z80_ix),y 		; y coordinate.
000348  3               	clc
000348  3               shoot1:
000348  3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
000348  3               	sta z80_l 		; puty y coordinate in l.
000348  3               
000348  3               	ldy #9
000348  3               	lda (z80_ix),y 		; x coordinate in h.
000348  3               	sta z80_h
000348  3               
000348  3               	lda z80_i		; store pointer to sprite.
000348  3               	pha
000348  3               	lda z80_x
000348  3               	pha
000348  3               
000348  3               	jsr fpslot 		; find particle slot.
000348  3               	bcs :+
000348  3               	jmp vapou2		; failed, restore ix.
000348  3               :
000348  3               	lda #0
000348  3               	ldy #0
000348  3               	sta (z80_ix),y 		; set up a laser.
000348  3               
000348  3               	lda z80_c
000348  3               	ldy #1
000348  3               	sta (z80_ix),y 		; set the direction.
000348  3               
000348  3               	lda z80_l
000348  3               	ldy #3
000348  3               	sta (z80_ix),y		; set y coordinate.
000348  3               
000348  3               	ror z80_c		; check direction we want.
000348  3               	bcc :+
000348  3               	jmp shootr		; shoot right.
000348  3               :
000348  3               	lda z80_h		; X position.
000348  3               shoot0:
000348  3               	and #248		; align on character boundary.
000348  3               	ldy #5
000348  3               	sta (z80_ix),y		; set x coordinate.
000348  3               	jmp vapou0 		; draw first image.
000348  3               shootr:
000348  3               	lda z80_h		; x position.
000348  3               	clc
000348  3               	adc #15			; look right.
000348  3               	jmp shoot0		; align and continue.
000348  3               
000348  3               ;----------------------------------------------------
000348  3               ; Create a bit of vapour trail.
000348  3               ;----------------------------------------------------
000348  3               
000348  3               vapour:
000348  3               	lda z80_i		; store pointer to sprite.
000348  3               	pha
000348  3               	lda z80_x
000348  3               	pha
000348  3               
000348  3               	ldy #8
000348  3               	lda (z80_ix),y 		; y coordinate.
000348  3               	clc
000348  3               vapou3:
000348  3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
000348  3               	sta z80_l
000348  3               
000348  3               	ldy #9
000348  3               	lda (z80_ix),y 		; x coordinate.
000348  3               	adc #7
000348  3               	sta z80_h
000348  3               
000348  3               	jsr fpslot 		; find particle slot.
000348  3               	bcc :+
000348  3               	jmp vapou1		; no, we can use it.
000348  3               :
000348  3               vapou2:
000348  3               	pla
000348  3               	sta z80_x
000348  3               	pla
000348  3               	sta z80_i
000348  3               	rts
000348  3               vapou1:
000348  3               	lda z80_l
000348  3               	ldy #3
000348  3               	sta (z80_ix),y		; set up y.
000348  3               
000348  3               	lda z80_h
000348  3               	ldy #5
000348  3               	sta (z80_ix),y 		; set up x coordinate.
000348  3               
000348  3               	jsr qrand		; get quick random number.
000348  3               	and #15			; random time.
000348  3               	clc
000348  3               	adc #15			; minimum time on screen.
000348  3               	ldy #1
000348  3               	sta (z80_ix),y		; set time on screen.
000348  3               
000348  3               	lda #1
000348  3               	ldy #0
000348  3               	sta (z80_ix),y		; define particle as vapour trail.
000348  3               vapou0:
000348  3               	jsr chkxy		; plot first position.
000348  3               	jmp vapou2
000348  3               
000348  3               ;----------------------------------------------------
000348  3               ; Create a user particle.
000348  3               ;----------------------------------------------------
000348  3               
000348  3               ptusr:
000348  3               	sta z80_f		; store timer.
000348  3               
000348  3               	ldy #8
000348  3               	lda (z80_ix),y 		; y coordinate.
000348  3               	clc
000348  3               	adc #7			; mid-point of sprite.
000348  3               	sta z80_l
000348  3               
000348  3               	ldy #9
000348  3               	lda (z80_ix),y 		; x coordinate.
000348  3               	clc
000348  3               	adc #7			; mid-point of sprite.
000348  3               	sta z80_h
000348  3               
000348  3               	jsr fpslot 		; find particle slot.
000348  3               	bcs ptusr1
000348  3               	rts 			; out of slots, can't generate anything.
000348  3               ptusr1:
000348  3               	lda z80_l
000348  3               	ldy #3
000348  3               	sta (z80_ix),y 		; set up y.
000348  3               
000348  3               	lda z80_h
000348  3               	ldy #5
000348  3               	sta (z80_ix),y		; set up x coordinate.
000348  3               
000348  3               	lda z80_f 		; restore timer.
000348  3               	ldy #1
000348  3               	sta (z80_ix),y		; set time on screen.
000348  3               
000348  3               	lda #7
000348  3               	ldy #0
000348  3               	sta (z80_ix),y		; define particle as user particle.
000348  3               
000348  3               	jmp chkxy		; plot first position.
000348  3               
000348  3               ;----------------------------------------------------
000348  3               ; Create a vertical or horizontal star.
000348  3               ;----------------------------------------------------
000348  3               
000348  3               star:
000348  3               	lda z80_i		; store pointer to sprite.
000348  3               	pha
000348  3               	lda z80_x
000348  3               	pha
000348  3               
000348  3               	jsr fpslot 		; find particle slot.
000348  3               	bcs star7		; found one we can use.
000348  3               star0:
000348  3               	pla 			; restore sprite pointer.
000348  3               	sta z80_x
000348  3               	pla
000348  3               	sta z80_i
000348  3               	rts 			; out of slots, can't generate anything.
000348  3               star7:
000348  3               	lda z80_c		; direction.
000348  3               	and #3 			; is it left?
000348  3               	bne :+
000348  3               	jmp star1 		; yes, it's left.
000348  3               :
000348  3               	cmp #1 			; is it right?
000348  3               	bne :+
000348  3               	jmp star2 		; yes, it's right.
000348  3               :
000348  3               	cmp #2 			; is it up?
000348  3               	bne :+
000348  3               	jmp star3 		; yes, it's up.
000348  3               :
000348  3               	ldy wntopx 		; get edge of screen.
000348  3               	iny			; down one pixel.
000348  3               	tya
000348  3               star8:
000348  3               	ldy #3
000348  3               	sta (z80_ix),y 		; set y coord.
000348  3               	jsr qrand 		; get quick random number.
000348  3               star9:
000348  3               	ldy #5
000348  3               	sta (z80_ix),y		; set x position.
000348  3               
000348  3               	lda z80_c		; direction.
000348  3               	and #3			; zero to three.
000348  3               	clc
000348  3               	adc #3			; 3 to 6 for starfield.
000348  3               	ldy #0
000348  3               	sta (z80_ix),y		; define particle as star.
000348  3               	jsr chkxy		; plot first position.
000348  3               	jmp star0
000348  3               star1:
000348  3               	jsr qrand		; get quick random number.
000348  3               	ldy #3
000348  3               	sta (z80_ix),y 		; set y coord.
000348  3               
000348  3               	lda wnrgtx 		; get edge of screen.
000348  3               	clc
000348  3               	adc #15			; add width of sprite minus 1.
000348  3               	jmp star9
000348  3               star2:
000348  3               	jsr qrand 		; get quick random number.
000348  3               	ldy #3
000348  3               	sta (z80_ix),y		; set y coord.
000348  3               
000348  3               	lda wnlftx		; get edge of screen.
000348  3               	jmp star9
000348  3               star3:
000348  3               	lda wnbotx 		; get edge of screen.
000348  3               	clc
000348  3               	adc #15 		; height of sprite minus one pixel.
000348  3               	jmp star8
000348  3               
000348  3               ;----------------------------------------------------
000348  3               ; Find particle slot for lasers or vapour trail.
000348  3               ; can't use alternate accumulator.
000348  3               ;----------------------------------------------------
000348  3               
000348  3               fpslot:
000348  3               	lda #<SHRAPN 		; shrapnel table.
000348  3               	sta z80_x
000348  3               	lda #>SHRAPN
000348  3               	sta z80_i
000348  3               
000348  3               	lda #NUMSHR		; number of pieces in table.
000348  3               	sta z80_b
000348  3               fpslt0:
000348  3               	ldy #0
000348  3               	lda (z80_ix),y		; get type.
000348  3               	asl a  			; is this slot in use?
000348  3               	bcc :+
000348  3               	rts			; no, we can use it.
000348  3               :
000348  3               	clc			; point to more shrapnel.
000348  3               	lda z80_x
000348  3               	adc #SHRSIZ
000348  3               	sta z80_x
000348  3               	bcc :+
000348  3               	inc z80_i
000348  3               :
000348  3               	dec z80_b		; repeat for all shrapnel.
000348  3               	bne fpslt0
000348  3               
000348  3               	clc
000348  3               	rts 			; out of slots, can't generate anything.
000348  3               
000348  3               ;----------------------------------------------------
000348  3               ; Create an explosion at sprite position.
000348  3               ;----------------------------------------------------
000348  3               
000348  3               explod:
000348  3               	sta z80_c 		; particles to create.
000348  3               
000348  3               	lda z80_i 		; store pointer to sprite.
000348  3               	pha
000348  3               	lda z80_x
000348  3               	pha
000348  3               
000348  3               	ldy #8
000348  3               	lda (z80_ix),y 		; y coordinate.
000348  3               	sta z80_l
000348  3               	ldy #9
000348  3               	lda (z80_ix),y		; x coordinate.
000348  3               	sta z80_h
000348  3               
000348  3               	lda #<SHRAPN		; shrapnel table.
000348  3               	sta z80_x
000348  3               	lda #>SHRAPN
000348  3               	sta z80_i
000348  3               
000348  3               	lda #NUMSHR		; number of pieces in table.
000348  3               	sta explcnt
000348  3               expld0:
000348  3               	ldy #0
000348  3               	lda (z80_ix),y		; get type.
000348  3               	asl a 			; is this slot in use?
000348  3               	bcs expld1		; no, we can use it.
000348  3               expld2:
000348  3               	clc
000348  3               	lda z80_x
000348  3               	adc #SHRSIZ
000348  3               	sta z80_x
000348  3               	bcc :+
000348  3               	inc z80_i
000348  3               :
000348  3               	dec explcnt		; repeat for all shrapnel.
000348  3               	bne expld0
000348  3               expld3:
000348  3               	pla			; restore sprite pointer.
000348  3               	sta z80_x
000348  3               	pla
000348  3               	sta z80_i
000348  3               	rts 			; out of slots, can't generate any more.
000348  3               
000348  3               expld1:
000348  3               	lda z80_c		; shrapnel counter.
000348  3               	and #15			; 0 to 15.
000348  3               	clc			; add to x.
000348  3               	adc z80_l
000348  3               	ldy #3
000348  3               	sta (z80_ix),y		; y coord.
000348  3               
000348  3               	lda seed3 		; crap random number.
000348  3               	and #15			; 0 to 15.
000348  3               	clc 			; add to y.
000348  3               	adc z80_h
000348  3               	ldy #5
000348  3               	sta (z80_ix),y		; x coord.
000348  3               
000348  3               	lda #2
000348  3               	ldy #0
000348  3               	sta (z80_ix),y		; switch it on.
000348  3               
000348  3               	jsr chkxy		; plot first position.
000348  3               	jsr qrand		; quick random angle.
000348  3               	and #60 		; keep within range.
000348  3               	ldy #1
000348  3               	sta (z80_ix),y		; angle.
000348  3               
000348  3               	dec z80_c		; one less piece of shrapnel to generate.
000348  3               	bne expld2 		; back to main explosion loop.
000348  3               	jmp expld3 		; restore sprite pointer and exit.
000348  3               
000348  3               ;explcnt:	.byte 0
000348  3               
000348  3               ;----------------------------------------------------
000348  3               ; Quick random
000348  3               ;----------------------------------------------------
000348  3               
000348  3               qrand:
000348  3               	jsr random		; r register.
000348  3               	eor seed3		; combine with seed.
000348  3               	sta seed3 		; new seed.
000348  3               	rts
000348  3               
000348  3               ;seed3:	.byte 0
000348  3               
000348  3               ;----------------------------------------------------
000348  3               ; Display all shrapnel.
000348  3               ;----------------------------------------------------
000348  3               
000348  3               dshrp:
000348  3               	lda #<plotde		; display routine.
000348  3               	sta proshx+1
000348  3               	lda #>plotde
000348  3               	sta proshx+2
000348  3               	jsr proshr		; process shrapnel.
000348  3               
000348  3               	lda #<prosh1		; processing routine.
000348  3               	sta proshx+1
000348  3               	lda #>prosh1
000348  3               	sta proshx+2
000348  3               	rts
000348  3               
000348  3               ;------------------------------------------------------
000348  3               ; Particle engine.
000348  3               ;
000348  3               ; Init particle data for 55 particles in SHRAPN table.
000348  3               ; Every particle has 6 bytes.
000348  3               ;
000348  3               ; global:	-
000348  3               ; local:	x,y,hl
000348  3               ; calls:	-
000348  3               ;------------------------------------------------------
000348  3               
000348  3               inishr:
000348  3               	lda #<SHRAPN 		; table.
000348  3               	sta z80_l
000348  3               	lda #>SHRAPN
000348  3               	sta z80_h
000348  3               
000348  3               	ldy #0
000348  3               	ldx #NUMSHR		; shrapnel pieces to process.
000348  3               inish0:
000348  3               	lda #255 		; kill the shrapnel.
000348  3               	sta (z80_hl),y
000348  3               
000348  3               	clc 			; point there.
000348  3               	lda z80_l
000348  3               	adc #SHRSIZ		; distance to next.
000348  3               	sta z80_l
000348  3               	bcc :+
000348  3               	inc z80_h
000348  3               :
000348  3               	dex
000348  3               	bne inish0 		; round again.
000348  3               	rts
000348  3               
000348  3               ;------------------------------------------------------
000348  3               ; Check for collision between laser and sprite.
000348  3               ;------------------------------------------------------
000348  3               
000348  3               lcol:
000348  3               	lda #<SHRAPN		; shrapnel table.
000348  3               	sta z80_l
000348  3               	lda #>SHRAPN
000348  3               	sta z80_h
000348  3               
000348  3               	lda #NUMSHR		; number of pieces in table.
000348  3               	sta z80_b
000348  3               lcol0:
000348  3               	ldy #0
000348  3               	lda (z80_hl),y 		; get type.
000348  3               	beq lcol1		; yes, check collision.
000348  3               lcol3:
000348  3               	clc			; point to more shrapnel.
000348  3               	lda z80_l
000348  3               	adc #SHRSIZ
000348  3               	sta z80_l
000348  3               	bcc :+
000348  3               	inc z80_h
000348  3               :
000348  3               	dec z80_b		; repeat for all shrapnel.
000348  3               	bne lcol0
000348  3               	rts 			; no collision, carry not set.
000348  3               lcol1:
000348  3               	ldy #3
000348  3               	lda (z80_hl),y		; get y.
000348  3               	sec
000348  3               	ldy #8
000348  3               	sbc (z80_ix),y		; subtract sprite y.
000348  3               lcolh:
000348  3               	cmp #SPR_HGT 		; within range?
000348  3               	bcc :+
000348  3               	jmp lcol2		; no, missed.
000348  3               :
000348  3               	ldy #5
000348  3               	lda (z80_hl),y 		; get x.
000348  3               	sec
000348  3               	ldy #9
000348  3               	sbc (z80_ix),y 		; subtract sprite y.
000348  3               	cmp #16			; within range?
000348  3               	bcs :+
000348  3               	jmp lcol4 		; yes, collision occurred.
000348  3               :
000348  3               lcol2:
000348  3               	jmp lcol3
000348  3               lcol4:
000348  3               	sec
000348  3               	rts 			; return with carry set for collision.
000348  3               .endif
000348  3               
000348  3               ;------------------------------------------------------
000348  3               ; Main game engine code starts here.
000348  3               ; After initialisation, mloop is the main loop
000348  3               ;------------------------------------------------------
000348  3               
000348  3               game:
000348  3               
000348  3               ; Set up screen address table.
000348  3               
000348  3               setsat:
000348  3  A9 00        	lda #<ScreenAddr		; start of screen.
00034A  3  85 rr        	sta scraddr
00034C  3  A9 80        	lda #>ScreenAddr
00034E  3  85 rr        	sta scraddr+1
000350  3               
000350  3  A0 00        	ldy #0			; vertical lines on screen.
000352  3               setsa0:
000352  3  A5 rr        	lda scraddr
000354  3  99 00 9B     	sta SCADTB_lb,y		; write low byte.
000357  3  A5 rr        	lda scraddr+1
000359  3  C0 C0        	cpy #192		; vertical lines on screen.
00035B  3  90 02        	bcc :+
00035D  3  09 F0        	ora #$F0		; plot sprites in rom if of screen
00035F  3               :
00035F  3  99 00 9C     	sta SCADTB_hb,y		; write high byte.
000362  3  20 1C 11     	jsr nline		; next line down.
000365  3  C8           	iny			; next position in table.
000366  3  D0 EA        	bne setsa0
000368  3               
000368  3               ; Init graphics mode
000368  3               
000368  3  A9 F0        	lda #ScrMode		; graphics mode
00036A  3  8D 00 B0     	sta ScrSelAddr 		; screen selection address
00036D  3  20 46 03     	jsr setpal 		; set up palette.
000370  3               
000370  3               ; Init AtoMMC joystick
000370  3  20 D3 0C     	jsr joyinit		; AtoMMC joystick on PORT B
000373  3               
000373  3               rpblc2:
000373  3               .if pflag
000373  3               	jsr inishr 		; initialise particle engine.
000373  3               .endif
000373  3               evintr:
000373  3  20 74 2C     	jsr evnt12 		; call intro/menu event.
000376  3               
000376  3  A9 02        	lda #WALL 		; write default property.
000378  3  A2 00        	ldx #0
00037A  3               clrmap:
00037A  3  9D 00 98     	sta MAP,x 		; block properties.
00037D  3  9D 00 99     	sta MAP+256,x
000380  3  9D 00 9A     	sta MAP+512,x
000383  3  E8           	inx			; next byte.
000384  3  D0 F4        	bne clrmap
000386  3               .if oflag
000386  3  20 77 02     	jsr iniob 		; initialise objects.
000389  3               .endif
000389  3  A9 00        	lda #0			; put zero in accumulator.
00038B  3  85 rr        	sta gamwon		; reset game won flag.
00038D  3               
00038D  3  20 F5 04     	jsr inisc 		; init the score.
000390  3               mapst:
000390  3  AD F6 16     	lda stmap 		; start position on map.
000393  3  8D 83 16     	sta roomtb		; set up position in table, if there is one.
000396  3               
000396  3               inipbl:
000396  3               .if aflag
000396  3               	lda #<eop		; reset blockpointer
000396  3               	sta pbptr
000396  3               	lda #>eop
000396  3               	sta pbptr+1
000396  3               .endif
000396  3  20 6B 12     	jsr initsc 		; set up first screen.
000399  3               
000399  3  A9 72        	lda #<ssprit 		; default to spare sprite in table.
00039B  3  85 68        	sta z80_x
00039D  3  A9 16        	lda #>ssprit
00039F  3  85 69        	sta z80_i
0003A1  3               evini:
0003A1  3  20 75 2C     	jsr evnt13 		; initialisation.
0003A4  3               
0003A4  3               ; Two restarts.
0003A4  3               ; First restart - clear all sprites and initialise everything.
0003A4  3               
0003A4  3               rstrt:
0003A4  3  20 95 04     	jsr rsevt 		; restart events.
0003A7  3  20 6A 02     	jsr xspr 		; clear sprite table.
0003AA  3  20 D7 13     	jsr sprlst 		; fetch pointer to screen sprites.
0003AD  3  20 60 14     	jsr ispr 		; initialise sprite table.
0003B0  3               
0003B0  3  4C BF 03     	jmp rstrt0
0003B3  3               
0003B3  3               ; Second restart - clear all but player, and don't initialise him.
0003B3  3               
0003B3  3               rstrtn:
0003B3  3  20 95 04     	jsr rsevt		; restart events.
0003B6  3  20 04 14     	jsr nspr 		; clear all non-player sprites.
0003B9  3  20 D7 13     	jsr sprlst 		; fetch pointer to screen sprites.
0003BC  3  20 9D 14     	jsr kspr 		; initialise sprite table, no more players.
0003BF  3               
0003BF  3               ; Set up the player and/or enemy sprites.
0003BF  3               
0003BF  3               rstrt0:
0003BF  3  A9 00        	lda #0 			; zero in accumulator.
0003C1  3  85 rr        	sta nexlev 		; reset next level flag.
0003C3  3  85 rr        	sta restfl 		; reset restart flag.
0003C5  3  85 rr        	sta deadf 		; reset dead flag.
0003C7  3  20 0B 0A     	jsr droom 		; show screen layout.
0003CA  3               rpblc0:
0003CA  3               .if pflag
0003CA  3               	jsr inishr 		; initialise particle engine.
0003CA  3               .endif
0003CA  3               .if aflag
0003CA  3               	jsr rbloc		; draw blocks for this screen
0003CA  3               .endif
0003CA  3               .if oflag
0003CA  3  20 45 05     	jsr shwob		; draw objects.
0003CD  3               .endif
0003CD  3               
0003CD  3  A9 A6        	lda #<sprtab 		; address of sprite table, even sprites.
0003CF  3  85 68        	sta z80_x
0003D1  3  A9 15        	lda #>sprtab
0003D3  3  85 69        	sta z80_i
0003D5  3  20 96 0F     	jsr dspr 		; display sprites.
0003D8  3               
0003D8  3  A9 B7        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
0003DA  3  85 68        	sta z80_x
0003DC  3  A9 15        	lda #>(sprtab+TABSIZ)
0003DE  3  85 69        	sta z80_i
0003E0  3  20 96 0F     	jsr dspr 		; display sprites.
0003E3  3               mloop:
0003E3  3  20 A9 02     	jsr vsync 		; synchronise with display.
0003E6  3  A9 A6        	lda #<sprtab 		; address of sprite table, even sprites.
0003E8  3  85 68        	sta z80_x
0003EA  3  A9 15        	lda #>sprtab
0003EC  3  85 69        	sta z80_i
0003EE  3  20 96 0F     	jsr dspr 		; display even sprites.
0003F1  3               
0003F1  3  20 44 05     	jsr plsnd 		; play sounds.
0003F4  3               
0003F4  3  20 47 03     	jsr proshr
0003F7  3  A9 B7        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
0003F9  3  85 68        	sta z80_x
0003FB  3  A9 15        	lda #>(sprtab+TABSIZ)
0003FD  3  85 69        	sta z80_i
0003FF  3  20 96 0F     	jsr dspr 		; display odd sprites.
000402  3               
000402  3  A9 72        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
000404  3  85 68        	sta z80_x
000406  3  A9 16        	lda #>(ssprit)
000408  3  85 69        	sta z80_i
00040A  3               evlp1:
00040A  3  20 B3 28     	jsr evnt10 		; called once per main loop.
00040D  3  20 14 0F     	jsr pspr 		; process sprites.
000410  3               
000410  3               ; Main loop events.
000410  3               
000410  3  A9 72        	lda #<ssprit 		; point to spare sprite for spawning purposes.
000412  3  85 68        	sta z80_x
000414  3  A9 16        	lda #>ssprit
000416  3  85 69        	sta z80_i
000418  3               evlp2:
000418  3  20 07 2A     	jsr evnt11 		; called once per main loop.
00041B  3               bsortx:
00041B  3  20 8A 0E     	jsr bsort 		; sort sprites.
00041E  3               
00041E  3  A5 rr        	lda nexlev		; finished level flag.
000420  3  D0 1F        	bne newlev		; is set, go to next level.
000422  3  A5 rr        	lda gamwon		; finished game flag.
000424  3  D0 2A        	bne evwon		; is set, finish the game.
000426  3  A5 rr        	lda restfl 		; finished level flag.
000428  3  C9 01        	cmp #1			; has it been set?
00042A  3  D0 03        	bne :+
00042C  3  4C A4 03     	jmp rstrt		; yes, go to next level.
00042F  3               :
00042F  3  C9 02        	cmp #2			; has it been set?
000431  3  D0 03        	bne :+
000433  3  4C B3 03     	jmp rstrtn		; yes, go to next level.
000436  3               :
000436  3  A5 rr        	lda deadf 		; dead flag.
000438  3  D0 1C        	bne pdead		; yes, player dead.
00043A  3               
00043A  3               ; back to start of main loop.
00043A  3               
00043A  3  E6 rr        	inc frmno
00043C  3  E6 rr        	inc clock
00043E  3  4C E3 03     	jmp mloop		; switched to a jmp mloop during test mode.
000441  3               
000441  3               ;----------------------------------------------------------
000441  3               ; Read blocks from list and update screen accordingly.
000441  3               ;----------------------------------------------------------
000441  3               
000441  3               .if aflag
000441  3               rbloc:
000441  3               	lda #<eop		; reset temp blockpointer
000441  3               	sta tmp
000441  3               	lda #>eop
000441  3               	sta tmp+1
000441  3               
000441  3               rbloc2:
000441  3               	lda tmp			; check for last block
000441  3               	cmp pbptr
000441  3               	bne rbloc1
000441  3               	lda tmp+1
000441  3               	cmp pbptr+1
000441  3               	bne rbloc1
000441  3               	rts
000441  3               rbloc1:
000441  3               	ldy #0
000441  3               	lda (tmp),y		; check if block for this scno
000441  3               	cmp scno
000441  3               	bne rbloc0		; if not, skip
000441  3               	iny
000441  3               	lda (tmp),y		; get y
000441  3               	sta dispy
000441  3               	iny
000441  3               	lda (tmp),y		; get x
000441  3               	sta dispx
000441  3               	iny
000441  3               	lda (tmp),y		; get blocknr
000441  3               	jsr pattr2		; draw block
000441  3               rbloc0:
000441  3               	clc			; point to next block
000441  3               	lda tmp
000441  3               	adc #4
000441  3               	sta tmp
000441  3               	bcc rbloc2
000441  3               	inc tmp+1
000441  3               	jmp rbloc2
000441  3               .endif
000441  3               
000441  3               ;----------------------------------------------------------
000441  3               ; New level
000441  3               ;----------------------------------------------------------
000441  3               
000441  3               newlev:
000441  3  A5 rr        	lda scno 			; current screen.
000443  3  18           	clc
000444  3  69 01        	adc #1				; next screen.
000446  3  CD 87 53     	cmp numsc			; total number of screens.
000449  3  B0 05        	bcs evwon			; yes, game finished.
00044B  3  85 rr        	sta scno			; set new level number.
00044D  3  4C A4 03     	jmp rstrt			; restart, clearing all aliens.
000450  3               
000450  3               evwon:
000450  3  20 28 2D     	jsr evnt18		 	; game completed.
000453  3  4C 6A 04     	jmp tidyup			; tidy up and return to BASIC/calling routine.
000456  3               
000456  3               ;----------------------------------------------------------
000456  3               ; Player dead.
000456  3               ;----------------------------------------------------------
000456  3               
000456  3               pdead:
000456  3  A9 00        	lda #0				; zeroise accumulator.
000458  3  85 rr        	sta deadf			; reset dead flag.
00045A  3               evdie:
00045A  3  20 26 2D     	jsr evnt16 			; death subroutine.
00045D  3  A5 rr        	lda numlif			; number of lives.
00045F  3  F0 03        	beq :+
000461  3  4C A4 03     	jmp rstrt 			; restart game.
000464  3               :
000464  3               evfail:
000464  3  20 27 2D     	jsr evnt17 			; failure event.
000467  3  4C 48 03     	jmp game			; restart game
00046A  3               
00046A  3               ;----------------------------------------------------------
00046A  3               ; Tidy things up
00046A  3               ;----------------------------------------------------------
00046A  3               
00046A  3               tidyup:
00046A  3  A0 00        	ldy #0				; digits to check.
00046C  3               tidyu2:
00046C  3  B9 05 07     	lda score,y 			; get score digit.
00046F  3  CD 0B 07     	cmp hiscor 			; are we larger than high score digit?
000472  3  90 07        	bcc tidyu0			; high score is bigger.
000474  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
000476  3  C8           	iny				; next digit of high score.
000477  3  C0 06        	cpy #6
000479  3  D0 F1        	bne tidyu2			; repeat for all digits
00047B  3               tidyu0:
00047B  3  A9 05        	lda #<score			; return pointing to score.
00047D  3  85 62        	sta z80_c
00047F  3  A9 07        	lda #>score
000481  3  85 63        	sta z80_b
000483  3  60           	rts
000484  3               tidyu1:
000484  3  A0 05        	ldy #5
000486  3               tidyu3:
000486  3  B9 05 07     	lda score,y			; score.
000489  3  99 0B 07     	sta hiscor,y			; high score.
00048C  3  88           	dey
00048D  3  10 F7        	bpl tidyu3 			; copy score to high score.
00048F  3               evnewh:
00048F  3  20 2F 2D     	jsr evnt19			; new high score event.
000492  3  4C 7B 04     	jmp tidyu0			; tidy up.
000495  3               
000495  3               ;--------------------------------------------------
000495  3               ; Restart event.
000495  3               ;--------------------------------------------------
000495  3               
000495  3               rsevt:
000495  3  A9 72        	lda #<ssprit 			; default to spare element in table.
000497  3  85 68        	sta z80_x
000499  3  A9 16        	lda #>ssprit
00049B  3  85 69        	sta z80_i
00049D  3               evrs:
00049D  3  4C C5 2C     	jmp evnt14	 		; call restart event.
0004A0  3               
0004A0  3               ;------------------------------------------------------------------
0004A0  3               ; Copy number passed in a to string position bc, right-justified.
0004A0  3               ;
0004A0  3               ; Input:
0004A0  3               ;  A  = number
0004A0  3               ;  BC = string address
0004A0  3               ;
0004A0  3               ; Output:
0004A0  3               ;  BC = string with number
0004A0  3               ;-----------------------------------------------------------------
0004A0  3               
0004A0  3               num2ch:
0004A0  3  85 65        	sta z80_d		; Save number
0004A2  3               
0004A2  3  A9 00        	lda #0
0004A4  3  85 rr        	sta flag
0004A6  3               numdg3:
0004A6  3  A2 64        	ldx #100		; hundreds column.
0004A8  3  86 64        	stx z80_e
0004AA  3  20 BA 04     	jsr numdg		; show digit.
0004AD  3               numdg2:
0004AD  3  A2 0A        	ldx #10			; tens column.
0004AF  3  86 64        	stx z80_e
0004B1  3  20 BA 04     	jsr numdg		; show digit.
0004B4  3               
0004B4  3  E6 rr        	inc flag
0004B6  3  A2 01        	ldx #1			; units column.
0004B8  3  86 64        	stx z80_e
0004BA  3               numdg:
0004BA  3  A9 30        	lda #48			; clear digit.
0004BC  3  85 61        	sta z80_a
0004BE  3               numdg1:
0004BE  3  A5 65        	lda z80_d
0004C0  3  C5 64        	cmp z80_e
0004C2  3  90 0E        	bcc numdg0		; nothing to show.
0004C4  3  38           	sec
0004C5  3  A5 65        	lda z80_d
0004C7  3  E5 64        	sbc z80_e		; subtract from column.
0004C9  3  85 65        	sta z80_d
0004CB  3  E6 61        	inc z80_a		; increment digit.
0004CD  3  E6 rr        	inc flag
0004CF  3  4C BE 04     	jmp numdg1		; repeat until column is zero.
0004D2  3               numdg0:
0004D2  3  A0 00        	ldy #0
0004D4  3  A5 61        	lda z80_a
0004D6  3  91 62        	sta (z80_bc),y		; write digit to buffer.
0004D8  3  A5 rr        	lda flag
0004DA  3  F0 06        	beq :+
0004DC  3  E6 62        	inc z80_c		; next buffer position.
0004DE  3  D0 02        	bne :+
0004E0  3  E6 63        	inc z80_b
0004E2  3               :
0004E2  3  60           	rts
0004E3  3               num2dd:
0004E3  3  85 65        	sta z80_d		; Save number
0004E5  3               
0004E5  3  A9 01        	lda #1
0004E7  3  85 rr        	sta flag
0004E9  3               
0004E9  3  4C AD 04     	jmp numdg2
0004EC  3               num2td:
0004EC  3  85 65        	sta z80_d		; Save number
0004EE  3               
0004EE  3  A9 01        	lda #1
0004F0  3  85 rr        	sta flag
0004F2  3  4C A6 04     	jmp numdg3
0004F5  3               
0004F5  3               ;flag:	.byte 0
0004F5  3               
0004F5  3               ;---------------------------------------------------------
0004F5  3               ; Reset score to "000000"
0004F5  3               ;---------------------------------------------------------
0004F5  3               
0004F5  3               inisc:
0004F5  3  A9 30        	lda #'0'
0004F7  3  A2 05        	ldx #5			; digits to initialise.
0004F9  3               inisc0:
0004F9  3  9D 05 07     	sta score,x 		; write zero digit.
0004FC  3  CA           	dex			; next column.
0004FD  3  10 FA        	bpl inisc0		; repeat for all digits.
0004FF  3               
0004FF  3  60           	rts
000500  3               
000500  3               ;-----------------------------------------------------
000500  3               ; Multiply h by d and return in hl.
000500  3               ;
000500  3               ; Input:
000500  3               ;  H = first number
000500  3               ;  D = second number
000500  3               ;
000500  3               ; Output:
000500  3               ;  HL = result H x D
000500  3               ;-----------------------------------------------------
000500  3               
000500  3               imul:
000500  3  A5 65        	lda z80_d		; HL = H * D
000502  3  85 64        	sta z80_e
000504  3  A5 67        	lda z80_h
000506  3  85 62        	sta z80_c		; make c first multiplier.
000508  3               imul0:
000508  3  A9 00        	lda #0			; zeroise total.
00050A  3  85 66        	sta z80_l
00050C  3  85 67        	sta z80_h
00050E  3               
00050E  3  A5 67        	lda z80_h
000510  3  85 65        	sta z80_d		; zeroise high byte.
000512  3               
000512  3  A9 08        	lda #8			; repeat 8 times.
000514  3  85 63        	sta z80_b
000516  3               imul1:
000516  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
000518  3  90 0E        	bcc imul2		; wasn't set.
00051A  3  18           	clc			; bit was set, so add de.
00051B  3  A5 66        	lda z80_l
00051D  3  65 64        	adc z80_e
00051F  3  85 66        	sta z80_l
000521  3  A5 67        	lda z80_h
000523  3  65 65        	adc z80_d
000525  3  85 67        	sta z80_h
000527  3  18           	clc 			; reset carry.
000528  3               imul2:
000528  3  06 64        	asl z80_e 		; shift de 1 bit left.
00052A  3  26 65        	rol z80_d
00052C  3  C6 63        	dec z80_b
00052E  3  D0 E6        	bne imul1		; repeat 8 times.
000530  3               
000530  3  60           	rts
000531  3               
000531  3               ;-----------------------------------------------
000531  3               ; Divide d by e and return in d, remainder in a.
000531  3               ;
000531  3               ; Input:
000531  3               ;  D = first number
000531  3               ;  E = second number
000531  3               ;
000531  3               ; Output:
000531  3               ;  D = result D/E
000531  3               ;  A = remainder
000531  3               ;-----------------------------------------------
000531  3               
000531  3               idiv:
000531  3  A9 00        	lda #0
000533  3  A0 08        	ldy #8		 	; bits to shift.
000535  3  06 65        	asl z80_d
000537  3               idiv0:
000537  3  2A           	rol a 			; multiply d by 2.
000538  3  C5 64        	cmp z80_e 		; test if e is smaller.
00053A  3  90 02        	bcc idiv1		; e is greater, no division this time.
00053C  3  E5 64        	sbc z80_e		; subtract it.
00053E  3               idiv1:
00053E  3  26 65        	rol z80_d		; rotate into d.
000540  3  88           	dey
000541  3  D0 F4        	bne idiv0		; repeat
000543  3  60           	rts
000544  3               
000544  3               ;---------------------------------------------------
000544  3               ; Play AY sound effect
000544  3               ;---------------------------------------------------
000544  3               
000544  3               plsnd:
000544  3  60           	rts
000545  3               
000545  3               ;---------------------------------------------------
000545  3               ; Objects handling.
000545  3               ; 32 bytes for image
000545  3               ; 3 for room, y and x
000545  3               ; 3 for starting room, y and x.
000545  3               ; 254 = disabled.
000545  3               ; 255 = object in player"s pockets.
000545  3               ;---------------------------------------------------
000545  3               
000545  3               ;---------------------------------------------------
000545  3               ; Show items present.
000545  3               ;---------------------------------------------------
000545  3               
000545  3               .if oflag
000545  3               shwob:
000545  3  A9 87        	lda #<objdta 			; objects table.
000547  3  85 66        	sta z80_l
000549  3  A9 54        	lda #>objdta
00054B  3  85 67        	sta z80_h
00054D  3               
00054D  3  AD 41 02     	lda numob 			; number of objects in the game.
000550  3  85 rr        	sta sprcnt
000552  3               shwob0:
000552  3  A0 20        	ldy #32 			; distance to room number.
000554  3  B1 66        	lda (z80_hl),y 			; same as an item?
000556  3  C5 rr        	cmp scno 			; current location.
000558  3  D0 03        	bne :+
00055A  3  20 6F 05     	jsr dobj 			; yes, display object.
00055D  3               :
00055D  3  18           	clc
00055E  3  A5 66        	lda z80_l
000560  3  69 26        	adc #38 			; distance to next item.
000562  3  85 66        	sta z80_l
000564  3  A5 67        	lda z80_h
000566  3  69 00        	adc #0
000568  3  85 67        	sta z80_h	 		; point to it.
00056A  3  C6 rr        	dec sprcnt
00056C  3  D0 E4        	bne shwob0 			; repeat for others.
00056E  3  60           	rts
00056F  3               
00056F  3               ;---------------------------------------------------
00056F  3               ; Display object.
00056F  3               ; hl must point to object's start address.
00056F  3               ;
00056F  3               ; Input:
00056F  3               ;  HL = object address
00056F  3               ;---------------------------------------------------
00056F  3               
00056F  3               dobj:
00056F  3  A0 21        	ldy #33
000571  3  B1 66        	lda (z80_hl),y 			; point to y.
000573  3  85 rr        	sta dispy
000575  3  C8           	iny
000576  3  B1 66        	lda (z80_hl),y 			; point to x.
000578  3  85 rr        	sta dispx
00057A  3               dobj1:
00057A  3  4C 53 09     	jmp sprite 			; draw this sprite.
00057D  3               
00057D  3               ;--------------------------------------
00057D  3               ; Remove an object.
00057D  3               ;
00057D  3               ; Input:
00057D  3               ;  A = object number
00057D  3               ;--------------------------------------
00057D  3               
00057D  3               remob:
00057D  3  CD 41 02     	cmp numob			; number of objects in game.
000580  3  90 01        	bcc :+				; are we checking past the end?
000582  3  60           	rts				; yes, can't get non-existent item.
000583  3               :
000583  3  48           	pha				; remember object.
000584  3  20 92 05     	jsr getob			; pick it up if we haven't already got it.
000587  3  68           	pla				; retrieve object number.
000588  3  20 C1 05     	jsr gotob			; get its address.
00058B  3  A9 FE        	lda #254
00058D  3  A0 20        	ldy #32
00058F  3  91 66        	sta (z80_hl),y			; remove it.
000591  3  60           	rts
000592  3               
000592  3               ;---------------------------------------------------
000592  3               ; Pick up object number held in the accumulator.
000592  3               ;
000592  3               ; Input:
000592  3               ;  A = object number
000592  3               ;---------------------------------------------------
000592  3               
000592  3               getob:
000592  3  CD 41 02     	cmp numob 		; number of objects in game.
000595  3  90 01        	bcc :+			; are we checking past the end?
000597  3  60           	rts			; yes, can't get non-existent item.
000598  3               :
000598  3  20 C1 05     	jsr gotob 		; check if we already have it.
00059B  3  C9 FF        	cmp #255
00059D  3  D0 01        	bne :+
00059F  3  60           	rts			; we already do.
0005A0  3               :
0005A0  3  A0 20        	ldy #32
0005A2  3  B1 66        	lda (z80_hl),y		; is it on this screen?
0005A4  3  C5 rr        	cmp scno 		; current screen.
0005A6  3  D0 14        	bne getob0		; not on screen, so nothing to delete.
0005A8  3               
0005A8  3  A9 FF        	lda #255
0005AA  3  91 66        	sta (z80_hl),y		; pick it up.
0005AC  3  C8           	iny 			; point to y coord.
0005AD  3               getob1:
0005AD  3  A0 21        	ldy #33
0005AF  3  B1 66        	lda (z80_hl),y		; y coord.
0005B1  3  85 rr        	sta dispy
0005B3  3  A0 22        	ldy #34
0005B5  3  B1 66        	lda (z80_hl),y 		; x coord.
0005B7  3  85 rr        	sta dispx
0005B9  3  4C 7A 05     	jmp dobj1 		; delete object sprite.
0005BC  3               getob0:
0005BC  3  A9 FF        	lda #255
0005BE  3  91 66        	sta (z80_hl),y 		; pick it up.
0005C0  3  60           	rts
0005C1  3               .endif
0005C1  3               
0005C1  3               ;-----------------------------------------------------------------
0005C1  3               ; Got object check.
0005C1  3               ; Call with object in accumulator, returns zero set if in pockets.
0005C1  3               ;
0005C1  3               ; Input:
0005C1  3               ;  A = object number
0005C1  3               ;-----------------------------------------------------------------
0005C1  3               .if oflag .or mflag
0005C1  3               gotob:
0005C1  3  CD 41 02     	cmp numob 		; number of objects in game.
0005C4  3  90 03        	bcc :+ 			; are we checking past the end?
0005C6  3  4C CD 05     	jmp gotob0 		; yes, we can't have a non-existent object.
0005C9  3               :
0005C9  3  20 D2 05     	jsr findob		; find the object.
0005CC  3               gotob1:
0005CC  3  60           	rts
0005CD  3               
0005CD  3               gotob0:
0005CD  3  A9 FE        	lda #254 		; missing.
0005CF  3  4C CC 05     	jmp gotob1
0005D2  3               
0005D2  3               findob:
0005D2  3  48           	pha			; save object number
0005D3  3  A9 87        	lda #<objdta 		; objects.
0005D5  3  85 66        	sta z80_l
0005D7  3  A9 54        	lda #>objdta
0005D9  3  85 67        	sta z80_h
0005DB  3  68           	pla			; retreive object number
0005DC  3  F0 0F        	beq fndob1 		; is it zero? yes, skip loop.
0005DE  3  AA           	tax 			; loop counter
0005DF  3               fndob2:
0005DF  3  18           	clc
0005E0  3  A5 66        	lda z80_l
0005E2  3  69 26        	adc #38 		; size of each object.
0005E4  3  85 66        	sta z80_l
0005E6  3  90 02        	bcc :+
0005E8  3  E6 67        	inc z80_h
0005EA  3               :
0005EA  3  CA           	dex 			; repeat until we find address.
0005EB  3  D0 F2        	bne fndob2
0005ED  3               fndob1:
0005ED  3  A0 20        	ldy #32			; distance to room it's in.
0005EF  3  B1 66        	lda (z80_hl),y		; fetch status.
0005F1  3  60           	rts
0005F2  3               .endif
0005F2  3               
0005F2  3               ;---------------------------------------------
0005F2  3               ; Drop object number at (dispx, dispy).
0005F2  3               ;
0005F2  3               ; Input:
0005F2  3               ;  A = object number
0005F2  3               ;---------------------------------------------
0005F2  3               
0005F2  3               .if oflag
0005F2  3               drpob:
0005F2  3  CD 41 02     	cmp numob 		; are we checking past the end?
0005F5  3  90 01        	bcc :+
0005F7  3  60           	rts			; yes, can't drop non-existent item.
0005F8  3               :
0005F8  3  20 C1 05     	jsr gotob		; make sure object is in inventory.
0005FB  3  C5 rr        	cmp scno		; already on this screen?
0005FD  3  D0 01        	bne :+
0005FF  3  60           	rts			; yes, nothing to do.
000600  3               :
000600  3  A0 20        	ldy #32
000602  3  A5 rr        	lda scno
000604  3  91 66        	sta (z80_hl),y		; bring onto screen.
000606  3  A5 rr        	lda dispy		; sprite y coordinate.
000608  3  C8           	iny
000609  3  91 66        	sta (z80_hl),y		; point to object y.
00060B  3  A5 rr        	lda dispx 		; sprite x coordinate.
00060D  3  C8           	iny
00060E  3  91 66        	sta (z80_hl),y 		; point to object x
000610  3  4C 6F 05     	jmp dobj		; draw the object sprite.
000613  3               
000613  3               ;-----------------------------------------------
000613  3               ; Seek objects at sprite position.
000613  3               ;
000613  3               ; Output:
000613  3               ;  A = object number, if not found A=255
000613  3               ;-----------------------------------------------
000613  3               
000613  3               skobj:
000613  3  A9 87        	lda #<objdta 		; pointer to objects.
000615  3  85 66        	sta z80_l
000617  3  A9 54        	lda #>objdta
000619  3  85 67        	sta z80_h
00061B  3               
00061B  3  AD 41 02     	lda numob 		; number of objects in game.
00061E  3  85 63        	sta z80_b 		; set up the loop counter.
000620  3               skobj0:
000620  3  A5 rr        	lda scno		; current room number.
000622  3  A0 20        	ldy #32
000624  3  D1 66        	cmp (z80_hl),y		; is object in here?
000626  3  D0 03        	bne :+
000628  3  20 3D 06     	jsr skobj1		; yes, check coordinates.
00062B  3               :
00062B  3  18           	clc			; point to next object in table.
00062C  3  A5 66        	lda z80_l
00062E  3  69 26        	adc #38			; size of each object.
000630  3  85 66        	sta z80_l
000632  3  90 02        	bcc :+
000634  3  E6 67        	inc z80_h
000636  3               :
000636  3  C6 63        	dec z80_b
000638  3  D0 E6        	bne skobj0		; repeat for all objects.
00063A  3               
00063A  3  A9 FF        	lda #255		; end of list and nothing found, return 255.
00063C  3  60           	rts
00063D  3               
00063D  3               skobj1:
00063D  3  A0 21        	ldy #33			; point to y coordinate.
00063F  3  B1 66        	lda (z80_hl),y		; point to y coordinate.
000641  3  38           	sec
000642  3  A0 08        	ldy #8
000644  3  F1 68        	sbc (z80_ix),y 		; subtract sprite y.
000646  3  18           	clc
000647  3  69 0F        	adc #15			; add sprite height minus one.
000649  3  C9 1F        	cmp #31			; within range?
00064B  3  90 03        	bcc :+
00064D  3  4C 6B 06     	jmp skobj2		; no, ignore object.
000650  3               :
000650  3  A0 22        	ldy #34			; point to x coordinate now.
000652  3  B1 66        	lda (z80_hl),y 		; get coordinate.
000654  3  38           	sec
000655  3  A0 09        	ldy #9
000657  3  F1 68        	sbc (z80_ix),y 		; subtract the sprite x.
000659  3  18           	clc			; add sprite width minus one.
00065A  3  69 0F        	adc #15
00065C  3  C9 1F        	cmp #31			; within range?
00065E  3  90 03        	bcc :+
000660  3  4C 6B 06     	jmp skobj2		; no, ignore object.
000663  3               :
000663  3  68           	pla			; remove return address from stack.
000664  3  68           	pla
000665  3               
000665  3  AD 41 02     	lda numob 		; objects in game.
000668  3  38           	sec
000669  3  E5 63        	sbc z80_b		; subtract loop counter.
00066B  3               skobj2:
00066B  3  60           	rts			; accumulator now points to object.
00066C  3               .endif
00066C  3               
00066C  3               ;---------------------------------------------------------------------
00066C  3               ; Spawn a new sprite.
00066C  3               ;---------------------------------------------------------------------
00066C  3               
00066C  3               spawn:
00066C  3  A9 A6        	lda #<sprtab		; sprite table.
00066E  3  85 66        	sta z80_l
000670  3  A9 15        	lda #>sprtab
000672  3  85 67        	sta z80_h
000674  3               numsp1:
000674  3  A9 0C        	lda #NUMSPR		; number of sprites.
000676  3  85 rr        	sta spcnt
000678  3               spaw0:
000678  3  A0 00        	ldy #0
00067A  3  B1 66        	lda (z80_hl),y		; get sprite type.
00067C  3  C9 FF        	cmp #255		; is it an unused slot?
00067E  3  F0 0F        	beq spaw1 		; yes, we can use this one.
000680  3               
000680  3  18           	clc 			; point to next sprite in table.
000681  3  A5 66        	lda z80_l
000683  3  69 11        	adc #TABSIZ		; size of each entry.
000685  3  85 66        	sta z80_l
000687  3  90 02        	bcc :+
000689  3  E6 67        	inc z80_h
00068B  3               :
00068B  3  C6 rr        	dec spcnt		; one less iteration.
00068D  3  D0 E9        	bne spaw0		; keep going until we find a slot.
00068F  3               
00068F  3               ; Didn't find one but drop through and set up a dummy sprite instead.
00068F  3               
00068F  3               spaw1:
00068F  3  A5 69        	lda z80_i		; address of original sprite.
000691  3  48           	pha
000692  3  A5 68        	lda z80_x
000694  3  48           	pha
000695  3               
000695  3  A5 66        	lda z80_l		; store spawned sprite address.
000697  3  85 rr        	sta spptr
000699  3  A5 67        	lda z80_h
00069B  3  85 rr        	sta spptr+1
00069D  3               
00069D  3  A5 62        	lda z80_c
00069F  3  A0 00        	ldy #0
0006A1  3  91 66        	sta (z80_hl),y 		; set the type.
0006A3  3  A0 05        	ldy #5
0006A5  3  91 66        	sta (z80_hl),y		; copy
0006A7  3               
0006A7  3  A5 63        	lda z80_b
0006A9  3  A0 01        	ldy #1
0006AB  3  91 66        	sta (z80_hl),y		; set the image.
0006AD  3  A0 06        	ldy #6
0006AF  3  91 66        	sta (z80_hl),y		; copy
0006B1  3               
0006B1  3  A9 00        	lda #0 			; frame zero.
0006B3  3  A0 02        	ldy #2
0006B5  3  91 66        	sta (z80_hl),y		; set frame.
0006B7  3  A0 07        	ldy #7
0006B9  3  91 66        	sta (z80_hl),y		; copy
0006BB  3               
0006BB  3  A0 08        	ldy #8
0006BD  3  B1 68        	lda (z80_ix),y 		; x coordinate.
0006BF  3  A0 03        	ldy #3
0006C1  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
0006C3  3  A0 08        	ldy #8
0006C5  3  91 66        	sta (z80_hl),y		; copy
0006C7  3               
0006C7  3  A0 09        	ldy #9
0006C9  3  B1 68        	lda (z80_ix),y 		; y coordinate.
0006CB  3  A0 04        	ldy #4
0006CD  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
0006CF  3  A0 09        	ldy #9
0006D1  3  91 66        	sta (z80_hl),y		; copy
0006D3  3               
0006D3  3  A0 0A        	ldy #10			; direction of original.
0006D5  3  B1 68        	lda (z80_ix),y
0006D7  3  91 66        	sta (z80_hl),y		; direction
0006D9  3               
0006D9  3  A9 00        	lda #0
0006DB  3  A0 0B        	ldy #11
0006DD  3  91 66        	sta (z80_hl),y		; reset parameter.
0006DF  3  C8           	iny
0006E0  3  91 66        	sta (z80_hl),y		; reset parameter.
0006E2  3  C8           	iny
0006E3  3  91 66        	sta (z80_hl),y		; reset parameter.
0006E5  3  C8           	iny
0006E6  3  91 66        	sta (z80_hl),y		; reset parameter.
0006E8  3               rtssp:
0006E8  3  A5 rr        	lda spptr		; address of new sprite.
0006EA  3  85 68        	sta z80_x
0006EC  3  A5 rr        	lda spptr+1
0006EE  3  85 69        	sta z80_i
0006F0  3               evis1:
0006F0  3  20 C5 26     	jsr evnt09 		; call sprite initialisation event.
0006F3  3               
0006F3  3  A5 rr        	lda spptr 		; address of new sprite.
0006F5  3  85 68        	sta z80_x
0006F7  3  A5 rr        	lda spptr+1
0006F9  3  85 69        	sta z80_i
0006FB  3  20 BC 10     	jsr sspria 		; display the new sprite.
0006FE  3               
0006FE  3  68           	pla			; address of original sprite.
0006FF  3  85 68        	sta z80_x
000701  3  68           	pla
000702  3  85 69        	sta z80_i
000704  3               
000704  3  60           	rts
000705  3               
000705  3               ;spcnt:	.byte 0
000705  3               ;spptr:	.word 0			; spawned sprite pointer.
000705  3               ;seed:	.byte 0			; seed for random numbers.
000705  3  30 30 30 30  score:	.byte "000000"		; player"s score.
000709  3  30 30        
00070B  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
00070F  3  30 30        
000711  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
000715  3  30 30        
000717  3  00 80        grbase:	.word ScreenAddr	; graphics base address.
000719  3               
000719  3               ;----------------------------------------------------
000719  3               ; Check y-pos
000719  3               ;----------------------------------------------------
000719  3               
000719  3               checkx:
000719  3  A5 rr        	lda dispy		; y position.
00071B  3  C9 18        	cmp #24			; off screen?
00071D  3  B0 01        	bcs :+
00071F  3  60           	rts			; no, it's okay.
000720  3               :
000720  3  68           	pla			; remove return address from stack.
000721  3  85 66        	sta z80_l
000723  3  68           	pla
000724  3  85 67        	sta z80_h
000726  3  60           	rts
000727  3               
000727  3               ;-----------------------------------------------
000727  3               ; Displays the current high score.
000727  3               ;-----------------------------------------------
000727  3               
000727  3               dhisc:
000727  3  A9 0B        	lda #<hiscor 		; high score text.
000729  3  8D 5E 07     	sta dscor3+1
00072C  3  8D 79 07     	sta bscor3+1
00072F  3  A9 07        	lda #>hiscor
000731  3  8D 5F 07     	sta dscor3+2
000734  3  8D 7A 07     	sta bscor3+2
000737  3  4C 4A 07     	jmp dscor1		; check in printable range then show 6 digits.
00073A  3               
00073A  3               ;------------------------------------------------------
00073A  3               ; Displays the current score.
00073A  3               ;------------------------------------------------------
00073A  3               
00073A  3               dscor:
00073A  3  A9 05        	lda #<score		; score text.
00073C  3  8D 5E 07     	sta dscor3+1
00073F  3  8D 79 07     	sta bscor3+1
000742  3  A9 07        	lda #>score
000744  3  8D 5F 07     	sta dscor3+2
000747  3  8D 7A 07     	sta bscor3+2
00074A  3               dscor1:
00074A  3  8C 75 07     	sty tmpscr
00074D  3  20 5E 0E     	jsr preprt		; set up font and print position.
000750  3  20 19 07     	jsr checkx		; make sure we're in a printable range.
000753  3               
000753  3               ;	lda #6			; digits to display.
000753  3               ;	sta z80_b
000753  3  A5 rr        	lda prtmod		; get print mode.
000755  3  F0 03        	beq :+			; standard size text?
000757  3  4C 76 07     	jmp bscor0		; no, show double-height.
00075A  3               :
00075A  3               dscor0:
00075A  3               ;	ldy #0
00075A  3               ;	lda (z80_hl),y 		; fetch character.
00075A  3  AC 75 07     	ldy tmpscr
00075D  3               dscor3:
00075D  3  B9 05 07     	lda score,y
000760  3  20 9A 08     	jsr pchar 		; display character.
000763  3  E6 rr        	inc dispx		; move along x coordinate
000765  3               
000765  3               ;	inc z80_l		; next score column.
000765  3               ;	bne :+
000765  3               ;	inc z80_h
000765  3               ;:
000765  3  EE 75 07     	inc tmpscr
000768  3  C6 63        	dec z80_b
00076A  3  D0 EE        	bne dscor0 		; repeat for all digits.
00076C  3               dscor2:
00076C  3  A5 rr        	lda dispx 		; set up display coordinates.
00076E  3  85 rr        	sta charx
000770  3  A5 rr        	lda dispy
000772  3  85 rr        	sta chary
000774  3  60           	rts
000775  3               
000775  3  00           tmpscr:	.byte 0
000776  3               ;------------------------------------------------------
000776  3               ; Displays the current score in double-height characters.
000776  3               ;
000776  3               ; Input:
000776  3               ;  B  = digit number
000776  3               ;  HL = score string
000776  3               ;------------------------------------------------------
000776  3               
000776  3               bscor0:
000776  3               ;	ldy #0
000776  3               
000776  3               ;	lda (z80_hl),y 		; fetch character.
000776  3  A4 rr        	ldy tmp
000778  3               bscor3:
000778  3  B9 05 07     	lda score,y
00077B  3  20 E3 0D     	jsr bchar 		; display big char.
00077E  3               
00077E  3               ;	inc z80_l 		; next score column.
00077E  3               ;	bne :+
00077E  3               ;	inc z80_h
00077E  3               ;:
00077E  3  E6 rr        	inc tmp
000780  3  C6 63        	dec z80_b
000782  3  F0 03        	beq :+
000784  3  4C 76 07     	jmp bscor0 		; repeat for all digits.
000787  3               :
000787  3  4C 6C 07     	jmp dscor2 		; tidy up line and column variables.
00078A  3               
00078A  3               ;-----------------------------------------------------
00078A  3               ; Adds number in the hl pair to the score.
00078A  3               ;-----------------------------------------------------
00078A  3               
00078A  3               addsc:
00078A  3  A9 06        	lda #<(score+1) 	; ten thousands column.
00078C  3  85 64        	sta z80_e
00078E  3  A9 07        	lda #>(score+1)
000790  3  85 65        	sta z80_d
000792  3  A9 10        	lda #<10000		; amount to add each time.
000794  3  85 62        	sta z80_c
000796  3  A9 27        	lda #>10000
000798  3  85 63        	sta z80_b
00079A  3  20 DE 07     	jsr incsc		; add to score.
00079D  3               
00079D  3  E6 64        	inc z80_e		; thousands column.
00079F  3  D0 02        	bne :+
0007A1  3  E6 65        	inc z80_d
0007A3  3               :
0007A3  3  A9 E8        	lda #<1000		; amount to add each time.
0007A5  3  85 62        	sta z80_c
0007A7  3  A9 03        	lda #>1000
0007A9  3  85 63        	sta z80_b
0007AB  3  20 DE 07     	jsr incsc 		; add to score.
0007AE  3               
0007AE  3  E6 64        	inc z80_e		; hundreds column.
0007B0  3  D0 02        	bne :+
0007B2  3  E6 65        	inc z80_d
0007B4  3               :
0007B4  3  A9 64        	lda #<100		; amount to add each time.
0007B6  3  85 62        	sta z80_c
0007B8  3  A9 00        	lda #>100
0007BA  3  85 63        	sta z80_b
0007BC  3  20 DE 07     	jsr incsc		; add to score.
0007BF  3               
0007BF  3  E6 64        	inc z80_e 		; tens column.
0007C1  3  D0 02        	bne :+
0007C3  3  E6 65        	inc z80_d
0007C5  3               :
0007C5  3  A9 0A        	lda #<10		; amount to add each time.
0007C7  3  85 62        	sta z80_c
0007C9  3  A9 00        	lda #>10
0007CB  3  85 63        	sta z80_b
0007CD  3  20 DE 07     	jsr incsc 		; add to score.
0007D0  3               
0007D0  3  E6 64        	inc z80_e		; units column.
0007D2  3  D0 02        	bne :+
0007D4  3  E6 65        	inc z80_d
0007D6  3               :
0007D6  3  A9 01        	lda #<1			; units.
0007D8  3  85 62        	sta z80_c
0007DA  3  A9 00        	lda #>1
0007DC  3  85 63        	sta z80_b
0007DE  3               incsc:
0007DE  3  A5 67        	lda z80_h		; store amount to add.
0007E0  3  48           	pha
0007E1  3  A5 66        	lda z80_l
0007E3  3  48           	pha
0007E4  3               
0007E4  3  38           	sec			; subtract from amount to add.
0007E5  3  A5 66        	lda z80_l
0007E7  3  E5 62        	sbc z80_c
0007E9  3  85 66        	sta z80_l
0007EB  3  A5 67        	lda z80_h
0007ED  3  E5 63        	sbc z80_b
0007EF  3  85 67        	sta z80_h
0007F1  3  90 14        	bcc incsc0		; too much, restore value.
0007F3  3               
0007F3  3  68           	pla			; delete the previous amount from the stack.
0007F4  3  68           	pla
0007F5  3               
0007F5  3  A5 65        	lda z80_d 		; store column position.
0007F7  3  48           	pha
0007F8  3  A5 64        	lda z80_e
0007FA  3  48           	pha
0007FB  3  20 0E 08     	jsr incsc2		; do the increment.
0007FE  3               
0007FE  3  68           	pla			; restore column.
0007FF  3  85 64        	sta z80_e
000801  3  68           	pla
000802  3  85 65        	sta z80_d
000804  3  4C DE 07     	jmp incsc		; repeat until all added.
000807  3               
000807  3               incsc0:
000807  3  68           	pla			; restore previous value.
000808  3  85 66        	sta z80_l
00080A  3  68           	pla
00080B  3  85 67        	sta z80_h
00080D  3  60           	rts
00080E  3               incsc2:
00080E  3  A0 00        	ldy #0
000810  3  B1 64        	lda (z80_de),y 		; get amount.
000812  3  18           	clc
000813  3  69 01        	adc #1			; add one to column.
000815  3  91 64        	sta (z80_de),y		; write new column total.
000817  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
000819  3  B0 01        	bcs :+
00081B  3  60           	rts			; no, carry on.
00081C  3               :
00081C  3  A9 30        	lda #'0'		; make it zero.
00081E  3  91 64        	sta (z80_de),y		; write new column total.
000820  3  C6 64        	dec z80_e		; back one column.
000822  3  D0 02        	bne :+
000824  3  C6 65        	dec z80_d
000826  3               :
000826  3  4C 0E 08     	jmp incsc2
000829  3               
000829  3               ;------------------------------------
000829  3               ; Add bonus to score and reset bonus
000829  3               ;------------------------------------
000829  3               
000829  3               addbo:
000829  3  A2 05        	ldx #5			; last digit.
00082B  3  18           	clc			; clear carry.
00082C  3               addbo0:
00082C  3  BD 05 07     	lda score,x		; get score.
00082F  3  7D 11 07     	adc bonus,x		; add bonus.
000832  3  38           	sec			; 0 to 18.
000833  3  E9 30        	sbc #48
000835  3  48           	pha
000836  3  A9 30        	lda #'0'
000838  3  9D 11 07     	sta bonus,x		; zeroise bonus.
00083B  3  68           	pla
00083C  3  C9 3A        	cmp #58			; carried?
00083E  3  B0 07        	bcs addbo2		; no, do next one.
000840  3  38           	sec
000841  3  E9 0A        	sbc #10			; subtract 10.
000843  3  38           	sec
000844  3  4C 48 08     	jmp addbo1
000847  3               addbo2:
000847  3  18           	clc
000848  3               addbo1:
000848  3  9D 05 07     	sta score,x		; write new score.
00084B  3  CA           	dex			; next digit.
00084C  3  10 DE        	bpl addbo0		; repeat for all 6 digits.
00084E  3  60           	rts
00084F  3               
00084F  3               ;------------------------------------
00084F  3               ; Swap score and bonus.
00084F  3               ;------------------------------------
00084F  3               
00084F  3               swpsb:
00084F  3  A2 05        	ldx #5			; digits to add.
000851  3               swpsb0:
000851  3  BD 05 07     	lda score,x 		; get score digits.
000854  3  48           	pha			; save digit
000855  3  BD 11 07     	lda bonus,x 		; get bonus digits.
000858  3  9D 05 07     	sta score,x		; switch score-bonus
00085B  3  68           	pla
00085C  3  9D 11 07     	sta bonus,x
00085F  3  CA           	dex 			; repeat for all 6 digits.
000860  3  10 EF        	bpl swpsb0
000862  3  60           	rts
000863  3               
000863  3               ;----------------------------------------------------
000863  3               ; Get print address.
000863  3               ;----------------------------------------------------
000863  3               
000863  3               gprad:
000863  3  A5 rr        	lda dispx		; get x
000865  3  85 rr        	sta scraddr		; store lb address
000867  3  A5 rr        	lda dispy		; get y
000869  3  09 80        	ora #$80		; add $80
00086B  3  85 rr        	sta scraddr+1		; store hb address
00086D  3  60           	rts
00086E  3               
00086E  3               ;--------------------------------------------------------------
00086E  3               ; Get property buffer address of char at (dispx, dispy) in hl.
00086E  3               ;
00086E  3               ; Output:
00086E  3               ;  bufaddr = MAP + dispy*32 + dispx
00086E  3               ;--------------------------------------------------------------
00086E  3               
00086E  3               pradd:
00086E  3  A5 rr        	lda dispy 		; y coordinate.
000870  3  85 rr        	sta bufaddr
000872  3  A9 00        	lda #0
000874  3  85 rr        	sta bufaddr+1
000876  3  06 rr        	asl bufaddr  		; multiply char by 32
000878  3  26 rr        	rol bufaddr+1
00087A  3  06 rr        	asl bufaddr
00087C  3  26 rr        	rol bufaddr+1
00087E  3  06 rr        	asl bufaddr
000880  3  26 rr        	rol bufaddr+1
000882  3  06 rr        	asl bufaddr
000884  3  26 rr        	rol bufaddr+1
000886  3  06 rr        	asl bufaddr
000888  3  26 rr        	rol bufaddr+1
00088A  3  18           	clc			; add address of MAP graphics.
00088B  3  A5 rr        	lda bufaddr
00088D  3  65 rr        	adc dispx
00088F  3  69 00        	adc #<MAP
000891  3  85 rr        	sta bufaddr
000893  3  A5 rr        	lda bufaddr+1
000895  3  69 98        	adc #>MAP
000897  3  85 rr        	sta bufaddr+1
000899  3  60           	rts
00089A  3               
00089A  3               ;----------------------------------------------------
00089A  3               ; Display character in A at dispx,dispy.
00089A  3               ;
00089A  3               ; Input:
00089A  3               ;  A 	   = character to print
00089A  3               ;----------------------------------------------------
00089A  3               
00089A  3               pchar:
00089A  3  85 rr        	sta fntaddr
00089C  3  A9 00        	lda #0
00089E  3  85 rr        	sta fntaddr+1
0008A0  3  06 rr        	asl fntaddr  		; multiply char by 8.
0008A2  3  26 rr        	rol fntaddr+1
0008A4  3  06 rr        	asl fntaddr
0008A6  3  26 rr        	rol fntaddr+1
0008A8  3  06 rr        	asl fntaddr
0008AA  3  26 rr        	rol fntaddr+1
0008AC  3               
0008AC  3  A5 rr        	lda fntaddr
0008AE  3  18           	clc
0008AF  3  69 9B        	adc #<(FONT-256)
0008B1  3  85 rr        	sta fntaddr		; that's the low byte.
0008B3  3  A5 rr        	lda fntaddr+1
0008B5  3  69 55        	adc #>(FONT-256)
0008B7  3  85 rr        	sta fntaddr+1		; add displacement.
0008B9  3               pchark:
0008B9  3  20 63 08     	jsr gprad		; get screen address.
0008BC  3  A2 07        	ldx #7			; lines to write.
0008BE  3               pchar0:
0008BE  3  A0 00        	ldy #0
0008C0  3  B1 rr        	lda (fntaddr),y 	; get image byte.
0008C2  3  BC D1 08     	ldy scrtab,x		; Get rowoffset
0008C5  3               .if gflag
0008C5  3               	and andeor
0008C5  3               	eor andeor+1
0008C5  3               .endif
0008C5  3               .if iflag
0008C5  3               	eor #$ff
0008C5  3               .endif
0008C5  3  91 rr        	sta (scraddr),y 	; copy to screen.
0008C7  3  E6 rr        	inc fntaddr		; next image byte.
0008C9  3  D0 02        	bne :+
0008CB  3  E6 rr        	inc fntaddr+1
0008CD  3               :
0008CD  3  CA           	dex			; next screen row down.
0008CE  3  10 EE        	bpl pchar0		; repeat.
0008D0  3  60           	rts
0008D1  3               
0008D1  3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
0008D5  3  60 40 20 00  
0008D9  3               
0008D9  3               ;----------------------------------------------
0008D9  3               
0008D9  3               ; Print attributes, properties and pixels.
0008D9  3               ;
0008D9  3               ; Input:
0008D9  3               ;  A	= tile number
0008D9  3               ;----------------------------------------------
0008D9  3               
0008D9  3  00           colpatt:	.byte 0
0008DA  3               
0008DA  3               pbpattr:			; entry PUTBLOCK command
0008DA  3  A4 rr        	ldy charx
0008DC  3  84 rr        	sty dispx
0008DE  3  A4 rr        	ldy chary
0008E0  3  84 rr        	sty dispy
0008E2  3               pattr:
0008E2  3               .if aflag
0008E2  3               	pha
0008E2  3               	jsr wbloc		; save blockinfo
0008E2  3               	pla
0008E2  3               .endif
0008E2  3               
0008E2  3               pattr2:
0008E2  3  85 63        	sta z80_b		; store cell in b register for now.
0008E4  3  AA           	tax
0008E5  3  BD 3B 31     	lda bprop,x 		; block properties.
0008E8  3  85 62        	sta z80_c
0008EA  3  C9 08        	cmp #COLECT
0008EC  3  D0 05        	bne :+
0008EE  3  A5 63        	lda z80_b
0008F0  3  8D D9 08     	sta colpatt
0008F3  3               :
0008F3  3  20 6E 08     	jsr pradd 		; get property buffer address.
0008F6  3  A5 62        	lda z80_c
0008F8  3  A0 00        	ldy #0
0008FA  3  91 rr        	sta (bufaddr),y 	; write property.
0008FC  3  A5 63        	lda z80_b 		; restore cell.
0008FE  3               
0008FE  3               ; Print attributes, no properties.
0008FE  3               
0008FE  3               panp:
0008FE  3  85 64        	sta z80_e		; displacement in e.
000900  3  A9 00        	lda #0
000902  3  85 65        	sta z80_d		; no high byte.
000904  3  06 64        	asl z80_e  		; multiply char by 8.
000906  3  26 65        	rol z80_d
000908  3  06 64        	asl z80_e
00090A  3  26 65        	rol z80_d
00090C  3  06 64        	asl z80_e
00090E  3  26 65        	rol z80_d
000910  3  18           	clc
000911  3  A5 64        	lda z80_e
000913  3  69 5B        	adc #<chgfx 		; address of graphics.
000915  3  85 rr        	sta tileaddr
000917  3  A5 65        	lda z80_d
000919  3  69 2D        	adc #>chgfx
00091B  3  85 rr        	sta tileaddr+1
00091D  3  20 63 08     	jsr gprad 		; get screen address.
000920  3  A2 07        	ldx #7			; number of pixel rows to write.
000922  3               panp0:
000922  3  A0 00        	ldy #0
000924  3  B1 rr        	lda (tileaddr),y 	; get image byte.
000926  3               .if iflag
000926  3               	eor #$ff		; Invert
000926  3               .endif
000926  3  BC D1 08     	ldy scrtab,x
000929  3  91 rr        	sta (scraddr),y 	; copy to screen.
00092B  3  E6 rr        	inc tileaddr 		; next image byte.
00092D  3  D0 02        	bne :+
00092F  3  E6 rr        	inc tileaddr+1
000931  3               :
000931  3  CA           	dex	 		; repeat for 8 pixel rows.
000932  3  10 EE        	bpl panp0
000934  3  E6 rr        	inc dispx 		; move along one.
000936  3  E6 rr        	inc charx
000938  3  60           	rts
000939  3               
000939  3               ;----------------------------------------------
000939  3               ; Write block
000939  3               ;----------------------------------------------
000939  3               
000939  3               .if aflag
000939  3               wbloc:
000939  3               	ldy #3
000939  3               	sta (pbptr),y		; store block number
000939  3               	dey
000939  3               	lda dispx
000939  3               	sta (pbptr),y		; write x position of block.
000939  3               	dey
000939  3               	lda dispy
000939  3               	sta (pbptr),y		; write y position of block.
000939  3               	dey
000939  3               	lda scno
000939  3               	sta (pbptr),y		; write screen.
000939  3               	clc			; point to next free location
000939  3               	lda pbptr
000939  3               	adc #4
000939  3               	sta pbptr
000939  3               	bcc :+
000939  3               	inc pbptr+1
000939  3               :
000939  3               	rts
000939  3               .endif
000939  3               
000939  3               ;----------------------------------------------
000939  3               ; Print character pixels, no more.
000939  3               ;
000939  3               ; Input:
000939  3               ;  A	= character to print
000939  3               ;----------------------------------------------
000939  3               
000939  3               pchr:
000939  3  20 9A 08     	jsr pchar 		; show character in accumulator.
00093C  3  E6 rr        	inc dispx		; move along one.
00093E  3  60           	rts
00093F  3               
00093F  3               ;----------------------------------------------------
00093F  3               ; Shifter sprite routine for objects.
00093F  3               ;----------------------------------------------------
00093F  3               
00093F  3               .if oflag
00093F  3               sprit7:
00093F  3  A5 63        	lda z80_b
000941  3  F0 0F        	beq sprit0
000943  3  85 61        	sta z80_a
000945  3               sprit3:
000945  3  4E D3 09     	lsr spr			; shift into position.
000948  3  6E D4 09     	ror spr+1
00094B  3  6E D5 09     	ror spr+2
00094E  3  C6 61        	dec z80_a		; one less iteration.
000950  3  D0 F3        	bne sprit3
000952  3               sprit0:
000952  3  60           	rts 			; now apply to screen.
000953  3               
000953  3               ;----------------------------------------------------
000953  3               ; Draw sprite
000953  3               ;----------------------------------------------------
000953  3               
000953  3               sprite:
000953  3  86 rr        	stx xtmp		; Save X-reg
000955  3  20 99 10     	jsr scadd 		; get screen address in scraddr.
000958  3               
000958  3  A5 rr        	lda dispx 		; x position.
00095A  3  29 07        	and #7 			; position straddling cells.
00095C  3  85 63        	sta z80_b		; store in b register.
00095E  3               
00095E  3  A5 66        	lda z80_l		; store sprite graphic address.
000960  3  8D 73 09     	sta sprit1+1
000963  3  8D 7A 09     	sta sprit2+1
000966  3  A5 67        	lda z80_h
000968  3  8D 74 09     	sta sprit1+2
00096B  3  8D 7B 09     	sta sprit2+2
00096E  3               
00096E  3  A2 00        	ldx #0			; pixel height.
000970  3  A0 00        	ldy #0
000972  3               sprit1:
000972  3  BD 87 54     	lda objdta,x		; fetch first byte.
000975  3  8D D3 09     	sta spr
000978  3  E8           	inx
000979  3               sprit2:
000979  3  BD 87 54     	lda objdta,x
00097C  3  8D D4 09     	sta spr+1
00097F  3               
00097F  3  A9 00        	lda #0
000981  3  8D D5 09     	sta spr+2
000984  3  20 3F 09     	jsr sprit7		; shift sprite
000987  3               
000987  3  CA           	dex
000988  3  AD D3 09     	lda spr			; fetch graphic.
00098B  3  BC B3 09     	ldy spritetab,x
00098E  3  51 rr        	eor (scraddr),y		; merge with screen image.
000990  3  91 rr        	sta (scraddr),y		; write to screen.
000992  3  E8           	inx			; next screen byte.
000993  3               
000993  3  AD D4 09     	lda spr+1		; fetch graphic.
000996  3  BC B3 09     	ldy spritetab,x
000999  3  51 rr        	eor (scraddr),y		; merge with screen image.
00099B  3  91 rr        	sta (scraddr),y		; write to screen.
00099D  3  C8           	iny
00099E  3               
00099E  3  AD D5 09     	lda spr+2		; fetch graphic.
0009A1  3  51 rr        	eor (scraddr),y		; merge with screen image.
0009A3  3  91 rr        	sta (scraddr),y		; write to screen.
0009A5  3               
0009A5  3  E8           	inx			; next source byte.
0009A6  3  E0 10        	cpx #16
0009A8  3  D0 02        	bne :+
0009AA  3  E6 rr        	inc scraddr+1
0009AC  3               :
0009AC  3  E0 20        	cpx #32
0009AE  3  D0 C2        	bne sprit1		; repeat
0009B0  3               
0009B0  3  A6 rr        	ldx xtmp		; retreive X-reg
0009B2  3  60           	rts
0009B3  3               
0009B3  3               spritetab:
0009B3  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
0009B7  3  40 41 60 61  
0009BB  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0009BF  3  C0 C1 E0 E1  
0009C3  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
0009C7  3  40 41 60 61  
0009CB  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0009CF  3  C0 C1 E0 E1  
0009D3  3               
0009D3  3  00 00 00     spr:	.byte 0,0,0
0009D6  3               
0009D6  3               ;xtmp:	.byte 0
0009D6  3               .endif
0009D6  3               
0009D6  3               ;-----------------------------------------------------------
0009D6  3               ; Get room address.
0009D6  3               ;-----------------------------------------------------------
0009D6  3               
0009D6  3               groom:
0009D6  3  A6 rr        	ldx scno 		; screen number.
0009D8  3  A0 00        	ldy #0
0009DA  3               groomx:
0009DA  3  A9 51        	lda #<scdat 		; pointer to screens.
0009DC  3  85 66        	sta z80_l
0009DE  3  A9 45        	lda #>scdat
0009E0  3  85 67        	sta z80_h
0009E2  3               groom1:
0009E2  3  E0 00        	cpx #0			; is it the first one?
0009E4  3  F0 15        	beq groom0 		; no more screens to skip.
0009E6  3               
0009E6  3  18           	clc
0009E7  3  A5 66        	lda z80_l
0009E9  3  79 51 45     	adc scdat,y 		; low byte of screen size.
0009EC  3  85 66        	sta z80_l
0009EE  3  C8           	iny			; point to high byte.
0009EF  3  A5 67        	lda z80_h
0009F1  3  79 51 45     	adc scdat,y 		; high byte of screen size.
0009F4  3  85 67        	sta z80_h
0009F6  3  C8           	iny			; next address.
0009F7  3               
0009F7  3  CA           	dex 			; one less iteration.
0009F8  3  4C E2 09     	jmp groom1 		; loop until we reach the end.
0009FB  3               groom0:
0009FB  3  AD 87 53     	lda numsc 		; add displacement.
0009FE  3  0A           	asl a
0009FF  3  18           	clc			; add double displacement to address.
000A00  3  65 66        	adc z80_l
000A02  3  85 66        	sta z80_l
000A04  3  A5 67        	lda z80_h
000A06  3  69 00        	adc #0
000A08  3  85 67        	sta z80_h
000A0A  3  60           	rts
000A0B  3               
000A0B  3               ;-----------------------------------------------------------
000A0B  3               ; Draw present room.
000A0B  3               ;-----------------------------------------------------------
000A0B  3               
000A0B  3               droom:
000A0B  3  AD 3D 02     	lda wintop 		; window top.
000A0E  3  85 rr        	sta dispy		; set cursor y position.
000A10  3               droom2:
000A10  3  20 D6 09     	jsr groom 		; get address of current room.
000A13  3  A9 00        	lda #0	 		; zero in accumulator.
000A15  3  85 rr        	sta comcnt 		; reset compression counter.
000A17  3  AD 3F 02     	lda winhgt 		; height of window.
000A1A  3  85 rr        	sta rrow		; set row counter
000A1C  3               droom0:
000A1C  3  AD 3E 02     	lda winlft 		; window left edge.
000A1F  3  85 rr        	sta dispx 		; set cursor x position.
000A21  3  AD 40 02     	lda winwid 		; width of window.
000A24  3  85 rr        	sta rcol		; set column counter
000A26  3               droom1:
000A26  3  20 37 0A     	jsr flbyt 		; decompress next byte on the fly.
000A29  3  20 E2 08     	jsr pattr2 		; show attributes and block.
000A2C  3  C6 rr        	dec rcol		; one less column.
000A2E  3  D0 F6        	bne droom1 		; repeat for entire line.
000A30  3  E6 rr        	inc dispy		; move down one line.
000A32  3  C6 rr        	dec rrow 		; one less row.
000A34  3  D0 E6        	bne droom0 		; repeat for all rows.
000A36  3  60           	rts
000A37  3               
000A37  3               ;rcol:	.byte 0
000A37  3               ;rrow:	.byte 0
000A37  3               
000A37  3               ;----------------------------------------------
000A37  3               ; Decompress bytes on-the-fly.
000A37  3               ;----------------------------------------------
000A37  3               
000A37  3               flbyt:
000A37  3  A5 rr        	lda comcnt 		; compression counter.
000A39  3  D0 21        	bne flbyt1		; any more to decompress?  yes.
000A3B  3               
000A3B  3  A0 00        	ldy #0
000A3D  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
000A3F  3  E6 66        	inc z80_l 		; point to next cell.
000A41  3  D0 02        	bne :+
000A43  3  E6 67        	inc z80_h
000A45  3               :
000A45  3  C9 FF        	cmp #255 		; is this byte a control code?
000A47  3  F0 01        	beq :+
000A49  3  60           	rts 			; no, this byte is uncompressed.
000A4A  3               :
000A4A  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
000A4C  3  85 rr        	sta combyt 		; set up the type.
000A4E  3  E6 66        	inc z80_l 		; point to quantity.
000A50  3  D0 02        	bne :+
000A52  3  E6 67        	inc z80_h
000A54  3               :
000A54  3  B1 66        	lda (z80_hl),y 		; get quantity.
000A56  3  E6 66        	inc z80_l 		; point to next byte.
000A58  3  D0 02        	bne :+
000A5A  3  E6 67        	inc z80_h
000A5C  3               :
000A5C  3               flbyt1:
000A5C  3  85 rr        	sta comcnt 		; store new quantity.
000A5E  3  C6 rr        	dec comcnt		; one less.
000A60  3  A5 rr        	lda combyt 		; byte to expand.
000A62  3  60           	rts
000A63  3               
000A63  3               ;combyt:	.byte 0			; byte type compressed.
000A63  3               ;comcnt:	.byte 0			; compression counter.
000A63  3               
000A63  3               ;------------------------------------------
000A63  3               ; Ladder down check.
000A63  3               ;
000A63  3               ; Input:
000A63  3               ;  IX = sprite pointer
000A63  3               ;------------------------------------------
000A63  3               
000A63  3               .if lflag
000A63  3               laddd:
000A63  3               	ldy #9
000A63  3               	lda (z80_ix),y		; x coordinate.
000A63  3               	sta dispx
000A63  3               
000A63  3               	ldy #8
000A63  3               	lda (z80_ix),y		; y coordinate.
000A63  3               	and #254		; make it even.
000A63  3               	sta (z80_ix),y 		; reset it.
000A63  3               	clc 			; look down 16 pixels.
000A63  3               numsp5:
000A63  3               	adc #SPR_HGT
000A63  3               	sta dispy		; coords in dispx,dispy.
000A63  3               	jmp laddv
000A63  3               
000A63  3               ;------------------------------------------
000A63  3               ; Ladder up check.
000A63  3               ;
000A63  3               ; Input:
000A63  3               ;  IX = sprite pointer
000A63  3               ;
000A63  3               ; Output:
000A63  3               ;  A  = 0 is ok, A <>0 is not ok
000A63  3               ;------------------------------------------
000A63  3               
000A63  3               laddu:
000A63  3               	ldy #9
000A63  3               	lda (z80_ix),y		; x coordinate.
000A63  3               	sta dispx
000A63  3               
000A63  3               	ldy #8
000A63  3               	lda (z80_ix),y		; y coordinate.
000A63  3               	and #254 		; make it even.
000A63  3               	sta (z80_ix),y		; reset it.
000A63  3               	clc 			; look 2 pixels above feet.
000A63  3               numsp6:
000A63  3               	adc #SPR_HGT-2
000A63  3               	sta dispy		; coords in dispx,dispy.
000A63  3               laddv:
000A63  3               	jsr tstbl 		; get map address.
000A63  3               	jsr ldchk 		; standard ladder check.
000A63  3               	beq :+
000A63  3               	rts 			; no way through.
000A63  3               :
000A63  3               	inc bufaddr 		; look right one cell.
000A63  3               	bne :+
000A63  3               	inc bufaddr+1
000A63  3               :
000A63  3               	jsr ldchk 		; do the check.
000A63  3               	beq :+
000A63  3               	rts 			; impassable.
000A63  3               :
000A63  3               	lda dispx 		; y coordinate.
000A63  3               	and #7 			; position straddling block cells.
000A63  3               	bne :+
000A63  3               	rts 			; no more checks needed.
000A63  3               :
000A63  3               	inc bufaddr 		; look to third cell.
000A63  3               	bne :+
000A63  3               	inc bufaddr+1
000A63  3               :
000A63  3               	jsr ldchk 		; do the check.
000A63  3               	rts  			; return with zero flag set accordingly.
000A63  3               .endif
000A63  3               
000A63  3               ;---------------------------------------------------------
000A63  3               ; Can go up check.
000A63  3               ;
000A63  3               ; Input:
000A63  3               ;  IX = sprite pointer
000A63  3               ;
000A63  3               ; Output:
000A63  3               ;  A  = 0 is ok, A <>0 is not ok
000A63  3               ;---------------------------------------------------------
000A63  3               
000A63  3               cangu:
000A63  3  A0 09        	ldy #9
000A65  3  B1 68        	lda (z80_ix),y		; x coordinate.
000A67  3  85 rr        	sta dispx
000A69  3  A0 08        	ldy #8
000A6B  3  B1 68        	lda (z80_ix),y 		; y coordinate.
000A6D  3  38           	sec
000A6E  3  E9 02        	sbc #2
000A70  3  85 rr        	sta dispy		; coords in dispx,dispy.
000A72  3  20 FD 0B     	jsr tstbl 		; get map address.
000A75  3  20 15 0B     	jsr lrchk 		; standard left/right check.
000A78  3  F0 01        	beq :+
000A7A  3  60           	rts			; no way through.
000A7B  3               :
000A7B  3  E6 rr        	inc bufaddr		; look right one cell.
000A7D  3  D0 02        	bne :+
000A7F  3  E6 rr        	inc bufaddr+1
000A81  3               :
000A81  3  20 15 0B     	jsr lrchk 		; do the check.
000A84  3  F0 01        	beq :+
000A86  3  60           	rts			; impassable.
000A87  3               :
000A87  3  A5 rr        	lda dispx		; x coordinate.
000A89  3  29 07        	and #7			; position straddling block cells.
000A8B  3  D0 01        	bne :+
000A8D  3  60           	rts			; no more checks needed.
000A8E  3               :
000A8E  3  E6 rr        	inc bufaddr		; look to third cell.
000A90  3  D0 02        	bne :+
000A92  3  E6 rr        	inc bufaddr+1
000A94  3               :
000A94  3  20 15 0B     	jsr lrchk		; do the check.
000A97  3  60           	rts 			; return with zero flag set accordingly.
000A98  3               
000A98  3               ;---------------------------------------------------------
000A98  3               ; Can go down check.
000A98  3               ;
000A98  3               ; Input:
000A98  3               ;  IX = sprite pointer
000A98  3               ;
000A98  3               ; Output:
000A98  3               ;  A  = 0 is ok, A <>0 is not ok
000A98  3               ;---------------------------------------------------------
000A98  3               
000A98  3               cangd:
000A98  3  A0 09        	ldy #9
000A9A  3  B1 68        	lda (z80_ix),y 		; x coordinate.
000A9C  3  85 rr        	sta dispx
000A9E  3  A0 08        	ldy #8
000AA0  3  B1 68        	lda (z80_ix),y		; y coordinate.
000AA2  3  18           	clc
000AA3  3               numsp3:
000AA3  3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
000AA5  3  85 rr        	sta dispy		; coords in dispx,dispy.
000AA7  3  20 FD 0B     	jsr tstbl 		; get map address.
000AAA  3  20 2A 0B     	jsr plchk 		; block, platform check.
000AAD  3  F0 01        	beq :+
000AAF  3  60           	rts			; no way through.
000AB0  3               :
000AB0  3  E6 rr        	inc bufaddr		; look right one cell.
000AB2  3  D0 02        	bne :+
000AB4  3  E6 rr        	inc bufaddr+1
000AB6  3               :
000AB6  3  20 2A 0B     	jsr plchk		; block, platform check.
000AB9  3  F0 01        	beq :+
000ABB  3  60           	rts			; impassable.
000ABC  3               :
000ABC  3  A5 rr        	lda dispx		; x coordinate.
000ABE  3  29 07        	and #7			; position straddling block cells.
000AC0  3  D0 01        	bne :+
000AC2  3  60           	rts			; no more checks needed.
000AC3  3               :
000AC3  3  E6 rr        	inc bufaddr		; look to third cell.
000AC5  3  D0 02        	bne :+
000AC7  3  E6 rr        	inc bufaddr+1
000AC9  3               :
000AC9  3  20 2A 0B     	jsr plchk		; block, platform check.
000ACC  3  60           	rts			; return with zero flag set accordingly.
000ACD  3               
000ACD  3               ;---------------------------------------------------------
000ACD  3               ; Can go left check.
000ACD  3               ;
000ACD  3               ; Input:
000ACD  3               ;  IX = sprite pointer
000ACD  3               ;
000ACD  3               ; Output:
000ACD  3               ;  A  = 0 is ok, A <>0 is not ok
000ACD  3               ;---------------------------------------------------------
000ACD  3               
000ACD  3               cangl:
000ACD  3  A0 08        	ldy #8
000ACF  3  B1 68        	lda (z80_ix),y 		; y coordinate.
000AD1  3  85 rr        	sta dispy
000AD3  3  A0 09        	ldy #9
000AD5  3  B1 68        	lda (z80_ix),y 		; x coordinate.
000AD7  3  38           	sec
000AD8  3  E9 02        	sbc #2			; look left 2 pixels.
000ADA  3  85 rr        	sta dispx		; coords in dispx,dispy.
000ADC  3  4C EE 0A     	jmp cangh		; test if we can go there.
000ADF  3               
000ADF  3               ;---------------------------------------------------------
000ADF  3               ; Can go right check.
000ADF  3               ;
000ADF  3               ; Input:
000ADF  3               ;  IX = sprite pointer
000ADF  3               ;
000ADF  3               ; Output:
000ADF  3               ;  A  = 0 is ok, A <>0 is not ok
000ADF  3               ;---------------------------------------------------------
000ADF  3               
000ADF  3               cangr:
000ADF  3  A0 08        	ldy #8
000AE1  3  B1 68        	lda (z80_ix),y		; y coordinate.
000AE3  3  85 rr        	sta dispy
000AE5  3  A0 09        	ldy #9
000AE7  3  B1 68        	lda (z80_ix),y		; x coordinate.
000AE9  3  18           	clc
000AEA  3  69 10        	adc #16			; look right 16 pixels.
000AEC  3  85 rr        	sta dispx		; coords in dispx,dispy.
000AEE  3               cangh:
000AEE  3               cangh2:
000AEE  3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
000AF0  3  85 63        	sta z80_b
000AF2  3  A5 rr        	lda dispy		; y position.
000AF4  3  29 07        	and #7			; does x straddle cells?
000AF6  3  D0 02        	bne cangh0		; yes, loop counter is good.
000AF8  3  C6 63        	dec z80_b		; one less row to write.
000AFA  3               cangh0:
000AFA  3  20 FD 0B     	jsr tstbl		; get map address.
000AFD  3               cangh1:
000AFD  3  20 15 0B     	jsr lrchk		; standard left/right check.
000B00  3  F0 01        	beq :+
000B02  3  60           	rts			; no way through.
000B03  3               :
000B03  3  48           	pha
000B04  3  18           	clc
000B05  3  A5 rr        	lda bufaddr
000B07  3  69 20        	adc #32			; look down.
000B09  3  85 rr        	sta bufaddr
000B0B  3  90 02        	bcc :+
000B0D  3  E6 rr        	inc bufaddr+1
000B0F  3               :
000B0F  3  68           	pla
000B10  3               
000B10  3  C6 63        	dec z80_b
000B12  3  D0 E9        	bne cangh1
000B14  3  60           	rts
000B15  3               
000B15  3               ;-------------------------------------
000B15  3               ; Check left/right movement is okay.
000B15  3               ;
000B15  3               ; Input:
000B15  3               ;  bufaddr = MAP + x/8 + y/8*32
000B15  3               ;
000B15  3               ; Output:
000B15  3               ;  A  = 0 is ok, A <>0 is not ok
000B15  3               ;-------------------------------------
000B15  3               
000B15  3               lrchk:
000B15  3  A0 00        	ldy #0
000B17  3  B1 rr        	lda (bufaddr),y		; fetch map cell.
000B19  3  C9 02        	cmp #WALL 		; is it passable?
000B1B  3  F0 0A        	beq lrchkx		; no.
000B1D  3               
000B1D  3  C9 04        	cmp #FODDER		; fodder has to be dug.
000B1F  3  F0 06        	beq lrchkx		; not passable.
000B21  3  A9 00        	lda #0
000B23  3  60           	rts
000B24  3               
000B24  3               ;--------------------------------------------------------------
000B24  3               ; Called by mmenu
000B24  3               ;--------------------------------------------------------------
000B24  3               
000B24  3               always:
000B24  3  A9 FF        	lda #255		; report it as okay.
000B26  3  60           	rts
000B27  3               
000B27  3               lrchkx:
000B27  3  A9 01        	lda #1 			; reset all bits.
000B29  3  60           	rts
000B2A  3               
000B2A  3               
000B2A  3               ;--------------------------------------------------------------
000B2A  3               ; Check platform or solid item is not in way.
000B2A  3               ;
000B2A  3               ; Input:
000B2A  3               ;  bufaddr = MAP + x/8 + y/8*32
000B2A  3               ;
000B2A  3               ; Output:
000B2A  3               ;  A  = 0 is ok, A <>0 is not ok
000B2A  3               ;--------------------------------------------------------------
000B2A  3               
000B2A  3               plchk:
000B2A  3  A0 00        	ldy #0
000B2C  3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
000B2E  3  C9 02        	cmp #WALL 		; is it passable?
000B30  3  F0 F5        	beq lrchkx		; no.
000B32  3               .if pflag .or dflag
000B32  3               	cmp #FODDER		; fodder has to be dug.
000B32  3               	beq lrchkx		; not passable.
000B32  3               .endif
000B32  3  C9 01        	cmp #PLATFM		; platform is solid.
000B34  3  F0 03        	beq plchkx		; not passable.
000B36  3               .if lflag
000B36  3               	cmp #LADDER		; is it a ladder?
000B36  3               	beq lrchkx		; on ladder, deny movement.
000B36  3               .endif
000B36  3               plchk0:
000B36  3  A9 00        	lda #0			; report as ok
000B38  3  60           	rts
000B39  3               plchkx:
000B39  3  A5 rr        	lda dispy		; x coordinate.
000B3B  3  29 07        	and #7			; position straddling blocks.
000B3D  3  F0 E8        	beq lrchkx		; on platform, deny movement.
000B3F  3  4C 36 0B     	jmp plchk0
000B42  3               
000B42  3               ;--------------------------------------------------------------
000B42  3               ; Check ladder is available.
000B42  3               ;
000B42  3               ; Input:
000B42  3               ;  bufaddr = MAP + x/8 + y/8*32
000B42  3               ;
000B42  3               ; Output:
000B42  3               ;  A  = 0 is ok, A <>0 is not ok
000B42  3               ;--------------------------------------------------------------
000B42  3               
000B42  3               .if lflag
000B42  3               ldchk:
000B42  3               	ldy #0
000B42  3               	lda (bufaddr),y 	; fetch cell.
000B42  3               	cmp #LADDER 		; is it a ladder?
000B42  3               	beq :+
000B42  3               	lda #1
000B42  3               	rts  			; return with zero flag set accordingly.
000B42  3               :
000B42  3               	lda #0
000B42  3               	rts
000B42  3               .endif
000B42  3               
000B42  3               ;--------------------------------------------------------------
000B42  3               ; Get collectables.
000B42  3               ;--------------------------------------------------------------
000B42  3               
000B42  3               .if cflag
000B42  3               getcol:
000B42  3                       lda #COLECT             ; collectable blocks.
000B42  3                       sta z80_b
000B42  3                       jsr tded                ; test for collectable blocks.
000B42  3                       cmp z80_b               ; did we find one?
000B42  3                       beq :+
000B42  3                       rts                     ; none were found, job done.
000B42  3               :
000B42  3                       jsr gtblk               ; get block.
000B42  3                       jsr evnt20              ; collected block event.
000B42  3                       jmp getcol              ; repeat until none left.
000B42  3               
000B42  3               ; Get collectable block.
000B42  3               
000B42  3               gtblk:
000B42  3               	ldy #0
000B42  3               	lda (bufaddr),y
000B42  3               	sta z80_a
000B42  3                       lda #0
000B42  3                       sta (bufaddr),y		; make it empty now.
000B42  3               
000B42  3               	lda bufaddr		; set dispx
000B42  3               	and #31
000B42  3               	sta dispx
000B42  3               
000B42  3               	lda bufaddr+1		; Set dispy
000B42  3               	sec
000B42  3               	sbc #>MAP
000B42  3               	sta bufaddr+1
000B42  3               	asl bufaddr
000B42  3               	rol bufaddr+1
000B42  3               	asl bufaddr
000B42  3               	rol bufaddr+1
000B42  3               	asl bufaddr
000B42  3               	rol bufaddr+1
000B42  3               	lda bufaddr+1
000B42  3               	sta dispy
000B42  3               
000B42  3               	lda colpatt		; get blocknr
000B42  3               	sta z80_e		; displacement in e.
000B42  3               	lda #0
000B42  3               	sta z80_d		; no high byte.
000B42  3               	asl z80_e  		; multiply char by 8.
000B42  3               	rol z80_d
000B42  3               	asl z80_e
000B42  3               	rol z80_d
000B42  3               	asl z80_e
000B42  3               	rol z80_d
000B42  3               	clc
000B42  3               	lda z80_e
000B42  3               	adc #<chgfx 		; address of graphics.
000B42  3               	sta tileaddr
000B42  3               	lda z80_d
000B42  3               	adc #>chgfx
000B42  3               	sta tileaddr+1
000B42  3               	jsr gprad 		; get screen address.
000B42  3               	ldx #7			; number of pixel rows to write.
000B42  3               gtblk0:
000B42  3               	ldy #0
000B42  3               	lda (tileaddr),y 	; get image byte.
000B42  3               	ldy scrtab,x
000B42  3               	eor (scraddr),y 	; XOR tile on screen
000B42  3               	sta (scraddr),y 	; copy to screen.
000B42  3               	inc tileaddr 		; next image byte.
000B42  3               	bne :+
000B42  3               	inc tileaddr+1
000B42  3               :
000B42  3               	dex	 		; repeat for 8 pixel rows.
000B42  3               	bpl gtblk0
000B42  3               	rts
000B42  3               .endif
000B42  3               
000B42  3               ;--------------------------------------------------------------
000B42  3               ; Touched deadly block check.
000B42  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
000B42  3               ;
000B42  3               ; Input:
000B42  3               ;  IX = sprite address
000B42  3               ;
000B42  3               ; Output:
000B42  3               ;  A  = 0 is ok, A=5 is not ok
000B42  3               ;--------------------------------------------------------------
000B42  3               
000B42  3               tded:
000B42  3  A0 08        	ldy #8
000B44  3  B1 68        	lda (z80_ix),y 		; y coordinate.
000B46  3  85 rr        	sta dispy
000B48  3  C8           	iny
000B49  3  B1 68        	lda (z80_ix),y 		; x coordinate.
000B4B  3  85 rr        	sta dispx		; coords in dispx,dispy.
000B4D  3  20 FD 0B     	jsr tstbl		; get map address.
000B50  3  48           	pha
000B51  3  A9 1F        	lda #31			; default distance to next line down.
000B53  3  85 64        	sta z80_e
000B55  3  68           	pla
000B56  3  C5 63        	cmp z80_b		; is this the required block?
000B58  3  D0 01        	bne :+
000B5A  3  60           	rts			; yes.
000B5B  3               :
000B5B  3  E6 rr        	inc bufaddr 		; next cell.
000B5D  3  D0 02        	bne :+
000B5F  3  E6 rr        	inc bufaddr+1
000B61  3               :
000B61  3  A0 00        	ldy #0
000B63  3  B1 rr        	lda (bufaddr),y		; fetch type.
000B65  3  C5 63        	cmp z80_b 		; is this deadly/custom?
000B67  3  D0 01        	bne :+
000B69  3  60           	rts			; yes.
000B6A  3               :
000B6A  3  A5 rr        	lda dispx		; horizontal position.
000B6C  3  85 62        	sta z80_c 		; store column in c register.
000B6E  3  29 07        	and #7			; is it straddling cells?
000B70  3  D0 03        	bne :+
000B72  3  4C 86 0B     	jmp tded0		; no.
000B75  3               :
000B75  3  E6 rr        	inc bufaddr 		; last cell.
000B77  3  D0 02        	bne :+
000B79  3  E6 rr        	inc bufaddr+1
000B7B  3               :
000B7B  3  A0 00        	ldy #0
000B7D  3  B1 rr        	lda (bufaddr),y 	; fetch type.
000B7F  3  C5 63        	cmp z80_b		; is this the block?
000B81  3  D0 01        	bne :+
000B83  3  60           	rts			; yes.
000B84  3               :
000B84  3  C6 64        	dec z80_e		; one less cell to next row down.
000B86  3               tded0:
000B86  3  18           	clc 			; point to next row.
000B87  3  A5 rr        	lda bufaddr
000B89  3  65 64        	adc z80_e
000B8B  3  85 rr        	sta bufaddr
000B8D  3  90 02        	bcc :+
000B8F  3  E6 rr        	inc bufaddr+1
000B91  3               :
000B91  3  A0 00        	ldy #0
000B93  3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
000B95  3  C5 63        	cmp z80_b		; is this fatal?
000B97  3  D0 01        	bne :+
000B99  3  60           	rts			; yes.
000B9A  3               :
000B9A  3  E6 rr        	inc bufaddr 		; next cell.
000B9C  3  D0 02        	bne :+
000B9E  3  E6 rr        	inc bufaddr+1
000BA0  3               :
000BA0  3  A0 00        	ldy #0
000BA2  3  B1 rr        	lda (bufaddr),y 	; fetch type.
000BA4  3  C5 63        	cmp z80_b		; is this fatal?
000BA6  3  D0 01        	bne :+
000BA8  3  60           	rts			; yes.
000BA9  3               :
000BA9  3  A5 62        	lda z80_c		; horizontal position.
000BAB  3  29 07        	and #7			; is it straddling cells?
000BAD  3  D0 03        	bne :+
000BAF  3  4C C1 0B     	jmp tded1 		; no.
000BB2  3               :
000BB2  3  E6 rr        	inc bufaddr		; last cell.
000BB4  3  D0 02        	bne :+
000BB6  3  E6 rr        	inc bufaddr+1
000BB8  3               :
000BB8  3  A0 00        	ldy #0
000BBA  3  B1 rr        	lda (bufaddr),y		; fetch type.
000BBC  3  C5 63        	cmp z80_b		; is this fatal?
000BBE  3  D0 01        	bne :+
000BC0  3  60           	rts			; yes.
000BC1  3               :
000BC1  3               tded1:
000BC1  3  A5 rr        	lda dispy		; vertical position.
000BC3  3  29 07        	and #7 			; is it straddling cells?
000BC5  3  D0 01        	bne :+
000BC7  3  60           	rts			; no, job done.
000BC8  3               :
000BC8  3  18           	clc			; point to next row.
000BC9  3  A5 rr        	lda bufaddr
000BCB  3  65 64        	adc z80_e
000BCD  3  85 rr        	sta bufaddr
000BCF  3  90 02        	bcc :+
000BD1  3  E6 rr        	inc bufaddr+1
000BD3  3               :
000BD3  3  A0 00        	ldy #0
000BD5  3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
000BD7  3  C5 63        	cmp z80_b		; is this fatal?
000BD9  3  D0 01        	bne :+
000BDB  3  60           	rts			; yes.
000BDC  3               :
000BDC  3  E6 rr        	inc bufaddr		; next cell.
000BDE  3  D0 02        	bne :+
000BE0  3  E6 rr        	inc bufaddr+1
000BE2  3               :
000BE2  3  A0 00        	ldy #0
000BE4  3  B1 rr        	lda (bufaddr),y 	; fetch type.
000BE6  3  C5 63        	cmp z80_b		; is this fatal?
000BE8  3  D0 01        	bne :+
000BEA  3  60           	rts			; yes.
000BEB  3               :
000BEB  3  A5 62        	lda z80_c		; horizontal position.
000BED  3  29 07        	and #7			; is it straddling cells?
000BEF  3  D0 01        	bne :+
000BF1  3  60           	rts			; no.
000BF2  3               :
000BF2  3  E6 rr        	inc bufaddr		; last cell.
000BF4  3  D0 02        	bne :+
000BF6  3  E6 rr        	inc bufaddr+1
000BF8  3               :
000BF8  3  A0 00        	ldy #0
000BFA  3  B1 rr        	lda (bufaddr),y		; fetch final type.
000BFC  3  60           	rts 			; return with final type in accumulator.
000BFD  3               
000BFD  3               ;---------------------------------------------------
000BFD  3               ; Fetch block type at (dispx, dispy).
000BFD  3               ;
000BFD  3               ; Output:
000BFD  3               ;  A = block type
000BFD  3               ;---------------------------------------------------
000BFD  3               
000BFD  3               tstbl:
000BFD  3  A5 rr        	lda dispy 		; fetch y coord.
000BFF  3  4A           	lsr a			; bufaddr = y/8
000C00  3  4A           	lsr a
000C01  3  4A           	lsr a
000C02  3  85 rr        	sta chary
000C04  3               
000C04  3  85 rr        	sta bufaddr
000C06  3  A9 00        	lda #0
000C08  3  85 rr        	sta bufaddr+1
000C0A  3               
000C0A  3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
000C0C  3  26 rr        	rol bufaddr+1
000C0E  3  06 rr        	asl bufaddr
000C10  3  26 rr        	rol bufaddr+1
000C12  3  06 rr        	asl bufaddr
000C14  3  26 rr        	rol bufaddr+1
000C16  3  06 rr        	asl bufaddr
000C18  3  26 rr        	rol bufaddr+1
000C1A  3  06 rr        	asl bufaddr
000C1C  3  26 rr        	rol bufaddr+1
000C1E  3               
000C1E  3  A5 rr        	lda dispx		; x/8
000C20  3  4A           	lsr a
000C21  3  4A           	lsr a
000C22  3  4A           	lsr a
000C23  3  85 rr        	sta charx
000C25  3               
000C25  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
000C26  3  65 rr        	adc bufaddr
000C28  3  69 00        	adc #<MAP
000C2A  3  85 rr        	sta bufaddr
000C2C  3  A5 rr        	lda bufaddr+1
000C2E  3  69 98        	adc #>MAP
000C30  3  85 rr        	sta bufaddr+1
000C32  3               
000C32  3  A0 00        	ldy #0
000C34  3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
000C36  3  60           	rts
000C37  3               
000C37  3               
000C37  3               ;-------------------------------------------------------------------
000C37  3               ; Jump - if we can.
000C37  3               ; Requires initial speed to be set up in accumulator prior to call.
000C37  3               ;
000C37  3               ; Input:
000C37  3               ;  IX = sprite address
000C37  3               ;-------------------------------------------------------------------
000C37  3               
000C37  3               jump:
000C37  3  A0 0D        	ldy #13
000C39  3  B1 68        	lda (z80_ix),y		; jump table low.
000C3B  3  A0 0E        	ldy #14
000C3D  3  11 68        	ora (z80_ix),y		; jump table high.
000C3F  3  F0 01        	beq :+
000C41  3  60           	rts			; already in the air.
000C42  3               :
000C42  3  A9 59        	lda #>jtab
000C44  3  A0 0E        	ldy #14
000C46  3  91 68        	sta (z80_ix),y		; set jump high.
000C48  3  A9 9B        	lda #<jtab		; jump table start.
000C4A  3  A0 0D        	ldy #13
000C4C  3  91 68        	sta (z80_ix),y		; set jump low.
000C4E  3  60           	rts
000C4F  3               
000C4F  3               ; Jump table.
000C4F  3               
000C4F  3               ;jtab:
000C4F  3               ;	.byte 248,250,252
000C4F  3               ;	.byte 254,254,255
000C4F  3               ;	.byte 255,255,0,0
000C4F  3               ;	.byte 0,1,1,1,2,2
000C4F  3               ;	.byte 4,6,8,8,8,99
000C4F  3               
000C4F  3               ;------------------------------------------------
000C4F  3               ; Random numbers code.
000C4F  3               ; Pseudo-random number generator, 8-bit.
000C4F  3               ;
000C4F  3               ; Output:
000C4F  3               ;  RND = random number
000C4F  3               ;------------------------------------------------
000C4F  3               
000C4F  3               random:
000C4F  3  A5 rr        	lda seed
000C51  3  F0 05        	beq doEor
000C53  3  0A           	asl a
000C54  3  F0 04        	beq noEor
000C56  3  90 02        	bcc noEor
000C58  3  49 1D        doEor:	eor #$1d
000C5A  3  85 rr        noEor:	sta seed
000C5C  3  60           	rts
000C5D  3               
000C5D  3  A5 rr        	lda seed		; get last random number.
000C5F  3  0A           	asl a
000C60  3  0A           	asl a
000C61  3  18           	clc
000C62  3  65 rr        	adc seed
000C64  3  18           	clc
000C65  3  69 45        	adc #$45
000C67  3  85 rr        	sta seed		; store new seed.
000C69  3  85 rr        	sta varrnd		; return number in variable.
000C6B  3  60           	rts
000C6C  3               
000C6C  3               ;--------------------------------------------------------
000C6C  3               ; Keys
000C6C  3               ;
000C6C  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
000C6C  3               ;             ||||||||
000C6C  3               ;             |||||||+> Right    KEY 0  - X
000C6C  3               ;             ||||||+-> Left     KEY 1  - Z
000C6C  3               ;             |||||+--> Down     KEY 2  - .
000C6C  3               ;             ||||+---> Up       KEY 3  - ;
000C6C  3               ;             |||+----> Fire1    KEY 4  - SPC
000C6C  3               ;             ||+-----> Fire2    KEY 5  - Q
000C6C  3               ;             |+------> Fire3    KEY 6  - P
000C6C  3               ;             +-------> Not used
000C6C  3               ;
000C6C  3               ;                       Option1  KEY 7  - 1
000C6C  3               ;                       Option2  KEY 8  - 2
000C6C  3               ;                       Option3  KEY 9  - 3
000C6C  3               ;                       Option4  KEY 10 - 4
000C6C  3               ;--------------------------------------------------------
000C6C  3               
000C6C  3               ;              X   Z   .   ;  SPC  Q   P
000C6C  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
000C6C  3               ;        .byte $21,$11,$01,$92                   ; menu options.
000C6C  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
000C70  3  00 04 14     
000C73  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
000C77  3               
000C77  3               ;--------------------------------------------------------
000C77  3               ; Keyboard test routine.
000C77  3               ;
000C77  3               ; Input:
000C77  3               ;  A = key to read, high nibble=row and low nibble=col
000C77  3               ;
000C77  3               ; Output:
000C77  3               ;  carry clr = key pressed
000C77  3               ;  carry set = key not pressed
000C77  3               ;--------------------------------------------------------
000C77  3               
000C77  3               ktest:
000C77  3  85 61        	sta z80_a		; save key
000C79  3               
000C79  3  4A           	lsr a			; set row
000C7A  3  4A           	lsr a
000C7B  3  4A           	lsr a
000C7C  3  4A           	lsr a
000C7D  3  09 F0        	ora #ScrMode		; don't flip screenmode
000C7F  3  8D 00 B0     	sta KeyRowAddr
000C82  3               
000C82  3  A5 61        	lda z80_a
000C84  3  29 0F        	and #$0f
000C86  3  AA           	tax
000C87  3  AD 01 B0     	lda KeyColAddr		; read column
000C8A  3               
000C8A  3  3D 93 0C     	and keymask,x		; check key pressed
000C8D  3  F0 02        	beq pressed
000C8F  3  38           	sec			; key not pressed
000C90  3  60           	rts
000C91  3               pressed:
000C91  3  18           	clc			; key pressed
000C92  3  60           	rts
000C93  3               
000C93  3  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20
000C97  3  10 20        
000C99  3               
000C99  3               ;-------------------------------------------------------
000C99  3               ; Joystick and keyboard reading routines.
000C99  3               ;
000C99  3               ; contrl = 0, Keyboard
000C99  3               ;          1, JoyKeyb
000C99  3               ;          2, JoyMMC
000C99  3               ;-------------------------------------------------------
000C99  3               
000C99  3               joykey:
000C99  3  A5 rr        	lda contrl 		; control flag.
000C9B  3  C9 01        	cmp #1
000C9D  3  D0 03        	bne :+
000C9F  3  4C BD 0C     	jmp joyjoy 		; read keyboard joystick
000CA2  3               :
000CA2  3  C9 02        	cmp #2
000CA4  3  D0 03        	bne :+
000CA6  3  4C E6 0C     	jmp joysin 		; read MMC joystick.
000CA9  3               :
000CA9  3               ; Keyboard controls.
000CA9  3               
000CA9  3  A9 00        	lda #0		 	; zero reading.
000CAB  3  85 64        	sta z80_e
000CAD  3               
000CAD  3  A0 06        	ldy #6	 		; address of last key.
000CAF  3               joyke0:
000CAF  3  B9 B1 59     	lda keys,y 		; get key from table.
000CB2  3  20 77 0C     	jsr ktest		; being pressed?
000CB5  3  26 64        	rol z80_e 		; rotate into reading.
000CB7  3               
000CB7  3  88           	dey		 	; next key.
000CB8  3  10 F5        	bpl joyke0 		; repeat for all keys.
000CBA  3  4C CE 0C     	jmp joyjo1 		; store the value.
000CBD  3               
000CBD  3               ; Keyboard joystick controls.
000CBD  3               
000CBD  3               joyjoy:
000CBD  3  A9 00        	lda #0		 	; zero reading.
000CBF  3  85 64        	sta z80_e
000CC1  3               
000CC1  3  A0 06        	ldy #6	 		; address of last key.
000CC3  3               joyjo3:
000CC3  3  B9 6C 0C     	lda jkeys,y 		; get key from table.
000CC6  3  20 77 0C     	jsr ktest		; being pressed?
000CC9  3  26 64        	rol z80_e 		; rotate into reading.
000CCB  3               
000CCB  3  88           	dey		 	; next key.
000CCC  3  10 F5        	bpl joyjo3 		; repeat for all keys.
000CCE  3               joyjo1:
000CCE  3  A5 64        	lda z80_e 		; copy e register to accumulator.
000CD0  3               joyjo2:
000CD0  3  85 rr        	sta joyval		; remember value.
000CD2  3  60           	rts
000CD3  3               
000CD3  3               
000CD3  3               ; AtoMMC joystick controls.
000CD3  3               
000CD3  3               ; Set PORTB direction
000CD3  3               
000CD3  3               joyinit:
000CD3  3  A9 FF        	lda #$ff   		; Write value to latch, bits 0-7 input
000CD5  3  8D 01 B4     	sta DatReg
000CD8  3  20 14 0D     	jsr interwritedelay
000CDB  3  A9 A1        	lda #$a1   		; Write direction in latch to PORTB
000CDD  3  8D 00 B4     	sta CmdReg
000CE0  3               
000CE0  3               wait_until_not_busy:
000CE0  3  AD 00 B4     	lda CmdReg
000CE3  3  30 FB        	bmi wait_until_not_busy
000CE5  3  60           	rts
000CE6  3               
000CE6  3               ; Get PORTB value
000CE6  3               
000CE6  3               joysin:
000CE6  3  A9 A2        	lda #$a2   		; Read value PORTB in latch
000CE8  3  8D 00 B4     	sta CmdReg
000CEB  3  20 14 0D     	jsr interwritedelay
000CEE  3               
000CEE  3  AD 01 B4     	lda DatReg		; Read joystick status
000CF1  3  29 7F        	and #$7f
000CF3  3  85 rr        	sta joyval
000CF5  3  85 F0        	sta $f0
000CF7  3               
000CF7  3  AD B6 59     	lda keys+5		; check fire2
000CFA  3  20 77 0C     	jsr ktest
000CFD  3  B0 06        	bcs :+
000CFF  3  A5 rr        	lda joyval
000D01  3  29 DF        	and #$df
000D03  3  85 rr        	sta joyval
000D05  3               :
000D05  3  AD B7 59     	lda keys+6		; check fire3
000D08  3  20 77 0C     	jsr ktest
000D0B  3  B0 06        	bcs :+
000D0D  3  A5 rr        	lda joyval
000D0F  3  29 BF        	and #$bf
000D11  3  85 rr        	sta joyval
000D13  3               :
000D13  3  60           	rts
000D14  3               
000D14  3               ; Short delay
000D14  3               ; Enough to intersperse 2 writes to the FATPIC.
000D14  3               
000D14  3               interwritedelay:
000D14  3  A9 08        	lda  #8
000D16  3  38           	sec
000D17  3               loop:
000D17  3  E9 01        	sbc  #1
000D19  3  D0 FC        	bne  loop
000D1B  3  60           	rts
000D1C  3               
000D1C  3               ;tmp_byte:   .byte 0
000D1C  3               
000D1C  3               ;---------------------------------------------------------------
000D1C  3               ; Getkey in column,row format
000D1C  3               ;
000D1C  3               ; Output:
000D1C  3               ;  A = high nibble=row and low nibble=column key in matrix
000D1C  3               ;---------------------------------------------------------------
000D1C  3               
000D1C  3               kget:
000D1C  3  A9 F0        	lda #ScrMode		; high-mono mode.
000D1E  3  8D 00 B0     	sta ScrSelAddr		; screen select port
000D21  3  86 rr        	stx xtmp
000D23  3               kget4:
000D23  3  20 71 FE     	jsr READKEY		; read key until pressed
000D26  3  C0 FF        	cpy #255
000D28  3  F0 F9        	beq kget4
000D2A  3  85 rr        	sta rcol		; save column
000D2C  3  86 rr        	stx rrow		; determine row
000D2E  3               kget3:
000D2E  3  20 71 FE     	jsr READKEY		; wait until key released
000D31  3  C0 FF        	cpy #255
000D33  3  D0 F9        	bne kget3
000D35  3               
000D35  3  38           	sec			; calculate matrix row
000D36  3  A9 0A        	lda #10
000D38  3  E5 rr        	sbc rrow
000D3A  3  0A           	asl a
000D3B  3  0A           	asl a
000D3C  3  0A           	asl a
000D3D  3  0A           	asl a
000D3E  3  85 rr        	sta rrow
000D40  3               
000D40  3  A0 FF        	ldy #255		; find column mask
000D42  3               kget1:
000D42  3  C8           	iny
000D43  3  B9 93 0C     	lda keymask,y
000D46  3  C5 rr        	cmp rcol
000D48  3  F0 03        	beq kget2
000D4A  3  4C 42 0D     	jmp kget1
000D4D  3               kget2:
000D4D  3  98           	tya			; determine column
000D4E  3  18           	clc
000D4F  3  65 rr        	adc rrow
000D51  3  A6 rr        	ldx xtmp
000D53  3  60           	rts
000D54  3               
000D54  3               ;---------------------------------------------------------------
000D54  3               ; Display message.
000D54  3               ;
000D54  3               ; Input:
000D54  3               ;  A = message number
000D54  3               ;---------------------------------------------------------------
000D54  3               
000D54  3               dmsg:
000D54  3  AA           	tax
000D55  3  A9 32        	lda #<msgdat		; pointer to messages.
000D57  3  85 66        	sta z80_l
000D59  3  A9 2D        	lda #>msgdat
000D5B  3  85 67        	sta z80_h
000D5D  3  20 71 0E     	jsr getwrd		; get message number.
000D60  3               dmsg3:
000D60  3  20 5E 0E     	jsr preprt		; pre-printing stuff.
000D63  3  20 19 07     	jsr checkx		; make sure we"re in a printable range.
000D66  3  A5 rr        	lda prtmod		; print mode.
000D68  3  D0 47        	bne bmsg1		; no, double-height text.
000D6A  3               dmsg0:
000D6A  3  A5 67        	lda z80_h		; store string pointer.
000D6C  3  48           	pha
000D6D  3  A5 66        	lda z80_l
000D6F  3  48           	pha
000D70  3               
000D70  3  A0 00        	ldy #0
000D72  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
000D74  3  29 7F        	and #127		; remove any end marker.
000D76  3  C9 0D        	cmp #13
000D78  3  F0 24        	beq dmsg1
000D7A  3  20 9A 08     	jsr pchar		; display character.
000D7D  3  20 49 0E     	jsr nexpos 		; display position.
000D80  3  D0 03        	bne dmsg2		; not on a new line.
000D82  3  20 50 0E     	jsr nexlin		; next line down.
000D85  3               dmsg2:
000D85  3  68           	pla			; retrieve string pointer
000D86  3  85 66        	sta z80_l
000D88  3  68           	pla
000D89  3  85 67        	sta z80_h
000D8B  3               
000D8B  3  A0 00        	ldy #0
000D8D  3  B1 66        	lda (z80_hl),y		; fetch last character.
000D8F  3  0A           	asl a  			; was it the end?
000D90  3  90 03        	bcc :+
000D92  3  4C 6C 07     	jmp dscor2		; yes, job done.
000D95  3               :
000D95  3  E6 66        	inc z80_l		; next character to display.
000D97  3  D0 02        	bne :+
000D99  3  E6 67        	inc z80_h
000D9B  3               :
000D9B  3  4C 6A 0D     	jmp dmsg0
000D9E  3               dmsg1:
000D9E  3  E6 rr        	inc dispy
000DA0  3  A5 rr        	lda dispy
000DA2  3  C9 18        	cmp #24
000DA4  3  90 04        	bcc dmsg4
000DA6  3  A9 00        	lda #0
000DA8  3  85 rr        	sta dispy
000DAA  3               dmsg4:
000DAA  3  A9 00        	lda #0
000DAC  3  85 rr        	sta dispx
000DAE  3  4C 85 0D     	jmp dmsg2
000DB1  3               
000DB1  3               ;prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
000DB1  3               
000DB1  3               ;----------------------------------------------------------
000DB1  3               ; Display message in big text.
000DB1  3               ;
000DB1  3               ; Input:
000DB1  3               ;  HL = string pointer
000DB1  3               ;----------------------------------------------------------
000DB1  3               
000DB1  3               bmsg1:
000DB1  3  A0 00        	ldy #0
000DB3  3  B1 66        	lda (z80_hl),y 		; get character to display.
000DB5  3  29 7F        	and #127		; only want 7 bits.
000DB7  3  C9 0D        	cmp #13
000DB9  3  F0 13        	beq bmsg2
000DBB  3  20 E3 0D     	jsr bchar 		; display big char.
000DBE  3               bmsg3:
000DBE  3  A0 00        	ldy #0
000DC0  3  B1 66        	lda (z80_hl),y 		; look at last character.
000DC2  3  48           	pha
000DC3  3  E6 66        	inc z80_l 		; next character in list.
000DC5  3  D0 02        	bne :+
000DC7  3  E6 67        	inc z80_h
000DC9  3               :
000DC9  3  68           	pla
000DCA  3  0A           	asl a  			; was terminator flag set?
000DCB  3  90 E4        	bcc bmsg1		; no, keep going.
000DCD  3  60           	rts
000DCE  3               bmsg2:
000DCE  3  A9 00        	lda #0
000DD0  3  85 rr        	sta dispx
000DD2  3  E6 rr        	inc dispy
000DD4  3  E6 rr        	inc dispy
000DD6  3  A5 rr        	lda dispy
000DD8  3  C9 17        	cmp #23
000DDA  3  90 E2        	bcc bmsg3
000DDC  3  A9 00        	lda #0
000DDE  3  85 rr        	sta dispy
000DE0  3  4C BE 0D     	jmp bmsg3
000DE3  3               
000DE3  3               ;----------------------------------------------------------
000DE3  3               ; Big character display.
000DE3  3               ;
000DE3  3               ; Input:
000DE3  3               ;  A = character
000DE3  3               ;----------------------------------------------------------
000DE3  3               
000DE3  3               bchar:
000DE3  3  85 64        	sta z80_e		; save char in lb
000DE5  3  A9 00        	lda #0
000DE7  3  85 65        	sta z80_d		; reset hb
000DE9  3               
000DE9  3  06 64        	asl z80_e 		; multiply char by 8.
000DEB  3  26 65        	rol z80_d
000DED  3  06 64        	asl z80_e
000DEF  3  26 65        	rol z80_d
000DF1  3  06 64        	asl z80_e
000DF3  3  26 65        	rol z80_d		; de = a*8
000DF5  3               
000DF5  3  18           	clc			; de = Fontpointer + a*8
000DF6  3  A5 64        	lda z80_e
000DF8  3  69 9B        	adc #<(FONT-256) 		; address of font.
000DFA  3  85 64        	sta z80_e
000DFC  3  A5 65        	lda z80_d
000DFE  3  69 55        	adc #>(FONT-256)
000E00  3  85 65        	sta z80_d
000E02  3               
000E02  3  20 63 08     	jsr gprad 		; get screen address.
000E05  3               
000E05  3  A2 00        	ldx #0			; height of character in font.
000E07  3               bchar0:
000E07  3  A0 00        	ldy #0
000E09  3  B1 64        	lda (z80_de),y 		; get a bit of the font.
000E0B  3               
000E0B  3               .if gflag
000E0B  3               	and andeor
000E0B  3               	eor andeor+1
000E0B  3               .endif
000E0B  3               .if iflag
000E0B  3               	eor #$ff
000E0B  3               .endif
000E0B  3               
000E0B  3  91 rr        	sta (scraddr),y
000E0D  3  48           	pha
000E0E  3  20 1C 11     	jsr nline 		; next line down.
000E11  3  68           	pla
000E12  3  91 rr        	sta (scraddr),y
000E14  3  20 1C 11     	jsr nline 		; next line down.
000E17  3               
000E17  3  18           	clc
000E18  3  E6 64        	inc z80_e 		; next line of font.
000E1A  3  D0 02        	bne :+
000E1C  3  E6 65        	inc z80_d
000E1E  3               :
000E1E  3  E8           	inx
000E1F  3  E0 08        	cpx #8
000E21  3  D0 E4        	bne bchar0
000E23  3               
000E23  3  20 49 0E     	jsr nexpos		; display position.
000E26  3  D0 05        	bne bchar2 		; not on a new line.
000E28  3               bchar3:
000E28  3  E6 rr        	inc dispy
000E2A  3  20 50 0E     	jsr nexlin 		; next line check.
000E2D  3               bchar2:
000E2D  3  4C 6C 07     	jmp dscor2		; tidy up line and column variables.
000E30  3               
000E30  3               
000E30  3               ;-------------------------------------------------
000E30  3               ; Display a character.
000E30  3               ;
000E30  3               ; Input:
000E30  3               ;  A = character
000E30  3               ;-------------------------------------------------
000E30  3               
000E30  3               achar:
000E30  3  85 63        	sta z80_b 		; copy to b.
000E32  3  20 5E 0E     	jsr preprt 		; get ready to print.
000E35  3  A5 63        	lda z80_b		; character in accumulator.
000E37  3  A6 rr        	ldx prtmod 		; print mode.
000E39  3  F0 03        	beq :+
000E3B  3  4C E3 0D     	jmp bchar 		; no, double-height text.
000E3E  3               :
000E3E  3  20 9A 08     	jsr pchar 		; display character.
000E41  3  20 49 0E     	jsr nexpos 		; display position.
000E44  3  F0 E2        	beq bchar3		; next line down.
000E46  3  4C 2D 0E     	jmp bchar2 		; tidy up.
000E49  3               
000E49  3               
000E49  3               ;-------------------------------------------------
000E49  3               ; Get next print column position.
000E49  3               ;-------------------------------------------------
000E49  3               
000E49  3               nexpos:
000E49  3  E6 rr        	inc dispx		; move along one position.
000E4B  3  A5 rr        	lda dispx 		; get coordinate.
000E4D  3  29 1F        	and #31
000E4F  3  60           	rts 			; return with status in zero flag.
000E50  3               
000E50  3               ;-------------------------------------------------
000E50  3               ; Get next print line position.
000E50  3               ;-------------------------------------------------
000E50  3               
000E50  3               nexlin:
000E50  3  E6 rr        	inc dispy 		; newline.
000E52  3  A5 rr        	lda dispy		; vertical position.
000E54  3  C9 18        	cmp #24			; past screen edge?
000E56  3  B0 01        	bcs :+
000E58  3  60           	rts			; no, still okay.
000E59  3               :
000E59  3  A9 00        	lda #0			; restart at top.
000E5B  3  85 rr        	sta dispy
000E5D  3  60           	rts
000E5E  3               
000E5E  3               ;--------------------------------------------------------
000E5E  3               ; Pre-print preliminaries.
000E5E  3               ;--------------------------------------------------------
000E5E  3               
000E5E  3               preprt:
000E5E  3  A9 9B        	lda #<(FONT-256)		; font pointer.
000E60  3  8D 17 07     	sta grbase		; set up graphics base.
000E63  3  A9 55        	lda #>(FONT-256)
000E65  3  8D 18 07     	sta grbase+1
000E68  3               prescr:
000E68  3  A5 rr        	lda charx 		; display coordinates.
000E6A  3  85 rr        	sta dispx		; set up general coordinates.
000E6C  3  A5 rr        	lda chary
000E6E  3  85 rr        	sta dispy
000E70  3  60           	rts
000E71  3               
000E71  3               ;--------------------------------------------------------------
000E71  3               ; Get messagenr x in hl
000E71  3               ;
000E71  3               ; Input:
000E71  3               ;  HL = pointer to message list
000E71  3               ;  X  = message number.
000E71  3               ;--------------------------------------------------------------
000E71  3               
000E71  3               getwrd:
000E71  3  E0 00        	cpx #0
000E73  3  D0 01        	bne:+ 			; first word in list?
000E75  3  60           	rts 			; yep, don't search.
000E76  3               :
000E76  3  A0 00        	ldy #0
000E78  3               getwd0:
000E78  3  B1 66        	lda (z80_hl),y
000E7A  3  48           	pha
000E7B  3  E6 66        	inc z80_l
000E7D  3  D0 02        	bne :+
000E7F  3  E6 67        	inc z80_h
000E81  3               :
000E81  3  68           	pla
000E82  3  C9 80        	cmp #128		; found end?
000E84  3  30 F2        	bmi getwd0		; no, carry on.
000E86  3  CA           	dex			; until we have right number.
000E87  3  D0 EF        	bne getwd0
000E89  3  60           	rts
000E8A  3               
000E8A  3               ;-----------------------------------------------------------
000E8A  3               ; Bubble sort.
000E8A  3               ;-----------------------------------------------------------
000E8A  3               
000E8A  3               bsort:
000E8A  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
000E8C  3  85 rr        	sta qscnt
000E8E  3               
000E8E  3  A9 A6        	lda #<sprtab 		; sprite table.
000E90  3  85 68        	sta z80_x
000E92  3  A9 15        	lda #>sprtab
000E94  3  85 69        	sta z80_i
000E96  3               bsort0:
000E96  3  A0 00        	ldy #0
000E98  3  B1 68        	lda (z80_ix),y 		; first sprite type.
000E9A  3  C9 FF        	cmp #255 		; is it switched off?
000E9C  3  F0 30        	beq swemp		; yes, may need to switch another in here.
000E9E  3               
000E9E  3  A0 11        	ldy #TABSIZ
000EA0  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
000EA2  3  C9 FF        	cmp #255 		; is it enabled?
000EA4  3  F0 0A        	beq bsort2 		; no, nothing to swap.
000EA6  3               
000EA6  3  A0 14        	ldy #TABSIZ+3
000EA8  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
000EAA  3  A0 03        	ldy #3
000EAC  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
000EAE  3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
000EB0  3               bsort2:
000EB0  3  18           	clc
000EB1  3  A5 68        	lda z80_x
000EB3  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
000EB5  3  85 68        	sta z80_x
000EB7  3  90 02        	bcc :+
000EB9  3  E6 69        	inc z80_i
000EBB  3               :
000EBB  3  C6 rr        	dec qscnt
000EBD  3  D0 D7        	bne bsort0		; repeat for remaining sprites.
000EBF  3  60           	rts
000EC0  3               
000EC0  3               ;qscnt:	.byte 0
000EC0  3               
000EC0  3               bsort1:
000EC0  3  A0 11        	ldy #TABSIZ
000EC2  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
000EC4  3  C9 FF        	cmp #255		; is it enabled?
000EC6  3  F0 E8        	beq bsort2		; no, nothing to swap.
000EC8  3  20 DC 0E     	jsr swspr		; swap positions.
000ECB  3  4C B0 0E     	jmp bsort2
000ECE  3               swemp:
000ECE  3  A0 11        	ldy #TABSIZ
000ED0  3  B1 68        	lda (z80_ix),y		; next table entry.
000ED2  3  C9 FF        	cmp #255		; is that one on?
000ED4  3  F0 DA        	beq bsort2		; no, nothing to swap.
000ED6  3  20 DC 0E     	jsr swspr		; swap positions.
000ED9  3  4C B0 0E     	jmp bsort2
000EDC  3               
000EDC  3               ; Swap sprites.
000EDC  3               
000EDC  3               swspr:
000EDC  3  A5 68        	lda z80_x		; table address
000EDE  3  85 64        	sta z80_e		; copy to de pair.
000EE0  3  85 66        	sta z80_l		; copy to hl pair.
000EE2  3  A5 69        	lda z80_i
000EE4  3  85 67        	sta z80_h
000EE6  3  85 65        	sta z80_d
000EE8  3               
000EE8  3  18           	clc
000EE9  3  A5 66        	lda z80_l
000EEB  3  69 11        	adc #TABSIZ		; distance to second entry.
000EED  3  85 66        	sta z80_l
000EEF  3  90 02        	bcc :+
000EF1  3  E6 67        	inc z80_h
000EF3  3               :
000EF3  3  A9 11        	lda #TABSIZ		; bytes to swap.
000EF5  3  85 63        	sta z80_b
000EF7  3  A0 00        	ldy #0
000EF9  3               swspr0:
000EF9  3  B1 66        	lda (z80_hl),y		; fetch second byte.
000EFB  3  48           	pha
000EFC  3  B1 64        	lda (z80_de),y 		; fetch first byte.
000EFE  3  91 66        	sta (z80_hl),y 		; copy to second.
000F00  3  68           	pla
000F01  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
000F03  3               
000F03  3  E6 64        	inc z80_e 		; next byte.
000F05  3  D0 02        	bne :+
000F07  3  E6 65        	inc z80_d
000F09  3               :
000F09  3  E6 66        	inc z80_l 		; next byte.
000F0B  3  D0 02        	bne :+
000F0D  3  E6 67        	inc z80_h
000F0F  3               :
000F0F  3  C6 63        	dec z80_b
000F11  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
000F13  3  60           	rts
000F14  3               
000F14  3               ;----------------------------------------------------
000F14  3               ; Process sprites.
000F14  3               ;----------------------------------------------------
000F14  3               
000F14  3               pspr:
000F14  3  A9 0C        	lda #NUMSPR		; sprites to process.
000F16  3  85 rr        	sta sprptr
000F18  3               
000F18  3  A9 A6        	lda #<sprtab 		; sprite table.
000F1A  3  85 68        	sta z80_x
000F1C  3  A9 15        	lda #>sprtab
000F1E  3  85 69        	sta z80_i
000F20  3               pspr1:
000F20  3  A0 00        	ldy #0
000F22  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
000F24  3  C9 09        	cmp #9 			; within range of sprite types?
000F26  3  B0 03        	bcs :+
000F28  3  20 3B 0F     	jsr pspr2 		; yes, process this one.
000F2B  3               :
000F2B  3  18           	clc
000F2C  3  A5 68        	lda z80_x
000F2E  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
000F30  3  85 68        	sta z80_x
000F32  3  90 02        	bcc :+
000F34  3  E6 69        	inc z80_i		; next sprite.
000F36  3               :
000F36  3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
000F38  3  D0 E6        	bne pspr1
000F3A  3  60           	rts
000F3B  3               
000F3B  3               ;sprptr:	.byte 0
000F3B  3               
000F3B  3               pspr2:
000F3B  3  A5 68        	lda z80_x 		; store original sprite pointer.
000F3D  3  85 rr        	sta ogptr
000F3F  3  A5 69        	lda z80_i
000F41  3  85 rr        	sta ogptr+1
000F43  3  20 4F 0F     	jsr pspr3		; do the routine.
000F46  3               rtorg:
000F46  3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
000F48  3  85 68        	sta z80_x
000F4A  3  A5 rr        	lda ogptr+1
000F4C  3  85 69        	sta z80_i
000F4E  3               rtorg0:
000F4E  3  60           	rts
000F4F  3               
000F4F  3               pspr3:
000F4F  3  A9 84        	lda #<evtyp0		; sprite type events list.
000F51  3  85 66        	sta z80_l
000F53  3  A9 0F        	lda #>evtyp0
000F55  3  85 67        	sta z80_h
000F57  3               pspr4:
000F57  3  B1 68        	lda (z80_ix),y
000F59  3  0A           	asl a			; double accumulator.
000F5A  3  18           	clc
000F5B  3  65 66        	adc z80_l
000F5D  3  85 66        	sta z80_l
000F5F  3  90 02        	bcc :+
000F61  3  E6 67        	inc z80_h
000F63  3               :
000F63  3  B1 66        	lda (z80_hl),y
000F65  3  85 64        	sta z80_e 		; copy to de.
000F67  3  48           	pha
000F68  3               
000F68  3  E6 66        	inc z80_l 		; next byte of address.
000F6A  3  D0 02        	bne :+
000F6C  3  E6 67        	inc z80_h
000F6E  3               :
000F6E  3  B1 66        	lda (z80_hl),y 		; address high.
000F70  3  85 65        	sta z80_d
000F72  3               
000F72  3  48           	pha	 		; swap address into hl.
000F73  3  A5 67        	lda z80_h
000F75  3  85 65        	sta z80_d
000F77  3  68           	pla
000F78  3  85 67        	sta z80_h
000F7A  3  68           	pla
000F7B  3  85 66        	sta z80_l
000F7D  3  A5 66        	lda z80_l
000F7F  3  85 64        	sta z80_e
000F81  3               
000F81  3  6C 66 00     	jmp (z80_hl) 		; go there.
000F84  3               
000F84  3               ;ogptr:	.word 0			; original sprite pointer.
000F84  3               
000F84  3               ; Address of each sprite type's routine.
000F84  3               
000F84  3  F7 16        evtyp0:	.word evnt00
000F86  3  9C 1D        evtyp1:	.word evnt01
000F88  3  F1 1E        evtyp2:	.word evnt02
000F8A  3  8E 1F        evtyp3:	.word evnt03
000F8C  3  36 21        evtyp4:	.word evnt04
000F8E  3  34 22        evtyp5:	.word evnt05
000F90  3  F2 22        evtyp6:	.word evnt06
000F92  3  74 25        evtyp7:	.word evnt07
000F94  3  18 26        evtyp8:	.word evnt08
000F96  3               
000F96  3               ;--------------------------------------------------------------
000F96  3               ; Display sprites.
000F96  3               ;
000F96  3               ; Input:
000F96  3               ;  IX = sprite table
000F96  3               ;--------------------------------------------------------------
000F96  3               
000F96  3               dspr:
000F96  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
000F98  3  85 rr        	sta sprcnt
000F9A  3               dspr0:
000F9A  3  A0 00        	ldy #0
000F9C  3  B1 68        	lda (z80_ix),y 		; get sprite type.
000F9E  3  C9 FF        	cmp #255 		; is it enabled?
000FA0  3  D0 42        	bne dspr1 		; yes, it needs deleting.
000FA2  3               dspr5:
000FA2  3  A0 05        	ldy #5
000FA4  3  B1 68        	lda (z80_ix),y 		; new type.
000FA6  3  C9 FF        	cmp #255		; is it enabled?
000FA8  3  D0 77        	bne dspr3 		; yes, it needs drawing.
000FAA  3               dspr2:
000FAA  3  A0 05        	ldy #5
000FAC  3  B1 68        	lda (z80_ix),y 		; copy new type.
000FAE  3  A0 00        	ldy #0
000FB0  3  91 68        	sta (z80_ix),y
000FB2  3  A0 06        	ldy #6
000FB4  3  B1 68        	lda (z80_ix),y 		; copy new image number.
000FB6  3  A0 01        	ldy #1
000FB8  3  91 68        	sta (z80_ix),y
000FBA  3  A0 07        	ldy #7
000FBC  3  B1 68        	lda (z80_ix),y 		; copy new frame.
000FBE  3  A0 02        	ldy #2
000FC0  3  91 68        	sta (z80_ix),y
000FC2  3  A0 08        	ldy #8
000FC4  3  B1 68        	lda (z80_ix),y 		; copy new y.
000FC6  3  A0 03        	ldy #3
000FC8  3  91 68        	sta (z80_ix),y
000FCA  3  A0 09        	ldy #9
000FCC  3  B1 68        	lda (z80_ix),y 		; copy new x.
000FCE  3  A0 04        	ldy #4
000FD0  3  91 68        	sta (z80_ix),y
000FD2  3               
000FD2  3  18           	clc
000FD3  3  A5 68        	lda z80_x
000FD5  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
000FD7  3  85 68        	sta z80_x
000FD9  3  A5 69        	lda z80_i
000FDB  3  69 00        	adc #0
000FDD  3  85 69        	sta z80_i 		; next sprite.
000FDF  3  C6 rr        	dec sprcnt
000FE1  3  D0 B7        	bne dspr0		; repeat for remaining sprites.
000FE3  3  60           	rts
000FE4  3               dspr1:
000FE4  3  A0 05        	ldy #5
000FE6  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
000FE8  3  C9 FF        	cmp #255		; is this enabled?
000FEA  3  D0 06        	bne dspr4 		; yes, display both.
000FEC  3               dspr6:
000FEC  3  20 BC 10     	jsr sspria 		; show single sprite.
000FEF  3  4C AA 0F     	jmp dspr2
000FF2  3               
000FF2  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
000FF2  3               
000FF2  3               dspr4:
000FF2  3  A0 04        	ldy #4
000FF4  3  B1 68        	lda (z80_ix),y		; old x.
000FF6  3  A0 09        	ldy #9
000FF8  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
000FFA  3  D0 1F        	bne dspr7 		; they differ, need to redraw.
000FFC  3               
000FFC  3  A0 03        	ldy #3
000FFE  3  B1 68        	lda (z80_ix),y		; old y.
001000  3  A0 08        	ldy #8
001002  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
001004  3  D0 15        	bne dspr7		; they differ, need to redraw.
001006  3               
001006  3  A0 02        	ldy #2
001008  3  B1 68        	lda (z80_ix),y 		; old frame.
00100A  3  A0 07        	ldy #7
00100C  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
00100E  3  4C 1B 10     	jmp dspr7 		; they differ, need to redraw.
001011  3               
001011  3  A0 01        	ldy #1
001013  3  B1 68        	lda (z80_ix),y 		; old image.
001015  3  A0 06        	ldy #6
001017  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
001019  3  F0 8F        	beq dspr2		; everything is the same, don't redraw.
00101B  3               dspr7:
00101B  3  20 D4 10     	jsr sspric 		; delete old sprite, draw new one simultaneously.
00101E  3  4C AA 0F     	jmp dspr2
001021  3               dspr3:
001021  3  20 CE 10     	jsr ssprib 		; show single sprite.
001024  3  4C AA 0F     	jmp dspr2
001027  3               
001027  3               ;sprcnt:	.byte 0
001027  3               
001027  3               ;-----------------------------------------
001027  3               ; Get sprite address calculations.
001027  3               ; gspran = new sprite, gsprad = old sprite.
001027  3               ;
001027  3               ; Input:
001027  3               ;  IX = sprite address
001027  3               ;-----------------------------------------
001027  3               
001027  3               gspran:
001027  3  A0 08        	ldy #8
001029  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
00102B  3  85 rr        	sta dispy
00102D  3  A0 09        	ldy #9
00102F  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
001031  3  85 rr        	sta dispx
001033  3  A0 06        	ldy #6
001035  3  B1 68        	lda (z80_ix),y 		; new sprite image.
001037  3  20 C8 13     	jsr gfrm		; fetch start frame for this sprite.
00103A  3               
00103A  3  A0 00        	ldy #0
00103C  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
00103E  3  A0 07        	ldy #7
001040  3  18           	clc
001041  3  71 68        	adc (z80_ix),y 		; new add frame number.
001043  3  4C 62 10     	jmp gspra0
001046  3               
001046  3               ;-----------------------------------------
001046  3               ; Calculate old sprite address
001046  3               ;
001046  3               ; Input:
001046  3               ;  IX = sprite address
001046  3               ;
001046  3               ; Output:
001046  3               ;  B  = right byte mask
001046  3               ;  C  = left byte mask
001046  3               ;  DE = spriteframe address
001046  3               ;  scraddr = screenaddress(dispx,dispy)
001046  3               ;-----------------------------------------
001046  3               
001046  3               gsprad:
001046  3  A0 03        	ldy #3
001048  3  B1 68        	lda (z80_ix),y		; y coordinate.
00104A  3  85 rr        	sta dispy
00104C  3  A0 04        	ldy #4
00104E  3  B1 68        	lda (z80_ix),y		; x coordinate.
001050  3  85 rr        	sta dispx
001052  3  A0 01        	ldy #1
001054  3  B1 68        	lda (z80_ix),y 		; sprite image.
001056  3  20 C8 13     	jsr gfrm 		; fetch start frame for this sprite.
001059  3               
001059  3  A0 00        	ldy #0
00105B  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
00105D  3  A0 02        	ldy #2
00105F  3  18           	clc
001060  3  71 68        	adc (z80_ix),y 		; add frame number.
001062  3               gspra0:
001062  3  4A           	lsr a	  		; multiply by 128.
001063  3  85 65        	sta z80_d 		; store in d.
001065  3  8D BA 10     	sta tmp1
001068  3  A9 00        	lda #0
00106A  3  6A           	ror a
00106B  3  85 64        	sta z80_e 		; got low byte.
00106D  3  8D BB 10     	sta tmp2
001070  3               .if bflag
001070  3               	lsr tmp1
001070  3               	ror tmp2
001070  3               	clc
001070  3               	lda tmp2
001070  3               	adc z80_e
001070  3               	sta z80_e
001070  3               	lda tmp1
001070  3               	adc z80_d
001070  3               	sta z80_d
001070  3               .endif
001070  3  18           	clc 			; address of play sprites.
001071  3  A5 64        	lda z80_e
001073  3  69 B7        	adc #<sprgfx
001075  3  85 64        	sta z80_e
001077  3  A5 65        	lda z80_d
001079  3  69 31        	adc #>sprgfx
00107B  3  85 65        	sta z80_d
00107D  3               
00107D  3  A5 rr        	lda dispx 		; y coordinate.
00107F  3  29 06        	and #6 			; position within byte boundary.
001081  3  AA           	tax	 		; low byte of table displacement.
001082  3               
001082  3  0A           	asl a	  		; multiply by 32.
001083  3  0A           	asl a  			; already a multiple
001084  3  0A           	asl a  			; of 2, so just 4
001085  3               .if bflag
001085  3               	sta tmp1
001085  3               	asl a  			; shifts needed.
001085  3               	clc
001085  3               	adc tmp1
001085  3               .else
001085  3  0A           	asl a  			; shifts needed.
001086  3               .endif
001086  3  18           	clc 			; add to sprite address.
001087  3  65 64        	adc z80_e
001089  3  85 64        	sta z80_e
00108B  3  90 02        	bcc :+
00108D  3  E6 65        	inc z80_d
00108F  3               :
00108F  3  BD B2 10     	lda spmask,x		 ; pointer to mask table.
001092  3  85 62        	sta z80_c 		; left mask.
001094  3  BD B3 10     	lda spmask+1,x
001097  3  85 63        	sta z80_b 		; right mask.
001099  3               
001099  3               ;------------------------------------------------------------------
001099  3               ; Drop into screen address routine.
001099  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
001099  3               ;------------------------------------------------------------------
001099  3               
001099  3               scadd:
001099  3  A6 rr        	ldx dispy
00109B  3  E0 C0        	cpx #192
00109D  3  90 02        	bcc :+
00109F  3  A2 C0        	ldx #192
0010A1  3               :
0010A1  3  A5 rr        	lda dispx
0010A3  3  4A           	lsr a
0010A4  3  4A           	lsr a
0010A5  3  4A           	lsr a
0010A6  3  18           	clc
0010A7  3  7D 00 9B     	adc SCADTB_lb,x
0010AA  3  85 rr        	sta scraddr
0010AC  3  BD 00 9C     	lda SCADTB_hb,x
0010AF  3  85 rr        	sta scraddr+1
0010B1  3  60           	rts
0010B2  3               
0010B2  3  FF 00 3F C0  spmask:	.byte 255,0,63,192,15,240,3,252
0010B6  3  0F F0 03 FC  
0010BA  3  00           tmp1:	.byte 0
0010BB  3  00           tmp2:	.byte 0
0010BC  3               
0010BC  3               ;-----------------------------------------------------------------
0010BC  3               ; These are the sprite routines.
0010BC  3               ; sspria = single sprite, old (ix).
0010BC  3               ; ssprib = single sprite, new (ix+5).
0010BC  3               ; sspric = both sprites, old (ix) and new (ix+5).
0010BC  3               ;-----------------------------------------------------------------
0010BC  3               
0010BC  3               sspria:
0010BC  3  20 46 10     	jsr gsprad		; get old sprite address.
0010BF  3               sspri2:
0010BF  3  A9 10        	lda #SPR_HGT			; vertical lines.
0010C1  3  8D CD 10     	sta acnt
0010C4  3               sspri0:
0010C4  3  20 EC 10     	jsr dline		; draw a line.
0010C7  3  CE CD 10     	dec acnt
0010CA  3  D0 F8        	bne sspri0		; repeat 16 times
0010CC  3  60           	rts
0010CD  3               
0010CD  3  00           acnt:	.byte 0
0010CE  3               
0010CE  3               ;-----------------------------------------------------------------
0010CE  3               
0010CE  3               ssprib:
0010CE  3  20 27 10     	jsr gspran 		; get new sprite address.
0010D1  3  4C BF 10     	jmp sspri2
0010D4  3               
0010D4  3               ;-----------------------------------------------------------------
0010D4  3               
0010D4  3               ;ccnt = $7c
0010D4  3               
0010D4  3               sspric:
0010D4  3  20 46 10     	jsr gsprad 		; get old sprite address.
0010D7  3  20 BC 59     	jsr exx  		; store addresses.
0010DA  3  20 27 10     	jsr gspran 		; get new sprite addresses.
0010DD  3               sspri1:
0010DD  3  A9 10        	lda #SPR_HGT
0010DF  3  85 rr        	sta ccnt
0010E1  3               lloop:
0010E1  3  20 EC 10     	jsr dline 		; draw a line.
0010E4  3  20 28 11     	jsr ddline 		; delete a line.
0010E7  3  C6 rr        	dec ccnt
0010E9  3  D0 F6        	bne lloop
0010EB  3               
0010EB  3  60           	rts
0010EC  3               
0010EC  3               ;-------------------------------------------------------------
0010EC  3               ; Drop through.
0010EC  3               ; Line drawn, now work out next target address.
0010EC  3               ;
0010EC  3               ; Input:
0010EC  3               ;  B  = right mask
0010EC  3               ;  C  = left mask
0010EC  3               ;  DE = spriteaddress
0010EC  3               ;  scraddr = screen address
0010EC  3               ;-------------------------------------------------------------
0010EC  3               
0010EC  3               dline:
0010EC  3               .if hflag
0010EC  3               	lda scraddr
0010EC  3               	and #31
0010EC  3               	sta dispx
0010EC  3               	lda scraddr+1
0010EC  3               	and #31
0010EC  3               	sta dispy
0010EC  3               	jsr pradd
0010EC  3               	ldy #0
0010EC  3               	lda (bufaddr),y
0010EC  3               	cmp #CUSTOM
0010EC  3               	beq sline
0010EC  3               .endif
0010EC  3  A0 00        	ldy #0
0010EE  3  B1 64        	lda (z80_de),y 		; graphic data.
0010F0  3  25 62        	and z80_c 		; mask away what's not needed.
0010F2  3  51 rr        	eor (scraddr),y 	; XOR with what's there.
0010F4  3  91 rr        	sta (scraddr),y 	; bung it in.
0010F6  3               sline:
0010F6  3  E6 rr        	inc scraddr 		; next screen address.
0010F8  3  E6 rr        	inc scraddr 		; next screen address.
0010FA  3               .if hflag
0010FA  3               	ldy #2
0010FA  3               	lda (bufaddr),y
0010FA  3               	cmp #CUSTOM
0010FA  3               	beq sline2
0010FA  3               .endif
0010FA  3  A0 00        	ldy #0
0010FC  3  B1 64        	lda (z80_de),y 		; fetch data.
0010FE  3  25 63        	and z80_b 		; mask away unwanted bits.
001100  3  51 rr        	eor (scraddr),y 	; XOR with what's there.
001102  3  91 rr        	sta (scraddr),y 	; bung it in.
001104  3               sline2:
001104  3  E6 64        	inc z80_e 		; next graphic.
001106  3  D0 02        	bne :+
001108  3  E6 65        	inc z80_d
00110A  3               :
00110A  3  C6 rr        	dec scraddr 		; one character cell to the left.
00110C  3               .if hflag
00110C  3               	ldy #1
00110C  3               	lda (bufaddr),y
00110C  3               	cmp #CUSTOM
00110C  3               	beq sline3
00110C  3               .endif
00110C  3  A0 00        	ldy #0
00110E  3  B1 64        	lda (z80_de),y 		; second bit of data.
001110  3  51 rr        	eor (scraddr),y 	; XOR with what's there.
001112  3  91 rr        	sta (scraddr),y 	; bung it in.
001114  3               
001114  3               sline3:
001114  3  E6 64        	inc z80_e 		; point to next line of data.
001116  3  D0 02        	bne :+
001118  3  E6 65        	inc z80_d
00111A  3               :
00111A  3  C6 rr        	dec scraddr 		; another char left.
00111C  3               
00111C  3               ;----------------------------------------------------------------------
00111C  3               ; Line drawn, now work out next target address.
00111C  3               ;----------------------------------------------------------------------
00111C  3               
00111C  3               nline:
00111C  3  18           	clc
00111D  3  A5 rr        	lda scraddr 		; get low byte of address.
00111F  3  69 20        	adc #$20
001121  3  85 rr        	sta scraddr 		; new low byte of address.
001123  3  90 02        	bcc :+
001125  3  E6 rr        	inc scraddr+1 		; new high byte of address.
001127  3               :
001127  3  60           	rts
001128  3               
001128  3               ;-------------------------------------------------------------
001128  3               ; Line drawn, now work out next target address.
001128  3               ;
001128  3               ; Input:
001128  3               ;  BP  = right mask
001128  3               ;  CP  = left mask
001128  3               ;  DEP = spriteaddress
001128  3               ;  z80_hlp = screen address
001128  3               ;-------------------------------------------------------------
001128  3               
001128  3               ddline:
001128  3               .if hflag
001128  3               	lda z80_hlp
001128  3               	and #31
001128  3               	sta dispx
001128  3               	lda z80_hlp+1
001128  3               	and #31
001128  3               	sta dispy
001128  3               	jsr pradd
001128  3               	ldy #0
001128  3               	lda (bufaddr),y
001128  3               	cmp #CUSTOM
001128  3               	beq dsline
001128  3               .endif
001128  3  A0 00        	ldy #0
00112A  3  B1 70        	lda (z80_dep),y 	; graphic data.
00112C  3  25 6E        	and z80_cp 		; mask away what's not needed.
00112E  3  51 72        	eor (z80_hlp),y 	; XOR with what's there.
001130  3  91 72        	sta (z80_hlp),y 	; bung it in.
001132  3               dsline:
001132  3  E6 72        	inc z80_lp 		; next screen address.
001134  3  E6 72        	inc z80_lp 		; next screen address.
001136  3               .if hflag
001136  3               	ldy #2
001136  3               	lda (bufaddr),y
001136  3               	cmp #CUSTOM
001136  3               	beq dsline2
001136  3               .endif
001136  3  A0 00        	ldy #0
001138  3  B1 70        	lda (z80_dep),y 	; fetch data.
00113A  3  25 6F        	and z80_bp 		; mask away unwanted bits.
00113C  3  51 72        	eor (z80_hlp),y 	; XOR with what's there.
00113E  3  91 72        	sta (z80_hlp),y 	; bung it in.
001140  3               dsline2:
001140  3  E6 70        	inc z80_ep 		; next graphic.
001142  3  D0 02        	bne :+
001144  3  E6 71        	inc z80_dp
001146  3               :
001146  3  C6 72        	dec z80_lp 		; one character cell to the left.
001148  3               .if hflag
001148  3               	ldy #1
001148  3               	lda (bufaddr),y
001148  3               	cmp #CUSTOM
001148  3               	beq dsline3
001148  3               .endif
001148  3  A0 00        	ldy #0
00114A  3  B1 70        	lda (z80_dep),y 	; second bit of data.
00114C  3  51 72        	eor (z80_hlp),y 	; XOR with what's there.
00114E  3  91 72        	sta (z80_hlp),y 	; bung it in.
001150  3               dsline3:
001150  3  E6 70        	inc z80_ep 		; point to next line of data.
001152  3  D0 02        	bne :+
001154  3  E6 71        	inc z80_dp
001156  3               :
001156  3  C6 72        	dec z80_hlp 		; another char left.
001158  3               
001158  3               ;----------------------------------------------------------------------
001158  3               ; Line drawn, now work out next target address.
001158  3               ;----------------------------------------------------------------------
001158  3               
001158  3               dnline:
001158  3  18           	clc
001159  3  A5 72        	lda z80_lp 		; get low byte of address.
00115B  3  69 20        	adc #$20
00115D  3  85 72        	sta z80_lp 		; new low byte of address.
00115F  3  90 02        	bcc :+
001161  3  E6 73        	inc z80_hp 		; new high byte of address.
001163  3               :
001163  3  60           	rts
001164  3               
001164  3               ;-----------------------------------------------------------
001164  3               ; Animates a sprite.
001164  3               ;
001164  3               ; Input:
001164  3               ;  IX = sprite address
001164  3               ;  HL = last sprite address
001164  3               ;-----------------------------------------------------------
001164  3               
001164  3               animsp:
001164  3  25 rr        	and frmno
001166  3  F0 01        	beq :+
001168  3  60           	rts
001169  3               :
001169  3  A0 06        	ldy #6
00116B  3  B1 68        	lda (z80_ix),y		; sprite image
00116D  3  20 C8 13     	jsr gfrm		; get frame data.
001170  3               
001170  3  E6 66        	inc z80_l		; point to frames.
001172  3  D0 02        	bne :+
001174  3  E6 67        	inc z80_h
001176  3               :
001176  3  A0 07        	ldy #7
001178  3  B1 68        	lda (z80_ix),y		; sprite frame.
00117A  3  18           	clc
00117B  3  69 01        	adc #1			; next one along.
00117D  3  A0 00        	ldy #0
00117F  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
001181  3  90 02        	bcc anims0		; no, not yet.
001183  3  A9 00        	lda #0			; start at first frame.
001185  3               anims0:
001185  3  A0 07        	ldy #7
001187  3  91 68        	sta (z80_ix),y		; new frame.
001189  3  60           	rts
00118A  3               
00118A  3               ;--------------------------------------------------------------
00118A  3               ; Animate back
00118A  3               ;
00118A  3               ; Input:
00118A  3               ;  IX = sprite address
00118A  3               ;  HL = last sprite address
00118A  3               ;--------------------------------------------------------------
00118A  3               
00118A  3               animbk:
00118A  3  25 rr        	and frmno
00118C  3  F0 01        	beq :+
00118E  3  60           	rts
00118F  3               :
00118F  3  A0 06        	ldy #6
001191  3  B1 68        	lda (z80_ix),y		; sprite image.
001193  3  20 C8 13     	jsr gfrm		; get frame data.
001196  3               
001196  3  E6 66        	inc z80_l 		; point to frames.
001198  3  D0 02        	bne :+
00119A  3  E6 67        	inc z80_h
00119C  3               :
00119C  3  A0 07        	ldy #7
00119E  3  B1 68        	lda (z80_ix),y 		; sprite frame.
0011A0  3  F0 03        	beq :+
0011A2  3  4C A9 11     	jmp rtanb0 		; yes, start at end.
0011A5  3               :
0011A5  3  A0 00        	ldy #0
0011A7  3  B1 66        	lda (z80_hl),y 		; last sprite.
0011A9  3               rtanb0:
0011A9  3  38           	sec
0011AA  3  E9 01        	sbc #1			; next one along.
0011AC  3  4C 85 11     	jmp anims0		; set new frame.
0011AF  3               
0011AF  3               ;--------------------------------------------------------------
0011AF  3               ; Check for collision with other sprite, strict enforcement.
0011AF  3               ;
0011AF  3               ; Input:
0011AF  3               ;  b		= sprite to test for
0011AF  3               ;  ix		= current sprite pointer
0011AF  3               ;
0011AF  3               ; global:	b
0011AF  3               ; local:	x,y,hl,de,skptr
0011AF  3               ; calls:	-
0011AF  3               ;--------------------------------------------------------------
0011AF  3               
0011AF  3               sktyp:
0011AF  3  A9 A6        	lda #<sprtab				; sprite table.
0011B1  3  85 66        	sta z80_l
0011B3  3  A9 15        	lda #>sprtab
0011B5  3  85 67        	sta z80_h
0011B7  3               numsp2:
0011B7  3  A9 0C        	lda #NUMSPR				; number of sprites.
0011B9  3  85 rr        	sta sktptr
0011BB  3               sktyp0:
0011BB  3  A5 66        	lda z80_l 				; store pointer to sprite.
0011BD  3  85 rr        	sta skptr
0011BF  3  A5 67        	lda z80_h
0011C1  3  85 rr        	sta skptr+1
0011C3  3               
0011C3  3  A0 00        	ldy #0
0011C5  3  B1 66        	lda (z80_hl),y 				; get sprite type.
0011C7  3  C5 63        	cmp z80_b				; is it the type we seek?
0011C9  3  F0 1D        	beq coltyp				; yes, we can use this one.
0011CB  3               sktyp1:
0011CB  3  18           	clc
0011CC  3  A5 rr        	lda skptr				; retrieve sprite pointer.
0011CE  3  69 11        	adc #TABSIZ				; size of each entry.
0011D0  3  85 66        	sta z80_l
0011D2  3  A5 rr        	lda skptr+1
0011D4  3  69 00        	adc #0
0011D6  3  85 67        	sta z80_h
0011D8  3  C6 rr        	dec sktptr					; one less iteration.
0011DA  3  D0 DF        	bne sktyp0				; keep going until we find a slot.
0011DC  3  A9 00        	lda #0					; default to ROM address - no sprite.
0011DE  3  85 66        	sta z80_l
0011E0  3  85 67        	sta z80_h
0011E2  3  85 rr        	sta skptr				; store pointer to sprite.
0011E4  3  85 rr        	sta skptr+1
0011E6  3               
0011E6  3  18           	clc					; don't return with zero flag set.
0011E7  3  60           	rts 					; didn't find one.
0011E8  3               
0011E8  3               ;skptr:	.word 0					; search pointer.
0011E8  3               ;sktptr:	.byte 0
0011E8  3               
0011E8  3               coltyp:
0011E8  3  A0 00        	ldy #0
0011EA  3  B1 68        	lda (z80_ix),y				; current sprite type.
0011EC  3  C5 63        	cmp z80_b				; seeking sprite of same type?
0011EE  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
0011F0  3               colty0:
0011F0  3  A0 09        	ldy #9					; distance to x position in table.
0011F2  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
0011F4  3  85 64        	sta z80_e
0011F6  3  88           	dey
0011F7  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
0011F9  3  85 65        	sta z80_d
0011FB  3               
0011FB  3               ; Drop into collision detection.
0011FB  3               
0011FB  3               colc16:
0011FB  3  A0 09        	ldy #9
0011FD  3  B1 68        	lda (z80_ix),y			 	; x coord.
0011FF  3  38           	sec					; subtract x.
001200  3  E5 64        	sbc z80_e
001202  3  B0 05        	bcs  colc1a 				; result is positive.
001204  3  49 FF        	eor #$ff				; make negative positive.
001206  3  18           	clc
001207  3  69 01        	adc #1
001209  3               colc1a:
001209  3  C9 10        	cmp #16 				; within x range?
00120B  3  B0 BE        	bcs sktyp1				; no - they"ve missed.
00120D  3  85 62        	sta z80_c				; store difference.
00120F  3               
00120F  3  A0 08        	ldy #8
001211  3  B1 68        	lda (z80_ix),y				; y coord.
001213  3  38           	sec
001214  3  E5 65        	sbc z80_d				; subtract y.
001216  3  B0 05        	bcs colc1b				; result is positive.
001218  3  49 FF        	eor #$ff				; make negative positive.
00121A  3  18           	clc
00121B  3  69 01        	adc #1
00121D  3               colc1b:
00121D  3  C9 10        	cmp #16					; within y range?
00121F  3  B0 AA        	bcs sktyp1 				; no - they've missed.
001221  3  18           	clc					; add x difference.
001222  3  65 62        	adc z80_c
001224  3  C9 1A        	cmp #26					; only 5 corner pixels touching?
001226  3  B0 02        	bcs :+
001228  3  38           	sec
001229  3  60           	rts 					; carry set if there's a collision.
00122A  3               :
00122A  3  4C CB 11     	jmp sktyp1				; try next sprite in table.
00122D  3               colty1:
00122D  3  A5 68        	lda z80_x  				; compare the two.
00122F  3  C5 66        	cmp z80_l
001231  3  D0 09        	bne end_col
001233  3  A5 69        	lda z80_i
001235  3  C5 67        	cmp z80_h
001237  3  D0 03        	bne end_col
001239  3  4C CB 11     	jmp sktyp1 				; addresses are identical.
00123C  3               end_col:
00123C  3  4C F0 11     	jmp colty0
00123F  3               
00123F  3               ;-----------------------------------------------------------
00123F  3               ; Display number, left aligned
00123F  3               ;
00123F  3               ; Input:
00123F  3               ;  a		= number
00123F  3               ;
00123F  3               ; global:	-
00123F  3               ; local:	a,y,bc,hl,displ0
00123F  3               ; calls:	num2ch,dmsg3
00123F  3               ;-----------------------------------------------------------
00123F  3               
00123F  3               disply:
00123F  3  85 61        	sta z80_a
001241  3  A9 67        	lda #<displ0				; display workspace.
001243  3  85 62        	sta z80_c
001245  3  A9 12        	lda #>displ0
001247  3  85 63        	sta z80_b
001249  3  A5 61        	lda z80_a
00124B  3  20 A0 04     	jsr num2ch				; convert accumulator to string.
00124E  3               displ1:
00124E  3  C6 62        	dec z80_c				; back one character.
001250  3  D0 02        	bne :+
001252  3  C6 63        	dec z80_b
001254  3               :
001254  3  A0 00        	ldy #0
001256  3  B1 62        	lda (z80_bc),y				; fetch digit.
001258  3  09 80        	ora #128				; insert end marker.
00125A  3  91 62        	sta (z80_bc),y				; new value.
00125C  3               
00125C  3  A9 67        	lda #<displ0				; display space.
00125E  3  85 66        	sta z80_l
001260  3  A9 12        	lda #>displ0
001262  3  85 67        	sta z80_h
001264  3  4C 60 0D     	jmp dmsg3				; display the string.
001267  3               
001267  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
00126B  3               
00126B  3               ;----------------------------------------------------------------
00126B  3               ; Initialise screen.
00126B  3               ;
00126B  3               ; global:	roomtb,scno
00126B  3               ; local:	-
00126B  3               ; calls:	tstcs
00126B  3               ;----------------------------------------------------------------
00126B  3               
00126B  3               initsc:
00126B  3  AD 83 16     	lda roomtb 			; whereabouts in the map are we?
00126E  3  20 78 12     	jsr tstsc 			; find displacement.
001271  3  C9 FF        	cmp #255 			; is it valid?
001273  3  F0 02        	beq init_end 			; no, it's rubbish.
001275  3  85 rr        	sta scno			; store new room number.
001277  3               init_end:
001277  3  60           	rts
001278  3               
001278  3               ;----------------------------------------------------------------
001278  3               ; Test screen.
001278  3               ;
001278  3               ; global:	-
001278  3               ; local:	x
001278  3               ; calls:	-
001278  3               ;----------------------------------------------------------------
001278  3               
001278  3               tstsc:
001278  3  85 rr        	sta tmproom
00127A  3  18           	clc
00127B  3  69 09        	adc #MAPWID 			; add width in case we"re negative.
00127D  3  AA           	tax 				; add displacement to map data.
00127E  3  BD AE 16     	lda mapdat-MAPWID,x 		; find room number there.
001281  3  60           	rts
001282  3               
001282  3               ;tmproom:	.byte 0
001282  3               
001282  3               ;--------------------------
001282  3               ; Screen left.
001282  3               ;--------------------------
001282  3               
001282  3               scrl:
001282  3  AD 83 16     	lda roomtb 			; present room table pointer.
001285  3  38           	sec
001286  3  E9 01        	sbc #1				; room left.
001288  3               scrl0:
001288  3  20 78 12     	jsr tstsc			; test screen.
00128B  3  C9 FF        	cmp #255			; is there a screen this way?
00128D  3  D0 01        	bne :+
00128F  3  60           	rts				; no, return to loop.
001290  3               :
001290  3  A5 rr        	lda tmproom			; restore room displacement.
001292  3  8D 83 16     	sta roomtb			; new room table position.
001295  3               scrl1:
001295  3  20 6B 12     	jsr initsc 			; set new screen.
001298  3  A9 02        	lda #2
00129A  3  85 rr        	sta restfl 			; set it.
00129C  3  60           	rts
00129D  3               scrr:
00129D  3  AD 83 16     	lda roomtb 			; room table pointer.
0012A0  3  18           	clc
0012A1  3  69 01        	adc #1				; room right.
0012A3  3  4C 88 12     	jmp scrl0
0012A6  3               scru:
0012A6  3  AD 83 16     	lda roomtb 			; room table pointer.
0012A9  3  38           	sec
0012AA  3  E9 09        	sbc #MAPWID 			; room up.
0012AC  3  4C 88 12     	jmp scrl0
0012AF  3               scrd:
0012AF  3  AD 83 16     	lda roomtb 			; room table pointer.
0012B2  3  18           	clc
0012B3  3  69 09        	adc #MAPWID 			; room down.
0012B5  3  4C 88 12     	jmp scrl0
0012B8  3               
0012B8  3               ;-----------------------------------------
0012B8  3               ; Jump to new screen.
0012B8  3               ;-----------------------------------------
0012B8  3               
0012B8  3               nwscr:
0012B8  3  A2 00        	ldx #0				; start of map data.
0012BA  3               nwscr0:
0012BA  3  DD B7 16     	cmp mapdat,x
0012BD  3  F0 06        	beq nwscr1			; have we found a match for screen?
0012BF  3  E8           	inx 				; next room.
0012C0  3  E0 50        	cpx #80				; zero room count, 80 to search.
0012C2  3  D0 F6        	bne nwscr0			; keep looking.
0012C4  3  60           	rts
0012C5  3               nwscr1:
0012C5  3  8E 83 16     	stx roomtb			; set the map position.
0012C8  3  4C 95 12     	jmp scrl1			; draw new room.
0012CB  3               
0012CB  3               
0012CB  3               ;----------------------------------------------------------
0012CB  3               ; Gravity processing.
0012CB  3               ;----------------------------------------------------------
0012CB  3               
0012CB  3               grav:
0012CB  3  A0 0D        	ldy #13
0012CD  3  B1 68        	lda (z80_ix),y			; jump pointer low.
0012CF  3  85 66        	sta z80_l
0012D1  3  A0 0E        	ldy #14
0012D3  3  B1 68        	lda (z80_ix),y			; jump pointer high.
0012D5  3  85 67        	sta z80_h
0012D7  3  05 66        	ora z80_l			; merge in low byte.
0012D9  3  D0 01        	bne :+
0012DB  3  60           	rts				; if neither is set, we're not in the air.
0012DC  3               :
0012DC  3  A0 00        	ldy #0
0012DE  3  B1 66        	lda (z80_hl),y			; pixels to move.
0012E0  3  85 61        	sta z80_a
0012E2  3  C9 63        	cmp #99				; reached the end?
0012E4  3  D0 0C        	bne grav0			; no, continue.
0012E6  3               grav2:
0012E6  3  C6 66        	dec z80_l			; go back to previous value.
0012E8  3  C9 FF        	cmp #$ff
0012EA  3  D0 02        	bne :+
0012EC  3  C6 67        	dec z80_h
0012EE  3               :
0012EE  3  B1 66        	lda (z80_hl),y			; fetch that from table.
0012F0  3  85 61        	sta z80_a
0012F2  3               grav0:
0012F2  3  E6 66        	inc z80_l			; point to next table entry.
0012F4  3  D0 02        	bne :+
0012F6  3  E6 67        	inc z80_h
0012F8  3               :
0012F8  3  A5 66        	lda z80_l
0012FA  3  A0 0D        	ldy #13
0012FC  3  91 68        	sta (z80_ix),y			; store new pointer low.
0012FE  3  A5 67        	lda z80_h
001300  3  A0 0E        	ldy #14
001302  3  91 68        	sta (z80_ix),y			; store new pointer high.
001304  3               grav1:
001304  3  A5 61        	lda z80_a
001306  3  D0 01        	bne :+				; any movement required?
001308  3  60           	rts				; no, not this time.
001309  3               :
001309  3  A5 61        	lda z80_a
00130B  3  C9 80        	cmp #128			; is it up or down?
00130D  3  B0 15        	bcs gravu			; it's up.
00130F  3               gravd:
00130F  3  85 63        	sta z80_b			; set pixels to move.
001311  3               gravd0:
001311  3  20 98 0A     	jsr cangd			; can we go down?
001314  3  D0 28        	bne gravst			; can't move down, so stop.
001316  3  A0 08        	ldy #8
001318  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
00131A  3  18           	clc
00131B  3  69 01        	adc #1
00131D  3  91 68        	sta (z80_ix),y
00131F  3  C6 63        	dec z80_b
001321  3  D0 EE        	bne gravd0
001323  3  60           	rts
001324  3               gravu:
001324  3  49 FF        	eor #$ff			; flip the sign so it's positive.
001326  3  18           	clc
001327  3  69 01        	adc #1
001329  3  85 63        	sta z80_b			; set pixels to move.
00132B  3               gravu0:
00132B  3  20 63 0A     	jsr cangu			; can we go up?
00132E  3  D0 6E        	bne ifalls			; can't move up, go down next.
001330  3  A0 08        	ldy #8
001332  3  B1 68        	lda (z80_ix),y
001334  3  38           	sec
001335  3  E9 01        	sbc #1
001337  3  91 68        	sta (z80_ix),y			; adjust new x coord.
001339  3  C6 63        	dec z80_b
00133B  3  D0 EE        	bne gravu0
00133D  3  60           	rts
00133E  3               gravst:
00133E  3  A0 0D        	ldy #13
001340  3  B1 68        	lda (z80_ix),y			; jump pointer low.
001342  3  85 66        	sta z80_l
001344  3  A0 0E        	ldy #14
001346  3  B1 68        	lda (z80_ix),y			; jump pointer high.
001348  3  85 67        	sta z80_h
00134A  3               
00134A  3  A9 00        	lda #0				; null value in pointer.
00134C  3  A0 0D        	ldy #13
00134E  3  91 68        	sta (z80_ix),y			; store new pointer low.
001350  3  C8           	iny
001351  3  91 68        	sta (z80_ix),y			; store new pointer high.
001353  3               
001353  3  A0 00        	ldy #0
001355  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
001357  3  C9 63        	cmp #99				; is it the end marker?
001359  3               evftf:
001359  3  F0 01        	beq :+				; yes, fallen too far.
00135B  3  60           	rts
00135C  3               :
00135C  3  4C 25 2D     	jmp evnt15			; EVENT FELLTOOFAR
00135F  3               
00135F  3               ;------------------------------------------------
00135F  3               ; Initiate fall check.
00135F  3               ;------------------------------------------------
00135F  3               
00135F  3               ifall:
00135F  3  A0 0D        	ldy #13
001361  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
001363  3  85 66        	sta z80_l
001365  3  A0 0E        	ldy #14
001367  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
001369  3  85 67        	sta z80_h			; high byte in accumulator.
00136B  3  05 66        	ora z80_l			; merge in low byte.
00136D  3  F0 01        	beq :+
00136F  3  60           	rts				; if either is set, we're already in the air.
001370  3               :
001370  3  A0 09        	ldy #9
001372  3  B1 68        	lda (z80_ix),y			; y coordinate.
001374  3  85 rr        	sta dispx
001376  3  A0 08        	ldy #8
001378  3  B1 68        	lda (z80_ix),y			; look x coordinate.
00137A  3  18           	clc
00137B  3               numsp7:
00137B  3  69 10        	adc #SPR_HGT			; add 16 pixels.
00137D  3  85 rr        	sta dispy			; set up test coordinates.
00137F  3  20 FD 0B     	jsr tstbl			; get map address.
001382  3  20 2A 0B     	jsr plchk			; block, platform check.
001385  3  F0 01        	beq :+
001387  3  60           	rts				; it's solid, don't fall.
001388  3               :
001388  3  E6 rr        	inc bufaddr			; look right one cell.
00138A  3  20 2A 0B     	jsr plchk			; block, platform check.
00138D  3  F0 01        	beq :+
00138F  3  60           	rts				; it's solid, don't fall.
001390  3               :
001390  3  A5 rr        	lda dispx			; y coordinate.
001392  3  29 07        	and #7				; position straddling block cells.
001394  3  F0 08        	beq ifalls			; no more checks needed.
001396  3  E6 rr        	inc bufaddr			; look to third cell.
001398  3  20 2A 0B     	jsr plchk			; block, platform check.
00139B  3  F0 01        	beq :+
00139D  3  60           	rts				; it's solid, don't fall.
00139E  3               :
00139E  3               ifalls:
00139E  3  A9 9B        	lda #<jtab			; jump table start.
0013A0  3  85 66        	sta z80_l
0013A2  3  A9 59        	lda #>jtab
0013A4  3  85 67        	sta z80_h
0013A6  3               ifal0:
0013A6  3  E6 66        	inc z80_l			; point to next value.
0013A8  3  D0 02        	bne :+
0013AA  3  E6 67        	inc z80_h
0013AC  3               :
0013AC  3  A0 00        	ldy #0
0013AE  3  B1 66        	lda (z80_hl),y			; fetch value.
0013B0  3  F0 F4        	beq ifal0			; no, get next value.
0013B2  3  C9 63        	cmp #99				; reached end of table?
0013B4  3  D0 01        	bne :+
0013B6  3  60           	rts				; yes, don't fall.
0013B7  3               :
0013B7  3  C9 80        	cmp #128			; is it going up?
0013B9  3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
0013BB  3               
0013BB  3  A0 0D        	ldy #13
0013BD  3  A5 66        	lda z80_l
0013BF  3  91 68        	sta (z80_ix),y 			; set jump low.
0013C1  3  A0 0E        	ldy #14
0013C3  3  A5 67        	lda z80_h
0013C5  3  91 68        	sta (z80_ix),y 			; set jump high.
0013C7  3  60           	rts
0013C8  3               
0013C8  3               
0013C8  3               ;----------------------------------------------------
0013C8  3               ; Get frame data for a particular sprite.
0013C8  3               ; Input:
0013C8  3               ;  a		= framenumer
0013C8  3               ; Output:
0013C8  3               ;  hl		= frame address
0013C8  3               ;
0013C8  3               ; global:	hl,frmptr
0013C8  3               ; local:	-
0013C8  3               ; calls:	-
0013C8  3               ;----------------------------------------------------
0013C8  3               
0013C8  3               gfrm:
0013C8  3  0A           	asl a	 		 	; multiple of 2.
0013C9  3  18           	clc
0013CA  3  6D 30 02     	adc frmptr 			; frames used by game.
0013CD  3  85 66        	sta z80_l
0013CF  3  AD 31 02     	lda frmptr+1
0013D2  3  69 00        	adc #0
0013D4  3  85 67        	sta z80_h 			; point to frame start.
0013D6  3  60           	rts
0013D7  3               
0013D7  3               ;----------------------------------------------------
0013D7  3               ; Find sprite list for current room.
0013D7  3               ;
0013D7  3               ; global:	hl
0013D7  3               ; local:	x,y
0013D7  3               ; calls:	-
0013D7  3               ;----------------------------------------------------
0013D7  3               
0013D7  3               sprlst:
0013D7  3  A9 88        	lda #<nmedat 			; list of enemy sprites.
0013D9  3  85 66        	sta z80_l
0013DB  3  A9 53        	lda #>nmedat
0013DD  3  85 67        	sta z80_h
0013DF  3  A6 rr        	ldx scno 			; screen number.
0013E1  3  D0 01        	bne sprls2 			; is it the first screen?
0013E3  3  60           	rts 				; yes, don't need to search data.
0013E4  3               sprls2:
0013E4  3  A0 00        	ldy #0
0013E6  3               sprls1:
0013E6  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
0013E8  3  C9 FF        	cmp #255			; is it an end marker?
0013EA  3  F0 0E        	beq sprls0 			; yes, end of this room.
0013EC  3               
0013EC  3  18           	clc 				; point to next sprite in list.
0013ED  3  A5 66        	lda z80_l
0013EF  3  69 04        	adc #NMESIZ
0013F1  3  85 66        	sta z80_l
0013F3  3  90 02        	bcc :+
0013F5  3  E6 67        	inc z80_h
0013F7  3               :
0013F7  3  4C E6 13     	jmp sprls1 			; continue until end of room.
0013FA  3               sprls0:
0013FA  3  E6 66        	inc z80_l 			; point to start of next screen.s
0013FC  3  D0 02        	bne :+
0013FE  3  E6 67        	inc z80_h
001400  3               :
001400  3  CA           	dex
001401  3  D0 E3        	bne sprls1 			; continue until room found.
001403  3  60           	rts
001404  3               
001404  3               
001404  3               ;----------------------------------------------------
001404  3               ; Clear all but a single player sprite.
001404  3               ;
001404  3               ; global:	-
001404  3               ; local:	x,y,ix
001404  3               ; calls:	-
001404  3               ;----------------------------------------------------
001404  3               
001404  3               nspr:
001404  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
001406  3  85 rr        	sta sprcnt
001408  3  A9 A6        	lda #<sprtab 			; sprite table.
00140A  3  85 68        	sta z80_x
00140C  3  A9 15        	lda #>sprtab
00140E  3  85 69        	sta z80_i
001410  3               nspr0:
001410  3  A0 00        	ldy #0 				; fetch sprite type.
001412  3  B1 68        	lda (z80_ix),y 			; is it a player?
001414  3  F0 1A        	beq nspr1 			; yes, keep this one.
001416  3               
001416  3  A9 FF        	lda #255
001418  3  A0 00        	ldy #0 				; fetch sprite type.
00141A  3  91 68        	sta (z80_ix),y 			; delete sprite.
00141C  3  A0 05        	ldy #5
00141E  3  91 68        	sta (z80_ix),y 			; remove next type.
001420  3               
001420  3  18           	clc	 			; next sprite.
001421  3  A5 68        	lda z80_x
001423  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
001425  3  85 68        	sta z80_x
001427  3  90 02        	bcc :+
001429  3  E6 69        	inc z80_i
00142B  3               :
00142B  3  C6 rr        	dec sprcnt	 			; one less space in the table.
00142D  3  D0 E1        	bne nspr0
00142F  3  60           	rts
001430  3               nspr1:
001430  3  A9 FF        	lda #255
001432  3  A0 00        	ldy #0
001434  3  91 68        	sta (z80_ix),y 			; delete sprite.
001436  3               
001436  3  18           	clc	 			; point to next sprite.
001437  3  A5 68        	lda z80_x
001439  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00143B  3  85 68        	sta z80_x
00143D  3  90 02        	bcc :+
00143F  3  E6 69        	inc z80_i
001441  3               :
001441  3  C6 rr        	dec sprcnt	 			; one less to do.
001443  3  D0 01        	bne nspr2
001445  3  60           	rts
001446  3               nspr2:
001446  3  A9 FF        	lda #255
001448  3  A0 00        	ldy #0
00144A  3  91 68        	sta (z80_ix),y 			; delete sprite.
00144C  3  A0 05        	ldy #5
00144E  3  91 68        	sta (z80_ix),y 			; remove next type.
001450  3               
001450  3  18           	clc	 			; next sprite.
001451  3  A5 68        	lda z80_x
001453  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
001455  3  85 68        	sta z80_x
001457  3  90 02        	bcc :+
001459  3  E6 69        	inc z80_i
00145B  3               :
00145B  3  C6 rr        	dec sprcnt	 			; one less space in table.
00145D  3  D0 E7        	bne nspr2
00145F  3  60           	rts
001460  3               
001460  3               ;----------------------------------------------------------
001460  3               ; Two initialisation routines.
001460  3               ; Initialise sprites - copy everything from list to table.
001460  3               ;
001460  3               ; global:	-
001460  3               ; local:	x,y,ix
001460  3               ; calls:	cpsp
001460  3               ;----------------------------------------------------------
001460  3               
001460  3               ispr:
001460  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
001462  3  85 rr        	sta sprcnt
001464  3  A9 A6        	lda #<sprtab			; sprite table.
001466  3  85 68        	sta z80_x
001468  3  A9 15        	lda #>sprtab
00146A  3  85 69        	sta z80_i
00146C  3               ispr2:
00146C  3  A0 00        	ldy #0
00146E  3  B1 66        	lda (z80_hl),y 			; fetch byte.
001470  3  C9 FF        	cmp #255 			; is it an end marker?
001472  3  D0 01        	bne :+
001474  3  60           	rts 				; yes, no more to do.
001475  3               :
001475  3               ispr1:
001475  3  A0 00        	ldy #0
001477  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
001479  3  C9 FF        	cmp #255 			; is it enabled yet?
00147B  3  D0 08        	bne ispr4			; yes, try another slot.
00147D  3               
00147D  3  A0 05        	ldy #5
00147F  3  B1 68        	lda (z80_ix),y		 	; next type.
001481  3  C9 FF        	cmp #255 			; is it enabled yet?
001483  3  F0 10        	beq ispr3 			; no, process this one.
001485  3               ispr4:
001485  3  18           	clc 				; next sprite.
001486  3  A5 68        	lda z80_x
001488  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
00148A  3  85 68        	sta z80_x
00148C  3  90 02        	bcc :+
00148E  3  E6 69        	inc z80_i
001490  3               :
001490  3  C6 rr        	dec sprcnt
001492  3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
001494  3  60           	rts  				; no more room in table.
001495  3               ispr3:
001495  3  20 E8 14     	jsr cpsp			; initialise a sprite.
001498  3  C6 rr        	dec sprcnt			; one less space in the table.
00149A  3  D0 D0        	bne ispr2
00149C  3  60           	rts
00149D  3               
00149D  3               
00149D  3               ;-----------------------------------------------------------------------
00149D  3               ; Initialise sprites - but not player, we're keeping the old one.
00149D  3               ;
00149D  3               ; global:	-
00149D  3               ; local:	x,y,ix
00149D  3               ; calls:	cpsp
00149D  3               ;-----------------------------------------------------------------------
00149D  3               
00149D  3               kspr:
00149D  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
00149F  3  A9 A6        	lda #<sprtab 			; sprite table.
0014A1  3  85 68        	sta z80_x
0014A3  3  A9 15        	lda #>sprtab
0014A5  3  85 69        	sta z80_i
0014A7  3               kspr2:
0014A7  3  A0 00        	ldy #0
0014A9  3  B1 66        	lda (z80_hl),y 			; fetch byte.
0014AB  3  C9 FF        	cmp #255 			; is it an end marker?
0014AD  3  D0 01        	bne :+
0014AF  3  60           	rts 				; yes, no more to do.
0014B0  3               :
0014B0  3  C9 00        	cmp #0
0014B2  3  D0 0E        	bne kspr1 			; no, add to table as normal.
0014B4  3               
0014B4  3  18           	clc 				; next sprite.
0014B5  3  A5 66        	lda z80_l
0014B7  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
0014B9  3  85 66        	sta z80_l
0014BB  3  90 02        	bcc :+
0014BD  3  E6 67        	inc z80_h
0014BF  3               :
0014BF  3  4C A7 14     	jmp kspr2
0014C2  3               kspr1:
0014C2  3  A0 00        	ldy #0 				; fetch sprite type.
0014C4  3  B1 68        	lda (z80_ix),y
0014C6  3  C9 FF        	cmp #255 			; is it enabled yet?
0014C8  3  D0 08        	bne kspr4 			; yes, try another slot.
0014CA  3               
0014CA  3  A0 05        	ldy #5 				; next type.
0014CC  3  B1 68        	lda (z80_ix),y
0014CE  3  C9 FF        	cmp #255 			; is it enabled yet?
0014D0  3  F0 0F        	beq kspr3 			; no, process this one.
0014D2  3               kspr4:
0014D2  3  18           	clc 				; next sprite.
0014D3  3  A5 68        	lda z80_x
0014D5  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0014D7  3  85 68        	sta z80_x
0014D9  3  90 02        	bcc :+
0014DB  3  E6 69        	inc z80_i
0014DD  3               :
0014DD  3  CA           	dex	 			; repeat for remaining sprites.
0014DE  3  D0 E2        	bne kspr1
0014E0  3  60           	rts  				; no more room in table.
0014E1  3               kspr3:
0014E1  3  20 E8 14     	jsr cpsp 			; copy sprite to table.
0014E4  3  CA           	dex	 			; one less space in the table.
0014E5  3  D0 C0        	bne kspr2
0014E7  3  60           	rts
0014E8  3               
0014E8  3               ;----------------------------------------------
0014E8  3               ; Copy sprite from list to table.
0014E8  3               ;
0014E8  3               ; global:	hl,ix
0014E8  3               ; local:	y
0014E8  3               ; calls:	evnt09
0014E8  3               ;----------------------------------------------
0014E8  3               
0014E8  3               cpsp:
0014E8  3  A0 00        	ldy #0				; fetch byte from table.
0014EA  3  B1 66        	lda (z80_hl),y
0014EC  3  91 68        	sta (z80_ix),y			; set up type.
0014EE  3  A0 05        	ldy #PAM1ST
0014F0  3  91 68        	sta (z80_ix),y 			; set up type.
0014F2  3               
0014F2  3  E6 66        	inc z80_l 			; move to next byte.
0014F4  3  D0 02        	bne :+
0014F6  3  E6 67        	inc z80_h
0014F8  3               :
0014F8  3  A0 00        	ldy #0 				; fetch byte from table.
0014FA  3  B1 66        	lda (z80_hl),y
0014FC  3  A0 06        	ldy #6
0014FE  3  91 68        	sta (z80_ix),y			; set up image.
001500  3               
001500  3  E6 66        	inc z80_l 			; move to next byte.
001502  3  D0 02        	bne :+
001504  3  E6 67        	inc z80_h
001506  3               :
001506  3  A0 00        	ldy #0
001508  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
00150A  3  A0 08        	ldy #8
00150C  3  91 68        	sta (z80_ix),y 			; set up coordinate.
00150E  3               
00150E  3  A9 C8        	lda #200 			; set initial coordinate off screen.
001510  3  A0 03        	ldy #3
001512  3  91 68        	sta (z80_ix),y
001514  3               
001514  3  E6 66        	inc z80_l 			; move to next byte.
001516  3  D0 02        	bne :+
001518  3  E6 67        	inc z80_h
00151A  3               :
00151A  3  A0 00        	ldy #0 				; fetch byte from table.
00151C  3  B1 66        	lda (z80_hl),y
00151E  3  A0 09        	ldy #9
001520  3  91 68        	sta (z80_ix),y 			; set up coordinate.
001522  3               
001522  3  E6 66        	inc z80_l 			; move to next byte.
001524  3  D0 02        	bne :+
001526  3  E6 67        	inc z80_h
001528  3               :
001528  3  A9 00        	lda #0				; zeroes in accumulator.
00152A  3  A0 07        	ldy #7 				; reset frame number.
00152C  3  91 68        	sta (z80_ix),y
00152E  3  A0 0A        	ldy #10 			; reset direction.
001530  3  91 68        	sta (z80_ix),y
001532  3  A0 0D        	ldy #13				; reset jump pointer low.
001534  3  91 68        	sta (z80_ix),y
001536  3  A0 0E        	ldy #14	 			; reset jump pointer high.
001538  3  91 68        	sta (z80_ix),y
00153A  3               
00153A  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
00153C  3  A0 10        	ldy #16
00153E  3  91 68        	sta (z80_ix),y
001540  3               evis0:
001540  3  A5 69        	lda z80_i
001542  3  48           	pha
001543  3  A5 68        	lda z80_x
001545  3  48           	pha
001546  3  A5 67        	lda z80_h
001548  3  48           	pha
001549  3  A5 66        	lda z80_l
00154B  3  48           	pha
00154C  3               
00154C  3  20 C5 26     	jsr evnt09 			; perform event.
00154F  3               
00154F  3  68           	pla
001550  3  85 66        	sta z80_l
001552  3  68           	pla
001553  3  85 67        	sta z80_h
001555  3  68           	pla
001556  3  85 68        	sta z80_x
001558  3  68           	pla
001559  3  85 69        	sta z80_i
00155B  3               
00155B  3  18           	clc
00155C  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
00155E  3  69 11        	adc #TABSIZ		 	; next sprite.
001560  3  85 68        	sta z80_x
001562  3  90 02        	bcc :+
001564  3  E6 69        	inc z80_i
001566  3               :
001566  3  60           	rts
001567  3               
001567  3               
001567  3               ;-------------------------------------
001567  3               ; Clear the play area window.
001567  3               ;-------------------------------------
001567  3               
001567  3               clw:
001567  3  AD 3D 02     	lda wintop			; get coordinates of window.
00156A  3  85 rr        	sta dispy			; put into dispx for calculation.
00156C  3  AD 3E 02     	lda winlft
00156F  3  85 rr        	sta dispx
001571  3               
001571  3  AD 3F 02     	lda winhgt			; height of window.
001574  3  85 rr        	sta rrow			; copy to b register.
001576  3               clw3:
001576  3  AD 40 02     	lda winwid 			; width of window.
001579  3  85 rr        	sta rcol
00157B  3               clw2:
00157B  3  20 63 08     	jsr gprad 			; get print address.
00157E  3  A9 00        	lda #0				; zero byte to write.
001580  3  A2 07        	ldx #7				; pixel height of each cell.
001582  3               clw1:
001582  3  BC D1 08     	ldy scrtab,x
001585  3  91 rr        	sta (scraddr),y 			; copy to screen.
001587  3  CA           	dex				; next screen row down.
001588  3  10 F8        	bpl clw1
00158A  3               
00158A  3  E6 rr        	inc dispx			; next column.
00158C  3  C6 rr        	dec rcol			; one less to do.
00158E  3  D0 EB        	bne clw2			; repeat for remaining columns.
001590  3               
001590  3  AD 3E 02     	lda winlft			; get left edge.
001593  3  85 rr        	sta dispx 			; reset x.
001595  3  E6 rr        	inc dispy 			; next line down.
001597  3               
001597  3  C6 rr        	dec rrow
001599  3  D0 DB        	bne clw3			; repeat down the screen.
00159B  3               
00159B  3  AD 3D 02     	lda wintop			; get coordinates of window.
00159E  3  85 rr        	sta chary			; put into display position.
0015A0  3  AD 3E 02     	lda winlft
0015A3  3  85 rr        	sta charx
0015A5  3  60           	rts
0015A6  3               
0015A6  3               
0015A6  3               ;----------------------------------------------------------
0015A6  3               ; Effects code.
0015A6  3               ; Ticker routine is called 25 times per second.
0015A6  3               ;
0015A6  3               ; HL = txtscr = left text screen address
0015A6  3               ; DE = txtscr+txtwid-1 = right text screen address
0015A6  3               ; BC = txtpos = text scroller position
0015A6  3               ;
0015A6  3               ;----------------------------------------------------------
0015A6  3               
0015A6  3               .if sflag
0015A6  3               scrly:
0015A6  3               	rts
0015A6  3               	.word txtscr         	; get left screen address.
0015A6  3               	sta scr_l
0015A6  3               	lda txtscr+1
0015A6  3               	sta scr_l+1
0015A6  3               	sta scr_r+1
0015A6  3               
0015A6  3               	stx xtmp
0015A6  3               
0015A6  3               	clc         		; get right screen address.
0015A6  3               	lda scr_l
0015A6  3               	adc txtwid
0015A6  3               	sta scr_r
0015A6  3               	dec scr_r
0015A6  3               scrly1:
0015A6  3               	ldy txtwid		; set txtwide
0015A6  3               	dey
0015A6  3               	clc
0015A6  3               scrly0:
0015A6  3               	lda (scr_l),y		; scroll 1 line
0015A6  3               	rol a
0015A6  3               	sta (scr_l),y
0015A6  3               	dey
0015A6  3               	bpl scrly0
0015A6  3               
0015A6  3               	clc			; point to next line
0015A6  3               	lda scr_l
0015A6  3               	adc #32
0015A6  3               	sta scr_l
0015A6  3               	bcc scrly1		; repeat 8 times
0015A6  3               
0015A6  3               	lda txtpos 		; get text pointer.
0015A6  3               	sta scr_txt
0015A6  3               	lda txtpos+1
0015A6  3               	sta scr_txt+1
0015A6  3               
0015A6  3               	ldy #0
0015A6  3               	lda (scr_txt),y 		; find character we're displaying.
0015A6  3               	and #127 		; remove end marker bit if applicable.
0015A6  3               	cmp #13			; is it newline?
0015A6  3               	bne scrly5 		; no, it's okay.
0015A6  3               	lda #32			; convert to a space instead.
0015A6  3               scrly5:
0015A6  3               	sta fntaddr		; calculate char address
0015A6  3               	lda #0
0015A6  3               	sta fntaddr+1
0015A6  3               	asl fntaddr  		; multiply char by 8.
0015A6  3               	rol fntaddr+1
0015A6  3               	asl fntaddr
0015A6  3               	rol fntaddr+1
0015A6  3               	asl fntaddr
0015A6  3               	rol fntaddr+1
0015A6  3               	lda fntaddr
0015A6  3               	clc
0015A6  3               	adc #<(FONT-256)
0015A6  3               	sta scrly3+1		; that's the low byte.
0015A6  3               	lda fntaddr+1
0015A6  3               	adc #>(FONT-256)
0015A6  3               	sta scrly3+2		; add displacement.
0015A6  3               
0015A6  3               	ldx #0
0015A6  3               scrly3:
0015A6  3               	lda $3333,x		; get image of char line.
0015A6  3               	and txtbit
0015A6  3               	beq scrly2		; don't plot pixel
0015A6  3               	ldy scrline,x
0015A6  3               	lda (scr_r),y
0015A6  3               	clc
0015A6  3               	ora #1
0015A6  3               	sta (scr_r),y		; plot pixel
0015A6  3               scrly2:
0015A6  3               	inx			; next line of char.
0015A6  3               	cpx #8
0015A6  3               	bne scrly3
0015A6  3               
0015A6  3               	lsr txtbit		; bit of text to display.
0015A6  3               	bcs :+
0015A6  3               	rts
0015A6  3               :
0015A6  3               	ldy #0
0015A6  3               	lda (scr_txt),y 	; what was the character?
0015A6  3               	asl a	  		; end of message?
0015A6  3               	bcs scrly4
0015A6  3               	inc txtpos
0015A6  3               	bne :+
0015A6  3               	inc txtpos+1
0015A6  3               :
0015A6  3               	jmp scrly6 		; not yet - continue.
0015A6  3               scrly4:
0015A6  3               	lda txtini 		; start of scrolling message.
0015A6  3               	sta txtpos
0015A6  3               	lda txtini+1
0015A6  3               	sta txtpos+1
0015A6  3               scrly6:
0015A6  3               	lda #128
0015A6  3               	sta txtbit
0015A6  3               	ldx xtmp
0015A6  3               	rts
0015A6  3               
0015A6  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
0015A6  3               
0015A6  3               ;-------------------------------------------------------
0015A6  3               ; Entry TICKER command
0015A6  3               ;
0015A6  3               ; Entry:
0015A6  3               ;  z80_b = message nr
0015A6  3               ;  z80_c = width
0015A6  3               ;-------------------------------------------------------
0015A6  3               
0015A6  3               iscrly:
0015A6  3               	jsr prescr 		; set up display position.
0015A6  3               
0015A6  3               	lda #<msgdat 		; text messages.
0015A6  3               	sta z80_l
0015A6  3               	lda #>msgdat
0015A6  3               	sta z80_h
0015A6  3               
0015A6  3               	lda z80_c 		; width.
0015A6  3               	sec
0015A6  3               	sbc #1			; subtract one.
0015A6  3               	cmp #32 		; is it between 1 and 32?
0015A6  3               	bcc :+
0015A6  3               	lda #$60
0015A6  3               	jmp iscrl0		; no, disable messages.
0015A6  3               :
0015A6  3               	ldx z80_b		; message number.
0015A6  3               	jsr getwrd 		; find message start.
0015A6  3               
0015A6  3               	lda z80_l		; set initial text position.
0015A6  3               	sta txtini
0015A6  3               	lda z80_h
0015A6  3               	sta txtini+1
0015A6  3               
0015A6  3               	lda #$ad		; code for lda adrr
0015A6  3               iscrl0:
0015A6  3               	sta scrly		; enable/disable scrolling routine.
0015A6  3               
0015A6  3               	jsr prescr 		; set up display position.
0015A6  3               	jsr gprad 		; get print address.
0015A6  3               
0015A6  3               	lda scraddr 		; set text screen address.
0015A6  3               	sta txtscr
0015A6  3               	lda scraddr+1
0015A6  3               	sta txtscr+1
0015A6  3               
0015A6  3               	lda z80_c		; width.
0015A6  3               	sta txtwid		; set width in working storage.
0015A6  3               
0015A6  3               	lda #128 		; start with leftmost bit.
0015A6  3               	sta txtbit
0015A6  3               
0015A6  3               	jmp scrly4
0015A6  3               .endif
0015A6  3               
0015A6  3               ;------------------------------------------------------------------
0015A6  3               ; Dig routine, conditional assembly depending on dflag
0015A6  3               ;------------------------------------------------------------------
0015A6  3               .if dflag
0015A6  3               dig:
0015A6  3               	and #3
0015A6  3               	beq digr		; dig right
0015A6  3               	cmp #1
0015A6  3               	beq digl		; dig left
0015A6  3               	cmp #2
0015A6  3               	beq digd		; dig down
0015A6  3               
0015A6  3               ; Dig up.
0015A6  3               
0015A6  3               digu:				; dig up
0015A6  3               	ldy #8
0015A6  3               	lda (z80_ix),y
0015A6  3               	sec
0015A6  3               	sbc #2
0015A6  3               	sta dispy		; set y
0015A6  3               
0015A6  3               	iny
0015A6  3               	lda (z80_ix),y
0015A6  3               	sta dispx		; set x
0015A6  3               	jmp digv
0015A6  3               
0015A6  3               ; Dig down.
0015A6  3               
0015A6  3               digd:
0015A6  3               	ldy #9
0015A6  3               	lda (z80_ix),y
0015A6  3               	sta dispx		; set y
0015A6  3               
0015A6  3               	dey
0015A6  3               	clc
0015A6  3               	lda (z80_ix),y
0015A6  3               	adc #16
0015A6  3               	sta dispy		; set y
0015A6  3               	jmp digv
0015A6  3               
0015A6  3               ; Dig left.
0015A6  3               
0015A6  3               digl:
0015A6  3               	ldy #8
0015A6  3               	lda (z80_ix),y
0015A6  3               	sta dispy		; set y
0015A6  3               
0015A6  3               	iny
0015A6  3               	lda (z80_ix),y
0015A6  3               	sec
0015A6  3               	sbc #2			; x=x-2
0015A6  3               	sta dispx		; set x
0015A6  3               	jmp digh
0015A6  3               
0015A6  3               ; Dig right.
0015A6  3               
0015A6  3               digr:
0015A6  3               	ldy #8
0015A6  3               	lda (z80_ix),y
0015A6  3               	sta dispy		; set y
0015A6  3               
0015A6  3               	iny
0015A6  3               	lda (z80_ix),y
0015A6  3               	clc
0015A6  3               	adc #16
0015A6  3               	sta dispx		; set x+16
0015A6  3               	jmp digh
0015A6  3               
0015A6  3               ; Vertical digging
0015A6  3               
0015A6  3               digv:
0015A6  3               	jsr tstbl		; check blocktype in MAP
0015A6  3               	jsr fdchk		; test if FODDER
0015A6  3               
0015A6  3               	clc
0015A6  3               	lda dispx		; look 1 cell down
0015A6  3               	adc #8
0015A6  3               	sta dispx
0015A6  3               	jsr tstbl		; check blocktype in MAP
0015A6  3               	jsr fdchk
0015A6  3               	lda dispx
0015A6  3               	and #7
0015A6  3               	bne :+
0015A6  3               	rts
0015A6  3               :
0015A6  3               	clc
0015A6  3               	lda dispx		; look 1 cell down
0015A6  3               	adc #8
0015A6  3               	sta dispx
0015A6  3               	jsr tstbl		; check blocktype in MAP
0015A6  3               	jmp fdchk
0015A6  3               
0015A6  3               ; Horizontal digging
0015A6  3               
0015A6  3               digh:
0015A6  3               	jsr tstbl		; check blocktype in MAP
0015A6  3               	jsr fdchk		; test if FODDER
0015A6  3               
0015A6  3               	clc
0015A6  3               	lda dispy		; look 1 cell down
0015A6  3               	adc #8
0015A6  3               	sta dispy
0015A6  3               	jsr tstbl		; check blocktype in MAP
0015A6  3               	jsr fdchk
0015A6  3               	lda dispy
0015A6  3               	and #7
0015A6  3               	bne :+
0015A6  3               	rts
0015A6  3               :
0015A6  3               	clc
0015A6  3               	lda dispy		; look 1 cell down
0015A6  3               	adc #8
0015A6  3               	sta dispy
0015A6  3               	jsr tstbl		; check blocktype in MAP
0015A6  3               	jmp fdchk
0015A6  3               
0015A6  3               digcnt:	.byte 0
0015A6  3               
0015A6  3               .endif
0015A6  3               
0015A6  3               ;------------------------------------------------------------------
0015A6  3               ; Sprite table
0015A6  3               ;------------------------------------------------------------------
0015A6  3               
0015A6  3               
0015A6  3               ; ix+0  = type.
0015A6  3               ; ix+1  = sprite image number.
0015A6  3               ; ix+2  = frame.
0015A6  3               ; ix+3  = y coord.
0015A6  3               ; ix+4  = x coord.
0015A6  3               
0015A6  3               ; ix+5  = new type.
0015A6  3               ; ix+6  = new image number.
0015A6  3               ; ix+7  = new frame.
0015A6  3               ; ix+8  = new y coord.
0015A6  3               ; ix+9  = new x coord.
0015A6  3               
0015A6  3               ; ix+10 = direction.
0015A6  3               ; ix+11 = parameter 1.
0015A6  3               ; ix+12 = parameter 2.
0015A6  3               ; ix+13 = jump pointer low.
0015A6  3               ; ix+14 = jump pointer high.
0015A6  3               ; ix+15 = data pointer low.
0015A6  3               ; ix+16 = data pointer high.
0015A6  3               
0015A6  3               ; block NUMSPR * TABSIZ,255
0015A6  3               
0015A6  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
0015AA  3  FF FF FF FF  
0015AE  3  FF FF FF FF  
001672  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
001676  3  FF FF FF 00  
00167A  3  C0 78 00 00  
001683  3  07           roomtb:	.byte 7                      ; start room map offset.
001684  3               
001684  3               ; User routine.  Put your own code in here to be called with USER instruction.
001684  3               ; if USER has an argument it will be passed in the accumulator.
001684  3               
001684  3               user:
001684  3  60           	rts
001685  3               
001685  3               ;----------------------------------------------------
001685  3               ; Missing vars
001685  3               ;----------------------------------------------------
001685  3               
001685  3               MAP 		= $9800			; properties map buffer (3x256 bytes)
001685  3               SCADTB_lb 	= MAP+3*256		; screen address table lo-byte (256 bytes)
001685  3               SCADTB_hb 	= SCADTB_lb+256		; screen address table hi-byte (256 bytes)
001685  3               SHRAPN 		= SCADTB_hb+256		; shrapnel table (55x6 bytes)
001685  3               
001685  3               ;Fontpointer:	.byte 0,0
001685  3               ;TmpAddr:	.byte 0,0
001685  3               
001685  3               ;loopa:		.byte 0
001685  3               ;loopb:		.byte 0
001685  3               ;loopc:		.byte 0
001685  3               
001685  3               setfgcol:
001685  3  29 03        	and #3
001687  3  A8           	tay
001688  3  B9 AA 16     	lda codcol,y
00168B  3  4C A1 16     	jmp calfgc
00168E  3               
00168E  3               setbgcol:
00168E  3  29 03        	and #3
001690  3               calbgc:
001690  3  A8           	tay
001691  3  B9 AA 16     	lda codcol,y
001694  3  48           	pha
001695  3  AD A8 16     	lda andeor
001698  3  4D A9 16     	eor andeor+1
00169B  3  AA           	tax
00169C  3  68           	pla
00169D  3  8D A9 16     	sta andeor+1
0016A0  3  8A           	txa
0016A1  3               calfgc:
0016A1  3  4D A9 16     	eor andeor+1
0016A4  3  8D A8 16     	sta andeor
0016A7  3               calex1:
0016A7  3  60           	rts
0016A8  3               
0016A8  3  00 00        andeor:	.byte 0,0
0016AA  3  00 55 AA FF  codcol:	.byte $00,$55,$aa,$ff
0016AE  3               
0016AE  3               ; Everything below here will be generated by the editors.
0016AE  3               
0016AE  3               WINDOWTOP = 1
0016AE  3               WINDOWLFT = 1
0016AE  3               WINDOWHGT = 20
0016AE  3               WINDOWWID = 30 ;"
0016AE  3               MAPWID = 9
0016AE  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255
0016B2  3  FF FF FF FF  
0016B6  3  FF           
0016B7  3               mapdat:
0016B7  3  FF FF 00 02          .byte 255,255,0,2,3,7,255,255,255,255,16,1,4,17,6,255,255,255,255,255,9,5,255,12,13,14,255,255,255,10,11,255,255,255,255,255,255,255,8,255,255,255,255,255,255,255,255,15,18,255,255,255,255,255
0016BB  3  03 07 FF FF  
0016BF  3  FF FF 10 01  
0016ED  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255
0016F1  3  FF FF FF FF  
0016F5  3  FF           
0016F6  3  02           stmap:  .byte 2
0016F7  3               
0016F7  3               evnt00:
0016F7  3  A9 08                lda #8
0016F9  3  C5 rr                cmp scno
0016FB  3  F0 03                beq *+5
0016FD  3  4C 50 17             jmp a00199
001700  3  A9 06                lda #6 	; COLLISION
001702  3  85 63                sta z80_b
001704  3  20 AF 11             jsr sktyp
001707  3  B0 03                bcs :+
001709  3  4C 50 17             jmp a00199
00170C  3               :
00170C  3  A9 06                lda #6		; GOT
00170E  3  20 C1 05             jsr gotob
001711  3  C9 FF                cmp #255
001713  3  F0 03                beq :+
001715  3  4C 50 17             jmp a00199
001718  3               :
001718  3  A9 06                lda #6
00171A  3  C5 rr                cmp varj
00171C  3  F0 03                beq *+5
00171E  3  4C 3A 17             jmp a00144
001721  3  A5 rr                lda skptr	; OTHER
001723  3  85 68                sta z80_x
001725  3  A5 rr                lda skptr+1
001727  3  85 69                sta z80_i
001729  3  A9 01                lda #1
00172B  3  A0 0A                ldy #10
00172D  3  91 68                sta (z80_ix),y
00172F  3  A5 rr                lda ogptr	; ENDSPRITE
001731  3  85 68                sta z80_x
001733  3  A5 rr                lda ogptr+1
001735  3  85 69                sta z80_i
001737  3  4C 50 17             jmp a00199
00173A  3  A5 rr        a00144: lda skptr	; OTHER
00173C  3  85 68                sta z80_x
00173E  3  A5 rr                lda skptr+1
001740  3  85 69                sta z80_i
001742  3  A9 00                lda #0
001744  3  A0 0A                ldy #10
001746  3  91 68                sta (z80_ix),y
001748  3  A5 rr                lda ogptr	; ENDSPRITE
00174A  3  85 68                sta z80_x
00174C  3  A5 rr                lda ogptr+1
00174E  3  85 69                sta z80_i
001750  3  A9 0F        a00199: lda #15
001752  3  C5 rr                cmp scno
001754  3  F0 03                beq *+5
001756  3  4C 59 17             jmp a00216
001759  3  A9 11        a00216: lda #17
00175B  3  C5 rr                cmp scno
00175D  3  F0 03                beq *+5
00175F  3  4C A7 17             jmp a00386
001762  3  A9 00                lda #0		; GOT
001764  3  20 C1 05             jsr gotob
001767  3  C9 FF                cmp #255
001769  3  F0 03                beq :+
00176B  3  4C A7 17             jmp a00386
00176E  3               :
00176E  3  A9 00                lda #0
001770  3  C5 rr                cmp varj
001772  3  F0 03                beq *+5
001774  3  4C A7 17             jmp a00386
001777  3  A5 rr                lda joyval	; KEY
001779  3  29 10                and #16
00177B  3  F0 03                beq :+
00177D  3  4C A7 17             jmp a00386
001780  3               :
001780  3  A9 08                lda #8 	; COLLISION
001782  3  85 63                sta z80_b
001784  3  20 AF 11             jsr sktyp
001787  3  B0 03                bcs :+
001789  3  4C A7 17             jmp a00386
00178C  3               :
00178C  3  A5 rr                lda skptr	; OTHER
00178E  3  85 68                sta z80_x
001790  3  A5 rr                lda skptr+1
001792  3  85 69                sta z80_i
001794  3  A0 0B                ldy #11
001796  3  B1 68                lda (z80_ix),y
001798  3  18                   clc
001799  3  69 01                adc #1
00179B  3  A0 0B                ldy #11
00179D  3  91 68                sta (z80_ix),y
00179F  3  A5 rr                lda ogptr	; ENDSPRITE
0017A1  3  85 68                sta z80_x
0017A3  3  A5 rr                lda ogptr+1
0017A5  3  85 69                sta z80_i
0017A7  3  A9 00        a00386: lda #0
0017A9  3  C5 rr                cmp varn
0017AB  3  90 03                bcc *+5
0017AD  3  4C CA 17             jmp a00456
0017B0  3  A5 rr                lda varo
0017B2  3  A0 08                ldy #8
0017B4  3  91 68                sta (z80_ix),y
0017B6  3  A5 rr                lda varp
0017B8  3  A0 09                ldy #9
0017BA  3  91 68                sta (z80_ix),y
0017BC  3  A5 rr                lda varn
0017BE  3  85 rr                sta scno
0017C0  3  20 B8 12             jsr nwscr
0017C3  3  A9 00                lda #0
0017C5  3  85 rr                sta varn
0017C7  3  4C EB 17             jmp a00524
0017CA  3  A9 05        a00456: lda #DEADLY	; DEADLY
0017CC  3  85 63                sta z80_b
0017CE  3  20 42 0B             jsr tded
0017D1  3  C5 63                cmp z80_b
0017D3  3  F0 03                beq :+
0017D5  3  4C EB 17             jmp a00524
0017D8  3               :
0017D8  3  A9 08                lda #8
0017DA  3  A0 08                ldy #8
0017DC  3  91 68                sta (z80_ix),y
0017DE  3  A9 08                lda #8
0017E0  3  A0 09                ldy #9
0017E2  3  91 68                sta (z80_ix),y
0017E4  3  A9 04                lda #4
0017E6  3  85 rr                sta scno
0017E8  3  20 B8 12             jsr nwscr
0017EB  3  A9 06        a00524: lda #CUSTOM	; CUSTOM
0017ED  3  85 63                sta z80_b
0017EF  3  20 42 0B             jsr tded
0017F2  3  C5 63                cmp z80_b
0017F4  3  F0 03                beq :+
0017F6  3  4C 42 18             jmp a00702
0017F9  3               :
0017F9  3  A9 01                lda #1
0017FB  3  C5 rr                cmp scno
0017FD  3  F0 03                beq *+5
0017FF  3  4C 35 18             jmp a00676
001802  3  A9 08                lda #8		; GOT
001804  3  20 C1 05             jsr gotob
001807  3  C9 FF                cmp #255
001809  3  F0 03                beq :+
00180B  3  4C 35 18             jmp a00676
00180E  3               :
00180E  3  A9 08                lda #8
001810  3  C5 rr                cmp varj
001812  3  F0 03                beq *+5
001814  3  4C 35 18             jmp a00676
001817  3  A5 rr                lda joyval	; KEY
001819  3  29 10                and #16
00181B  3  F0 03                beq :+
00181D  3  4C 35 18             jmp a00676
001820  3               :
001820  3  A0 09                ldy #9
001822  3  B1 68                lda (z80_ix),y	; PUT
001824  3  85 rr                sta dispx
001826  3  A0 08                ldy #8
001828  3  B1 68                lda (z80_ix),y
00182A  3  85 rr                sta dispy
00182C  3  A9 08                lda #8
00182E  3  20 F2 05             jsr drpob
001831  3  A9 FB                lda #251
001833  3  85 rr                sta varrnd
001835  3  A9 10        a00676: lda #16
001837  3  C5 rr                cmp scno
001839  3  F0 03                beq *+5
00183B  3  4C 42 18             jmp a00702
00183E  3  A9 FC                lda #252
001840  3  85 rr                sta varrnd
001842  3  A9 64        a00702: lda #100
001844  3  C5 rr                cmp varh
001846  3  F0 03                beq *+5
001848  3  4C 6C 18             jmp a00784
00184B  3  A9 02                lda #2
00184D  3  A0 0C                ldy #12
00184F  3  D1 68                cmp (z80_ix),y
001851  3  F0 03                beq *+5
001853  3  4C 66 18             jmp a00771
001856  3  A9 00                lda #0
001858  3  C5 rr                cmp scno
00185A  3  F0 03                beq *+5
00185C  3  4C 66 18             jmp a00771
00185F  3  A9 02                lda #2
001861  3  85 rr                sta scno
001863  3  20 B8 12             jsr nwscr
001866  3  A9 05        a00771: lda #5
001868  3  A0 06                ldy #6
00186A  3  91 68                sta (z80_ix),y
00186C  3  A9 05        a00784: lda #5
00186E  3  A0 06                ldy #6
001870  3  D1 68                cmp (z80_ix),y
001872  3  F0 03                beq *+5
001874  3  4C 01 19             jmp a01095
001877  3  A9 03                lda #3
001879  3  A0 07                ldy #7
00187B  3  D1 68                cmp (z80_ix),y
00187D  3  B0 03                bcs *+5
00187F  3  4C AF 18             jmp a00926
001882  3  A9 0A                lda #10
001884  3  A0 0B                ldy #11
001886  3  D1 68                cmp (z80_ix),y
001888  3  B0 03                bcs *+5
00188A  3  4C 9B 18             jmp a00882
00188D  3  A0 0B                ldy #11
00188F  3  B1 68                lda (z80_ix),y
001891  3  18                   clc
001892  3  69 01                adc #1
001894  3  A0 0B                ldy #11
001896  3  91 68                sta (z80_ix),y
001898  3  4C AC 18             jmp a00921
00189B  3  A9 14        a00882: lda #20		; BEEP
00189D  3  0A                   asl a
00189E  3  8D E9 02             sta sndtyp
0018A1  3  A9 00                lda #0		; ANIMATE
0018A3  3  20 64 11             jsr animsp
0018A6  3  A9 00                lda #0
0018A8  3  A0 0B                ldy #11
0018AA  3  91 68                sta (z80_ix),y
0018AC  3  4C FE 18     a00921: jmp a01091
0018AF  3  A5 rr        a00926: lda numlif
0018B1  3  38                   sec
0018B2  3  E9 01                sbc #1
0018B4  3  85 rr                sta numlif
0018B6  3  A9 02                lda #2
0018B8  3  C5 rr                cmp numlif
0018BA  3  F0 03                beq *+5
0018BC  3  4C BF 18             jmp a00959
0018BF  3  A9 01        a00959: lda #1
0018C1  3  C5 rr                cmp numlif
0018C3  3  F0 03                beq *+5
0018C5  3  4C C8 18             jmp a00976
0018C8  3  A9 00        a00976: lda #0
0018CA  3  C5 rr                cmp numlif
0018CC  3  F0 03                beq *+5
0018CE  3  4C DE 18             jmp a01022
0018D1  3  A9 FF                lda #255	; REMOVE
0018D3  3  A0 05                ldy #5
0018D5  3  91 68                sta (z80_ix),y
0018D7  3  A9 12                lda #18
0018D9  3  85 rr                sta scno
0018DB  3  20 B8 12             jsr nwscr
0018DE  3  A9 14        a01022: lda #20 	; DELAY
0018E0  3  20 55 02             jsr delay
0018E3  3  A9 10                lda #16
0018E5  3  C5 rr                cmp scno
0018E7  3  F0 03                beq *+5
0018E9  3  4C F8 18             jmp a01077
0018EC  3  A9 48                lda #72
0018EE  3  A0 08                ldy #8
0018F0  3  91 68                sta (z80_ix),y
0018F2  3  A9 78                lda #120
0018F4  3  A0 09                ldy #9
0018F6  3  91 68                sta (z80_ix),y
0018F8  3  A9 00        a01077: lda #0
0018FA  3  A0 06                ldy #6
0018FC  3  91 68                sta (z80_ix),y
0018FE  3  4C 9B 1D     a01091: jmp a03517
001901  3  A9 02        a01095: lda #2
001903  3  C5 rr                cmp scno
001905  3  F0 03                beq *+5
001907  3  4C 58 19             jmp a01278
00190A  3  A9 01                lda #1
00190C  3  A0 0A                ldy #10
00190E  3  D1 68                cmp (z80_ix),y
001910  3  F0 03                beq *+5
001912  3  4C 58 19             jmp a01278
001915  3  A9 02                lda #2		; GOT
001917  3  20 C1 05             jsr gotob
00191A  3  C9 FF                cmp #255
00191C  3  F0 03                beq :+
00191E  3  4C 24 19             jmp a01162
001921  3               :
001921  3  4C 52 19             jmp a01265
001924  3  A9 02        a01162: lda #2	; GET
001926  3  20 92 05             jsr getob
001929  3  A9 88                lda #136
00192B  3  A0 08                ldy #8
00192D  3  91 68                sta (z80_ix),y
00192F  3  A9 78                lda #120
001931  3  A0 09                ldy #9
001933  3  91 68                sta (z80_ix),y
001935  3  A0 09                ldy #9
001937  3  B1 68                lda (z80_ix),y	; PUT
001939  3  85 rr                sta dispx
00193B  3  A0 08                ldy #8
00193D  3  B1 68                lda (z80_ix),y
00193F  3  85 rr                sta dispy
001941  3  A9 02                lda #2
001943  3  20 F2 05             jsr drpob
001946  3  A5 rr                lda varo
001948  3  A0 08                ldy #8
00194A  3  91 68                sta (z80_ix),y
00194C  3  A5 rr                lda varp
00194E  3  A0 09                ldy #9
001950  3  91 68                sta (z80_ix),y
001952  3  A9 00        a01265: lda #0
001954  3  A0 0A                ldy #10
001956  3  91 68                sta (z80_ix),y
001958  3  A9 04        a01278: lda #4
00195A  3  C5 rr                cmp scno
00195C  3  F0 03                beq *+5
00195E  3  4C 64 19             jmp a01300
001961  3  4C 26 1D             jmp a03285
001964  3  20 13 06     a01300: jsr skobj	; DETECTOBJECT
001967  3  85 rr                sta varobj
001969  3  A9 02                lda #2
00196B  3  C5 rr                cmp varobj
00196D  3  F0 03                beq *+5
00196F  3  4C 76 19             jmp a01338
001972  3  A9 01                lda #1
001974  3  85 rr                sta varp
001976  3  A9 06        a01338: lda #6
001978  3  C5 rr                cmp varobj
00197A  3  F0 03                beq *+5
00197C  3  4C 90 19             jmp a01389
00197F  3  A9 01                lda #1
001981  3  85 rr                sta varp
001983  3  A9 60                lda #96
001985  3  C5 rr                cmp vare
001987  3  90 03                bcc *+5
001989  3  4C 90 19             jmp a01389
00198C  3  A9 60                lda #96
00198E  3  85 rr                sta vare
001990  3  A9 08        a01389: lda #8
001992  3  C5 rr                cmp varobj
001994  3  F0 03                beq *+5
001996  3  4C 9D 19             jmp a01414
001999  3  A9 01                lda #1
00199B  3  85 rr                sta varp
00199D  3  A9 0A        a01414: lda #10
00199F  3  C5 rr                cmp varobj
0019A1  3  F0 03                beq *+5
0019A3  3  4C AA 19             jmp a01439
0019A6  3  A9 01                lda #1
0019A8  3  85 rr                sta varp
0019AA  3  A9 0B        a01439: lda #11
0019AC  3  C5 rr                cmp varobj
0019AE  3  F0 03                beq *+5
0019B0  3  4C B7 19             jmp a01465
0019B3  3  A9 01                lda #1
0019B5  3  85 rr                sta varp
0019B7  3  A9 0C        a01465: lda #12
0019B9  3  C5 rr                cmp varobj
0019BB  3  F0 03                beq *+5
0019BD  3  4C C4 19             jmp a01491
0019C0  3  A9 FA                lda #250
0019C2  3  85 rr                sta varrnd
0019C4  3  A9 09        a01491: lda #9
0019C6  3  C5 rr                cmp varobj
0019C8  3  F0 03                beq *+5
0019CA  3  4C D1 19             jmp a01518
0019CD  3  A9 FA                lda #250
0019CF  3  85 rr                sta varrnd
0019D1  3  A9 02        a01518: lda #2
0019D3  3  C5 rr                cmp varobj
0019D5  3  90 03                bcc *+5
0019D7  3  4C 23 1A             jmp a01682
0019DA  3  A9 05                lda #5
0019DC  3  C5 rr                cmp varobj
0019DE  3  B0 03                bcs *+5
0019E0  3  4C 23 1A             jmp a01682
0019E3  3  A9 64                lda #100
0019E5  3  A0 0B                ldy #11
0019E7  3  D1 68                cmp (z80_ix),y
0019E9  3  B0 03                bcs *+5
0019EB  3  4C FC 19             jmp a01606
0019EE  3  A0 0B                ldy #11
0019F0  3  B1 68                lda (z80_ix),y
0019F2  3  18                   clc
0019F3  3  69 01                adc #1
0019F5  3  A0 0B                ldy #11
0019F7  3  91 68                sta (z80_ix),y
0019F9  3  4C 23 1A             jmp a01682
0019FC  3  A9 03        a01606: lda #3
0019FE  3  C5 rr                cmp varobj
001A00  3  F0 03                beq *+5
001A02  3  4C 19 1A             jmp a01661
001A05  3  A9 00                lda #0
001A07  3  C5 rr                cmp varg
001A09  3  F0 03                beq *+5
001A0B  3  4C 16 1A             jmp a01656
001A0E  3  A9 01                lda #1
001A10  3  85 rr                sta varg
001A12  3  A9 00                lda #0
001A14  3  85 rr                sta varp
001A16  3  4C 1D 1A     a01656: jmp a01669
001A19  3  A9 01        a01661: lda #1
001A1B  3  85 rr                sta varp
001A1D  3  A9 00        a01669: lda #0
001A1F  3  A0 0B                ldy #11
001A21  3  91 68                sta (z80_ix),y
001A23  3  A9 00        a01682: lda #0
001A25  3  C5 rr                cmp varobj
001A27  3  F0 03                beq *+5
001A29  3  4C 30 1A             jmp a01708
001A2C  3  A9 FA                lda #250
001A2E  3  85 rr                sta varrnd
001A30  3  A9 07        a01708: lda #7
001A32  3  C5 rr                cmp varobj
001A34  3  F0 03                beq *+5
001A36  3  4C 3D 1A             jmp a01735
001A39  3  A9 FA                lda #250
001A3B  3  85 rr                sta varrnd
001A3D  3  A9 0D        a01735: lda #13
001A3F  3  C5 rr                cmp varobj
001A41  3  F0 03                beq *+5
001A43  3  4C 7F 1A             jmp a01871
001A46  3  A9 C8                lda #200
001A48  3  A0 0B                ldy #11
001A4A  3  D1 68                cmp (z80_ix),y
001A4C  3  B0 03                bcs *+5
001A4E  3  4C 5F 1A             jmp a01806
001A51  3  A0 0B                ldy #11
001A53  3  B1 68                lda (z80_ix),y
001A55  3  18                   clc
001A56  3  69 01                adc #1
001A58  3  A0 0B                ldy #11
001A5A  3  91 68                sta (z80_ix),y
001A5C  3  4C 7F 1A             jmp a01871
001A5F  3  A5 rr        a01806: lda varobj	; GET
001A61  3  20 92 05             jsr getob
001A64  3  A9 01                lda #1
001A66  3  85 rr                sta varobj
001A68  3  A9 00                lda #0
001A6A  3  A0 0B                ldy #11
001A6C  3  91 68                sta (z80_ix),y
001A6E  3  A9 00                lda #0
001A70  3  C5 rr                cmp vark
001A72  3  F0 03                beq *+5
001A74  3  4C 7F 1A             jmp a01871
001A77  3  A9 01                lda #1
001A79  3  85 rr                sta vark
001A7B  3  A9 00                lda #0
001A7D  3  85 rr                sta varp
001A7F  3  A9 01        a01871: lda #1
001A81  3  C5 rr                cmp varobj
001A83  3  F0 03                beq *+5
001A85  3  4C 99 1A             jmp a01921
001A88  3  A9 00                lda #0
001A8A  3  C5 rr                cmp vark
001A8C  3  F0 03                beq *+5
001A8E  3  4C 99 1A             jmp a01921
001A91  3  A9 01                lda #1
001A93  3  85 rr                sta vark
001A95  3  A9 00                lda #0
001A97  3  85 rr                sta varp
001A99  3  A9 FA        a01921: lda #250
001A9B  3  C5 rr                cmp varrnd
001A9D  3  F0 03                beq *+5
001A9F  3  4C C9 1A             jmp a02016
001AA2  3  A9 01                lda #1
001AA4  3  C5 rr                cmp vark
001AA6  3  F0 03                beq *+5
001AA8  3  4C C5 1A             jmp a02008
001AAB  3  A9 01                lda #1
001AAD  3  C5 rr                cmp varj
001AAF  3  F0 03                beq *+5
001AB1  3  4C C5 1A             jmp a02008
001AB4  3  A5 rr                lda joyval	; KEY
001AB6  3  29 10                and #16
001AB8  3  F0 03                beq :+
001ABA  3  4C C5 1A             jmp a02008
001ABD  3               :
001ABD  3  A9 01                lda #1
001ABF  3  85 rr                sta varp
001AC1  3  A9 02                lda #2
001AC3  3  85 rr                sta vark
001AC5  3  A9 00        a02008: lda #0
001AC7  3  85 rr                sta varrnd
001AC9  3  A9 01        a02016: lda #1
001ACB  3  C5 rr                cmp varp
001ACD  3  B0 03                bcs *+5
001ACF  3  4C 27 1B             jmp a02213
001AD2  3  A9 01                lda #1
001AD4  3  C5 rr                cmp varp
001AD6  3  F0 03                beq *+5
001AD8  3  4C F1 1A             jmp a02095
001ADB  3  A9 06                lda #CUSTOM	; CUSTOM
001ADD  3  85 63                sta z80_b
001ADF  3  20 42 0B             jsr tded
001AE2  3  C5 63                cmp z80_b
001AE4  3  F0 03                beq :+
001AE6  3  4C EC 1A             jmp a02084
001AE9  3               :
001AE9  3  4C F1 1A             jmp a02095
001AEC  3  A5 rr        a02084: lda varobj	; GET
001AEE  3  20 92 05             jsr getob
001AF1  3  A9 0B        a02095: lda #11
001AF3  3  C5 rr                cmp varobj
001AF5  3  B0 03                bcs *+5
001AF7  3  4C 21 1B             jmp a02200
001AFA  3  A5 rr                lda varobj
001AFC  3  85 rr                sta varp
001AFE  3  A5 rr                lda varp
001B00  3  85 62                sta z80_c
001B02  3  A5 rr                lda varp
001B04  3  18                   clc
001B05  3  65 62                adc z80_c
001B07  3  85 rr                sta varp
001B09  3  A9 02                lda #2
001B0B  3  85 62                sta z80_c
001B0D  3  A5 rr                lda varp
001B0F  3  18                   clc
001B10  3  65 62                adc z80_c
001B12  3  85 rr                sta varp
001B14  3  A9 16                lda #22
001B16  3  85 rr                sta chary
001B18  3  A5 rr                lda varp
001B1A  3  85 rr                sta charx
001B1C  3  A5 rr                lda varobj  	; MESSAGE
001B1E  3  20 54 0D             jsr dmsg
001B21  3  A0 09        a02200: ldy #9
001B23  3  B1 68                lda (z80_ix),y
001B25  3  85 rr                sta varp
001B27  3  A5 rr        a02213: lda joyval	; KEY
001B29  3  29 10                and #16
001B2B  3  F0 03                beq :+
001B2D  3  4C F6 1B             jmp a02632
001B30  3               :
001B30  3  A9 00                lda #0
001B32  3  A0 0B                ldy #11
001B34  3  D1 68                cmp (z80_ix),y
001B36  3  F0 03                beq *+5
001B38  3  4C F3 1B             jmp a02627
001B3B  3  A9 01                lda #1
001B3D  3  A0 0B                ldy #11
001B3F  3  91 68                sta (z80_ix),y
001B41  3  A9 00                lda #0
001B43  3  A0 07                ldy #7
001B45  3  D1 68                cmp (z80_ix),y
001B47  3  90 03                bcc *+5
001B49  3  4C 8C 1B             jmp a02416
001B4C  3  A9 02                lda #2		; GOT
001B4E  3  20 C1 05             jsr gotob
001B51  3  C9 FF                cmp #255
001B53  3  F0 03                beq :+
001B55  3  4C 6C 1B             jmp a02353
001B58  3               :
001B58  3  A9 02                lda #2
001B5A  3  C5 rr                cmp varj
001B5C  3  F0 03                beq *+5
001B5E  3  4C 6C 1B             jmp a02353
001B61  3  A9 02                lda #2	; SPAWN
001B63  3  85 62                sta z80_c
001B65  3  A9 04                lda #4
001B67  3  85 63                sta z80_b
001B69  3  20 6C 06             jsr spawn
001B6C  3  A9 04        a02353: lda #4		; GOT
001B6E  3  20 C1 05             jsr gotob
001B71  3  C9 FF                cmp #255
001B73  3  F0 03                beq :+
001B75  3  4C 8C 1B             jmp a02416
001B78  3               :
001B78  3  A9 04                lda #4
001B7A  3  C5 rr                cmp varj
001B7C  3  F0 03                beq *+5
001B7E  3  4C 8C 1B             jmp a02416
001B81  3  A9 02                lda #2	; SPAWN
001B83  3  85 62                sta z80_c
001B85  3  A9 04                lda #4
001B87  3  85 63                sta z80_b
001B89  3  20 6C 06             jsr spawn
001B8C  3  A9 01        a02416: lda #1
001B8E  3  C5 rr                cmp varg
001B90  3  F0 03                beq *+5
001B92  3  4C D5 1B             jmp a02566
001B95  3  A9 03                lda #3
001B97  3  C5 rr                cmp varj
001B99  3  F0 03                beq *+5
001B9B  3  4C D5 1B             jmp a02566
001B9E  3  A9 00                lda #0
001BA0  3  85 rr                sta varg
001BA2  3  A9 16                lda #22
001BA4  3  85 rr                sta chary
001BA6  3  A9 08                lda #8
001BA8  3  85 rr                sta charx
001BAA  3  A9 03                lda #3  	; MESSAGE
001BAC  3  20 54 0D             jsr dmsg
001BAF  3  A9 AF                lda #175
001BB1  3  A0 09                ldy #9
001BB3  3  D1 68                cmp (z80_ix),y
001BB5  3  90 03                bcc *+5
001BB7  3  4C C6 1B             jmp a02535
001BBA  3  A9 02                lda #2
001BBC  3  A0 0C                ldy #12
001BBE  3  91 68                sta (z80_ix),y
001BC0  3  A9 01                lda #1
001BC2  3  A0 0A                ldy #10
001BC4  3  91 68                sta (z80_ix),y
001BC6  3  A9 01        a02535: lda #1
001BC8  3  85 rr                sta varh
001BCA  3  A9 02                lda #2	; SPAWN
001BCC  3  85 62                sta z80_c
001BCE  3  A9 04                lda #4
001BD0  3  85 63                sta z80_b
001BD2  3  20 6C 06             jsr spawn
001BD5  3  A9 08        a02566: lda #8
001BD7  3  C5 rr                cmp scno
001BD9  3  90 03                bcc *+5
001BDB  3  4C F3 1B             jmp a02627
001BDE  3  A9 0A                lda #10
001BE0  3  C5 rr                cmp scno
001BE2  3  B0 03                bcs *+5
001BE4  3  4C F3 1B             jmp a02627
001BE7  3  A5 rr                lda varm
001BE9  3  A0 08                ldy #8
001BEB  3  91 68                sta (z80_ix),y
001BED  3  A5 rr                lda vari
001BEF  3  A0 09                ldy #9
001BF1  3  91 68                sta (z80_ix),y
001BF3  3  4C 05 1C     a02627: jmp a02663
001BF6  3  A9 FF        a02632: lda #255
001BF8  3  C5 rr                cmp varobj
001BFA  3  F0 03                beq *+5
001BFC  3  4C 05 1C             jmp a02663
001BFF  3  A9 00                lda #0
001C01  3  A0 0B                ldy #11
001C03  3  91 68                sta (z80_ix),y
001C05  3  A5 rr        a02663: lda joyval	; KEY
001C07  3  29 01                and #1
001C09  3  F0 03                beq :+
001C0B  3  4C 37 1C             jmp a02774
001C0E  3               :
001C0E  3  A9 00                lda #0
001C10  3  A0 06                ldy #6
001C12  3  91 68                sta (z80_ix),y
001C14  3  A9 03                lda #3
001C16  3  85 rr                sta varf
001C18  3  A9 00                lda #0
001C1A  3  C5 rr                cmp vara
001C1C  3  F0 03                beq *+5
001C1E  3  4C 26 1C             jmp a02732
001C21  3  A9 00                lda #0		; ANIMATE
001C23  3  20 64 11             jsr animsp
001C26  3  20 DF 0A     a02732: jsr cangr	; CANGORIGHT
001C29  3  F0 03                beq :+
001C2B  3  4C 37 1C             jmp a02774
001C2E  3               :
001C2E  3  A0 09                ldy #9 		; SPRITERIGHT
001C30  3  B1 68                lda (z80_ix),y
001C32  3  18                   clc
001C33  3  69 02                adc #2
001C35  3  91 68                sta (z80_ix),y
001C37  3  A5 rr        a02774: lda joyval	; KEY
001C39  3  29 02                and #2
001C3B  3  F0 03                beq :+
001C3D  3  4C 69 1C             jmp a02885
001C40  3               :
001C40  3  A9 01                lda #1
001C42  3  A0 06                ldy #6
001C44  3  91 68                sta (z80_ix),y
001C46  3  A9 02                lda #2
001C48  3  85 rr                sta varf
001C4A  3  A9 00                lda #0
001C4C  3  C5 rr                cmp vara
001C4E  3  F0 03                beq *+5
001C50  3  4C 58 1C             jmp a02843
001C53  3  A9 00                lda #0		; ANIMATE
001C55  3  20 64 11             jsr animsp
001C58  3  20 CD 0A     a02843: jsr cangl	; CANGOLEFT
001C5B  3  F0 03                beq :+
001C5D  3  4C 69 1C             jmp a02885
001C60  3               :
001C60  3  A0 09                ldy #9 		; SPRITELEFT
001C62  3  B1 68                lda (z80_ix),y
001C64  3  38                   sec
001C65  3  E9 02                sbc #2
001C67  3  91 68                sta (z80_ix),y
001C69  3  A5 rr        a02885: lda joyval	; KEY
001C6B  3  29 04                and #4
001C6D  3  F0 03                beq :+
001C6F  3  4C 95 1C             jmp a02982
001C72  3               :
001C72  3  A9 01                lda #1
001C74  3  85 rr                sta varf
001C76  3  A9 00                lda #0
001C78  3  C5 rr                cmp vara
001C7A  3  F0 03                beq *+5
001C7C  3  4C 84 1C             jmp a02940
001C7F  3  A9 00                lda #0		; ANIMATE
001C81  3  20 64 11             jsr animsp
001C84  3  20 98 0A     a02940: jsr cangd	; CANGODOWN
001C87  3  F0 03                beq :+
001C89  3  4C 95 1C             jmp a02982
001C8C  3               :
001C8C  3  A0 08                ldy #8 		; SPRITEDOWN
001C8E  3  B1 68                lda (z80_ix),y
001C90  3  18                   clc
001C91  3  69 02                adc #2
001C93  3  91 68                sta (z80_ix),y
001C95  3  A5 rr        a02982: lda joyval	; KEY
001C97  3  29 08                and #8
001C99  3  F0 03                beq :+
001C9B  3  4C E4 1C             jmp a03149
001C9E  3               :
001C9E  3  A9 00                lda #0
001CA0  3  85 rr                sta varf
001CA2  3  A9 00                lda #0
001CA4  3  C5 rr                cmp vara
001CA6  3  F0 03                beq *+5
001CA8  3  4C B0 1C             jmp a03037
001CAB  3  A9 00                lda #0		; ANIMATE
001CAD  3  20 64 11             jsr animsp
001CB0  3  A9 08        a03037: lda #8
001CB2  3  A0 08                ldy #8
001CB4  3  D1 68                cmp (z80_ix),y
001CB6  3  F0 03                beq *+5
001CB8  3  4C D3 1C             jmp a03108
001CBB  3  A9 01                lda #1
001CBD  3  C5 rr                cmp scno
001CBF  3  F0 03                beq *+5
001CC1  3  4C D3 1C             jmp a03108
001CC4  3  A0 0C                ldy #12
001CC6  3  B1 68                lda (z80_ix),y
001CC8  3  85 rr                sta scno
001CCA  3  20 B8 12             jsr nwscr
001CCD  3  A9 92                lda #146
001CCF  3  A0 08                ldy #8
001CD1  3  91 68                sta (z80_ix),y
001CD3  3  20 63 0A     a03108: jsr cangu	; CANGOUP
001CD6  3  F0 03                beq :+
001CD8  3  4C E4 1C             jmp a03149
001CDB  3               :
001CDB  3  A0 08                ldy #8 		; SPRITEUP
001CDD  3  B1 68                lda (z80_ix),y
001CDF  3  38                   sec
001CE0  3  E9 02                sbc #2
001CE2  3  91 68                sta (z80_ix),y
001CE4  3  A5 rr        a03149: lda joyval	; KEY
001CE6  3  29 01                and #1
001CE8  3  F0 03                beq :+
001CEA  3  4C F0 1C             jmp a03173
001CED  3               :
001CED  3  4C 1A 1D             jmp a03258
001CF0  3  A5 rr        a03173: lda joyval	; KEY
001CF2  3  29 02                and #2
001CF4  3  F0 03                beq :+
001CF6  3  4C FC 1C             jmp a03197
001CF9  3               :
001CF9  3  4C 1A 1D             jmp a03258
001CFC  3  A5 rr        a03197: lda joyval	; KEY
001CFE  3  29 04                and #4
001D00  3  F0 03                beq :+
001D02  3  4C 08 1D             jmp a03221
001D05  3               :
001D05  3  4C 1A 1D             jmp a03258
001D08  3  A5 rr        a03221: lda joyval	; KEY
001D0A  3  29 08                and #8
001D0C  3  F0 03                beq :+
001D0E  3  4C 14 1D             jmp a03244
001D11  3               :
001D11  3  4C 1A 1D             jmp a03258
001D14  3  A9 00        a03244: lda #0
001D16  3  A0 07                ldy #7
001D18  3  91 68                sta (z80_ix),y
001D1A  3  A0 08        a03258: ldy #8
001D1C  3  B1 68                lda (z80_ix),y
001D1E  3  85 rr                sta varo
001D20  3  A0 09                ldy #9
001D22  3  B1 68                lda (z80_ix),y
001D24  3  85 rr                sta varp
001D26  3  A9 0A        a03285: lda #10
001D28  3  C5 rr                cmp scno
001D2A  3  F0 03                beq *+5
001D2C  3  4C 6A 1D             jmp a03417
001D2F  3  A9 38                lda #56
001D31  3  A0 08                ldy #8
001D33  3  D1 68                cmp (z80_ix),y
001D35  3  90 03                bcc *+5
001D37  3  4C 67 1D             jmp a03412
001D3A  3  A9 4A                lda #74
001D3C  3  A0 08                ldy #8
001D3E  3  D1 68                cmp (z80_ix),y
001D40  3  B0 03                bcs *+5
001D42  3  4C 67 1D             jmp a03412
001D45  3  A9 0A                lda #10		; GOT
001D47  3  20 C1 05             jsr gotob
001D4A  3  C9 FF                cmp #255
001D4C  3  F0 03                beq :+
001D4E  3  4C 67 1D             jmp a03412
001D51  3               :
001D51  3  A9 0A                lda #10
001D53  3  C5 rr                cmp varj
001D55  3  F0 03                beq *+5
001D57  3  4C 67 1D             jmp a03412
001D5A  3  A9 38                lda #56
001D5C  3  C5 rr                cmp vare
001D5E  3  90 03                bcc *+5
001D60  3  4C 67 1D             jmp a03412
001D63  3  A9 38                lda #56
001D65  3  85 rr                sta vare
001D67  3  4C 9B 1D     a03412: jmp a03517
001D6A  3  A5 rr        a03417: lda joyval	; KEY
001D6C  3  29 10                and #16
001D6E  3  F0 03                beq :+
001D70  3  4C 9B 1D             jmp a03517
001D73  3               :
001D73  3  A9 0B                lda #11		; GOT
001D75  3  20 C1 05             jsr gotob
001D78  3  C9 FF                cmp #255
001D7A  3  F0 03                beq :+
001D7C  3  4C 9B 1D             jmp a03517
001D7F  3               :
001D7F  3  A9 0B                lda #11
001D81  3  C5 rr                cmp varj
001D83  3  F0 03                beq *+5
001D85  3  4C 9B 1D             jmp a03517
001D88  3  A9 40                lda #64
001D8A  3  A0 08                ldy #8
001D8C  3  91 68                sta (z80_ix),y
001D8E  3  A9 78                lda #120
001D90  3  A0 09                ldy #9
001D92  3  91 68                sta (z80_ix),y
001D94  3  A9 0A                lda #10
001D96  3  85 rr                sta scno
001D98  3  20 B8 12             jsr nwscr
001D9B  3  60           a03517: rts
001D9C  3               evnt01:
001D9C  3  A9 E8                lda #232
001D9E  3  A0 09                ldy #9
001DA0  3  D1 68                cmp (z80_ix),y
001DA2  3  F0 03                beq *+5
001DA4  3  4C 05 1E             jmp b00223
001DA7  3  A5 rr                lda joyval	; KEY
001DA9  3  29 20                and #32
001DAB  3  F0 03                beq :+
001DAD  3  4C FF 1D             jmp b00210
001DB0  3               :
001DB0  3  A9 00                lda #0
001DB2  3  A0 0A                ldy #10
001DB4  3  D1 68                cmp (z80_ix),y
001DB6  3  F0 03                beq *+5
001DB8  3  4C FC 1D             jmp b00205
001DBB  3  A9 01                lda #1
001DBD  3  A0 0A                ldy #10
001DBF  3  91 68                sta (z80_ix),y
001DC1  3  A9 0A                lda #10
001DC3  3  C5 rr                cmp varj
001DC5  3  B0 03                bcs *+5
001DC7  3  4C D9 1D             jmp b00128
001DCA  3  A5 rr                lda varj
001DCC  3  18                   clc
001DCD  3  69 01                adc #1
001DCF  3  85 rr                sta varj
001DD1  3  A5 rr                lda varj
001DD3  3  0A                   asl a
001DD4  3  85 rr                sta varj
001DD6  3  4C EA 1D             jmp b00164
001DD9  3  A9 17        b00128: lda #23
001DDB  3  85 rr                sta chary
001DDD  3  A9 18                lda #24
001DDF  3  85 rr                sta charx
001DE1  3  A9 0D                lda #13  	; MESSAGE
001DE3  3  20 54 0D             jsr dmsg
001DE6  3  A9 00                lda #0
001DE8  3  85 rr                sta varj
001DEA  3  A9 17        b00164: lda #23
001DEC  3  85 rr                sta chary
001DEE  3  A5 rr                lda varj
001DF0  3  85 rr                sta charx
001DF2  3  A9 0C                lda #12  	; MESSAGE
001DF4  3  20 54 0D             jsr dmsg
001DF7  3  A5 rr                lda varj
001DF9  3  4A                   lsr a
001DFA  3  85 rr                sta varj
001DFC  3  4C 05 1E     b00205: jmp b00223
001DFF  3  A9 00        b00210: lda #0
001E01  3  A0 0A                ldy #10
001E03  3  91 68                sta (z80_ix),y
001E05  3  A9 E0        b00223: lda #224
001E07  3  A0 09                ldy #9
001E09  3  D1 68                cmp (z80_ix),y
001E0B  3  B0 03                bcs *+5
001E0D  3  4C F0 1E             jmp b00733
001E10  3  A9 00                lda #0 	; COLLISION
001E12  3  85 63                sta z80_b
001E14  3  20 AF 11             jsr sktyp
001E17  3  B0 03                bcs :+
001E19  3  4C 64 1E             jmp b00425
001E1C  3               :
001E1C  3  A9 00                lda #0
001E1E  3  A0 0C                ldy #12
001E20  3  D1 68                cmp (z80_ix),y
001E22  3  F0 03                beq *+5
001E24  3  4C 64 1E             jmp b00425
001E27  3  A9 3C                lda #60
001E29  3  A0 0C                ldy #12
001E2B  3  91 68                sta (z80_ix),y
001E2D  3  A5 rr                lda skptr	; OTHER
001E2F  3  85 68                sta z80_x
001E31  3  A5 rr                lda skptr+1
001E33  3  85 69                sta z80_i
001E35  3  A9 09                lda #9		; GOT
001E37  3  20 C1 05             jsr gotob
001E3A  3  C9 FF                cmp #255
001E3C  3  F0 03                beq :+
001E3E  3  4C 56 1E             jmp b00390
001E41  3               :
001E41  3  A9 09                lda #9
001E43  3  C5 rr                cmp varj
001E45  3  F0 03                beq *+5
001E47  3  4C 4D 1E             jmp b00372
001E4A  3  4C 53 1E             jmp b00385
001E4D  3  A9 05        b00372: lda #5
001E4F  3  A0 06                ldy #6
001E51  3  91 68                sta (z80_ix),y
001E53  3  4C 5C 1E     b00385: jmp b00403
001E56  3  A9 05        b00390: lda #5
001E58  3  A0 06                ldy #6
001E5A  3  91 68                sta (z80_ix),y
001E5C  3  A5 rr        b00403: lda ogptr	; ENDSPRITE
001E5E  3  85 68                sta z80_x
001E60  3  A5 rr                lda ogptr+1
001E62  3  85 69                sta z80_i
001E64  3  A9 00        b00425: lda #0
001E66  3  A0 0C                ldy #12
001E68  3  D1 68                cmp (z80_ix),y
001E6A  3  90 03                bcc *+5
001E6C  3  4C 7A 1E             jmp b00473
001E6F  3  A0 0C                ldy #12
001E71  3  B1 68                lda (z80_ix),y
001E73  3  38                   sec
001E74  3  E9 01                sbc #1
001E76  3  A0 0C                ldy #12
001E78  3  91 68                sta (z80_ix),y
001E7A  3  A9 90        b00473: lda #144
001E7C  3  A0 08                ldy #8
001E7E  3  D1 68                cmp (z80_ix),y
001E80  3  F0 03                beq *+5
001E82  3  4C 92 1E             jmp b00524
001E85  3  A9 00                lda #0
001E87  3  85 rr                sta varb
001E89  3  A9 FF                lda #255	; REMOVE
001E8B  3  A0 05                ldy #5
001E8D  3  91 68                sta (z80_ix),y
001E8F  3  4C CB 1E             jmp b00653
001E92  3  A9 00        b00524: lda #0
001E94  3  C5 rr                cmp vara
001E96  3  F0 03                beq *+5
001E98  3  4C CB 1E             jmp b00653
001E9B  3  A9 03                lda #3
001E9D  3  A0 0B                ldy #11
001E9F  3  D1 68                cmp (z80_ix),y
001EA1  3  B0 03                bcs *+5
001EA3  3  4C B4 1E             jmp b00594
001EA6  3  A0 0B                ldy #11
001EA8  3  B1 68                lda (z80_ix),y
001EAA  3  18                   clc
001EAB  3  69 01                adc #1
001EAD  3  A0 0B                ldy #11
001EAF  3  91 68                sta (z80_ix),y
001EB1  3  4C BA 1E             jmp b00608
001EB4  3  A9 01        b00594: lda #1
001EB6  3  A0 0B                ldy #11
001EB8  3  91 68                sta (z80_ix),y
001EBA  3  A0 08        b00608: ldy #8 		; SPRITEDOWN
001EBC  3  B1 68                lda (z80_ix),y
001EBE  3  18                   clc
001EBF  3  69 02                adc #2
001EC1  3  91 68                sta (z80_ix),y
001EC3  3  A0 0B                ldy #11
001EC5  3  B1 68                lda (z80_ix),y
001EC7  3  A0 07                ldy #7
001EC9  3  91 68                sta (z80_ix),y
001ECB  3  A9 02        b00653: lda #2 	; COLLISION
001ECD  3  85 63                sta z80_b
001ECF  3  20 AF 11             jsr sktyp
001ED2  3  B0 03                bcs :+
001ED4  3  4C F0 1E             jmp b00733
001ED7  3               :
001ED7  3  A9 00                lda #0
001ED9  3  C5 rr                cmp varh
001EDB  3  F0 03                beq *+5
001EDD  3  4C F0 1E             jmp b00733
001EE0  3  A9 00                lda #0
001EE2  3  85 rr                sta varb
001EE4  3  A9 5A                lda #90		; BEEP
001EE6  3  0A                   asl a
001EE7  3  8D E9 02             sta sndtyp
001EEA  3  A9 FF                lda #255	; REMOVE
001EEC  3  A0 05                ldy #5
001EEE  3  91 68                sta (z80_ix),y
001EF0  3  60           b00733: rts
001EF1  3               evnt02:
001EF1  3  A9 00                lda #0
001EF3  3  C5 rr                cmp varh
001EF5  3  F0 03                beq *+5
001EF7  3  4C 78 1F             jmp c00291
001EFA  3  A9 02                lda #2
001EFC  3  C5 rr                cmp varj
001EFE  3  F0 03                beq *+5
001F00  3  4C 33 1F             jmp c00145
001F03  3  A9 06                lda #6
001F05  3  C5 rr                cmp scno
001F07  3  F0 03                beq *+5
001F09  3  4C 33 1F             jmp c00145
001F0C  3  A9 04                lda #4 	; COLLISION
001F0E  3  85 63                sta z80_b
001F10  3  20 AF 11             jsr sktyp
001F13  3  B0 03                bcs :+
001F15  3  4C 33 1F             jmp c00145
001F18  3               :
001F18  3  A5 rr                lda skptr	; OTHER
001F1A  3  85 68                sta z80_x
001F1C  3  A5 rr                lda skptr+1
001F1E  3  85 69                sta z80_i
001F20  3  A0 0B                ldy #11
001F22  3  B1 68                lda (z80_ix),y
001F24  3  18                   clc
001F25  3  69 01                adc #1
001F27  3  A0 0B                ldy #11
001F29  3  91 68                sta (z80_ix),y
001F2B  3  A5 rr                lda ogptr	; ENDSPRITE
001F2D  3  85 68                sta z80_x
001F2F  3  A5 rr                lda ogptr+1
001F31  3  85 69                sta z80_i
001F33  3  A9 04        c00145: lda #4
001F35  3  C5 rr                cmp varj
001F37  3  F0 03                beq *+5
001F39  3  4C 51 1F             jmp c00206
001F3C  3  A9 0C                lda #12		; GOT
001F3E  3  20 C1 05             jsr gotob
001F41  3  C9 FF                cmp #255
001F43  3  F0 03                beq :+
001F45  3  4C 4B 1F             jmp c00190
001F48  3               :
001F48  3  4C 51 1F             jmp c00206
001F4B  3  A9 FF        c00190: lda #255	; REMOVE
001F4D  3  A0 05                ldy #5
001F4F  3  91 68                sta (z80_ix),y
001F51  3  A0 0B        c00206: ldy #11
001F53  3  B1 68                lda (z80_ix),y
001F55  3  18                   clc
001F56  3  69 01                adc #1
001F58  3  A0 0B                ldy #11
001F5A  3  91 68                sta (z80_ix),y
001F5C  3  A9 04                lda #4
001F5E  3  A0 0B                ldy #11
001F60  3  D1 68                cmp (z80_ix),y
001F62  3  B0 03                bcs *+5
001F64  3  4C 6F 1F             jmp c00271
001F67  3  A9 00                lda #0		; ANIMATE
001F69  3  20 64 11             jsr animsp
001F6C  3  4C 75 1F             jmp c00287
001F6F  3  A9 FF        c00271: lda #255	; REMOVE
001F71  3  A0 05                ldy #5
001F73  3  91 68                sta (z80_ix),y
001F75  3  4C 8D 1F     c00287: jmp c00336
001F78  3  A9 01        c00291: lda #1
001F7A  3  C5 rr                cmp varh
001F7C  3  F0 03                beq *+5
001F7E  3  4C 8D 1F             jmp c00336
001F81  3  A9 01                lda #1
001F83  3  A0 07                ldy #7
001F85  3  91 68                sta (z80_ix),y
001F87  3  A9 28                lda #40		; BEEP
001F89  3  0A                   asl a
001F8A  3  8D E9 02             sta sndtyp
001F8D  3  60           c00336: rts
001F8E  3               evnt03:
001F8E  3  A9 02                lda #2 	; COLLISION
001F90  3  85 63                sta z80_b
001F92  3  20 AF 11             jsr sktyp
001F95  3  B0 03                bcs :+
001F97  3  4C E2 1F             jmp d00170
001F9A  3               :
001F9A  3  A9 00                lda #0
001F9C  3  C5 rr                cmp varh
001F9E  3  F0 03                beq *+5
001FA0  3  4C E2 1F             jmp d00170
001FA3  3  A9 04                lda #4
001FA5  3  C5 rr                cmp varj
001FA7  3  F0 03                beq *+5
001FA9  3  4C E2 1F             jmp d00170
001FAC  3  A9 04                lda #4		; GOT
001FAE  3  20 C1 05             jsr gotob
001FB1  3  C9 FF                cmp #255
001FB3  3  F0 03                beq :+
001FB5  3  4C E2 1F             jmp d00170
001FB8  3               :
001FB8  3  A9 0C                lda #12		; GOT
001FBA  3  20 C1 05             jsr gotob
001FBD  3  C9 FF                cmp #255
001FBF  3  F0 03                beq :+
001FC1  3  4C E2 1F             jmp d00170
001FC4  3               :
001FC4  3  A9 07                lda #7
001FC6  3  A0 06                ldy #6
001FC8  3  D1 68                cmp (z80_ix),y
001FCA  3  D0 03                bne *+5
001FCC  3  4C E2 1F             jmp d00170
001FCF  3  A9 48                lda #72
001FD1  3  C5 rr                cmp vare
001FD3  3  90 03                bcc *+5
001FD5  3  4C DC 1F             jmp d00154
001FD8  3  A9 48                lda #72
001FDA  3  85 rr                sta vare
001FDC  3  A9 FF        d00154: lda #255	; REMOVE
001FDE  3  A0 05                ldy #5
001FE0  3  91 68                sta (z80_ix),y
001FE2  3  A9 00        d00170: lda #0 	; COLLISION
001FE4  3  85 63                sta z80_b
001FE6  3  20 AF 11             jsr sktyp
001FE9  3  B0 03                bcs :+
001FEB  3  4C 15 20             jmp d00286
001FEE  3               :
001FEE  3  A9 00                lda #0
001FF0  3  A0 0A                ldy #10
001FF2  3  D1 68                cmp (z80_ix),y
001FF4  3  F0 03                beq *+5
001FF6  3  4C 15 20             jmp d00286
001FF9  3  A9 32                lda #50
001FFB  3  A0 0A                ldy #10
001FFD  3  91 68                sta (z80_ix),y
001FFF  3  A5 rr                lda skptr	; OTHER
002001  3  85 68                sta z80_x
002003  3  A5 rr                lda skptr+1
002005  3  85 69                sta z80_i
002007  3  A9 05                lda #5
002009  3  A0 06                ldy #6
00200B  3  91 68                sta (z80_ix),y
00200D  3  A5 rr                lda ogptr	; ENDSPRITE
00200F  3  85 68                sta z80_x
002011  3  A5 rr                lda ogptr+1
002013  3  85 69                sta z80_i
002015  3  A9 00        d00286: lda #0
002017  3  A0 0A                ldy #10
002019  3  D1 68                cmp (z80_ix),y
00201B  3  90 03                bcc *+5
00201D  3  4C 2B 20             jmp d00335
002020  3  A0 0A                ldy #10
002022  3  B1 68                lda (z80_ix),y
002024  3  38                   sec
002025  3  E9 01                sbc #1
002027  3  A0 0A                ldy #10
002029  3  91 68                sta (z80_ix),y
00202B  3  A9 07        d00335: lda #7
00202D  3  A0 06                ldy #6
00202F  3  D1 68                cmp (z80_ix),y
002031  3  F0 03                beq *+5
002033  3  4C 4E 20             jmp d00406
002036  3  A9 77                lda #119
002038  3  C5 rr                cmp varo
00203A  3  90 03                bcc *+5
00203C  3  4C 48 20             jmp d00392
00203F  3  A9 01                lda #1
002041  3  A0 0C                ldy #12
002043  3  91 68                sta (z80_ix),y
002045  3  4C 4E 20             jmp d00406
002048  3  A9 00        d00392: lda #0
00204A  3  A0 0C                ldy #12
00204C  3  91 68                sta (z80_ix),y
00204E  3  A9 09        d00406: lda #9
002050  3  A0 06                ldy #6
002052  3  D1 68                cmp (z80_ix),y
002054  3  F0 03                beq *+5
002056  3  4C 8A 20             jmp d00529
002059  3  A9 F9                lda #249
00205B  3  C5 rr                cmp varrnd
00205D  3  B0 03                bcs *+5
00205F  3  4C 8A 20             jmp d00529
002062  3  A9 09                lda #9
002064  3  85 65                sta z80_d	; GETRANDOM
002066  3  20 4F 0C             jsr random
002069  3  85 67                sta z80_h
00206B  3  20 00 05             jsr imul
00206E  3  A5 67                lda z80_h
002070  3  85 rr                sta varrnd
002072  3  A9 06                lda #6
002074  3  C5 rr                cmp varrnd
002076  3  90 03                bcc *+5
002078  3  4C 84 20             jmp d00515
00207B  3  A9 01                lda #1
00207D  3  A0 0C                ldy #12
00207F  3  91 68                sta (z80_ix),y
002081  3  4C 8A 20             jmp d00529
002084  3  A9 00        d00515: lda #0
002086  3  A0 0C                ldy #12
002088  3  91 68                sta (z80_ix),y
00208A  3  A9 00        d00529: lda #0
00208C  3  A0 0C                ldy #12
00208E  3  D1 68                cmp (z80_ix),y
002090  3  F0 03                beq *+5
002092  3  4C 27 21             jmp d00881
002095  3  A0 0B                ldy #11
002097  3  B1 68                lda (z80_ix),y
002099  3  18                   clc
00209A  3  69 01                adc #1
00209C  3  A0 0B                ldy #11
00209E  3  91 68                sta (z80_ix),y
0020A0  3  A9 02                lda #2
0020A2  3  A0 0B                ldy #11
0020A4  3  D1 68                cmp (z80_ix),y
0020A6  3  90 03                bcc *+5
0020A8  3  4C 27 21             jmp d00881
0020AB  3  A9 00                lda #0
0020AD  3  A0 0B                ldy #11
0020AF  3  91 68                sta (z80_ix),y
0020B1  3  A5 rr                lda varp
0020B3  3  A0 09                ldy #9
0020B5  3  D1 68                cmp (z80_ix),y
0020B7  3  90 03                bcc *+5
0020B9  3  4C D0 20             jmp d00682
0020BC  3  20 CD 0A             jsr cangl	; CANGOLEFT
0020BF  3  F0 03                beq :+
0020C1  3  4C CD 20             jmp d00678
0020C4  3               :
0020C4  3  A0 09                ldy #9 		; SPRITELEFT
0020C6  3  B1 68                lda (z80_ix),y
0020C8  3  38                   sec
0020C9  3  E9 02                sbc #2
0020CB  3  91 68                sta (z80_ix),y
0020CD  3  4C EC 20     d00678: jmp d00748
0020D0  3  A5 rr        d00682: lda varp
0020D2  3  A0 09                ldy #9
0020D4  3  D1 68                cmp (z80_ix),y
0020D6  3  D0 03                bne *+5
0020D8  3  4C EC 20             jmp d00748
0020DB  3  20 DF 0A             jsr cangr	; CANGORIGHT
0020DE  3  F0 03                beq :+
0020E0  3  4C EC 20             jmp d00748
0020E3  3               :
0020E3  3  A0 09                ldy #9 		; SPRITERIGHT
0020E5  3  B1 68                lda (z80_ix),y
0020E7  3  18                   clc
0020E8  3  69 02                adc #2
0020EA  3  91 68                sta (z80_ix),y
0020EC  3  A5 rr        d00748: lda varo
0020EE  3  A0 08                ldy #8
0020F0  3  D1 68                cmp (z80_ix),y
0020F2  3  90 03                bcc *+5
0020F4  3  4C 0B 21             jmp d00816
0020F7  3  20 63 0A             jsr cangu	; CANGOUP
0020FA  3  F0 03                beq :+
0020FC  3  4C 08 21             jmp d00811
0020FF  3               :
0020FF  3  A0 08                ldy #8 		; SPRITEUP
002101  3  B1 68                lda (z80_ix),y
002103  3  38                   sec
002104  3  E9 02                sbc #2
002106  3  91 68                sta (z80_ix),y
002108  3  4C 27 21     d00811: jmp d00881
00210B  3  A5 rr        d00816: lda varo
00210D  3  A0 08                ldy #8
00210F  3  D1 68                cmp (z80_ix),y
002111  3  D0 03                bne *+5
002113  3  4C 27 21             jmp d00881
002116  3  20 98 0A             jsr cangd	; CANGODOWN
002119  3  F0 03                beq :+
00211B  3  4C 27 21             jmp d00881
00211E  3               :
00211E  3  A0 08                ldy #8 		; SPRITEDOWN
002120  3  B1 68                lda (z80_ix),y
002122  3  18                   clc
002123  3  69 02                adc #2
002125  3  91 68                sta (z80_ix),y
002127  3  A9 00        d00881: lda #0
002129  3  C5 rr                cmp vara
00212B  3  F0 03                beq *+5
00212D  3  4C 35 21             jmp d00909
002130  3  A9 00                lda #0		; ANIMATE
002132  3  20 64 11             jsr animsp
002135  3  60           d00909: rts
002136  3               evnt04:
002136  3  A9 06                lda #6
002138  3  C5 rr                cmp scno
00213A  3  F0 03                beq *+5
00213C  3  4C AC 21             jmp e00270
00213F  3  A9 00                lda #0 	; COLLISION
002141  3  85 63                sta z80_b
002143  3  20 AF 11             jsr sktyp
002146  3  B0 03                bcs :+
002148  3  4C 7F 21             jmp e00175
00214B  3               :
00214B  3  A5 rr                lda skptr	; OTHER
00214D  3  85 68                sta z80_x
00214F  3  A5 rr                lda skptr+1
002151  3  85 69                sta z80_i
002153  3  A5 rr                lda joyval	; KEY
002155  3  29 01                and #1
002157  3  F0 03                beq :+
002159  3  4C 65 21             jmp e00109
00215C  3               :
00215C  3  A0 09                ldy #9 		; SPRITELEFT
00215E  3  B1 68                lda (z80_ix),y
002160  3  38                   sec
002161  3  E9 02                sbc #2
002163  3  91 68                sta (z80_ix),y
002165  3  A5 rr        e00109: lda joyval	; KEY
002167  3  29 02                and #2
002169  3  F0 03                beq :+
00216B  3  4C 77 21             jmp e00154
00216E  3               :
00216E  3  A0 09                ldy #9 		; SPRITERIGHT
002170  3  B1 68                lda (z80_ix),y
002172  3  18                   clc
002173  3  69 02                adc #2
002175  3  91 68                sta (z80_ix),y
002177  3  A5 rr        e00154: lda ogptr	; ENDSPRITE
002179  3  85 68                sta z80_x
00217B  3  A5 rr                lda ogptr+1
00217D  3  85 69                sta z80_i
00217F  3  A9 0F        e00175: lda #15
002181  3  A0 0B                ldy #11
002183  3  D1 68                cmp (z80_ix),y
002185  3  90 03                bcc *+5
002187  3  4C A9 21             jmp e00265
00218A  3  A9 00                lda #0
00218C  3  A0 0B                ldy #11
00218E  3  91 68                sta (z80_ix),y
002190  3  A9 01                lda #1
002192  3  A0 07                ldy #7
002194  3  D1 68                cmp (z80_ix),y
002196  3  B0 03                bcs *+5
002198  3  4C A3 21             jmp e00249
00219B  3  A9 00                lda #0		; ANIMATE
00219D  3  20 64 11             jsr animsp
0021A0  3  4C A9 21             jmp e00265
0021A3  3  A9 FF        e00249: lda #255	; REMOVE
0021A5  3  A0 05                ldy #5
0021A7  3  91 68                sta (z80_ix),y
0021A9  3  4C 33 22     e00265: jmp e00556
0021AC  3  A9 03        e00270: lda #3
0021AE  3  A0 0B                ldy #11
0021B0  3  D1 68                cmp (z80_ix),y
0021B2  3  B0 03                bcs *+5
0021B4  3  4C 21 22             jmp e00515
0021B7  3  A0 0B                ldy #11
0021B9  3  B1 68                lda (z80_ix),y
0021BB  3  18                   clc
0021BC  3  69 01                adc #1
0021BE  3  A0 0B                ldy #11
0021C0  3  91 68                sta (z80_ix),y
0021C2  3  A9 04                lda #4
0021C4  3  A0 0B                ldy #11
0021C6  3  D1 68                cmp (z80_ix),y
0021C8  3  F0 03                beq *+5
0021CA  3  4C 1E 22             jmp e00510
0021CD  3  A9 D8                lda #216
0021CF  3  A0 09                ldy #9
0021D1  3  D1 68                cmp (z80_ix),y
0021D3  3  B0 03                bcs *+5
0021D5  3  4C EA 21             jmp e00403
0021D8  3  A9 08                lda #8
0021DA  3  85 62                sta z80_c
0021DC  3  A0 09                ldy #9
0021DE  3  B1 68                lda (z80_ix),y
0021E0  3  18                   clc
0021E1  3  65 62                adc z80_c
0021E3  3  A0 09                ldy #9
0021E5  3  91 68                sta (z80_ix),y
0021E7  3  4C 1E 22             jmp e00510
0021EA  3  A9 10        e00403: lda #16
0021EC  3  A0 09                ldy #9
0021EE  3  91 68                sta (z80_ix),y
0021F0  3  A9 08                lda #8
0021F2  3  A0 08                ldy #8
0021F4  3  D1 68                cmp (z80_ix),y
0021F6  3  F0 03                beq *+5
0021F8  3  4C 04 22             jmp e00456
0021FB  3  A9 48                lda #72
0021FD  3  A0 08                ldy #8
0021FF  3  91 68                sta (z80_ix),y
002201  3  4C 1E 22             jmp e00510
002204  3  A9 48        e00456: lda #72
002206  3  A0 08                ldy #8
002208  3  D1 68                cmp (z80_ix),y
00220A  3  F0 03                beq *+5
00220C  3  4C 18 22             jmp e00497
00220F  3  A9 90                lda #144
002211  3  A0 08                ldy #8
002213  3  91 68                sta (z80_ix),y
002215  3  4C 1E 22             jmp e00510
002218  3  A9 08        e00497: lda #8
00221A  3  A0 08                ldy #8
00221C  3  91 68                sta (z80_ix),y
00221E  3  4C 27 22     e00510: jmp e00529
002221  3  A9 00        e00515: lda #0
002223  3  A0 0B                ldy #11
002225  3  91 68                sta (z80_ix),y
002227  3  A0 08        e00529: ldy #8
002229  3  B1 68                lda (z80_ix),y
00222B  3  85 rr                sta varm
00222D  3  A0 09                ldy #9
00222F  3  B1 68                lda (z80_ix),y
002231  3  85 rr                sta vari
002233  3  60           e00556: rts
002234  3               evnt05:
002234  3  A9 07                lda #7		; GOT
002236  3  20 C1 05             jsr gotob
002239  3  C9 FF                cmp #255
00223B  3  F0 03                beq :+
00223D  3  4C 58 22             jmp f00073
002240  3               :
002240  3  A9 07                lda #7
002242  3  C5 rr                cmp varj
002244  3  F0 03                beq *+5
002246  3  4C 52 22             jmp f00060
002249  3  A9 06                lda #6
00224B  3  A0 06                ldy #6
00224D  3  91 68                sta (z80_ix),y
00224F  3  4C 58 22             jmp f00073
002252  3  A9 00        f00060: lda #0
002254  3  A0 06                ldy #6
002256  3  91 68                sta (z80_ix),y
002258  3  A9 06        f00073: lda #6
00225A  3  A0 06                ldy #6
00225C  3  D1 68                cmp (z80_ix),y
00225E  3  F0 03                beq *+5
002260  3  4C A5 22             jmp f00248
002263  3  A5 rr                lda joyval	; KEY
002265  3  29 01                and #1
002267  3  F0 03                beq :+
002269  3  4C 7D 22             jmp f00157
00226C  3               :
00226C  3  20 DF 0A             jsr cangr	; CANGORIGHT
00226F  3  F0 03                beq :+
002271  3  4C 7D 22             jmp f00157
002274  3               :
002274  3  A0 09                ldy #9 		; SPRITERIGHT
002276  3  B1 68                lda (z80_ix),y
002278  3  18                   clc
002279  3  69 02                adc #2
00227B  3  91 68                sta (z80_ix),y
00227D  3  A5 rr        f00157: lda joyval	; KEY
00227F  3  29 02                and #2
002281  3  F0 03                beq :+
002283  3  4C 97 22             jmp f00218
002286  3               :
002286  3  20 CD 0A             jsr cangl	; CANGOLEFT
002289  3  F0 03                beq :+
00228B  3  4C 97 22             jmp f00218
00228E  3               :
00228E  3  A0 09                ldy #9 		; SPRITELEFT
002290  3  B1 68                lda (z80_ix),y
002292  3  38                   sec
002293  3  E9 02                sbc #2
002295  3  91 68                sta (z80_ix),y
002297  3  A0 08        f00218: ldy #8
002299  3  B1 68                lda (z80_ix),y
00229B  3  18                   clc
00229C  3  69 01                adc #1
00229E  3  A0 08                ldy #8
0022A0  3  91 68                sta (z80_ix),y
0022A2  3  4C A8 22             jmp f00256
0022A5  3  20 5F 13     f00248: jsr ifall	; TABLEFALL
0022A8  3  A9 90        f00256: lda #144
0022AA  3  A0 08                ldy #8
0022AC  3  D1 68                cmp (z80_ix),y
0022AE  3  F0 03                beq *+5
0022B0  3  4C BF 22             jmp f00303
0022B3  3  A9 08                lda #8
0022B5  3  85 rr                sta varo
0022B7  3  A9 78                lda #120
0022B9  3  85 rr                sta varp
0022BB  3  A9 05                lda #5
0022BD  3  85 rr                sta varn
0022BF  3  A9 05        f00303: lda #DEADLY	; DEADLY
0022C1  3  85 63                sta z80_b
0022C3  3  20 42 0B             jsr tded
0022C6  3  C5 63                cmp z80_b
0022C8  3  F0 03                beq :+
0022CA  3  4C EF 22             jmp f00399
0022CD  3               :
0022CD  3  A9 01                lda #1
0022CF  3  C5 rr                cmp varr
0022D1  3  F0 03                beq *+5
0022D3  3  4C EF 22             jmp f00399
0022D6  3  A9 40                lda #64
0022D8  3  C5 rr                cmp vare
0022DA  3  90 03                bcc *+5
0022DC  3  4C E3 22             jmp f00374
0022DF  3  A9 40                lda #64
0022E1  3  85 rr                sta vare
0022E3  3  A9 08        f00374: lda #8
0022E5  3  85 rr                sta varo
0022E7  3  A9 78                lda #120
0022E9  3  85 rr                sta varp
0022EB  3  A9 11                lda #17
0022ED  3  85 rr                sta varn
0022EF  3  4C CB 12     f00399: jmp grav
0022F2  3               evnt06:
0022F2  3  A9 08                lda #8
0022F4  3  C5 rr                cmp scno
0022F6  3  F0 03                beq *+5
0022F8  3  4C 74 24             jmp g00784
0022FB  3  A9 00                lda #0 	; COLLISION
0022FD  3  85 63                sta z80_b
0022FF  3  20 AF 11             jsr sktyp
002302  3  B0 03                bcs :+
002304  3  4C 0A 23             jmp g00048
002307  3               :
002307  3  4C 21 23             jmp g00098
00230A  3  A9 00        g00048: lda #0
00230C  3  A0 0A                ldy #10
00230E  3  91 68                sta (z80_ix),y
002310  3  A9 FE                lda #254
002312  3  A0 0B                ldy #11
002314  3  D1 68                cmp (z80_ix),y
002316  3  B0 03                bcs *+5
002318  3  4C 21 23             jmp g00098
00231B  3  A9 00                lda #0
00231D  3  A0 0B                ldy #11
00231F  3  91 68                sta (z80_ix),y
002321  3  A9 01        g00098: lda #1
002323  3  A0 0A                ldy #10
002325  3  D1 68                cmp (z80_ix),y
002327  3  F0 03                beq *+5
002329  3  4C 61 23             jmp g00231
00232C  3  A9 01                lda #1
00232E  3  C5 rr                cmp vara
002330  3  F0 03                beq *+5
002332  3  4C 4B 23             jmp g00186
002335  3  A9 FE                lda #254
002337  3  A0 0B                ldy #11
002339  3  D1 68                cmp (z80_ix),y
00233B  3  B0 03                bcs *+5
00233D  3  4C 4B 23             jmp g00186
002340  3  A0 0B                ldy #11
002342  3  B1 68                lda (z80_ix),y
002344  3  18                   clc
002345  3  69 01                adc #1
002347  3  A0 0B                ldy #11
002349  3  91 68                sta (z80_ix),y
00234B  3  A9 55        g00186: lda #85
00234D  3  A0 0B                ldy #11
00234F  3  D1 68                cmp (z80_ix),y
002351  3  F0 03                beq *+5
002353  3  4C 56 23             jmp g00208
002356  3  A9 AA        g00208: lda #170
002358  3  A0 0B                ldy #11
00235A  3  D1 68                cmp (z80_ix),y
00235C  3  F0 03                beq *+5
00235E  3  4C 61 23             jmp g00231
002361  3  A9 FF        g00231: lda #255
002363  3  A0 0B                ldy #11
002365  3  D1 68                cmp (z80_ix),y
002367  3  F0 03                beq *+5
002369  3  4C 74 24             jmp g00784
00236C  3  A9 01                lda #1
00236E  3  A0 0A                ldy #10
002370  3  D1 68                cmp (z80_ix),y
002372  3  F0 03                beq *+5
002374  3  4C 77 23             jmp g00276
002377  3  A9 00        g00276: lda #0
002379  3  C5 rr                cmp varl
00237B  3  F0 03                beq *+5
00237D  3  4C 21 24             jmp g00613
002380  3  A9 09                lda #9
002382  3  85 65                sta z80_d	; GETRANDOM
002384  3  20 4F 0C             jsr random
002387  3  85 67                sta z80_h
002389  3  20 00 05             jsr imul
00238C  3  A5 67                lda z80_h
00238E  3  85 rr                sta varrnd
002390  3  A5 rr                lda varrnd
002392  3  85 rr                sta varl
002394  3  A5 rr                lda varl
002396  3  18                   clc
002397  3  69 01                adc #1
002399  3  85 rr                sta varl
00239B  3  A9 0D                lda #13
00239D  3  85 rr                sta varm
00239F  3  A9 14                lda #20
0023A1  3  85 rr                sta vari
0023A3  3  A9 01                lda #1
0023A5  3  C5 rr                cmp varl
0023A7  3  F0 03                beq *+5
0023A9  3  4C B4 23             jmp g00401
0023AC  3  A9 05                lda #5
0023AE  3  85 rr                sta varm
0023B0  3  A9 11                lda #17
0023B2  3  85 rr                sta vari
0023B4  3  A9 02        g00401: lda #2
0023B6  3  C5 rr                cmp varl
0023B8  3  F0 03                beq *+5
0023BA  3  4C C5 23             jmp g00434
0023BD  3  A9 05                lda #5
0023BF  3  85 rr                sta varm
0023C1  3  A9 16                lda #22
0023C3  3  85 rr                sta vari
0023C5  3  A9 03        g00434: lda #3
0023C7  3  C5 rr                cmp varl
0023C9  3  F0 03                beq *+5
0023CB  3  4C D6 23             jmp g00467
0023CE  3  A9 07                lda #7
0023D0  3  85 rr                sta varm
0023D2  3  A9 11                lda #17
0023D4  3  85 rr                sta vari
0023D6  3  A9 04        g00467: lda #4
0023D8  3  C5 rr                cmp varl
0023DA  3  F0 03                beq *+5
0023DC  3  4C E7 23             jmp g00500
0023DF  3  A9 07                lda #7
0023E1  3  85 rr                sta varm
0023E3  3  A9 16                lda #22
0023E5  3  85 rr                sta vari
0023E7  3  A9 05        g00500: lda #5
0023E9  3  C5 rr                cmp varl
0023EB  3  F0 03                beq *+5
0023ED  3  4C F4 23             jmp g00524
0023F0  3  A9 08                lda #8
0023F2  3  85 rr                sta varm
0023F4  3  A9 06        g00524: lda #6
0023F6  3  C5 rr                cmp varl
0023F8  3  F0 03                beq *+5
0023FA  3  4C 01 24             jmp g00549
0023FD  3  A9 0B                lda #11
0023FF  3  85 rr                sta varm
002401  3  A9 08        g00549: lda #8
002403  3  C5 rr                cmp varl
002405  3  F0 03                beq *+5
002407  3  4C 0E 24             jmp g00574
00240A  3  A9 11                lda #17
00240C  3  85 rr                sta vari
00240E  3  A9 09        g00574: lda #9
002410  3  C5 rr                cmp varl
002412  3  F0 03                beq *+5
002414  3  4C 1B 24             jmp g00599
002417  3  A9 16                lda #22
002419  3  85 rr                sta vari
00241B  3  A9 48        g00599: lda #72
00241D  3  A0 0C                ldy #12
00241F  3  91 68                sta (z80_ix),y
002421  3  A9 00        g00613: lda #0
002423  3  C5 rr                cmp varl
002425  3  90 03                bcc *+5
002427  3  4C 67 24             jmp g00759
00242A  3  A9 4E                lda #78
00242C  3  A0 0C                ldy #12
00242E  3  D1 68                cmp (z80_ix),y
002430  3  B0 03                bcs *+5
002432  3  4C 43 24             jmp g00683
002435  3  A0 0C                ldy #12
002437  3  B1 68                lda (z80_ix),y
002439  3  18                   clc
00243A  3  69 01                adc #1
00243C  3  A0 0C                ldy #12
00243E  3  91 68                sta (z80_ix),y
002440  3  4C 49 24             jmp g00697
002443  3  A9 48        g00683: lda #72
002445  3  A0 0C                ldy #12
002447  3  91 68                sta (z80_ix),y
002449  3  A5 rr        g00697: lda varm
00244B  3  85 rr                sta chary
00244D  3  A5 rr                lda vari
00244F  3  85 rr                sta charx
002451  3  A9 07                lda #7
002453  3  C5 rr                cmp varl
002455  3  90 03                bcc *+5
002457  3  4C 62 24             jmp g00747
00245A  3  A9 0F                lda #15  	; MESSAGE
00245C  3  20 54 0D             jsr dmsg
00245F  3  4C 67 24             jmp g00759
002462  3  A9 0E        g00747: lda #14  	; MESSAGE
002464  3  20 54 0D             jsr dmsg
002467  3  A9 58        g00759: lda #88
002469  3  C5 rr                cmp vare
00246B  3  90 03                bcc *+5
00246D  3  4C 74 24             jmp g00784
002470  3  A9 58                lda #88
002472  3  85 rr                sta vare
002474  3  A9 12        g00784: lda #18
002476  3  C5 rr                cmp scno
002478  3  F0 03                beq *+5
00247A  3  4C 73 25             jmp g01345
00247D  3  A5 rr                lda vare
00247F  3  A0 08                ldy #8
002481  3  D1 68                cmp (z80_ix),y
002483  3  90 03                bcc *+5
002485  3  4C E3 24             jmp g01023
002488  3  A9 01                lda #1
00248A  3  C5 rr                cmp vara
00248C  3  F0 03                beq *+5
00248E  3  4C E0 24             jmp g01018
002491  3  A0 08                ldy #8
002493  3  B1 68                lda (z80_ix),y
002495  3  38                   sec
002496  3  E9 01                sbc #1
002498  3  A0 08                ldy #8
00249A  3  91 68                sta (z80_ix),y
00249C  3  A0 08                ldy #8
00249E  3  B1 68                lda (z80_ix),y
0024A0  3  85 rr                sta varo
0024A2  3  A9 06                lda #6
0024A4  3  A0 0B                ldy #11
0024A6  3  D1 68                cmp (z80_ix),y
0024A8  3  B0 03                bcs *+5
0024AA  3  4C BB 24             jmp g00933
0024AD  3  A0 0B                ldy #11
0024AF  3  B1 68                lda (z80_ix),y
0024B1  3  18                   clc
0024B2  3  69 01                adc #1
0024B4  3  A0 0B                ldy #11
0024B6  3  91 68                sta (z80_ix),y
0024B8  3  4C E0 24             jmp g01018
0024BB  3  A9 00        g00933: lda #0
0024BD  3  A0 0B                ldy #11
0024BF  3  91 68                sta (z80_ix),y
0024C1  3  A5 rr                lda varo
0024C3  3  4A                   lsr a
0024C4  3  4A                   lsr a
0024C5  3  4A                   lsr a
0024C6  3  85 rr                sta varo
0024C8  3  A9 03                lda #3
0024CA  3  85 62                sta z80_c
0024CC  3  A5 rr                lda varo
0024CE  3  18                   clc
0024CF  3  65 62                adc z80_c
0024D1  3  85 rr                sta varo
0024D3  3  A5 rr                lda varo
0024D5  3  85 rr                sta chary
0024D7  3  A9 0F                lda #15
0024D9  3  85 rr                sta charx
0024DB  3  A9 11                lda #17  	; MESSAGE
0024DD  3  20 54 0D             jsr dmsg
0024E0  3  4C 73 25     g01018: jmp g01345
0024E3  3  A9 28        g01023: lda #40
0024E5  3  A0 08                ldy #8
0024E7  3  D1 68                cmp (z80_ix),y
0024E9  3  F0 03                beq *+5
0024EB  3  4C 25 25             jmp g01163
0024EE  3  A9 00                lda #0
0024F0  3  A0 0C                ldy #12
0024F2  3  D1 68                cmp (z80_ix),y
0024F4  3  F0 03                beq *+5
0024F6  3  4C F9 24             jmp g01067
0024F9  3  A9 41        g01067: lda #65
0024FB  3  A0 0C                ldy #12
0024FD  3  D1 68                cmp (z80_ix),y
0024FF  3  90 03                bcc *+5
002501  3  4C 12 25             jmp g01121
002504  3  A0 0C                ldy #12
002506  3  B1 68                lda (z80_ix),y
002508  3  38                   sec
002509  3  E9 01                sbc #1
00250B  3  A0 0C                ldy #12
00250D  3  91 68                sta (z80_ix),y
00250F  3  4C 18 25             jmp g01135
002512  3  A9 47        g01121: lda #71
002514  3  A0 0C                ldy #12
002516  3  91 68                sta (z80_ix),y
002518  3  A9 02        g01135: lda #2
00251A  3  85 rr                sta chary
00251C  3  A9 0F                lda #15
00251E  3  85 rr                sta charx
002520  3  A9 10                lda #16  	; MESSAGE
002522  3  20 54 0D             jsr dmsg
002525  3  A5 rr        g01163: lda joyval	; KEY
002527  3  29 01                and #1
002529  3  F0 03                beq :+
00252B  3  4C 32 25             jmp g01193
00252E  3               :
00252E  3  A9 01                lda #1		; ENDGAME
002530  3  85 rr                sta gamwon
002532  3  A5 rr        g01193: lda joyval	; KEY
002534  3  29 02                and #2
002536  3  F0 03                beq :+
002538  3  4C 3F 25             jmp g01223
00253B  3               :
00253B  3  A9 01                lda #1		; ENDGAME
00253D  3  85 rr                sta gamwon
00253F  3  A5 rr        g01223: lda joyval	; KEY
002541  3  29 04                and #4
002543  3  F0 03                beq :+
002545  3  4C 4C 25             jmp g01253
002548  3               :
002548  3  A9 01                lda #1		; ENDGAME
00254A  3  85 rr                sta gamwon
00254C  3  A5 rr        g01253: lda joyval	; KEY
00254E  3  29 08                and #8
002550  3  F0 03                beq :+
002552  3  4C 59 25             jmp g01284
002555  3               :
002555  3  A9 01                lda #1		; ENDGAME
002557  3  85 rr                sta gamwon
002559  3  A5 rr        g01284: lda joyval	; KEY
00255B  3  29 10                and #16
00255D  3  F0 03                beq :+
00255F  3  4C 66 25             jmp g01314
002562  3               :
002562  3  A9 01                lda #1		; ENDGAME
002564  3  85 rr                sta gamwon
002566  3  A5 rr        g01314: lda joyval	; KEY
002568  3  29 20                and #32
00256A  3  F0 03                beq :+
00256C  3  4C 73 25             jmp g01345
00256F  3               :
00256F  3  A9 01                lda #1		; ENDGAME
002571  3  85 rr                sta gamwon
002573  3  60           g01345: rts
002574  3               evnt07:
002574  3  A9 01                lda #1
002576  3  C5 rr                cmp vara
002578  3  F0 03                beq *+5
00257A  3  4C 82 25             jmp h00030
00257D  3  A9 00                lda #0		; ANIMATE
00257F  3  20 64 11             jsr animsp
002582  3  A9 0F        h00030: lda #15
002584  3  C5 rr                cmp scno
002586  3  F0 03                beq *+5
002588  3  4C 9A 25             jmp h00073
00258B  3  A9 01                lda #1
00258D  3  C5 rr                cmp vara
00258F  3  F0 03                beq *+5
002591  3  4C 97 25             jmp h00068
002594  3  4C 97 25             jmp h00068
002597  3  4C B3 25     h00068: jmp h00122
00259A  3  A9 37        h00073: lda #55
00259C  3  A0 09                ldy #9
00259E  3  D1 68                cmp (z80_ix),y
0025A0  3  90 03                bcc *+5
0025A2  3  4C B3 25             jmp h00122
0025A5  3  A9 B8                lda #184
0025A7  3  A0 09                ldy #9
0025A9  3  D1 68                cmp (z80_ix),y
0025AB  3  B0 03                bcs *+5
0025AD  3  4C B3 25             jmp h00122
0025B0  3  4C B3 25             jmp h00122
0025B3  3  A9 00        h00122: lda #0 	; COLLISION
0025B5  3  85 63                sta z80_b
0025B7  3  20 AF 11             jsr sktyp
0025BA  3  B0 03                bcs :+
0025BC  3  4C D5 25             jmp h00203
0025BF  3               :
0025BF  3  A5 rr                lda skptr	; OTHER
0025C1  3  85 68                sta z80_x
0025C3  3  A5 rr                lda skptr+1
0025C5  3  85 69                sta z80_i
0025C7  3  A9 05                lda #5
0025C9  3  A0 06                ldy #6
0025CB  3  91 68                sta (z80_ix),y
0025CD  3  A5 rr                lda ogptr	; ENDSPRITE
0025CF  3  85 68                sta z80_x
0025D1  3  A5 rr                lda ogptr+1
0025D3  3  85 69                sta z80_i
0025D5  3  A9 08        h00203: lda #8
0025D7  3  A0 09                ldy #9
0025D9  3  D1 68                cmp (z80_ix),y
0025DB  3  F0 03                beq *+5
0025DD  3  4C E6 25             jmp h00238
0025E0  3  A9 01                lda #1
0025E2  3  A0 0A                ldy #10
0025E4  3  91 68                sta (z80_ix),y
0025E6  3  A9 E8        h00238: lda #232
0025E8  3  A0 09                ldy #9
0025EA  3  D1 68                cmp (z80_ix),y
0025EC  3  F0 03                beq *+5
0025EE  3  4C F7 25             jmp h00274
0025F1  3  A9 00                lda #0
0025F3  3  A0 0A                ldy #10
0025F5  3  91 68                sta (z80_ix),y
0025F7  3  A9 01        h00274: lda #1
0025F9  3  A0 0A                ldy #10
0025FB  3  D1 68                cmp (z80_ix),y
0025FD  3  F0 03                beq *+5
0025FF  3  4C 0E 26             jmp h00327
002602  3  A0 09                ldy #9 		; SPRITERIGHT
002604  3  B1 68                lda (z80_ix),y
002606  3  18                   clc
002607  3  69 02                adc #2
002609  3  91 68                sta (z80_ix),y
00260B  3  4C 17 26             jmp h00353
00260E  3  A0 09        h00327: ldy #9 		; SPRITELEFT
002610  3  B1 68                lda (z80_ix),y
002612  3  38                   sec
002613  3  E9 02                sbc #2
002615  3  91 68                sta (z80_ix),y
002617  3  60           h00353: rts
002618  3               evnt08:
002618  3  A9 10                lda #16
00261A  3  C5 rr                cmp scno
00261C  3  F0 03                beq *+5
00261E  3  4C 4C 26             jmp i00116
002621  3  A9 00                lda #0
002623  3  C5 rr                cmp varc
002625  3  F0 03                beq *+5
002627  3  4C 4C 26             jmp i00116
00262A  3  A9 00                lda #0 	; COLLISION
00262C  3  85 63                sta z80_b
00262E  3  20 AF 11             jsr sktyp
002631  3  B0 03                bcs :+
002633  3  4C 4C 26             jmp i00116
002636  3               :
002636  3  A5 rr                lda skptr	; OTHER
002638  3  85 68                sta z80_x
00263A  3  A5 rr                lda skptr+1
00263C  3  85 69                sta z80_i
00263E  3  A9 05                lda #5
002640  3  A0 06                ldy #6
002642  3  91 68                sta (z80_ix),y
002644  3  A5 rr                lda ogptr	; ENDSPRITE
002646  3  85 68                sta z80_x
002648  3  A5 rr                lda ogptr+1
00264A  3  85 69                sta z80_i
00264C  3  A9 0A        i00116: lda #10
00264E  3  C5 rr                cmp scno
002650  3  B0 03                bcs *+5
002652  3  4C 65 26             jmp i00166
002655  3  A9 00                lda #0 	; COLLISION
002657  3  85 63                sta z80_b
002659  3  20 AF 11             jsr sktyp
00265C  3  B0 03                bcs :+
00265E  3  4C 65 26             jmp i00166
002661  3               :
002661  3  A9 01                lda #1
002663  3  85 rr                sta varr
002665  3  A9 11        i00166: lda #17
002667  3  C5 rr                cmp scno
002669  3  F0 03                beq *+5
00266B  3  4C C4 26             jmp i00371
00266E  3  A9 00                lda #0 	; COLLISION
002670  3  85 63                sta z80_b
002672  3  20 AF 11             jsr sktyp
002675  3  B0 03                bcs :+
002677  3  4C C4 26             jmp i00371
00267A  3               :
00267A  3  A9 1E                lda #30
00267C  3  A0 0B                ldy #11
00267E  3  D1 68                cmp (z80_ix),y
002680  3  90 03                bcc *+5
002682  3  4C C4 26             jmp i00371
002685  3  A9 00                lda #0
002687  3  A0 0B                ldy #11
002689  3  91 68                sta (z80_ix),y
00268B  3  A9 02                lda #2
00268D  3  A0 07                ldy #7
00268F  3  D1 68                cmp (z80_ix),y
002691  3  B0 03                bcs *+5
002693  3  4C 9E 26             jmp i00282
002696  3  A9 00                lda #0		; ANIMATE
002698  3  20 64 11             jsr animsp
00269B  3  4C C4 26             jmp i00371
00269E  3  A9 14        i00282: lda #20 	; DELAY
0026A0  3  20 55 02             jsr delay
0026A3  3  A9 28                lda #40
0026A5  3  85 rr                sta vare
0026A7  3  A9 12                lda #18
0026A9  3  85 rr                sta scno
0026AB  3  20 B8 12             jsr nwscr
0026AE  3  A5 rr                lda skptr	; OTHER
0026B0  3  85 68                sta z80_x
0026B2  3  A5 rr                lda skptr+1
0026B4  3  85 69                sta z80_i
0026B6  3  A9 FF                lda #255	; REMOVE
0026B8  3  A0 05                ldy #5
0026BA  3  91 68                sta (z80_ix),y
0026BC  3  A5 rr                lda ogptr	; ENDSPRITE
0026BE  3  85 68                sta z80_x
0026C0  3  A5 rr                lda ogptr+1
0026C2  3  85 69                sta z80_i
0026C4  3  60           i00371: rts
0026C5  3               evnt09:
0026C5  3  A9 00                lda #0
0026C7  3  A0 0B                ldy #11
0026C9  3  91 68                sta (z80_ix),y
0026CB  3  A9 00                lda #0
0026CD  3  A0 0C                ldy #12
0026CF  3  91 68                sta (z80_ix),y
0026D1  3  A9 00                lda #0
0026D3  3  A0 0A                ldy #10
0026D5  3  91 68                sta (z80_ix),y
0026D7  3  A9 01                lda #1
0026D9  3  A0 05                ldy #5
0026DB  3  D1 68                cmp (z80_ix),y
0026DD  3  F0 03                beq *+5
0026DF  3  4C 18 27             jmp j00184
0026E2  3  A9 E0                lda #224
0026E4  3  A0 09                ldy #9
0026E6  3  D1 68                cmp (z80_ix),y
0026E8  3  B0 03                bcs *+5
0026EA  3  4C 18 27             jmp j00184
0026ED  3  A9 08                lda #8
0026EF  3  A0 08                ldy #8
0026F1  3  91 68                sta (z80_ix),y
0026F3  3  A9 90                lda #144
0026F5  3  85 65                sta z80_d	; GETRANDOM
0026F7  3  20 4F 0C             jsr random
0026FA  3  85 67                sta z80_h
0026FC  3  20 00 05             jsr imul
0026FF  3  A5 67                lda z80_h
002701  3  85 rr                sta varrnd
002703  3  A5 rr                lda varrnd
002705  3  A0 09                ldy #9
002707  3  91 68                sta (z80_ix),y
002709  3  A9 30                lda #48
00270B  3  85 62                sta z80_c
00270D  3  A0 09                ldy #9
00270F  3  B1 68                lda (z80_ix),y
002711  3  18                   clc
002712  3  65 62                adc z80_c
002714  3  A0 09                ldy #9
002716  3  91 68                sta (z80_ix),y
002718  3  A9 02        j00184: lda #2
00271A  3  A0 05                ldy #5
00271C  3  D1 68                cmp (z80_ix),y
00271E  3  F0 03                beq *+5
002720  3  4C D3 27             jmp j00585
002723  3  A9 03                lda #3
002725  3  C5 rr                cmp varf
002727  3  F0 03                beq *+5
002729  3  4C 4F 27             jmp j00301
00272C  3  A9 D8                lda #216
00272E  3  A0 09                ldy #9
002730  3  D1 68                cmp (z80_ix),y
002732  3  B0 03                bcs *+5
002734  3  4C 49 27             jmp j00285
002737  3  A9 12                lda #18
002739  3  85 62                sta z80_c
00273B  3  A0 09                ldy #9
00273D  3  B1 68                lda (z80_ix),y
00273F  3  18                   clc
002740  3  65 62                adc z80_c
002742  3  A0 09                ldy #9
002744  3  91 68                sta (z80_ix),y
002746  3  4C 4F 27             jmp j00301
002749  3  A9 FF        j00285: lda #255	; REMOVE
00274B  3  A0 05                ldy #5
00274D  3  91 68                sta (z80_ix),y
00274F  3  A9 02        j00301: lda #2
002751  3  C5 rr                cmp varf
002753  3  F0 03                beq *+5
002755  3  4C 7B 27             jmp j00395
002758  3  A9 17                lda #23
00275A  3  A0 09                ldy #9
00275C  3  D1 68                cmp (z80_ix),y
00275E  3  90 03                bcc *+5
002760  3  4C 75 27             jmp j00379
002763  3  A9 12                lda #18
002765  3  85 62                sta z80_c
002767  3  A0 09                ldy #9
002769  3  B1 68                lda (z80_ix),y
00276B  3  38                   sec
00276C  3  E5 62                sbc z80_c
00276E  3  A0 09                ldy #9
002770  3  91 68                sta (z80_ix),y
002772  3  4C 7B 27             jmp j00395
002775  3  A9 FF        j00379: lda #255	; REMOVE
002777  3  A0 05                ldy #5
002779  3  91 68                sta (z80_ix),y
00277B  3  A9 00        j00395: lda #0
00277D  3  C5 rr                cmp varf
00277F  3  F0 03                beq *+5
002781  3  4C A7 27             jmp j00490
002784  3  A9 17                lda #23
002786  3  A0 08                ldy #8
002788  3  D1 68                cmp (z80_ix),y
00278A  3  90 03                bcc *+5
00278C  3  4C A1 27             jmp j00474
00278F  3  A9 16                lda #22
002791  3  85 62                sta z80_c
002793  3  A0 08                ldy #8
002795  3  B1 68                lda (z80_ix),y
002797  3  38                   sec
002798  3  E5 62                sbc z80_c
00279A  3  A0 08                ldy #8
00279C  3  91 68                sta (z80_ix),y
00279E  3  4C A7 27             jmp j00490
0027A1  3  A9 FF        j00474: lda #255	; REMOVE
0027A3  3  A0 05                ldy #5
0027A5  3  91 68                sta (z80_ix),y
0027A7  3  A9 01        j00490: lda #1
0027A9  3  C5 rr                cmp varf
0027AB  3  F0 03                beq *+5
0027AD  3  4C D3 27             jmp j00585
0027B0  3  A9 80                lda #128
0027B2  3  A0 08                ldy #8
0027B4  3  D1 68                cmp (z80_ix),y
0027B6  3  B0 03                bcs *+5
0027B8  3  4C CD 27             jmp j00569
0027BB  3  A9 16                lda #22
0027BD  3  85 62                sta z80_c
0027BF  3  A0 08                ldy #8
0027C1  3  B1 68                lda (z80_ix),y
0027C3  3  18                   clc
0027C4  3  65 62                adc z80_c
0027C6  3  A0 08                ldy #8
0027C8  3  91 68                sta (z80_ix),y
0027CA  3  4C D3 27             jmp j00585
0027CD  3  A9 FF        j00569: lda #255	; REMOVE
0027CF  3  A0 05                ldy #5
0027D1  3  91 68                sta (z80_ix),y
0027D3  3  A9 04        j00585: lda #4
0027D5  3  A0 05                ldy #5
0027D7  3  D1 68                cmp (z80_ix),y
0027D9  3  F0 03                beq *+5
0027DB  3  4C ED 27             jmp j00637
0027DE  3  A9 06                lda #6
0027E0  3  C5 rr                cmp scno
0027E2  3  90 03                bcc *+5
0027E4  3  4C ED 27             jmp j00637
0027E7  3  A9 01                lda #1
0027E9  3  A0 07                ldy #7
0027EB  3  91 68                sta (z80_ix),y
0027ED  3  A9 06        j00637: lda #6
0027EF  3  A0 05                ldy #5
0027F1  3  D1 68                cmp (z80_ix),y
0027F3  3  F0 03                beq *+5
0027F5  3  4C 0D 28             jmp j00704
0027F8  3  A9 12                lda #18
0027FA  3  C5 rr                cmp scno
0027FC  3  F0 03                beq *+5
0027FE  3  4C 0D 28             jmp j00704
002801  3  A9 78                lda #120
002803  3  A0 08                ldy #8
002805  3  91 68                sta (z80_ix),y
002807  3  A9 78                lda #120
002809  3  A0 09                ldy #9
00280B  3  91 68                sta (z80_ix),y
00280D  3  A9 08        j00704: lda #8
00280F  3  A0 05                ldy #5
002811  3  D1 68                cmp (z80_ix),y
002813  3  F0 03                beq *+5
002815  3  4C B2 28             jmp j01045
002818  3  A9 0A                lda #10
00281A  3  C5 rr                cmp scno
00281C  3  B0 03                bcs *+5
00281E  3  4C B2 28             jmp j01045
002821  3  A9 48                lda #72
002823  3  A0 08                ldy #8
002825  3  91 68                sta (z80_ix),y
002827  3  A9 78                lda #120
002829  3  A0 09                ldy #9
00282B  3  91 68                sta (z80_ix),y
00282D  3  A9 00                lda #0
00282F  3  85 rr                sta varr
002831  3  A9 01                lda #1
002833  3  C5 rr                cmp varl
002835  3  F0 03                beq *+5
002837  3  4C 46 28             jmp j00821
00283A  3  A9 08                lda #8
00283C  3  A0 08                ldy #8
00283E  3  91 68                sta (z80_ix),y
002840  3  A9 40                lda #64
002842  3  A0 09                ldy #9
002844  3  91 68                sta (z80_ix),y
002846  3  A9 02        j00821: lda #2
002848  3  C5 rr                cmp varl
00284A  3  F0 03                beq *+5
00284C  3  4C 5B 28             jmp j00865
00284F  3  A9 08                lda #8
002851  3  A0 08                ldy #8
002853  3  91 68                sta (z80_ix),y
002855  3  A9 B0                lda #176
002857  3  A0 09                ldy #9
002859  3  91 68                sta (z80_ix),y
00285B  3  A9 03        j00865: lda #3
00285D  3  C5 rr                cmp varl
00285F  3  F0 03                beq *+5
002861  3  4C 6A 28             jmp j00895
002864  3  A9 30                lda #48
002866  3  A0 09                ldy #9
002868  3  91 68                sta (z80_ix),y
00286A  3  A9 04        j00895: lda #4
00286C  3  C5 rr                cmp varl
00286E  3  F0 03                beq *+5
002870  3  4C 79 28             jmp j00926
002873  3  A9 C0                lda #192
002875  3  A0 09                ldy #9
002877  3  91 68                sta (z80_ix),y
002879  3  A9 07        j00926: lda #7
00287B  3  C5 rr                cmp varl
00287D  3  F0 03                beq *+5
00287F  3  4C 88 28             jmp j00956
002882  3  A9 90                lda #144
002884  3  A0 08                ldy #8
002886  3  91 68                sta (z80_ix),y
002888  3  A9 08        j00956: lda #8
00288A  3  C5 rr                cmp varl
00288C  3  F0 03                beq *+5
00288E  3  4C 9D 28             jmp j01000
002891  3  A9 88                lda #136
002893  3  A0 08                ldy #8
002895  3  91 68                sta (z80_ix),y
002897  3  A9 28                lda #40
002899  3  A0 09                ldy #9
00289B  3  91 68                sta (z80_ix),y
00289D  3  A9 09        j01000: lda #9
00289F  3  C5 rr                cmp varl
0028A1  3  F0 03                beq *+5
0028A3  3  4C B2 28             jmp j01045
0028A6  3  A9 88                lda #136
0028A8  3  A0 08                ldy #8
0028AA  3  91 68                sta (z80_ix),y
0028AC  3  A9 C8                lda #200
0028AE  3  A0 09                ldy #9
0028B0  3  91 68                sta (z80_ix),y
0028B2  3  60           j01045: rts
0028B3  3               evnt10:
0028B3  3  A9 00                lda #0
0028B5  3  C5 rr                cmp vara
0028B7  3  F0 03                beq *+5
0028B9  3  4C C6 28             jmp k00038
0028BC  3  A5 rr                lda vara
0028BE  3  18                   clc
0028BF  3  69 01                adc #1
0028C1  3  85 rr                sta vara
0028C3  3  4C CA 28             jmp k00046
0028C6  3  A9 00        k00038: lda #0
0028C8  3  85 rr                sta vara
0028CA  3  A9 00        k00046: lda #0
0028CC  3  C5 rr                cmp varh
0028CE  3  90 03                bcc *+5
0028D0  3  4C EA 28             jmp k00108
0028D3  3  A9 64                lda #100
0028D5  3  C5 rr                cmp varh
0028D7  3  B0 03                bcs *+5
0028D9  3  4C E6 28             jmp k00100
0028DC  3  A5 rr                lda varh
0028DE  3  18                   clc
0028DF  3  69 01                adc #1
0028E1  3  85 rr                sta varh
0028E3  3  4C EA 28             jmp k00108
0028E6  3  A9 00        k00100: lda #0
0028E8  3  85 rr                sta varh
0028EA  3  A9 3C        k00108: lda #60
0028EC  3  C5 rr                cmp varb
0028EE  3  B0 03                bcs *+5
0028F0  3  4C FA 28             jmp k00141
0028F3  3  A5 rr                lda varb
0028F5  3  18                   clc
0028F6  3  69 01                adc #1
0028F8  3  85 rr                sta varb
0028FA  3  A9 3C        k00141: lda #60
0028FC  3  C5 rr                cmp varb
0028FE  3  F0 03                beq *+5
002900  3  4C 26 29             jmp k00233
002903  3  A9 F9                lda #249
002905  3  C5 rr                cmp varrnd
002907  3  B0 03                bcs *+5
002909  3  4C 22 29             jmp k00225
00290C  3  A5 rr                lda ogptr	; ENDSPRITE
00290E  3  85 68                sta z80_x
002910  3  A5 rr                lda ogptr+1
002912  3  85 69                sta z80_i
002914  3  A9 01                lda #1	; SPAWN
002916  3  85 62                sta z80_c
002918  3  A9 02                lda #2
00291A  3  85 63                sta z80_b
00291C  3  20 6C 06             jsr spawn
00291F  3  4C 26 29             jmp k00233
002922  3  A9 00        k00225: lda #0
002924  3  85 rr                sta varb
002926  3  A9 09        k00233: lda #9
002928  3  C5 rr                cmp scno
00292A  3  F0 03                beq *+5
00292C  3  4C 45 29             jmp k00292
00292F  3  A9 00                lda #0
002931  3  C5 rr                cmp varl
002933  3  90 03                bcc *+5
002935  3  4C 45 29             jmp k00292
002938  3  A9 05                lda #5
00293A  3  C5 rr                cmp varl
00293C  3  B0 03                bcs *+5
00293E  3  4C 45 29             jmp k00292
002941  3  A9 FE                lda #254
002943  3  85 rr                sta varrnd
002945  3  A9 0A        k00292: lda #10
002947  3  C5 rr                cmp scno
002949  3  F0 03                beq *+5
00294B  3  4C 5B 29             jmp k00335
00294E  3  A9 05                lda #5
002950  3  C5 rr                cmp varl
002952  3  90 03                bcc *+5
002954  3  4C 5B 29             jmp k00335
002957  3  A9 FE                lda #254
002959  3  85 rr                sta varrnd
00295B  3  A9 FA        k00335: lda #250
00295D  3  C5 rr                cmp varrnd
00295F  3  90 03                bcc *+5
002961  3  4C EC 29             jmp k00630
002964  3  A9 FB                lda #251
002966  3  C5 rr                cmp varrnd
002968  3  F0 03                beq *+5
00296A  3  4C 86 29             jmp k00423
00296D  3  A9 16                lda #22
00296F  3  85 rr                sta chary
002971  3  A9 12                lda #18
002973  3  85 rr                sta charx
002975  3  A9 08                lda #8  	; MESSAGE
002977  3  20 54 0D             jsr dmsg
00297A  3  A9 10                lda #16
00297C  3  85 rr                sta varn
00297E  3  A9 88                lda #136
002980  3  85 rr                sta varo
002982  3  A9 18                lda #24
002984  3  85 rr                sta varp
002986  3  A9 FC        k00423: lda #252
002988  3  C5 rr                cmp varrnd
00298A  3  F0 03                beq *+5
00298C  3  4C BF 29             jmp k00535
00298F  3  A9 01                lda #1
002991  3  C5 rr                cmp vark
002993  3  F0 03                beq *+5
002995  3  4C BF 29             jmp k00535
002998  3  A9 01                lda #1
00299A  3  C5 rr                cmp varj
00299C  3  F0 03                beq *+5
00299E  3  4C BF 29             jmp k00535
0029A1  3  A5 rr                lda joyval	; KEY
0029A3  3  29 10                and #16
0029A5  3  F0 03                beq :+
0029A7  3  4C BF 29             jmp k00535
0029AA  3               :
0029AA  3  A9 01                lda #1
0029AC  3  85 rr                sta varc
0029AE  3  A9 50                lda #80
0029B0  3  C5 rr                cmp vare
0029B2  3  90 03                bcc *+5
0029B4  3  4C BB 29             jmp k00527
0029B7  3  A9 50                lda #80
0029B9  3  85 rr                sta vare
0029BB  3  A9 02        k00527: lda #2
0029BD  3  85 rr                sta vark
0029BF  3  A9 FE        k00535: lda #254
0029C1  3  C5 rr                cmp varrnd
0029C3  3  F0 03                beq *+5
0029C5  3  4C E8 29             jmp k00622
0029C8  3  A9 01                lda #1
0029CA  3  C5 rr                cmp varq
0029CC  3  F0 03                beq *+5
0029CE  3  4C E8 29             jmp k00622
0029D1  3  A5 rr                lda ogptr	; ENDSPRITE
0029D3  3  85 68                sta z80_x
0029D5  3  A5 rr                lda ogptr+1
0029D7  3  85 69                sta z80_i
0029D9  3  A9 08                lda #8	; SPAWN
0029DB  3  85 62                sta z80_c
0029DD  3  A9 04                lda #4
0029DF  3  85 63                sta z80_b
0029E1  3  20 6C 06             jsr spawn
0029E4  3  A9 00                lda #0
0029E6  3  85 rr                sta varq
0029E8  3  A9 00        k00622: lda #0
0029EA  3  85 rr                sta varrnd
0029EC  3  A9 02        k00630: lda #2
0029EE  3  C5 rr                cmp vark
0029F0  3  F0 03                beq *+5
0029F2  3  4C 06 2A             jmp k00683
0029F5  3  A9 00                lda #0
0029F7  3  85 rr                sta vark
0029F9  3  A9 16                lda #22
0029FB  3  85 rr                sta chary
0029FD  3  A9 04                lda #4
0029FF  3  85 rr                sta charx
002A01  3  A9 01                lda #1  	; MESSAGE
002A03  3  20 54 0D             jsr dmsg
002A06  3  60           k00683: rts
002A07  3               evnt11:
002A07  3  A5 rr                lda joyval	; KEY
002A09  3  29 01                and #1
002A0B  3  F0 03                beq :+
002A0D  3  4C B3 2A             jmp l00337
002A10  3               :
002A10  3  A9 02                lda #2
002A12  3  C5 rr                cmp scno
002A14  3  F0 03                beq *+5
002A16  3  4C 3B 2A             jmp l00105
002A19  3  A9 D8                lda #216
002A1B  3  C5 rr                cmp varp
002A1D  3  F0 03                beq *+5
002A1F  3  4C 3B 2A             jmp l00105
002A22  3  A9 24                lda #36
002A24  3  85 rr                sta varo
002A26  3  A9 12                lda #18
002A28  3  85 rr                sta varp
002A2A  3  A9 03                lda #3
002A2C  3  85 rr                sta varn
002A2E  3  A9 68                lda #104
002A30  3  C5 rr                cmp vare
002A32  3  90 03                bcc *+5
002A34  3  4C 3B 2A             jmp l00105
002A37  3  A9 68                lda #104
002A39  3  85 rr                sta vare
002A3B  3  A9 E0        l00105: lda #224
002A3D  3  C5 rr                cmp varp
002A3F  3  F0 03                beq *+5
002A41  3  4C B3 2A             jmp l00337
002A44  3  A9 03                lda #3
002A46  3  C5 rr                cmp scno
002A48  3  F0 03                beq *+5
002A4A  3  4C 6D 2A             jmp l00202
002A4D  3  A9 28                lda #40
002A4F  3  C5 rr                cmp varo
002A51  3  B0 03                bcs *+5
002A53  3  4C 61 2A             jmp l00177
002A56  3  A9 10                lda #16
002A58  3  85 rr                sta varp
002A5A  3  A9 07                lda #7
002A5C  3  85 rr                sta varn
002A5E  3  4C 6D 2A             jmp l00202
002A61  3  A9 84        l00177: lda #132
002A63  3  85 rr                sta varo
002A65  3  A9 10                lda #16
002A67  3  85 rr                sta varp
002A69  3  A9 06                lda #6
002A6B  3  85 rr                sta varn
002A6D  3  A9 06        l00202: lda #6
002A6F  3  C5 rr                cmp scno
002A71  3  F0 03                beq *+5
002A73  3  4C B3 2A             jmp l00337
002A76  3  A9 20                lda #32
002A78  3  C5 rr                cmp varo
002A7A  3  B0 03                bcs *+5
002A7C  3  4C B3 2A             jmp l00337
002A7F  3  A9 05                lda #5		; GOT
002A81  3  20 C1 05             jsr gotob
002A84  3  C9 FF                cmp #255
002A86  3  F0 03                beq :+
002A88  3  4C B3 2A             jmp l00337
002A8B  3               :
002A8B  3  A9 05                lda #5
002A8D  3  C5 rr                cmp varj
002A8F  3  F0 03                beq *+5
002A91  3  4C B3 2A             jmp l00337
002A94  3  A9 10                lda #16
002A96  3  85 rr                sta varp
002A98  3  A5 rr                lda vard
002A9A  3  85 rr                sta varn
002A9C  3  A9 0D                lda #13
002A9E  3  C5 rr                cmp vard
002AA0  3  B0 03                bcs *+5
002AA2  3  4C AF 2A             jmp l00329
002AA5  3  A5 rr                lda vard
002AA7  3  18                   clc
002AA8  3  69 01                adc #1
002AAA  3  85 rr                sta vard
002AAC  3  4C B3 2A             jmp l00337
002AAF  3  A9 0C        l00329: lda #12
002AB1  3  85 rr                sta vard
002AB3  3  A5 rr        l00337: lda joyval	; KEY
002AB5  3  29 02                and #2
002AB7  3  F0 03                beq :+
002AB9  3  4C 3F 2B             jmp l00612
002ABC  3               :
002ABC  3  A9 10                lda #16
002ABE  3  C5 rr                cmp varp
002AC0  3  F0 03                beq *+5
002AC2  3  4C 3F 2B             jmp l00612
002AC5  3  A9 03                lda #3
002AC7  3  C5 rr                cmp scno
002AC9  3  F0 03                beq *+5
002ACB  3  4C EE 2A             jmp l00453
002ACE  3  A9 28                lda #40
002AD0  3  C5 rr                cmp varo
002AD2  3  B0 03                bcs *+5
002AD4  3  4C E6 2A             jmp l00437
002AD7  3  A9 48                lda #72
002AD9  3  85 rr                sta varo
002ADB  3  A9 D6                lda #214
002ADD  3  85 rr                sta varp
002ADF  3  A9 02                lda #2
002AE1  3  85 rr                sta varn
002AE3  3  4C EE 2A             jmp l00453
002AE6  3  A9 E8        l00437: lda #232
002AE8  3  85 rr                sta varp
002AEA  3  A9 01                lda #1
002AEC  3  85 rr                sta varn
002AEE  3  A9 06        l00453: lda #6
002AF0  3  C5 rr                cmp scno
002AF2  3  F0 03                beq *+5
002AF4  3  4C 0C 2B             jmp l00512
002AF7  3  A9 20                lda #32
002AF9  3  C5 rr                cmp varo
002AFB  3  B0 03                bcs *+5
002AFD  3  4C 0C 2B             jmp l00512
002B00  3  A9 84                lda #132
002B02  3  85 rr                sta varo
002B04  3  A9 E0                lda #224
002B06  3  85 rr                sta varp
002B08  3  A9 03                lda #3
002B0A  3  85 rr                sta varn
002B0C  3  A9 07        l00512: lda #7
002B0E  3  C5 rr                cmp scno
002B10  3  F0 03                beq *+5
002B12  3  4C 21 2B             jmp l00553
002B15  3  A9 24                lda #36
002B17  3  85 rr                sta varo
002B19  3  A9 E0                lda #224
002B1B  3  85 rr                sta varp
002B1D  3  A9 03                lda #3
002B1F  3  85 rr                sta varn
002B21  3  A9 0B        l00553: lda #11
002B23  3  C5 rr                cmp scno
002B25  3  90 03                bcc *+5
002B27  3  4C 3F 2B             jmp l00612
002B2A  3  A9 0E                lda #14
002B2C  3  C5 rr                cmp scno
002B2E  3  B0 03                bcs *+5
002B30  3  4C 3F 2B             jmp l00612
002B33  3  A9 84                lda #132
002B35  3  85 rr                sta varo
002B37  3  A9 E0                lda #224
002B39  3  85 rr                sta varp
002B3B  3  A9 06                lda #6
002B3D  3  85 rr                sta varn
002B3F  3  A5 rr        l00612: lda joyval	; KEY
002B41  3  29 04                and #4
002B43  3  F0 03                beq :+
002B45  3  4C FB 2B             jmp l00978
002B48  3               :
002B48  3  A9 90                lda #144
002B4A  3  C5 rr                cmp varo
002B4C  3  F0 03                beq *+5
002B4E  3  4C FB 2B             jmp l00978
002B51  3  A9 00                lda #0
002B53  3  C5 rr                cmp scno
002B55  3  F0 03                beq *+5
002B57  3  4C 62 2B             jmp l00681
002B5A  3  A9 06                lda #6
002B5C  3  85 rr                sta varo
002B5E  3  A9 01                lda #1
002B60  3  85 rr                sta varn
002B62  3  A9 01        l00681: lda #1
002B64  3  C5 rr                cmp scno
002B66  3  F0 03                beq *+5
002B68  3  4C 73 2B             jmp l00714
002B6B  3  A9 06                lda #6
002B6D  3  85 rr                sta varo
002B6F  3  A9 09                lda #9
002B71  3  85 rr                sta varn
002B73  3  A9 02        l00714: lda #2
002B75  3  C5 rr                cmp scno
002B77  3  F0 03                beq *+5
002B79  3  4C 84 2B             jmp l00747
002B7C  3  A9 06                lda #6
002B7E  3  85 rr                sta varo
002B80  3  A9 01                lda #1
002B82  3  85 rr                sta varn
002B84  3  A9 05        l00747: lda #5
002B86  3  C5 rr                cmp scno
002B88  3  F0 03                beq *+5
002B8A  3  4C 95 2B             jmp l00780
002B8D  3  A9 06                lda #6
002B8F  3  85 rr                sta varo
002B91  3  A9 0B                lda #11
002B93  3  85 rr                sta varn
002B95  3  A9 08        l00780: lda #8
002B97  3  C5 rr                cmp scno
002B99  3  F0 03                beq *+5
002B9B  3  4C AF 2B             jmp l00830
002B9E  3  A9 00                lda #0
002BA0  3  C5 rr                cmp varl
002BA2  3  90 03                bcc *+5
002BA4  3  4C AF 2B             jmp l00830
002BA7  3  A9 06                lda #6
002BA9  3  85 rr                sta varo
002BAB  3  A9 0F                lda #15
002BAD  3  85 rr                sta varn
002BAF  3  A9 09        l00830: lda #9
002BB1  3  C5 rr                cmp scno
002BB3  3  F0 03                beq *+5
002BB5  3  4C C0 2B             jmp l00863
002BB8  3  A9 06                lda #6
002BBA  3  85 rr                sta varo
002BBC  3  A9 0A                lda #10
002BBE  3  85 rr                sta varn
002BC0  3  A9 0A        l00863: lda #10
002BC2  3  C5 rr                cmp scno
002BC4  3  F0 03                beq *+5
002BC6  3  4C D5 2B             jmp l00904
002BC9  3  A9 08                lda #8
002BCB  3  85 rr                sta varo
002BCD  3  A9 38                lda #56
002BCF  3  85 rr                sta varp
002BD1  3  A9 08                lda #8
002BD3  3  85 rr                sta varn
002BD5  3  A9 0B        l00904: lda #11
002BD7  3  C5 rr                cmp scno
002BD9  3  F0 03                beq *+5
002BDB  3  4C EA 2B             jmp l00945
002BDE  3  A9 10                lda #16
002BE0  3  85 rr                sta varo
002BE2  3  A9 08                lda #8
002BE4  3  85 rr                sta varp
002BE6  3  A9 01                lda #1
002BE8  3  85 rr                sta varn
002BEA  3  A9 0F        l00945: lda #15
002BEC  3  C5 rr                cmp scno
002BEE  3  F0 03                beq *+5
002BF0  3  4C FB 2B             jmp l00978
002BF3  3  A9 06                lda #6
002BF5  3  85 rr                sta varo
002BF7  3  A9 10                lda #16
002BF9  3  85 rr                sta varn
002BFB  3  A5 rr        l00978: lda joyval	; KEY
002BFD  3  29 08                and #8
002BFF  3  F0 03                beq :+
002C01  3  4C 73 2C             jmp l01216
002C04  3               :
002C04  3  A9 08                lda #8
002C06  3  C5 rr                cmp varo
002C08  3  B0 03                bcs *+5
002C0A  3  4C 73 2C             jmp l01216
002C0D  3  A9 09                lda #9
002C0F  3  C5 rr                cmp scno
002C11  3  F0 03                beq *+5
002C13  3  4C 1E 2C             jmp l01047
002C16  3  A9 92                lda #146
002C18  3  85 rr                sta varo
002C1A  3  A9 01                lda #1
002C1C  3  85 rr                sta varn
002C1E  3  A9 0A        l01047: lda #10
002C20  3  C5 rr                cmp scno
002C22  3  F0 03                beq *+5
002C24  3  4C 2F 2C             jmp l01081
002C27  3  A9 92                lda #146
002C29  3  85 rr                sta varo
002C2B  3  A9 09                lda #9
002C2D  3  85 rr                sta varn
002C2F  3  A9 0B        l01081: lda #11
002C31  3  C5 rr                cmp scno
002C33  3  F0 03                beq *+5
002C35  3  4C 40 2C             jmp l01114
002C38  3  A9 92                lda #146
002C3A  3  85 rr                sta varo
002C3C  3  A9 05                lda #5
002C3E  3  85 rr                sta varn
002C40  3  A9 08        l01114: lda #8
002C42  3  C5 rr                cmp scno
002C44  3  F0 03                beq *+5
002C46  3  4C 55 2C             jmp l01156
002C49  3  A9 90                lda #144
002C4B  3  85 rr                sta varo
002C4D  3  A9 78                lda #120
002C4F  3  85 rr                sta varp
002C51  3  A9 0A                lda #10
002C53  3  85 rr                sta varn
002C55  3  A9 10        l01156: lda #16
002C57  3  C5 rr                cmp scno
002C59  3  F0 03                beq *+5
002C5B  3  4C 73 2C             jmp l01216
002C5E  3  A9 D7                lda #215
002C60  3  C5 rr                cmp varp
002C62  3  90 03                bcc *+5
002C64  3  4C 73 2C             jmp l01216
002C67  3  A9 90                lda #144
002C69  3  85 rr                sta varo
002C6B  3  A9 A0                lda #160
002C6D  3  85 rr                sta varp
002C6F  3  A9 01                lda #1
002C71  3  85 rr                sta varn
002C73  3  60           l01216: rts
002C74  3               evnt12:
002C74  3  60                   rts
002C75  3               evnt13:
002C75  3  A9 00                lda #0
002C77  3  85 rr                sta vara
002C79  3  A9 00                lda #0
002C7B  3  85 rr                sta varb
002C7D  3  A9 00                lda #0
002C7F  3  85 rr                sta varc
002C81  3  A9 0C                lda #12
002C83  3  85 rr                sta vard
002C85  3  A9 78                lda #120
002C87  3  85 rr                sta vare
002C89  3  A9 03                lda #3
002C8B  3  85 rr                sta varf
002C8D  3  A9 00                lda #0
002C8F  3  85 rr                sta varg
002C91  3  A9 00                lda #0
002C93  3  85 rr                sta varh
002C95  3  A9 00                lda #0
002C97  3  85 rr                sta vari
002C99  3  A9 01                lda #1
002C9B  3  85 rr                sta varj
002C9D  3  A9 01                lda #1
002C9F  3  85 rr                sta vark
002CA1  3  A9 00                lda #0
002CA3  3  85 rr                sta varl
002CA5  3  A9 00                lda #0
002CA7  3  85 rr                sta varm
002CA9  3  A9 00                lda #0
002CAB  3  85 rr                sta varn
002CAD  3  A9 48                lda #72
002CAF  3  85 rr                sta varo
002CB1  3  A9 78                lda #120
002CB3  3  85 rr                sta varp
002CB5  3  A9 00                lda #0
002CB7  3  85 rr                sta varq
002CB9  3  A9 00                lda #0
002CBB  3  85 rr                sta varr
002CBD  3  A9 03                lda #3
002CBF  3  85 rr                sta numlif
002CC1  3  20 2B 03             jsr cls		; CLS
002CC4  3  60                   rts
002CC5  3               evnt14:
002CC5  3  A9 00                lda #0
002CC7  3  85 rr                sta vara
002CC9  3  A9 00                lda #0
002CCB  3  85 rr                sta varb
002CCD  3  A9 00                lda #0
002CCF  3  85 rr                sta varh
002CD1  3  A9 00                lda #0
002CD3  3  C5 rr                cmp varl
002CD5  3  90 03                bcc *+5
002CD7  3  4C DE 2C             jmp o00050
002CDA  3  A9 01                lda #1
002CDC  3  85 rr                sta varq
002CDE  3  A9 04        o00050: lda #4
002CE0  3  C5 rr                cmp scno
002CE2  3  F0 03                beq *+5
002CE4  3  4C EB 2C             jmp o00075
002CE7  3  A9 3D                lda #61
002CE9  3  85 rr                sta varb
002CEB  3  A9 07        o00075: lda #7
002CED  3  C5 rr                cmp scno
002CEF  3  90 03                bcc *+5
002CF1  3  4C 01 2D             jmp o00117
002CF4  3  A9 0A                lda #10
002CF6  3  C5 rr                cmp scno
002CF8  3  B0 03                bcs *+5
002CFA  3  4C 01 2D             jmp o00117
002CFD  3  A9 3D                lda #61
002CFF  3  85 rr                sta varb
002D01  3  A9 0F        o00117: lda #15
002D03  3  C5 rr                cmp scno
002D05  3  F0 03                beq *+5
002D07  3  4C 0E 2D             jmp o00143
002D0A  3  A9 3D                lda #61
002D0C  3  85 rr                sta varb
002D0E  3  A9 10        o00143: lda #16
002D10  3  C5 rr                cmp scno
002D12  3  90 03                bcc *+5
002D14  3  4C 24 2D             jmp o00185
002D17  3  A9 12                lda #18
002D19  3  C5 rr                cmp scno
002D1B  3  B0 03                bcs *+5
002D1D  3  4C 24 2D             jmp o00185
002D20  3  A9 3D                lda #61
002D22  3  85 rr                sta varb
002D24  3  60           o00185: rts
002D25  3               evnt15:
002D25  3  60                   rts
002D26  3               evnt16:
002D26  3  60                   rts
002D27  3               evnt17:
002D27  3  60                   rts
002D28  3               evnt18:
002D28  3  A9 1E                lda #30 	; DELAY
002D2A  3  20 55 02             jsr delay
002D2D  3  60                   rts		; EXIT
002D2E  3  60                   rts
002D2F  3               evnt19:
002D2F  3  60                   rts
002D30  3               evnt20:
002D30  3  60                   rts
002D31  3  60           ptcusr: rts
002D32  3               msgdat:
002D32  3  69 8D                .byte "i",141
002D34  3  6A 8D                .byte "j",141
002D36  3  6B 8D                .byte "k",141
002D38  3  6C 8D                .byte "l",141
002D3A  3  6D 8D                .byte "m",141
002D3C  3  6E 8D                .byte "n",141
002D3E  3  6F 8D                .byte "o",141
002D40  3  70 8D                .byte "p",141
002D42  3  71 8D                .byte "q",141
002D44  3  72 8D                .byte "r",141
002D46  3  73 8D                .byte "s",141
002D48  3  74 8D                .byte "t",141
002D4A  3  77 77 78 8D          .byte "wwx",141
002D4E  3  77 8D                .byte "w",141
002D50  3  76 8D                .byte "v",141
002D52  3  7D 8D                .byte "}",141
002D54  3  21 27                .byte "!",39
002D56  3  8D                   .byte 141
002D57  3  23 24 8D             .byte "#$",141
002D5A  3               nummsg:
002D5A  3  12                   .byte 18
002D5B  3               chgfx:
002D5B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002D5F  3  00 00 00 00  
002D63  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002D67  3  00 00 00 00  
002D6B  3  00 00 00 00          .byte 0,0,0,0,1,1,31,31
002D6F  3  01 01 1F 1F  
002D73  3  00 00 00 00          .byte 0,0,0,0,255,255,255,255
002D77  3  FF FF FF FF  
002D7B  3  07 07 7F 7F          .byte 7,7,127,127,255,255,255,255
002D7F  3  FF FF FF FF  
002D83  3  FF FF FE FE          .byte 255,255,254,254,224,224,0,0
002D87  3  E0 E0 00 00  
002D8B  3  C0 C0 00 00          .byte 192,192,0,0,0,0,0,0
002D8F  3  00 00 00 00  
002D93  3  01 01 1F 1F          .byte 1,1,31,31,255,255,31,31
002D97  3  FF FF 1F 1F  
002D9B  3  FF FF FF FF          .byte 255,255,255,255,248,248,255,255
002D9F  3  F8 F8 FF FF  
002DA3  3  F0 F0 80 80          .byte 240,240,128,128,15,15,128,128
002DA7  3  0F 0F 80 80  
002DAB  3  1F 1F FF FF          .byte 31,31,255,255,255,255,255,255
002DAF  3  FF FF FF FF  
002DB3  3  FF FF FC FC          .byte 255,255,252,252,224,224,252,252
002DB7  3  E0 E0 FC FC  
002DBB  3  FF FF 0F 0F          .byte 255,255,15,15,0,0,0,0
002DBF  3  00 00 00 00  
002DC3  3  FC FC FF FF          .byte 252,252,255,255,0,0,0,0
002DC7  3  00 00 00 00  
002DCB  3  07 07 80 80          .byte 7,7,128,128,0,0,0,0
002DCF  3  00 00 00 00  
002DD3  3  FF FF 7F 7F          .byte 255,255,127,127,0,0,0,0
002DD7  3  00 00 00 00  
002DDB  3  FF FF FF FF          .byte 255,255,255,255,0,0,0,0
002DDF  3  00 00 00 00  
002DE3  3  C0 C0 F8 F8          .byte 192,192,248,248,0,0,0,0
002DE7  3  00 00 00 00  
002DEB  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002DEF  3  00 00 00 00  
002DF3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002DF7  3  00 00 00 00  
002DFB  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002DFF  3  00 00 00 00  
002E03  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002E07  3  00 00 00 00  
002E0B  3  FF FF 1F 1F          .byte 255,255,31,31,3,3,31,31
002E0F  3  03 03 1F 1F  
002E13  3  00 00 07 07          .byte 0,0,7,7,127,127,7,7
002E17  3  7F 7F 07 07  
002E1B  3  00 7F 7F 1F          .byte 0,127,127,31,31,102,102,25
002E1F  3  1F 66 66 19  
002E23  3  00 FE FE F8          .byte 0,254,254,248,248,102,102,152
002E27  3  F8 66 66 98  
002E2B  3  19 66 66 19          .byte 25,102,102,25,25,7,7,0
002E2F  3  19 07 07 00  
002E33  3  98 66 66 98          .byte 152,102,102,152,152,224,224,0
002E37  3  98 E0 E0 00  
002E3B  3  00 7F 7F 1F          .byte 0,127,127,31,31,102,102,25
002E3F  3  1F 66 66 19  
002E43  3  00 FE FE F8          .byte 0,254,254,248,248,102,102,152
002E47  3  F8 66 66 98  
002E4B  3  19 66 66 19          .byte 25,102,102,25,25,7,7,0
002E4F  3  19 07 07 00  
002E53  3  98 66 66 98          .byte 152,102,102,152,152,224,224,0
002E57  3  98 E0 E0 00  
002E5B  3  00 3F 3F 00          .byte 0,63,63,0,63,63,32,32
002E5F  3  3F 3F 20 20  
002E63  3  00 FC FC 00          .byte 0,252,252,0,252,252,4,4
002E67  3  FC FC 04 04  
002E6B  3  2C 2C 20 20          .byte 44,44,32,32,63,63,63,63
002E6F  3  3F 3F 3F 3F  
002E73  3  34 34 04 04          .byte 52,52,4,4,252,252,255,255
002E77  3  FC FC FF FF  
002E7B  3  00 3F 3F 00          .byte 0,63,63,0,63,63,32,32
002E7F  3  3F 3F 20 20  
002E83  3  00 FC FC 00          .byte 0,252,252,0,252,252,4,4
002E87  3  FC FC 04 04  
002E8B  3  2C 2C 20 20          .byte 44,44,32,32,63,63,63,63
002E8F  3  3F 3F 3F 3F  
002E93  3  34 34 04 04          .byte 52,52,4,4,252,252,255,255
002E97  3  FC FC FF FF  
002E9B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002E9F  3  00 00 00 00  
002EA3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002EA7  3  00 00 00 00  
002EAB  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002EAF  3  00 00 00 00  
002EB3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002EB7  3  00 00 00 00  
002EBB  3  00 00 00 00          .byte 0,0,0,0,0,0,204,204
002EBF  3  00 00 CC CC  
002EC3  3  03 03 00 00          .byte 3,3,0,0,0,0,0,0
002EC7  3  00 00 00 00  
002ECB  3  33 33 CC CC          .byte 51,51,204,204,51,51,204,204
002ECF  3  33 33 CC CC  
002ED3  3  30 30 CC CC          .byte 48,48,204,204,51,51,204,204
002ED7  3  33 33 CC CC  
002EDB  3  33 33 CC CC          .byte 51,51,204,204,51,51,51,51
002EDF  3  33 33 33 33  
002EE3  3  30 30 CC CC          .byte 48,48,204,204,51,51,51,51
002EE7  3  33 33 33 33  
002EEB  3  33 33 0F 0F          .byte 51,51,15,15,3,3,15,15
002EEF  3  03 03 0F 0F  
002EF3  3  33 33 0C 0C          .byte 51,51,12,12,240,240,192,192
002EF7  3  F0 F0 C0 C0  
002EFB  3  3F 3F FF FF          .byte 63,63,255,255,240,240,0,0
002EFF  3  F0 F0 00 00  
002F03  3  00 00 03 03          .byte 0,0,3,3,255,255,252,252
002F07  3  FF FF FC FC  
002F0B  3  00 00 00 00          .byte 0,0,0,0,0,0,63,63
002F0F  3  00 00 3F 3F  
002F13  3  FF FF C0 C0          .byte 255,255,192,192,0,0,0,0
002F17  3  00 00 00 00  
002F1B  3  0F 0F FF FF          .byte 15,15,255,255,240,240,0,0
002F1F  3  F0 F0 00 00  
002F23  3  00 00 00 00          .byte 0,0,0,0,3,3,255,255
002F27  3  03 03 FF FF  
002F2B  3  FC FC C0 C0          .byte 252,252,192,192,0,0,0,0
002F2F  3  00 00 00 00  
002F33  3  3F 3F FF FF          .byte 63,63,255,255,252,240,192,0
002F37  3  FC F0 C0 00  
002F3B  3  00 00 0F 0F          .byte 0,0,15,15,255,255,255,255
002F3F  3  FF FF FF FF  
002F43  3  00 00 00 00          .byte 0,0,0,0,3,3,63,63
002F47  3  03 03 3F 3F  
002F4B  3  FF 3F FF 3F          .byte 255,63,255,63,252,48,192,192
002F4F  3  FC 30 C0 C0  
002F53  3  FC F0 C0 00          .byte 252,240,192,0,0,0,0,0
002F57  3  00 00 00 00  
002F5B  3  FF FF FF FC          .byte 255,255,255,252,255,255,254,192
002F5F  3  FF FF FE C0  
002F63  3  FC F0 00 00          .byte 252,240,0,0,0,192,0,0
002F67  3  00 C0 00 00  
002F6B  3  C0 F0 FC F0          .byte 192,240,252,240,192,192,0,192
002F6F  3  C0 C0 00 C0  
002F73  3  F0 F0 FC FF          .byte 240,240,252,255,255,255,255,255
002F77  3  FF FF FF FF  
002F7B  3  00 00 00 C0          .byte 0,0,0,192,240,240,240,254
002F7F  3  F0 F0 F0 FE  
002F83  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002F87  3  00 00 00 00  
002F8B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002F8F  3  00 00 00 00  
002F93  3  BF BF BF BF          .byte 191,191,191,191,191,191,191,191
002F97  3  BF BF BF BF  
002F9B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002F9F  3  00 00 00 00  
002FA3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002FA7  3  00 00 00 00  
002FAB  3  00 00 00 00          .byte 0,0,0,0,255,255,255,255
002FAF  3  FF FF FF FF  
002FB3  3  FD FD FD FD          .byte 253,253,253,253,253,253,253,253
002FB7  3  FD FD FD FD  
002FBB  3  FF FF FF FF          .byte 255,255,255,255,0,0,0,0
002FBF  3  00 00 00 00  
002FC3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002FC7  3  00 00 00 00  
002FCB  3  FF FF FF FF          .byte 255,255,255,255,0,0,0,0
002FCF  3  00 00 00 00  
002FD3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002FD7  3  00 00 00 00  
002FDB  3  F0 F0 F0 F0          .byte 240,240,240,240,0,0,0,0
002FDF  3  00 00 00 00  
002FE3  3  0F 0F 0F 0F          .byte 15,15,15,15,0,0,0,0
002FE7  3  00 00 00 00  
002FEB  3  00 00 00 00          .byte 0,0,0,0,15,15,15,15
002FEF  3  0F 0F 0F 0F  
002FF3  3  00 00 00 00          .byte 0,0,0,0,240,240,240,240
002FF7  3  F0 F0 F0 F0  
002FFB  3  00 00 00 00          .byte 0,0,0,0,255,0,255,0
002FFF  3  FF 00 FF 00  
003003  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
003007  3  00 00 00 00  
00300B  3  0F 0F 0F 0F          .byte 15,15,15,15,15,15,15,15
00300F  3  0F 0F 0F 0F  
003013  3  00 00 00 00          .byte 0,0,0,0,255,255,255,255
003017  3  FF FF FF FF  
00301B  3  FF FF FF FF          .byte 255,255,255,255,0,0,0,0
00301F  3  00 00 00 00  
003023  3  FF FF FF FF          .byte 255,255,255,255,0,0,0,0
003027  3  00 00 00 00  
00302B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00302F  3  00 00 00 00  
003033  3  00 7F 7F 1F          .byte 0,127,127,31,31,102,102,25
003037  3  1F 66 66 19  
00303B  3  00 FE FE F8          .byte 0,254,254,248,248,102,102,152
00303F  3  F8 66 66 98  
003043  3  19 66 66 19          .byte 25,102,102,25,25,7,7,0
003047  3  19 07 07 00  
00304B  3  98 66 66 98          .byte 152,102,102,152,152,224,224,0
00304F  3  98 E0 E0 00  
003053  3  03 1E 7F 00          .byte 3,30,127,0,127,15,15,127
003057  3  7F 0F 0F 7F  
00305B  3  8F 7E FF 00          .byte 143,126,255,0,255,255,255,255
00305F  3  FF FF FF FF  
003063  3  00 00 00 00          .byte 0,0,0,0,0,3,31,255
003067  3  00 03 1F FF  
00306B  3  7E 00 7F 00          .byte 126,0,127,0,127,255,252,0
00306F  3  7F FF FC 00  
003073  3  00 3F 3F 00          .byte 0,63,63,0,63,63,32,32
003077  3  3F 3F 20 20  
00307B  3  00 FC FC 00          .byte 0,252,252,0,252,252,4,4
00307F  3  FC FC 04 04  
003083  3  2C 2C 20 20          .byte 44,44,32,32,63,63,63,63
003087  3  3F 3F 3F 3F  
00308B  3  34 34 04 04          .byte 52,52,4,4,252,252,255,255
00308F  3  FC FC FF FF  
003093  3  7F 7F FF 00          .byte 127,127,255,0,255,240,0,0
003097  3  FF F0 00 00  
00309B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00309F  3  00 00 00 00  
0030A3  3  00 00 00 00          .byte 0,0,0,0,255,255,255,255
0030A7  3  FF FF FF FF  
0030AB  3  00 00 00 00          .byte 0,0,0,0,255,255,255,255
0030AF  3  FF FF FF FF  
0030B3  3  FF FF FF FF          .byte 255,255,255,255,0,0,0,0
0030B7  3  00 00 00 00  
0030BB  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0030BF  3  00 00 00 00  
0030C3  3  00 FF FF 00          .byte 0,255,255,0,15,0,15,0
0030C7  3  0F 00 0F 00  
0030CB  3  00 FF FF 00          .byte 0,255,255,0,255,0,255,0
0030CF  3  FF 00 FF 00  
0030D3  3  00 FF FF 00          .byte 0,255,255,0,240,0,240,0
0030D7  3  F0 00 F0 00  
0030DB  3  0F 00 0F 00          .byte 15,0,15,0,15,0,0,0
0030DF  3  0F 00 00 00  
0030E3  3  FF 00 FF 00          .byte 255,0,255,0,255,0,0,0
0030E7  3  FF 00 00 00  
0030EB  3  F0 00 F0 00          .byte 240,0,240,0,240,0,0,0
0030EF  3  F0 00 00 00  
0030F3  3  FF 00 FF 00          .byte 255,0,255,0,255,0,255,0
0030F7  3  FF 00 FF 00  
0030FB  3  0F 00 0F 00          .byte 15,0,15,0,255,0,255,255
0030FF  3  FF 00 FF FF  
003103  3  FF 00 FF 00          .byte 255,0,255,0,255,0,255,255
003107  3  FF 00 FF FF  
00310B  3  F0 00 F0 00          .byte 240,0,240,0,255,0,255,255
00310F  3  FF 00 FF FF  
003113  3  F0 F0 F0 F0          .byte 240,240,240,240,240,240,240,240
003117  3  F0 F0 F0 F0  
00311B  3  0F 0F 0F 0F          .byte 15,15,15,15,255,255,255,255
00311F  3  FF FF FF FF  
003123  3  F0 F0 F0 F0          .byte 240,240,240,240,255,255,255,255
003127  3  FF FF FF FF  
00312B  3  00 7F 1E 06          .byte 0,127,30,6,6,62,254,248
00312F  3  06 3E FE F8  
003133  3  00 FE 78 60          .byte 0,254,120,96,96,124,127,31
003137  3  60 7C 7F 1F  
00313B  3               bprop:
00313B  3  00                   .byte 0
00313C  3  02                   .byte 2
00313D  3  02                   .byte 2
00313E  3  02                   .byte 2
00313F  3  02                   .byte 2
003140  3  02                   .byte 2
003141  3  02                   .byte 2
003142  3  02                   .byte 2
003143  3  02                   .byte 2
003144  3  02                   .byte 2
003145  3  02                   .byte 2
003146  3  02                   .byte 2
003147  3  02                   .byte 2
003148  3  02                   .byte 2
003149  3  02                   .byte 2
00314A  3  02                   .byte 2
00314B  3  02                   .byte 2
00314C  3  02                   .byte 2
00314D  3  02                   .byte 2
00314E  3  00                   .byte 0
00314F  3  00                   .byte 0
003150  3  00                   .byte 0
003151  3  00                   .byte 0
003152  3  00                   .byte 0
003153  3  00                   .byte 0
003154  3  00                   .byte 0
003155  3  00                   .byte 0
003156  3  00                   .byte 0
003157  3  00                   .byte 0
003158  3  00                   .byte 0
003159  3  00                   .byte 0
00315A  3  00                   .byte 0
00315B  3  06                   .byte 6
00315C  3  06                   .byte 6
00315D  3  06                   .byte 6
00315E  3  06                   .byte 6
00315F  3  00                   .byte 0
003160  3  00                   .byte 0
003161  3  05                   .byte 5
003162  3  05                   .byte 5
003163  3  02                   .byte 2
003164  3  00                   .byte 0
003165  3  00                   .byte 0
003166  3  02                   .byte 2
003167  3  00                   .byte 0
003168  3  00                   .byte 0
003169  3  00                   .byte 0
00316A  3  00                   .byte 0
00316B  3  00                   .byte 0
00316C  3  00                   .byte 0
00316D  3  00                   .byte 0
00316E  3  00                   .byte 0
00316F  3  00                   .byte 0
003170  3  00                   .byte 0
003171  3  00                   .byte 0
003172  3  00                   .byte 0
003173  3  00                   .byte 0
003174  3  00                   .byte 0
003175  3  00                   .byte 0
003176  3  00                   .byte 0
003177  3  00                   .byte 0
003178  3  02                   .byte 2
003179  3  02                   .byte 2
00317A  3  00                   .byte 0
00317B  3  02                   .byte 2
00317C  3  05                   .byte 5
00317D  3  02                   .byte 2
00317E  3  02                   .byte 2
00317F  3  05                   .byte 5
003180  3  00                   .byte 0
003181  3  00                   .byte 0
003182  3  02                   .byte 2
003183  3  02                   .byte 2
003184  3  00                   .byte 0
003185  3  02                   .byte 2
003186  3  02                   .byte 2
003187  3  02                   .byte 2
003188  3  05                   .byte 5
003189  3  00                   .byte 0
00318A  3  00                   .byte 0
00318B  3  00                   .byte 0
00318C  3  00                   .byte 0
00318D  3  00                   .byte 0
00318E  3  00                   .byte 0
00318F  3  00                   .byte 0
003190  3  00                   .byte 0
003191  3  02                   .byte 2
003192  3  02                   .byte 2
003193  3  02                   .byte 2
003194  3  02                   .byte 2
003195  3  02                   .byte 2
003196  3  00                   .byte 0
003197  3  00                   .byte 0
003198  3  00                   .byte 0
003199  3  00                   .byte 0
00319A  3  06                   .byte 6
00319B  3  06                   .byte 6
00319C  3  06                   .byte 6
00319D  3  06                   .byte 6
00319E  3  00                   .byte 0
00319F  3  00                   .byte 0
0031A0  3  00                   .byte 0
0031A1  3  00                   .byte 0
0031A2  3  06                   .byte 6
0031A3  3  00                   .byte 0
0031A4  3  02                   .byte 2
0031A5  3  02                   .byte 2
0031A6  3  02                   .byte 2
0031A7  3  02                   .byte 2
0031A8  3  00                   .byte 0
0031A9  3  00                   .byte 0
0031AA  3  00                   .byte 0
0031AB  3  00                   .byte 0
0031AC  3  00                   .byte 0
0031AD  3  00                   .byte 0
0031AE  3  00                   .byte 0
0031AF  3  00                   .byte 0
0031B0  3  00                   .byte 0
0031B1  3  00                   .byte 0
0031B2  3  02                   .byte 2
0031B3  3  02                   .byte 2
0031B4  3  02                   .byte 2
0031B5  3  00                   .byte 0
0031B6  3  00                   .byte 0
0031B7  3               sprgfx:
0031B7  3  00 00 00 00          .byte 0,0,0,0,3,192,3,192,15,240,15,240,0,0,0,0,3,192,3,192,15,240,15,240,51,204,51,204,15,240,15,240
0031BB  3  03 C0 03 C0  
0031BF  3  0F F0 0F F0  
0031D7  3  00 00 00 00          .byte 0,0,0,0,0,240,0,240,3,252,3,252,0,0,0,0,0,240,0,240,3,252,3,252,12,243,12,243,3,252,3,252
0031DB  3  00 F0 00 F0  
0031DF  3  03 FC 03 FC  
0031F7  3  00 00 00 00          .byte 0,0,0,0,0,60,0,60,0,255,0,255,0,0,0,0,0,60,0,60,0,255,0,255,195,60,195,60,0,255,0,255
0031FB  3  00 3C 00 3C  
0031FF  3  00 FF 00 FF  
003217  3  00 00 00 00          .byte 0,0,0,0,0,15,0,15,192,63,192,63,0,0,0,0,0,15,0,15,192,63,192,63,48,207,48,207,192,63,192,63
00321B  3  00 0F 00 0F  
00321F  3  C0 3F C0 3F  
003237  3  03 C0 03 C0          .byte 3,192,3,192,3,192,3,192,15,240,15,240,0,0,0,0,0,0,0,0,3,192,3,192,15,240,15,240,0,0,0,0
00323B  3  03 C0 03 C0  
00323F  3  0F F0 0F F0  
003257  3  00 F0 00 F0          .byte 0,240,0,240,0,240,0,240,3,252,3,252,0,0,0,0,0,0,0,0,0,240,0,240,3,252,3,252,0,0,0,0
00325B  3  00 F0 00 F0  
00325F  3  03 FC 03 FC  
003277  3  00 3C 00 3C          .byte 0,60,0,60,0,60,0,60,0,255,0,255,0,0,0,0,0,0,0,0,0,60,0,60,0,255,0,255,0,0,0,0
00327B  3  00 3C 00 3C  
00327F  3  00 FF 00 FF  
003297  3  00 0F 00 0F          .byte 0,15,0,15,0,15,0,15,192,63,192,63,0,0,0,0,0,0,0,0,0,15,0,15,192,63,192,63,0,0,0,0
00329B  3  00 0F 00 0F  
00329F  3  C0 3F C0 3F  
0032B7  3  03 C0 03 C0          .byte 3,192,3,192,15,192,15,192,3,240,3,240,3,192,3,192,12,240,12,240,12,0,12,0,15,0,15,0,0,0,0,0
0032BB  3  0F C0 0F C0  
0032BF  3  03 F0 03 F0  
0032D7  3  00 F0 00 F0          .byte 0,240,0,240,3,240,3,240,0,252,0,252,0,240,0,240,3,60,3,60,3,0,3,0,3,192,3,192,0,0,0,0
0032DB  3  03 F0 03 F0  
0032DF  3  00 FC 00 FC  
0032F7  3  00 3C 00 3C          .byte 0,60,0,60,0,252,0,252,0,63,0,63,0,60,0,60,0,207,0,207,0,192,0,192,0,240,0,240,0,0,0,0
0032FB  3  00 FC 00 FC  
0032FF  3  00 3F 00 3F  
003317  3  00 0F 00 0F          .byte 0,15,0,15,0,63,0,63,192,15,192,15,0,15,0,15,192,51,192,51,0,48,0,48,0,60,0,60,0,0,0,0
00331B  3  00 3F 00 3F  
00331F  3  C0 0F C0 0F  
003337  3  00 00 00 00          .byte 0,0,0,0,3,192,3,192,15,240,15,240,0,0,0,0,15,0,15,0,63,192,63,192,15,48,15,48,3,192,3,192
00333B  3  03 C0 03 C0  
00333F  3  0F F0 0F F0  
003357  3  00 00 00 00          .byte 0,0,0,0,0,240,0,240,3,252,3,252,0,0,0,0,3,192,3,192,15,240,15,240,3,204,3,204,0,240,0,240
00335B  3  00 F0 00 F0  
00335F  3  03 FC 03 FC  
003377  3  00 00 00 00          .byte 0,0,0,0,0,60,0,60,0,255,0,255,0,0,0,0,0,240,0,240,3,252,3,252,0,243,0,243,0,60,0,60
00337B  3  00 3C 00 3C  
00337F  3  00 FF 00 FF  
003397  3  00 00 00 00          .byte 0,0,0,0,0,15,0,15,192,63,192,63,0,0,0,0,0,60,0,60,0,255,0,255,192,60,192,60,0,15,0,15
00339B  3  00 0F 00 0F  
00339F  3  C0 3F C0 3F  
0033B7  3  00 00 00 00          .byte 0,0,0,0,3,192,3,192,15,240,15,240,0,0,0,0,3,192,3,192,15,240,15,240,51,204,51,204,15,240,15,240
0033BB  3  03 C0 03 C0  
0033BF  3  0F F0 0F F0  
0033D7  3  00 00 00 00          .byte 0,0,0,0,0,240,0,240,3,252,3,252,0,0,0,0,0,240,0,240,3,252,3,252,12,243,12,243,3,252,3,252
0033DB  3  00 F0 00 F0  
0033DF  3  03 FC 03 FC  
0033F7  3  00 00 00 00          .byte 0,0,0,0,0,60,0,60,0,255,0,255,0,0,0,0,0,60,0,60,0,255,0,255,195,60,195,60,0,255,0,255
0033FB  3  00 3C 00 3C  
0033FF  3  00 FF 00 FF  
003417  3  00 00 00 00          .byte 0,0,0,0,0,15,0,15,192,63,192,63,0,0,0,0,0,15,0,15,192,63,192,63,48,207,48,207,192,63,192,63
00341B  3  00 0F 00 0F  
00341F  3  C0 3F C0 3F  
003437  3  03 C0 03 C0          .byte 3,192,3,192,3,192,3,192,15,240,15,240,0,0,0,0,0,0,0,0,3,192,3,192,15,240,15,240,0,0,0,0
00343B  3  03 C0 03 C0  
00343F  3  0F F0 0F F0  
003457  3  00 F0 00 F0          .byte 0,240,0,240,0,240,0,240,3,252,3,252,0,0,0,0,0,0,0,0,0,240,0,240,3,252,3,252,0,0,0,0
00345B  3  00 F0 00 F0  
00345F  3  03 FC 03 FC  
003477  3  00 3C 00 3C          .byte 0,60,0,60,0,60,0,60,0,255,0,255,0,0,0,0,0,0,0,0,0,60,0,60,0,255,0,255,0,0,0,0
00347B  3  00 3C 00 3C  
00347F  3  00 FF 00 FF  
003497  3  00 0F 00 0F          .byte 0,15,0,15,0,15,0,15,192,63,192,63,0,0,0,0,0,0,0,0,0,15,0,15,192,63,192,63,0,0,0,0
00349B  3  00 0F 00 0F  
00349F  3  C0 3F C0 3F  
0034B7  3  03 C0 03 C0          .byte 3,192,3,192,3,240,3,240,15,192,15,192,3,192,3,192,15,48,15,48,0,48,0,48,0,240,0,240,0,0,0,0
0034BB  3  03 F0 03 F0  
0034BF  3  0F C0 0F C0  
0034D7  3  00 F0 00 F0          .byte 0,240,0,240,0,252,0,252,3,240,3,240,0,240,0,240,3,204,3,204,0,12,0,12,0,60,0,60,0,0,0,0
0034DB  3  00 FC 00 FC  
0034DF  3  03 F0 03 F0  
0034F7  3  00 3C 00 3C          .byte 0,60,0,60,0,63,0,63,0,252,0,252,0,60,0,60,0,243,0,243,0,3,0,3,0,15,0,15,0,0,0,0
0034FB  3  00 3F 00 3F  
0034FF  3  00 FC 00 FC  
003517  3  00 0F 00 0F          .byte 0,15,0,15,192,15,192,15,0,63,0,63,0,15,0,15,192,60,192,60,192,0,192,0,192,3,192,3,0,0,0,0
00351B  3  C0 0F C0 0F  
00351F  3  00 3F 00 3F  
003537  3  00 00 00 00          .byte 0,0,0,0,3,192,3,192,15,240,15,240,0,0,0,0,0,240,0,240,3,252,3,252,12,240,12,240,3,192,3,192
00353B  3  03 C0 03 C0  
00353F  3  0F F0 0F F0  
003557  3  00 00 00 00          .byte 0,0,0,0,0,240,0,240,3,252,3,252,0,0,0,0,0,60,0,60,0,255,0,255,3,60,3,60,0,240,0,240
00355B  3  00 F0 00 F0  
00355F  3  03 FC 03 FC  
003577  3  00 00 00 00          .byte 0,0,0,0,0,60,0,60,0,255,0,255,0,0,0,0,0,15,0,15,192,63,192,63,0,207,0,207,0,60,0,60
00357B  3  00 3C 00 3C  
00357F  3  00 FF 00 FF  
003597  3  00 00 00 00          .byte 0,0,0,0,0,15,0,15,192,63,192,63,0,0,0,0,192,3,192,3,240,15,240,15,192,51,192,51,0,15,0,15
00359B  3  00 0F 00 0F  
00359F  3  C0 3F C0 3F  
0035B7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0035BB  3  00 00 00 00  
0035BF  3  00 00 00 00  
0035D7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0035DB  3  00 00 00 00  
0035DF  3  00 00 00 00  
0035F7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0035FB  3  00 00 00 00  
0035FF  3  00 00 00 00  
003617  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00361B  3  00 00 00 00  
00361F  3  00 00 00 00  
003637  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,60,0,240
00363B  3  00 00 00 00  
00363F  3  00 00 00 00  
003657  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,3,0,15,0,60
00365B  3  00 00 00 00  
00365F  3  00 00 00 00  
003677  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,0,192,3,0,15
00367B  3  00 00 00 00  
00367F  3  00 00 00 00  
003697  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,240,0,192,3
00369B  3  00 00 00 00  
00369F  3  00 00 00 00  
0036B7  3  00 F0 03 C0          .byte 0,240,3,192,15,0,60,0,240,0,240,0,60,0,15,0,3,192,0,240,0,240,3,192,15,0,60,0,0,0,0,0
0036BB  3  0F 00 3C 00  
0036BF  3  F0 00 F0 00  
0036D7  3  00 3C 00 F0          .byte 0,60,0,240,3,192,15,0,60,0,60,0,15,0,3,192,0,240,0,60,0,60,0,240,3,192,15,0,0,0,0,0
0036DB  3  03 C0 0F 00  
0036DF  3  3C 00 3C 00  
0036F7  3  00 0F 00 3C          .byte 0,15,0,60,0,240,3,192,15,0,15,0,3,192,0,240,0,60,0,15,0,15,0,60,0,240,3,192,0,0,0,0
0036FB  3  00 F0 03 C0  
0036FF  3  0F 00 0F 00  
003717  3  C0 03 00 0F          .byte 192,3,0,15,0,60,0,240,3,192,3,192,0,240,0,60,0,15,192,3,192,3,0,15,0,60,0,240,0,0,0,0
00371B  3  00 3C 00 F0  
00371F  3  03 C0 03 C0  
003737  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,7,128,1,224,0,120,0,120,1,224,7,128,30,0,120,0,120,0,30,0,7,128
00373B  3  00 00 00 00  
00373F  3  00 00 07 80  
003757  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,1,224,0,120,0,30,0,30,0,120,1,224,7,128,30,0,30,0,7,128,1,224
00375B  3  00 00 00 00  
00375F  3  00 00 01 E0  
003777  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,120,0,30,128,7,128,7,0,30,0,120,1,224,7,128,7,128,1,224,0,120
00377B  3  00 00 00 00  
00377F  3  00 00 00 78  
003797  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,30,128,7,224,1,224,1,128,7,0,30,0,120,1,224,1,224,0,120,0,30
00379B  3  00 00 00 00  
00379F  3  00 00 00 1E  
0037B7  3  01 E0 00 78          .byte 1,224,0,120,0,120,1,224,7,128,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,224,7,128,30,0
0037BB  3  00 78 01 E0  
0037BF  3  07 80 1E 00  
0037D7  3  00 78 00 1E          .byte 0,120,0,30,0,30,0,120,1,224,7,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,1,224,7,128
0037DB  3  00 1E 00 78  
0037DF  3  01 E0 07 80  
0037F7  3  00 1E 80 07          .byte 0,30,128,7,128,7,0,30,0,120,1,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,120,1,224
0037FB  3  80 07 00 1E  
0037FF  3  00 78 01 E0  
003817  3  80 07 E0 01          .byte 128,7,224,1,224,1,128,7,0,30,0,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,7,0,30,0,120
00381B  3  E0 01 80 07  
00381F  3  00 1E 00 78  
003837  3  00 00 00 00          .byte 0,0,0,0,0,0,6,96,31,224,127,248,0,0,24,0,30,0,31,128,31,224,31,248,31,254,127,254,127,254,127,254
00383B  3  00 00 06 60  
00383F  3  1F E0 7F F8  
003857  3  00 00 00 00          .byte 0,0,0,0,0,0,1,152,7,248,31,254,0,0,6,0,7,128,7,224,7,248,7,254,135,255,159,255,159,255,159,255
00385B  3  00 00 01 98  
00385F  3  07 F8 1F FE  
003877  3  00 00 00 00          .byte 0,0,0,0,0,0,0,102,1,254,135,255,0,0,1,128,1,224,1,248,1,254,129,255,225,255,231,255,231,255,231,255
00387B  3  00 00 00 66  
00387F  3  01 FE 87 FF  
003897  3  00 00 00 00          .byte 0,0,0,0,0,0,128,25,128,127,225,255,0,0,0,96,0,120,0,126,128,127,224,127,248,127,249,255,249,255,249,255
00389B  3  00 00 80 19  
00389F  3  80 7F E1 FF  
0038B7  3  18 18 18 18          .byte 24,24,24,24,24,24,24,24,120,120,0,0,0,0,0,0,0,0,0,0,0,0,6,96,31,224,127,248,0,0,24,0
0038BB  3  18 18 18 18  
0038BF  3  78 78 00 00  
0038D7  3  06 06 06 06          .byte 6,6,6,6,6,6,6,6,30,30,0,0,0,0,0,0,0,0,0,0,0,0,1,152,7,248,31,254,0,0,6,0
0038DB  3  06 06 06 06  
0038DF  3  1E 1E 00 00  
0038F7  3  81 81 81 81          .byte 129,129,129,129,129,129,129,129,135,135,0,0,0,0,0,0,0,0,0,0,0,0,0,102,1,254,135,255,0,0,1,128
0038FB  3  81 81 81 81  
0038FF  3  87 87 00 00  
003917  3  60 60 60 60          .byte 96,96,96,96,96,96,96,96,225,225,0,0,0,0,0,0,0,0,0,0,0,0,128,25,128,127,225,255,0,0,0,96
00391B  3  60 60 60 60  
00391F  3  E1 E1 00 00  
003937  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00393B  3  00 00 00 00  
00393F  3  00 00 00 00  
003957  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00395B  3  00 00 00 00  
00395F  3  00 00 00 00  
003977  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00397B  3  00 00 00 00  
00397F  3  00 00 00 00  
003997  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00399B  3  00 00 00 00  
00399F  3  00 00 00 00  
0039B7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0039BB  3  00 00 00 00  
0039BF  3  00 00 00 00  
0039D7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0039DB  3  00 00 00 00  
0039DF  3  00 00 00 00  
0039F7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0039FB  3  00 00 00 00  
0039FF  3  00 00 00 00  
003A17  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003A1B  3  00 00 00 00  
003A1F  3  00 00 00 00  
003A37  3  00 00 00 00          .byte 0,0,0,0,0,0,1,128,1,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003A3B  3  00 00 01 80  
003A3F  3  01 80 00 00  
003A57  3  00 00 00 00          .byte 0,0,0,0,0,0,0,96,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003A5B  3  00 00 00 60  
003A5F  3  00 60 00 00  
003A77  3  00 00 00 00          .byte 0,0,0,0,0,0,0,24,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003A7B  3  00 00 00 18  
003A7F  3  00 18 00 00  
003A97  3  00 00 00 00          .byte 0,0,0,0,0,0,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003A9B  3  00 00 00 06  
003A9F  3  00 06 00 00  
003AB7  3  00 00 00 00          .byte 0,0,0,0,3,192,3,192,15,240,15,240,0,0,0,0,3,192,3,192,15,240,15,240,51,204,51,204,15,240,15,240
003ABB  3  03 C0 03 C0  
003ABF  3  0F F0 0F F0  
003AD7  3  00 00 00 00          .byte 0,0,0,0,0,240,0,240,3,252,3,252,0,0,0,0,0,240,0,240,3,252,3,252,12,243,12,243,3,252,3,252
003ADB  3  00 F0 00 F0  
003ADF  3  03 FC 03 FC  
003AF7  3  00 00 00 00          .byte 0,0,0,0,0,60,0,60,0,255,0,255,0,0,0,0,0,60,0,60,0,255,0,255,195,60,195,60,0,255,0,255
003AFB  3  00 3C 00 3C  
003AFF  3  00 FF 00 FF  
003B17  3  00 00 00 00          .byte 0,0,0,0,0,15,0,15,192,63,192,63,0,0,0,0,0,15,0,15,192,63,192,63,48,207,48,207,192,63,192,63
003B1B  3  00 0F 00 0F  
003B1F  3  C0 3F C0 3F  
003B37  3  03 C0 03 C0          .byte 3,192,3,192,3,192,3,192,15,240,15,240,0,0,0,0,0,0,0,0,3,192,3,192,15,240,15,240,0,0,0,0
003B3B  3  03 C0 03 C0  
003B3F  3  0F F0 0F F0  
003B57  3  00 F0 00 F0          .byte 0,240,0,240,0,240,0,240,3,252,3,252,0,0,0,0,0,0,0,0,0,240,0,240,3,252,3,252,0,0,0,0
003B5B  3  00 F0 00 F0  
003B5F  3  03 FC 03 FC  
003B77  3  00 3C 00 3C          .byte 0,60,0,60,0,60,0,60,0,255,0,255,0,0,0,0,0,0,0,0,0,60,0,60,0,255,0,255,0,0,0,0
003B7B  3  00 3C 00 3C  
003B7F  3  00 FF 00 FF  
003B97  3  00 0F 00 0F          .byte 0,15,0,15,0,15,0,15,192,63,192,63,0,0,0,0,0,0,0,0,0,15,0,15,192,63,192,63,0,0,0,0
003B9B  3  00 0F 00 0F  
003B9F  3  C0 3F C0 3F  
003BB7  3  03 C0 03 C0          .byte 3,192,3,192,15,240,15,240,51,204,51,204,15,240,15,240,3,192,3,192,0,0,0,0,0,0,0,0,0,0,0,0
003BBB  3  0F F0 0F F0  
003BBF  3  33 CC 33 CC  
003BD7  3  00 F0 00 F0          .byte 0,240,0,240,3,252,3,252,12,243,12,243,3,252,3,252,0,240,0,240,0,0,0,0,0,0,0,0,0,0,0,0
003BDB  3  03 FC 03 FC  
003BDF  3  0C F3 0C F3  
003BF7  3  00 3C 00 3C          .byte 0,60,0,60,0,255,0,255,195,60,195,60,0,255,0,255,0,60,0,60,0,0,0,0,0,0,0,0,0,0,0,0
003BFB  3  00 FF 00 FF  
003BFF  3  C3 3C C3 3C  
003C17  3  00 0F 00 0F          .byte 0,15,0,15,192,63,192,63,48,207,48,207,192,63,192,63,0,15,0,15,0,0,0,0,0,0,0,0,0,0,0,0
003C1B  3  C0 3F C0 3F  
003C1F  3  30 CF 30 CF  
003C37  3  00 00 00 00          .byte 0,0,0,0,3,192,3,192,15,240,15,240,0,0,0,0,3,192,3,192,15,240,15,240,51,204,51,204,0,0,0,0
003C3B  3  03 C0 03 C0  
003C3F  3  0F F0 0F F0  
003C57  3  00 00 00 00          .byte 0,0,0,0,0,240,0,240,3,252,3,252,0,0,0,0,0,240,0,240,3,252,3,252,12,243,12,243,0,0,0,0
003C5B  3  00 F0 00 F0  
003C5F  3  03 FC 03 FC  
003C77  3  00 00 00 00          .byte 0,0,0,0,0,60,0,60,0,255,0,255,0,0,0,0,0,60,0,60,0,255,0,255,195,60,195,60,0,0,0,0
003C7B  3  00 3C 00 3C  
003C7F  3  00 FF 00 FF  
003C97  3  00 00 00 00          .byte 0,0,0,0,0,15,0,15,192,63,192,63,0,0,0,0,0,15,0,15,192,63,192,63,48,207,48,207,0,0,0,0
003C9B  3  00 0F 00 0F  
003C9F  3  C0 3F C0 3F  
003CB7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,192,3,192,15,240,15,240,0,0,0,0
003CBB  3  00 00 00 00  
003CBF  3  00 00 00 00  
003CD7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,0,240,3,252,3,252,0,0,0,0
003CDB  3  00 00 00 00  
003CDF  3  00 00 00 00  
003CF7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,60,0,255,0,255,0,0,0,0
003CFB  3  00 00 00 00  
003CFF  3  00 00 00 00  
003D17  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,15,192,63,192,63,0,0,0,0
003D1B  3  00 00 00 00  
003D1F  3  00 00 00 00  
003D37  3  0F F0 0F F0          .byte 15,240,15,240,63,252,63,252,255,255,255,255,204,51,204,51,48,12,51,204,3,192,15,240,207,243,192,3,51,204,51,204
003D3B  3  3F FC 3F FC  
003D3F  3  FF FF FF FF  
003D57  3  03 FC 03 FC          .byte 3,252,3,252,15,255,15,255,255,255,255,255,243,12,243,12,12,3,12,243,0,240,3,252,243,252,240,0,12,243,12,243
003D5B  3  0F FF 0F FF  
003D5F  3  FF FF FF FF  
003D77  3  00 FF 00 FF          .byte 0,255,0,255,195,255,195,255,255,255,255,255,60,195,60,195,195,0,195,60,0,60,0,255,60,255,60,0,195,60,195,60
003D7B  3  C3 FF C3 FF  
003D7F  3  FF FF FF FF  
003D97  3  C0 3F C0 3F          .byte 192,63,192,63,240,255,240,255,255,255,255,255,207,48,207,48,48,192,48,207,0,15,192,63,207,63,15,0,48,207,48,207
003D9B  3  F0 FF F0 FF  
003D9F  3  FF FF FF FF  
003DB7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,1,128,1,128,6,96,6,96,31,248,31,248,102,102,102,102,31,248,31,248,6,96
003DBB  3  00 00 00 00  
003DBF  3  00 00 01 80  
003DD7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,96,0,96,1,152,1,152,7,254,7,254,153,153,153,153,7,254,7,254,1,152
003DDB  3  00 00 00 00  
003DDF  3  00 00 00 60  
003DF7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,24,0,24,0,102,0,102,129,255,129,255,102,102,102,102,129,255,129,255,0,102
003DFB  3  00 00 00 00  
003DFF  3  00 00 00 18  
003E17  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,6,0,6,128,25,128,25,224,127,224,127,153,153,153,153,224,127,224,127,128,25
003E1B  3  00 00 00 00  
003E1F  3  00 00 00 06  
003E37  3  06 60 01 80          .byte 6,96,1,128,1,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,6,96,6,1,128
003E3B  3  01 80 00 00  
003E3F  3  00 00 00 00  
003E57  3  01 98 00 60          .byte 1,152,0,96,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,1,152,1,0,96
003E5B  3  00 60 00 00  
003E5F  3  00 00 00 00  
003E77  3  00 66 00 18          .byte 0,102,0,24,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,102,0,0,24
003E7B  3  00 18 00 00  
003E7F  3  00 00 00 00  
003E97  3  80 19 00 06          .byte 128,25,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,128,25,128,0,6
003E9B  3  00 06 00 00  
003E9F  3  00 00 00 00  
003EB7  3  01 80 06 60          .byte 1,128,6,96,6,96,25,152,25,152,6,96,6,96,1,128,1,128,96,6,96,6,0,0,0,0,0,0,0,0,0,0
003EBB  3  06 60 19 98  
003EBF  3  19 98 06 60  
003ED7  3  00 60 01 98          .byte 0,96,1,152,1,152,6,102,6,102,1,152,1,152,0,96,0,96,152,1,152,1,0,0,0,0,0,0,0,0,0,0
003EDB  3  01 98 06 66  
003EDF  3  06 66 01 98  
003EF7  3  00 18 00 66          .byte 0,24,0,102,0,102,129,153,129,153,0,102,0,102,0,24,0,24,102,0,102,0,0,0,0,0,0,0,0,0,0,0
003EFB  3  00 66 81 99  
003EFF  3  81 99 00 66  
003F17  3  00 06 80 19          .byte 0,6,128,25,128,25,96,102,96,102,128,25,128,25,0,6,0,6,25,128,25,128,0,0,0,0,0,0,0,0,0,0
003F1B  3  80 19 60 66  
003F1F  3  60 66 80 19  
003F37  3  00 00 00 00          .byte 0,0,0,0,0,0,51,48,51,48,255,240,255,240,51,255,51,255,255,252,255,252,63,255,63,255,255,204,255,204,15,255
003F3B  3  00 00 33 30  
003F3F  3  33 30 FF F0  
003F57  3  00 00 00 00          .byte 0,0,0,0,0,0,12,204,12,204,63,252,63,252,204,255,204,255,63,255,63,255,207,255,207,255,63,243,63,243,195,255
003F5B  3  00 00 0C CC  
003F5F  3  0C CC 3F FC  
003F77  3  00 00 00 00          .byte 0,0,0,0,0,0,3,51,3,51,15,255,15,255,243,63,243,63,207,255,207,255,243,255,243,255,207,252,207,252,240,255
003F7B  3  00 00 03 33  
003F7F  3  03 33 0F FF  
003F97  3  00 00 00 00          .byte 0,0,0,0,0,0,192,204,192,204,195,255,195,255,252,207,252,207,243,255,243,255,252,255,252,255,51,255,51,255,252,63
003F9B  3  00 00 C0 CC  
003F9F  3  C0 CC C3 FF  
003FB7  3  0F FF 0C CC          .byte 15,255,12,204,12,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,48,51,48,51,255,51,255,255,240
003FBB  3  0C CC 00 00  
003FBF  3  00 00 00 00  
003FD7  3  C3 FF 03 33          .byte 195,255,3,51,3,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,204,12,204,204,255,204,255,63,252
003FDB  3  03 33 00 00  
003FDF  3  00 00 00 00  
003FF7  3  F0 FF C0 CC          .byte 240,255,192,204,192,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,51,3,51,243,63,243,63,15,255
003FFB  3  C0 CC 00 00  
003FFF  3  00 00 00 00  
004017  3  FC 3F 30 33          .byte 252,63,48,51,48,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,204,192,204,252,207,252,207,195,255
00401B  3  30 33 00 00  
00401F  3  00 00 00 00  
004037  3  FF F0 3F FF          .byte 255,240,63,255,63,255,255,252,255,252,15,255,15,255,255,204,255,204,12,204,12,204,0,0,0,0,0,0,0,0,0,0
00403B  3  3F FF FF FC  
00403F  3  FF FC 0F FF  
004057  3  3F FC CF FF          .byte 63,252,207,255,207,255,63,255,63,255,195,255,195,255,63,243,63,243,3,51,3,51,0,0,0,0,0,0,0,0,0,0
00405B  3  CF FF 3F FF  
00405F  3  3F FF C3 FF  
004077  3  0F FF F3 FF          .byte 15,255,243,255,243,255,207,255,207,255,240,255,240,255,207,252,207,252,192,204,192,204,0,0,0,0,0,0,0,0,0,0
00407B  3  F3 FF CF FF  
00407F  3  CF FF F0 FF  
004097  3  C3 FF FC FF          .byte 195,255,252,255,252,255,243,255,243,255,252,63,252,63,51,255,51,255,48,51,48,51,0,0,0,0,0,0,0,0,0,0
00409B  3  FC FF F3 FF  
00409F  3  F3 FF FC 3F  
0040B7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,1,128,1,128,0,96,0,96,96,0,96,0,24,6,24,6,0,24,0,24,0,0,0,0
0040BB  3  00 00 00 00  
0040BF  3  01 80 01 80  
0040D7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,96,0,96,0,24,0,24,24,0,24,0,134,1,134,1,0,6,0,6,0,0,0,0
0040DB  3  00 00 00 00  
0040DF  3  00 60 00 60  
0040F7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,24,0,24,0,6,0,6,6,0,6,0,97,128,97,128,128,1,128,1,0,0,0,0
0040FB  3  00 00 00 00  
0040FF  3  00 18 00 18  
004117  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,6,0,6,128,1,128,1,1,128,1,128,24,96,24,96,96,0,96,0,0,0,0,0
00411B  3  00 00 00 00  
00411F  3  00 06 00 06  
004137  3  01 80 01 80          .byte 1,128,1,128,0,96,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,24,0,96,0,96,96,0,96,0
00413B  3  00 60 00 60  
00413F  3  00 00 00 00  
004157  3  00 60 00 60          .byte 0,96,0,96,0,24,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,24,0,24,24,0,24,0
00415B  3  00 18 00 18  
00415F  3  00 00 00 00  
004177  3  00 18 00 18          .byte 0,24,0,24,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,128,1,128,1,0,6,0,6,6,0,6,0
00417B  3  00 06 00 06  
00417F  3  00 00 00 00  
004197  3  00 06 00 06          .byte 0,6,0,6,128,1,128,1,0,0,0,0,0,0,0,0,0,0,0,0,96,0,96,0,128,1,128,1,1,128,1,128
00419B  3  80 01 80 01  
00419F  3  00 00 00 00  
0041B7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0041BB  3  00 00 00 00  
0041BF  3  00 00 00 00  
0041D7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0041DB  3  00 00 00 00  
0041DF  3  00 00 00 00  
0041F7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0041FB  3  00 00 00 00  
0041FF  3  00 00 00 00  
004217  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00421B  3  00 00 00 00  
00421F  3  00 00 00 00  
004237  3  FF FF 00 00          .byte 255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00423B  3  FF FF 00 00  
00423F  3  FF FF 00 00  
004257  3  FF FF 00 00          .byte 255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00425B  3  FF FF 00 00  
00425F  3  FF FF 00 00  
004277  3  FF FF 00 00          .byte 255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00427B  3  FF FF 00 00  
00427F  3  FF FF 00 00  
004297  3  FF FF 00 00          .byte 255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00429B  3  FF FF 00 00  
00429F  3  FF FF 00 00  
0042B7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,255,255,0,0,255,255,0,0
0042BB  3  00 00 00 00  
0042BF  3  00 00 00 00  
0042D7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,255,255,0,0,255,255,0,0
0042DB  3  00 00 00 00  
0042DF  3  00 00 00 00  
0042F7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,255,255,0,0,255,255,0,0
0042FB  3  00 00 00 00  
0042FF  3  00 00 00 00  
004317  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,255,255,0,0,255,255,0,0
00431B  3  00 00 00 00  
00431F  3  00 00 00 00  
004337  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00433B  3  00 00 00 00  
00433F  3  00 00 00 00  
004357  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00435B  3  00 00 00 00  
00435F  3  00 00 00 00  
004377  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00437B  3  00 00 00 00  
00437F  3  00 00 00 00  
004397  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00439B  3  00 00 00 00  
00439F  3  00 00 00 00  
0043B7  3  0F F0 00 00          .byte 15,240,0,0,15,240,0,0,15,240,0,0,15,240,0,0,15,240,0,0,15,240,0,0,15,240,0,0,15,240,0,0
0043BB  3  0F F0 00 00  
0043BF  3  0F F0 00 00  
0043D7  3  03 FC 00 00          .byte 3,252,0,0,3,252,0,0,3,252,0,0,3,252,0,0,3,252,0,0,3,252,0,0,3,252,0,0,3,252,0,0
0043DB  3  03 FC 00 00  
0043DF  3  03 FC 00 00  
0043F7  3  00 FF 00 00          .byte 0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0
0043FB  3  00 FF 00 00  
0043FF  3  00 FF 00 00  
004417  3  C0 3F 00 00          .byte 192,63,0,0,192,63,0,0,192,63,0,0,192,63,0,0,192,63,0,0,192,63,0,0,192,63,0,0,192,63,0,0
00441B  3  C0 3F 00 00  
00441F  3  C0 3F 00 00  
004437  3  0F F0 00 00          .byte 15,240,0,0,15,240,0,0,15,240,0,0,15,240,0,0,15,240,0,0,15,240,0,0,15,240,0,0,15,240,0,0
00443B  3  0F F0 00 00  
00443F  3  0F F0 00 00  
004457  3  03 FC 00 00          .byte 3,252,0,0,3,252,0,0,3,252,0,0,3,252,0,0,3,252,0,0,3,252,0,0,3,252,0,0,3,252,0,0
00445B  3  03 FC 00 00  
00445F  3  03 FC 00 00  
004477  3  00 FF 00 00          .byte 0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0
00447B  3  00 FF 00 00  
00447F  3  00 FF 00 00  
004497  3  C0 3F 00 00          .byte 192,63,0,0,192,63,0,0,192,63,0,0,192,63,0,0,192,63,0,0,192,63,0,0,192,63,0,0,192,63,0,0
00449B  3  C0 3F 00 00  
00449F  3  C0 3F 00 00  
0044B7  3  0F F0 00 00          .byte 15,240,0,0,0,0,0,0,0,0,0,0,15,240,0,0,15,240,0,0,15,240,0,0,15,240,0,0,15,240,0,0
0044BB  3  00 00 00 00  
0044BF  3  00 00 00 00  
0044D7  3  03 FC 00 00          .byte 3,252,0,0,0,0,0,0,0,0,0,0,3,252,0,0,3,252,0,0,3,252,0,0,3,252,0,0,3,252,0,0
0044DB  3  00 00 00 00  
0044DF  3  00 00 00 00  
0044F7  3  00 FF 00 00          .byte 0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0
0044FB  3  00 00 00 00  
0044FF  3  00 00 00 00  
004517  3  C0 3F 00 00          .byte 192,63,0,0,0,0,0,0,0,0,0,0,192,63,0,0,192,63,0,0,192,63,0,0,192,63,0,0,192,63,0,0
00451B  3  00 00 00 00  
00451F  3  00 00 00 00  
004537  3               frmlst:
004537  3  00 04                .byte 0,4
004539  3  04 04                .byte 4,4
00453B  3  08 05                .byte 8,5
00453D  3  0D 02                .byte 13,2
00453F  3  0F 03                .byte 15,3
004541  3  12 05                .byte 18,5
004543  3  17 01                .byte 23,1
004545  3  18 03                .byte 24,3
004547  3  1B 03                .byte 27,3
004549  3  1E 02                .byte 30,2
00454B  3  20 04                .byte 32,4
00454D  3  24 03 27 00          .byte 36,3,39,0
004551  3               scdat:
004551  3  A2 00 BB 00          .word 162,187,192,177,169,280,234,228,295,374,318,250,100,100,100,9,164,130,131
004555  3  C0 00 B1 00  
004559  3  A9 00 18 01  
004577  3  FF 01 05 FF          .byte 255,1,5,255,41,20,255,1,10,255,41,20,255,1,10,255,41,20,255,1,10,255,41,20,255,1,10,255,41,20,255,1,10
00457B  3  29 14 FF 01  
00457F  3  0A FF 29 14  
004598  3  FF 29 14 FF          .byte 255,41,20,255,1,10,255,41,20,255,1,10,255,41,20,255,1,10,255,41,20,255,1,10,255,41,20,255,1,10,255,41,20
00459C  3  01 0A FF 29  
0045A0  3  14 FF 01 0A  
0045B9  3  FF 01 0A FF          .byte 255,1,10,255,41,20,255,1,10,255,41,20,255,1,10,255,41,7,2,3,4,1,5,6,255,41,7,255,1,10,255,41,6
0045BD  3  29 14 FF 01  
0045C1  3  0A FF 29 14  
0045DA  3  07 01 01 08          .byte 7,1,1,8,9,10,11,255,41,7,255,1,10,255,41,6,7,1,1,8,9,10,11,255,41,7,255,1,10,255,41,7,12
0045DE  3  09 0A 0B FF  
0045E2  3  29 07 FF 01  
0045FB  3  0D 0E 0F 10          .byte 13,14,15,16,16,17,255,41,6,255,1,10,255,41,20,255,1,10,255,41,20,255,1,10,255,41,20,255,1,5
0045FF  3  10 11 FF 29  
004603  3  06 FF 01 0A  
004619  3  FF 12 05 FF          .byte 255,18,5,255,19,6,255,20,8,255,19,6,255,18,5,255,19,11,255,20,8,255,19,22,20,20,20,32,33,20,20,20,255,19,22
00461D  3  13 06 FF 14  
004621  3  08 FF 13 06  
00463C  3  14 14 14 22          .byte 20,20,20,34,35,20,20,20,255,19,22,255,20,8,255,19,22,255,20,8,255,19,14,24,25,255,19,6,255,20,8,255,19,14
004640  3  23 14 14 14  
004644  3  FF 13 16 FF  
00465E  3  1A 1B FF 13          .byte 26,27,255,19,6,255,20,8,255,19,22,255,20,8,255,19,22,255,20,8,255,19,5,28,29,255,19,15,255,20,8,255,19,5
004662  3  06 FF 14 08  
004666  3  FF 13 16 FF  
004680  3  1E 1F FF 13          .byte 30,31,255,19,15,255,20,8,255,19,22,255,20,8,255,19,22,255,20,8,255,19,22,20,20,20,36,37,20,20,20,255,19,22
004684  3  0F FF 14 08  
004688  3  FF 13 16 FF  
0046A2  3  14 14 14 26          .byte 20,20,20,38,39,20,20,20,255,19,22,255,20,8,255,19,22,255,20,8,19,19,19,24,25,255,19,17,255,20,8,19,19,19
0046A6  3  27 14 14 14  
0046AA  3  FF 13 16 FF  
0046C4  3  1A 1B FF 13          .byte 26,27,255,19,6,18,255,19,10,255,20,8,255,19,10,18
0046C8  3  06 12 FF 13  
0046CC  3  0A FF 14 08  
0046D4  3  FF 01 05 FF          .byte 255,1,5,255,41,20,255,1,10,255,41,20,255,1,10,255,41,20,255,1,10,255,41,19,2,255,1,10,255,41,20,22,255,1,9
0046D8  3  29 14 FF 01  
0046DC  3  0A FF 29 14  
0046F7  3  FF 29 14 15          .byte 255,41,20,21,23,255,1,8,255,41,20,21,21,23,255,1,7,255,41,20,21,21,21,22,255,1,6,255,41,20,21,21,21
0046FB  3  17 FF 01 08  
0046FF  3  FF 29 14 15  
004718  3  17 FF 01 06          .byte 23,255,1,6,255,41,20,21,21,23,255,1,7,255,41,20,21,21,21,22,255,1,6,255,41,20,21,21,21,22,255,1,6
00471C  3  FF 29 14 15  
004720  3  15 17 FF 01  
004739  3  FF 29 14 15          .byte 255,41,20,21,23,255,1,8,255,41,7,2,3,4,1,5,6,255,41,7,22,255,1,9,255,41,6,7,1,1,8,9,10
00473D  3  17 FF 01 08  
004741  3  FF 29 07 02  
00475A  3  0B FF 29 06          .byte 11,255,41,6,12,255,1,10,255,41,6,7,1,1,8,9,10,11,255,41,7,255,1,10,255,41,7,12,13,14,15,16,16
00475E  3  0C FF 01 0A  
004762  3  FF 29 06 07  
00477B  3  11 FF 29 06          .byte 17,255,41,6,255,1,10,255,41,20,255,1,10,255,41,20,255,1,10,255,41,20,255,1,5
00477F  3  FF 01 0A FF  
004783  3  29 14 FF 01  
004794  3  28 28 28 FF          .byte 40,40,40,255,89,7,255,40,10,255,89,7,255,40,5,255,0,8,255,40,10,255,0,8,40,40,40,255,0,10,255,40,8
004798  3  59 07 FF 28  
00479C  3  0A FF 59 07  
0047B5  3  FF 00 0A 28          .byte 255,0,10,40,40,255,0,11,255,40,6,255,0,11,40,40,255,0,12,89,40,40,89,255,0,12,40,40,255,0,28,40,40
0047B9  3  28 FF 00 0B  
0047BD  3  FF 28 06 FF  
0047D6  3  FF 00 1C FF          .byte 255,0,28,255,40,5,255,0,22,255,40,10,255,0,18,255,40,14,255,0,14,255,40,16,255,0,14,255,40,14,255,0,18
0047DA  3  28 05 FF 00  
0047DE  3  16 FF 28 0A  
0047F7  3  FF 28 0A FF          .byte 255,40,10,255,0,22,255,40,5,255,0,28,40,40,255,0,28,40,40,255,0,12,105,40,40,105,255,0,12,40,40,255,0,11
0047FB  3  00 16 FF 28  
0047FF  3  05 FF 00 1C  
004819  3  FF 28 06 FF          .byte 255,40,6,255,0,11,40,40,255,0,10,255,40,8,255,0,10,40,40,40,255,0,8,255,40,10,255,0,8,255,40,5,255,105,7
00481D  3  00 0B 28 28  
004821  3  FF 00 0A FF  
00483C  3  FF 28 0A FF          .byte 255,40,10,255,105,7,40,40,40
004840  3  69 07 28 28  
004844  3  28           
004845  3  FF 2B 05 FF          .byte 255,43,5,255,42,20,255,43,10,255,42,20,255,43,10,255,42,20,255,43,10,255,42,20,255,43,10,255,42,20,255,43,10
004849  3  2A 14 FF 2B  
00484D  3  0A FF 2A 14  
004866  3  FF 2A 14 FF          .byte 255,42,20,255,43,10,255,42,7,44,44,255,42,11,255,43,10,255,42,6,45,46,47,255,42,11,255,43,10,255,42,6,45
00486A  3  2B 0A FF 2A  
00486E  3  07 2C 2C FF  
004887  3  30 31 FF 2A          .byte 48,49,255,42,11,255,43,10,255,42,7,50,51,255,42,11,255,43,10,255,42,5,54,53,52,255,42,12,255,43,10,42,42
00488B  3  0B FF 2B 0A  
00488F  3  FF 2A 07 32  
0048A8  3  39 35 38 37          .byte 57,53,56,55,255,42,14,255,43,9,61,60,59,58,255,42,17,255,43,9,62,63,255,42,19,255,43,10,255,42,20,255,43,8
0048AC  3  FF 2A 0E FF  
0048B0  3  2B 09 3D 3C  
0048CA  3  40 41 FF 2A          .byte 64,65,255,42,20,255,43,8,66,21,255,42,20,255,43,8,67,68,255,42,20,255,43,10,255,42,20,255,43,10,255,42,20
0048CE  3  14 FF 2B 08  
0048D2  3  42 15 FF 2A  
0048EB  3  FF 2B 05             .byte 255,43,5
0048EE  3  45 FF 46 04          .byte 69,255,70,4,255,69,6,255,70,8,255,69,6,255,70,4,69,69,255,70,4,255,69,6,255,70,8,255,69,6,255,70,4
0048F2  3  FF 45 06 FF  
0048F6  3  46 08 FF 45  
00490F  3  45 45 FF 46          .byte 69,69,255,70,5,255,69,4,255,70,10,255,69,4,255,70,5,69,69,255,70,6,69,69,255,70,12,69,69,255,70,6,69,69
004913  3  05 FF 45 04  
004917  3  FF 46 0A FF  
004931  3  FF 46 1C 45          .byte 255,70,28,69,69,255,70,13,69,69,255,70,13,69,69,255,70,12,255,69,4,255,70,12,69,69,255,70,11,255,69,6,255,70,11
004935  3  45 FF 46 0D  
004939  3  45 45 FF 46  
004954  3  45 45 46 46          .byte 69,69,70,70,70,69,69,69,255,70,5,255,69,6,255,70,5,69,69,69,70,70,70,69,69,70,70,255,69,6,255,70,4
004958  3  46 45 45 45  
00495C  3  FF 46 05 FF  
004975  3  FF 45 04 FF          .byte 255,69,4,255,70,4,255,69,6,70,70,69,69,70,70,70,255,69,6,70,70,70,255,69,4,70,70,70,255,69,6,70,70,70
004979  3  46 04 FF 45  
00497D  3  06 46 46 45  
004997  3  45 45 FF 46          .byte 69,69,255,70,4,255,69,5,255,70,4,69,69,255,70,4,255,69,5,255,70,4,69,69,255,70,5,69,69,69,255,70,12
00499B  3  04 FF 45 05  
00499F  3  FF 46 04 45  
0049B8  3  45 45 45 FF          .byte 69,69,69,255,70,5,69,69,255,70,28,69,69,255,70,28,69,69,255,70,28,69,69,255,70,28,69,69,255,70,8,255,69,4
0049BC  3  46 05 45 45  
0049C0  3  FF 46 1C 45  
0049DA  3  FF 46 04 FF          .byte 255,70,4,255,69,4,255,70,8,69,69,255,70,5,255,69,6,255,70,6,255,69,6,255,70,5,69,69,255,70,6,255,69,4
0049DE  3  45 04 FF 46  
0049E2  3  08 45 45 FF  
0049FC  3  FF 46 08 FF          .byte 255,70,8,255,69,4,255,70,6,69
004A00  3  45 04 FF 46  
004A04  3  06 45        
004A06  3  48 FF 6B 1C          .byte 72,255,107,28,72,75,255,0,28,71,75,255,0,28,71,75,255,0,28,71,75,255,0,5,72,72,255,0,14,72,72,255,0,5
004A0A  3  48 4B FF 00  
004A0E  3  1C 47 4B FF  
004A28  3  47 48 FF 00          .byte 71,72,255,0,4,255,72,4,255,0,12,255,72,4,255,0,4,72,72,0,0,255,72,8,255,0,8,255,72,8,0,0,72,72
004A2C  3  04 FF 48 04  
004A30  3  FF 00 0C FF  
004A4A  3  FF 00 04 FF          .byte 255,0,4,255,72,4,255,0,12,255,72,4,255,0,4,72,72,255,0,5,72,72,255,0,14,72,72,255,0,5,72,72,255,0,28
004A4E  3  48 04 FF 00  
004A52  3  0C FF 48 04  
004A6D  3  48 48 FF 00          .byte 72,72,255,0,28,72,72,255,0,13,72,72,255,0,13,72,72,255,0,11,255,72,6,255,0,11,255,72,9,119,255,0,5
004A71  3  1C 48 48 FF  
004A75  3  00 0D 48 48  
004A8E  3  48 48 FF 00          .byte 72,72,255,0,5,86,255,72,9,255,0,6,86,119,255,0,12,86,119,255,0,6,72,72,255,0,6,85,85,255,0,12,85,85
004A92  3  05 56 FF 48  
004A96  3  09 FF 00 06  
004AB0  3  FF 00 06 48          .byte 255,0,6,72,72,255,0,6,85,85,255,0,12,85,85,255,0,6,72,72,255,0,6,85,85,255,0,12,85,85,255,0,6
004AB4  3  48 FF 00 06  
004AB8  3  55 55 FF 00  
004AD1  3  48 48 FF 00          .byte 72,72,255,0,6,86,119,255,0,12,86,119,255,0,6,72,72,255,106,6,120,121,255,106,12,120,121,255,106,6,72
004AD5  3  06 56 77 FF  
004AD9  3  00 0C 56 77  
004AF0  3  6C FF 4C 1C          .byte 108,255,76,28,108,108,255,73,28,108,108,255,73,28,108,108,255,73,28,108,108,255,73,4,108,74,255,73,5,76,255,108,4
004AF4  3  6C 6C FF 49  
004AF8  3  1C 6C 6C FF  
004B11  3  4C FF 49 05          .byte 76,255,73,5,74,108,255,73,4,108,108,255,73,4,108,108,74,255,73,6,108,108,255,73,6,74,108,108,255,73,4,108,108
004B15  3  4A 6C FF 49  
004B19  3  04 6C 6C FF  
004B32  3  FF 49 04 6C          .byte 255,73,4,108,108,108,255,73,14,108,108,108,255,73,4,108,108,255,73,5,76,108,255,73,14,108,76,255,73,5,108,108,255,73,28
004B36  3  6C 6C FF 49  
004B3A  3  0E 6C 6C 6C  
004B55  3  6C 6C FF 49          .byte 108,108,255,73,12,74,108,108,74,255,73,12,108,108,255,73,12,76,108,108,76,255,73,12,108,108,255,73,28,108,108,255,73,5
004B59  3  0C 4A 6C 6C  
004B5D  3  4A FF 49 0C  
004B77  3  4A 6C FF 49          .byte 74,108,255,73,14,108,74,255,73,5,108,108,255,73,4,108,108,108,255,73,14,108,108,108,255,73,4,108,108,255,73,4,108,108
004B7B  3  0E 6C 4A FF  
004B7F  3  49 05 6C 6C  
004B99  3  4C FF 49 06          .byte 76,255,73,6,108,108,255,73,6,76,108,108,255,73,4,108,108,255,73,4,108,76,255,73,5,74,255,108,4,74,255,73,5
004B9D  3  6C 6C FF 49  
004BA1  3  06 4C 6C 6C  
004BBA  3  4C 6C FF 49          .byte 76,108,255,73,4,108,108,255,73,28,108,108,255,73,28,108,108,255,73,28,108,108,255,74,28,108
004BBE  3  04 6C 6C FF  
004BC2  3  49 1C 6C 6C  
004BD4  3  2A FF 4F 0D          .byte 42,255,79,13,90,255,79,8,42,255,79,5,42,42,255,79,13,42,255,79,8,42,255,79,5,42,42,255,79,13,42,255,79,8
004BD8  3  5A FF 4F 08  
004BDC  3  2A FF 4F 05  
004BF6  3  2A FF 4F 05          .byte 42,255,79,5,42,42,255,79,13,90,255,42,9,255,79,5,42,42,255,79,13,42,79,42,42,79,79,42,42,79,42,255,79,5
004BFA  3  2A 2A FF 4F  
004BFE  3  0D 5A FF 2A  
004C18  3  2A 2A FF 4F          .byte 42,42,255,79,13,42,255,79,8,42,255,79,5,42,42,255,79,13,90,81,42,83,42,42,82,42,80,42,255,79,5,42,42
004C1C  3  0D 2A FF 4F  
004C20  3  08 2A FF 4F  
004C39  3  FF 4F 0D 2A          .byte 255,79,13,42,79,79,79,42,42,79,79,79,42,255,79,5,42,42,255,79,13,42,82,42,80,79,79,81,42,83,42,255,79,5
004C3D  3  4F 4F 4F 2A  
004C41  3  2A 4F 4F 4F  
004C5B  3  2A 2A FF 4F          .byte 42,42,255,79,13,90,79,79,82,42,42,83,79,79,42,255,79,5,42,42,255,79,13,42,79,81,78,42,42,78,80,79,42
004C5F  3  0D 5A 4F 4F  
004C63  3  52 2A 2A 53  
004C7C  3  FF 4F 05 2A          .byte 255,79,5,42,42,255,79,13,42,78,255,79,6,78,42,255,79,5,42,42,255,79,13,90,79,78,79,42,42,79,78,79,42
004C80  3  2A FF 4F 0D  
004C84  3  2A 4E FF 4F  
004C9D  3  FF 4F 05 2A          .byte 255,79,5,42,42,255,79,13,255,90,9,42,255,79,5,42,42,255,79,13,42,255,79,8,90,255,79,5,42,42,255,79,13
004CA1  3  2A FF 4F 0D  
004CA5  3  FF 5A 09 2A  
004CBE  3  2A FF 4F 08          .byte 42,255,79,8,42,255,79,5,42,42,255,79,13,42,255,79,8,42,255,79,5,42,42,255,79,13,90,255,43,8,42,255,79,5
004CC2  3  2A FF 4F 05  
004CC6  3  2A 2A FF 4F  
004CE0  3  2A 2A FF 4F          .byte 42,42,255,79,13,42,255,43,8,42,255,79,5,42,42,255,79,13,42,255,43,8,42,255,79,5,42
004CE4  3  0D 2A FF 2B  
004CE8  3  08 2A FF 4F  
004CFB  3  2A 4D 4D 4D          .byte 42,77,77,77,79,255,42,6,79,255,77,6,79,255,42,6,79,77,77,77,42,42,77,77,77,79,255,42,6,79,255,77,6
004CFF  3  4F FF 2A 06  
004D03  3  4F FF 4D 06  
004D1C  3  4F FF 2A 06          .byte 79,255,42,6,79,77,77,77,42,42,255,77,4,79,255,42,4,79,255,77,8,79,255,42,4,79,255,77,4,42,42,255,77,5
004D20  3  4F 4D 4D 4D  
004D24  3  2A 2A FF 4D  
004D3E  3  4F 2A 2A 4F          .byte 79,42,42,79,255,77,10,79,42,42,79,255,77,5,42,42,255,77,6,79,79,255,77,5,79,79,255,77,5,79,79,255,77,6
004D42  3  FF 4D 0A 4F  
004D46  3  2A 2A 4F FF  
004D60  3  2A 2A FF 4D          .byte 42,42,255,77,12,79,42,42,79,255,77,12,42,42,255,77,11,79,255,42,4,79,255,77,11,42,42,77,77,77,79,79,79
004D64  3  0C 4F 2A 2A  
004D68  3  4F FF 4D 0C  
004D81  3  FF 4D 04 4F          .byte 255,77,4,79,255,42,6,79,255,77,4,79,79,79,77,77,77,42,42,77,77,77,42,42,42,79,79,77,77,79,255,42,6
004D85  3  FF 2A 06 4F  
004D89  3  FF 4D 04 4F  
004DA2  3  4F 4D 4D 4F          .byte 79,77,77,79,79,42,42,42,77,77,77,42,42,77,77,255,42,6,79,77,77,79,255,42,4,79,77,77,79,255,42,6,77,77
004DA6  3  4F 2A 2A 2A  
004DAA  3  4D 4D 4D 2A  
004DC4  3  2A 2A 4D 4D          .byte 42,42,77,77,77,255,42,6,79,77,79,255,42,4,79,77,79,255,42,6,77,77,77,42,42,255,77,4,255,42,5,79,77,77
004DC8  3  4D FF 2A 06  
004DCC  3  4F 4D 4F FF  
004DE6  3  4F 2A 2A 4F          .byte 79,42,42,79,77,77,79,255,42,5,255,77,4,42,42,255,77,5,42,42,42,79,255,77,4,79,79,255,77,4,79,42,42,42
004DEA  3  4D 4D 4F FF  
004DEE  3  2A 05 FF 4D  
004E08  3  FF 4D 05 2A          .byte 255,77,5,42,42,255,77,5,79,79,79,255,77,12,79,79,79,255,77,5,42,42,255,77,28,42,42,255,77,28,42,42,255,77,8
004E0C  3  2A FF 4D 05  
004E10  3  4F 4F 4F FF  
004E2B  3  4F 4F 4F FF          .byte 79,79,79,255,77,6,79,79,79,255,77,8,42,42,255,77,7,79,255,42,4,255,77,4,255,42,4,79,255,77,7,42,42
004E2F  3  4D 06 4F 4F  
004E33  3  4F FF 4D 08  
004E4C  3  FF 4D 05 FF          .byte 255,77,5,255,42,6,79,255,77,4,79,255,42,6,255,77,5,42,42,255,77,6,255,42,4,79,255,77,6,79,255,42,4
004E50  3  2A 06 4F FF  
004E54  3  4D 04 4F FF  
004E6D  3  FF 4D 06 2A          .byte 255,77,6,42
004E71  3  2A FF 4D 06          .byte 42,255,77,6,79,255,42,4,79,255,77,4,79,255,42,4,79,255,77,6,42,42,255,77,5,79,255,42,4,79,255,77,6
004E75  3  4F FF 2A 04  
004E79  3  4F FF 4D 04  
004E92  3  4F FF 2A 04          .byte 79,255,42,4,79,255,77,5,42,42,255,77,5,255,42,5,79,255,77,6,79,255,42,5,255,77,5,42,42,255,77,5,79
004E96  3  4F FF 4D 05  
004E9A  3  2A 2A FF 4D  
004EB3  3  2A 2A 2A 4F          .byte 42,42,42,79,255,77,8,79,42,42,42,79,255,77,5,42,42,255,77,6,79,79,79,255,77,10,79,79,79,255,77,6,42,42
004EB7  3  FF 4D 08 4F  
004EBB  3  2A 2A 2A 4F  
004ED5  3  FF 4D 0D 4F          .byte 255,77,13,79,79,255,77,13,42,42,255,77,11,79,255,42,4,79,255,77,11,42,42,255,77,10,79,255,42,6,79,255,77,10
004ED9  3  4F FF 4D 0D  
004EDD  3  2A 2A FF 4D  
004EF7  3  2A 2A FF 4D          .byte 42,42,255,77,6,255,42,16,255,77,6,42,42,255,77,9,255,42,10,255,77,9,42,42,79,79,255,77,9,79,255,42,4
004EFB  3  06 FF 2A 10  
004EFF  3  FF 4D 06 2A  
004F18  3  4F FF 4D 09          .byte 79,255,77,9,79,79,255,42,4,79,255,77,9,79,42,42,79,255,77,9,79,255,42,9,255,77,8,79,79,255,77,8,255,42,10
004F1C  3  4F 4F FF 2A  
004F20  3  04 4F FF 4D  
004F3B  3  FF 4D 16 FF          .byte 255,77,22,255,42,6,79,255,77,24,79,42,42,42,77,77,77,79,79,79,42,42,42,255,77,10,42,42,42,79,79,79,77,77,77
004F3F  3  2A 06 4F FF  
004F43  3  4D 18 4F 2A  
004F5E  3  2A 2A 4D 4D          .byte 42,42,77,77,79,255,42,4,255,77,5,255,79,4,255,77,5,255,42,4,79,77,77,42,42,77,77,255,42,4,255,77,5
004F62  3  4F FF 2A 04  
004F66  3  FF 4D 05 FF  
004F7F  3  4F FF 2A 04          .byte 79,255,42,4,79,255,77,5,255,42,4,77,77,42,42,77,77,42,42,42,79,255,77,5,255,42,6,255,77,5,79,42,42,42
004F83  3  4F FF 4D 05  
004F87  3  FF 2A 04 4D  
004FA1  3  4D 4D 2A 2A          .byte 77,77,42,42,255,77,10,255,42,8,255,77,10,42
004FA5  3  FF 4D 0A FF  
004FA9  3  2A 08 FF 4D  
004FAF  3  45 FF 46 07          .byte 69,255,70,7,255,69,4,255,70,6,255,69,4,255,70,7,69,69,255,70,6,255,69,4,255,70,8,255,69,4,255,70,6
004FB3  3  FF 45 04 FF  
004FB7  3  46 06 FF 45  
004FD0  3  45 45 FF 46          .byte 69,69,255,70,5,255,69,5,255,70,8,255,69,5,255,70,5,69,69,255,70,6,69,69,69,255,70,10,69,69,69,255,70,6
004FD4  3  05 FF 45 05  
004FD8  3  FF 46 08 FF  
004FF2  3  45 45 FF 46          .byte 69,69,255,70,28,69,69,255,70,28,69,69,255,70,12,255,69,4,255,70,12,69,69,255,70,11,255,69,6,255,70,11,69,69
004FF6  3  1C 45 45 FF  
004FFA  3  46 1C 45 45  
005014  3  FF 46 06 FF          .byte 255,70,6,255,69,16,255,70,6,69,69,255,70,9,255,69,10,255,70,9,69,69,255,70,12,255,69,4,255,70,12,255,69,4
005018  3  45 10 FF 46  
00501C  3  06 45 45 FF  
005036  3  FF 46 0B 45          .byte 255,70,11,69,69,255,70,11,255,69,9,255,70,18,255,69,10,255,70,22,255,69,6,255,70,26,69,69,69,255,70,6,69,69,69
00503A  3  45 FF 46 0B  
00503E  3  FF 45 09 FF  
005059  3  FF 46 0A 45          .byte 255,70,10,69,69,69,255,70,6,69,69,70,70,70,255,69,4,255,70,14,255,69,4,70,70,70,69,69,70,70,255,69,4
00505D  3  45 45 FF 46  
005061  3  06 45 45 46  
00507A  3  FF 46 06 FF          .byte 255,70,6,255,69,4,255,70,6,255,69,4,70,70,69,69,70,70,69,69,69,255,70,6,255,69,6,255,70,6,69,69,69
00507E  3  45 04 FF 46  
005082  3  06 FF 45 04  
00509B  3  46 46 45 45          .byte 70,70,69,69,255,70,10,255,69,8,255,70,10,69
00509F  3  FF 46 0A FF  
0050A3  3  45 08 FF 46  
0050A9  3  01 FF 58 1C          .byte 1,255,88,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28
0050AD  3  01 01 FF 00  
0050B1  3  1C 01 01 FF  
0050CB  3  01 01 FF 00          .byte 1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28
0050CF  3  1C 01 01 FF  
0050D3  3  00 1C 01 01  
0050EE  3  01 01 FF 00          .byte 1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,87,28,1
0050F2  3  1C 01 01 FF  
0050F6  3  00 1C 01 01  
00510D  3  01 FF 58 1C          .byte 1,255,88,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28
005111  3  01 01 FF 00  
005115  3  1C 01 01 FF  
00512F  3  01 01 FF 00          .byte 1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28
005133  3  1C 01 01 FF  
005137  3  00 1C 01 01  
005152  3  01 01 FF 00          .byte 1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,87,28,1
005156  3  1C 01 01 FF  
00515A  3  00 1C 01 01  
005171  3  01 FF 58 1C          .byte 1,255,88,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28
005175  3  01 01 FF 00  
005179  3  1C 01 01 FF  
005193  3  01 01 FF 00          .byte 1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28
005197  3  1C 01 01 FF  
00519B  3  00 1C 01 01  
0051B6  3  01 01 FF 00          .byte 1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,87,28,1
0051BA  3  1C 01 01 FF  
0051BE  3  00 1C 01 01  
0051D5  3  FF 15 00 FF          .byte 255,21,0,255,21,0,255,21,88
0051D9  3  15 00 FF 15  
0051DD  3  58           
0051DE  3  FF 14 0B FF          .byte 255,20,11,255,104,8,255,20,22,255,104,8,255,20,22,104,104,104,99,100,104,104,104,255,20,22,104,104,104,101,102,104,104,104
0051E2  3  68 08 FF 14  
0051E6  3  16 FF 68 08  
005200  3  FF 14 16 FF          .byte 255,20,22,255,104,8,255,20,22,255,104,8,255,20,22,255,104,8,255,20,16,95,96,255,20,4,255,104,8,255,20,15,97
005204  3  68 08 FF 14  
005208  3  16 FF 68 08  
005221  3  62 67 FF 14          .byte 98,103,255,20,4,255,104,8,255,20,22,255,104,8,255,20,22,255,104,8,255,20,22,255,104,8,255,20,4,91,92,255,20,16
005225  3  04 FF 68 08  
005229  3  FF 14 16 FF  
005243  3  FF 68 08 FF          .byte 255,104,8,255,20,4,93,94,255,20,16,255,104,8,255,20,22,104,104,104,99,100,104,104,104,255,20,22,104,104,104,101,102
005247  3  14 04 5D 5E  
00524B  3  FF 14 10 FF  
005264  3  68 68 68 FF          .byte 104,104,104,255,20,22,255,104,8,255,20,22,255,104,8,255,20,22,255,104,8,255,20,22,255,104,8,255,20,11
005268  3  14 16 FF 68  
00526C  3  08 FF 14 16  
005282  3  FF 2B 06 FF          .byte 255,43,6,255,42,18,255,43,12,255,42,18,255,43,12,255,42,18,255,43,12,255,42,18,255,43,12,255,42,18,255,43,12
005286  3  2A 12 FF 2B  
00528A  3  0C FF 2A 12  
0052A3  3  FF 2A 12 FF          .byte 255,42,18,255,43,12,255,42,18,255,43,12,255,42,18,255,43,12,255,42,18,255,43,12,255,42,18,255,43,12,255,42,18
0052A7  3  2B 0C FF 2A  
0052AB  3  12 FF 2B 0C  
0052C4  3  FF 2B 0C FF          .byte 255,43,12,255,42,18,255,43,12,255,42,18,255,43,12,255,42,18,255,43,12,255,42,18,255,43,12,255,42,18,255,43,12
0052C8  3  2A 12 FF 2B  
0052CC  3  0C FF 2A 12  
0052E5  3  FF 2A 12 FF          .byte 255,42,18,255,43,12,255,42,18,255,43,12,255,42,18,255,43,12,255,42,7,84,42,42,84,255,42,7,255,43,6
0052E9  3  2B 0C FF 2A  
0052ED  3  12 FF 2B 0C  
005304  3  6C FF 4C 1C          .byte 108,255,76,28,108,108,255,0,13,122,123,255,0,13,108,108,255,0,12,109,110,110,111,255,0,12,108,108,255,0,12,112,113,113
005308  3  6C 6C FF 00  
00530C  3  0D 7A 7B FF  
005326  3  72 FF 00 0C          .byte 114,255,0,12,108,108,255,0,28,108,108,255,0,28,108,108,255,0,28,108,108,255,0,28,108,108,255,0,28,108,108,255,0,28
00532A  3  6C 6C FF 00  
00532E  3  1C 6C 6C FF  
005348  3  6C 6C FF 00          .byte 108,108,255,0,28,108,108,255,0,28,108,108,255,0,28,108,108,255,0,28,108,108,255,0,28,108,108,255,0,28,108,108,255,0,28
00534C  3  1C 6C 6C FF  
005350  3  00 1C 6C 6C  
00536B  3  6C 6C FF 00          .byte 108,108,255,0,13,115,115,255,0,13,108,108,255,0,12,116,117,117,118,255,0,12,108,108,255,74,28,108
00536F  3  0D 73 73 FF  
005373  3  00 0D 6C 6C  
005387  3               numsc:
005387  3  13                   .byte 19
005388  3               nmedat:
005388  3  00 00 48 78          .byte 0,0,72,120,1,2,8,232,255
00538C  3  01 02 08 E8  
005390  3  FF           
005391  3  00 00 48 78          .byte 0,0,72,120,1,2,8,232,255
005395  3  01 02 08 E8  
005399  3  FF           
00539A  3  00 00 48 78          .byte 0,0,72,120,1,2,8,232,255
00539E  3  01 02 08 E8  
0053A2  3  FF           
0053A3  3  00 00 48 78          .byte 0,0,72,120,1,2,8,232,255
0053A7  3  01 02 08 E8  
0053AB  3  FF           
0053AC  3  00 00 08 08          .byte 0,0,8,8,5,0,8,120,255
0053B0  3  05 00 08 78  
0053B4  3  FF           
0053B5  3  00 05 10 78          .byte 0,5,16,120,3,3,144,120,3,9,96,32,1,2,8,232,255
0053B9  3  03 03 90 78  
0053BD  3  03 09 60 20  
0053C6  3  00 00 80 78          .byte 0,0,128,120,3,7,32,120,1,2,8,232,4,11,128,64,4,11,128,176,255
0053CA  3  03 07 20 78  
0053CE  3  01 02 08 E8  
0053DB  3  00 00 48 18          .byte 0,0,72,24,3,8,16,120,3,9,104,88,1,2,8,232,255
0053DF  3  03 08 10 78  
0053E3  3  03 09 68 58  
0053EC  3  00 00 48 18          .byte 0,0,72,24,6,4,120,152,1,2,8,232,255
0053F0  3  06 04 78 98  
0053F4  3  01 02 08 E8  
0053F9  3  00 00 08 40          .byte 0,0,8,64,4,4,72,120,1,2,8,232,255
0053FD  3  04 04 48 78  
005401  3  01 02 08 E8  
005406  3  00 00 08 48          .byte 0,0,8,72,4,4,72,120,1,2,8,232,255
00540A  3  04 04 48 78  
00540E  3  01 02 08 E8  
005413  3  00 00 10 78          .byte 0,0,16,120,3,3,104,120,3,9,72,224,1,2,8,232,255
005417  3  03 03 68 78  
00541B  3  03 09 48 E0  
005424  3  00 00 18 18          .byte 0,0,24,24,1,2,8,232,255
005428  3  01 02 08 E8  
00542C  3  FF           
00542D  3  00 00 18 18          .byte 0,0,24,24,1,2,8,232,255
005431  3  01 02 08 E8  
005435  3  FF           
005436  3  00 00 18 18          .byte 0,0,24,24,1,2,8,232,255
00543A  3  01 02 08 E8  
00543E  3  FF           
00543F  3  00 01 10 78          .byte 0,1,16,120,7,3,88,8,7,3,48,232,7,3,128,120,1,2,8,232,255
005443  3  07 03 58 08  
005447  3  07 03 30 E8  
005454  3  00 00 48 78          .byte 0,0,72,120,8,4,144,128,8,4,32,120,1,2,8,232,255
005458  3  08 04 90 80  
00545C  3  08 04 20 78  
005465  3  00 00 08 78          .byte 0,0,8,120,7,3,48,48,7,3,80,120,7,3,112,192,8,10,144,120,1,2,8,232,255
005469  3  07 03 30 30  
00546D  3  07 03 50 78  
00547E  3  06 05 78 78          .byte 6,5,120,120,0,2,120,16,255
005482  3  00 02 78 10  
005486  3  FF           
005487  3               NUMOBJ = 14
005487  3               objdta:
005487  3  00 00 00 7F          .byte 0,0,0,127,0,254,0,48,0,96,0,192,1,128,3,0,198,0,255,252,255,240,255,192,255,0,252,0,240,0,0,0,16,144,128,16,144,128
00548B  3  00 FE 00 30  
00548F  3  00 60 00 C0  
0054AD  3  00 00 00 00          .byte 0,0,0,0,7,192,7,192,0,0,124,0,124,0,0,62,0,62,124,0,124,0,0,0,1,240,1,240,0,0,0,0,12,80,120,12,80,120
0054B1  3  07 C0 07 C0  
0054B5  3  00 00 7C 00  
0054D3  3  00 00 00 00          .byte 0,0,0,0,0,0,6,0,25,128,96,96,24,24,6,6,1,134,6,6,24,6,0,6,0,6,0,0,0,0,0,0,0,144,120,0,144,120
0054D7  3  00 00 06 00  
0054DB  3  19 80 60 60  
0054F9  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,56,32,1,56,32
0054FD  3  00 00 00 00  
005501  3  00 00 00 00  
00551F  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,80,200,1,80,200
005523  3  00 00 00 00  
005527  3  00 00 00 00  
005545  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,144,184,1,144,184
005549  3  00 00 00 00  
00554D  3  00 00 00 00  
00556B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,3,192,15,240,0,0,243,207,195,195,48,12,12,48,3,192,0,0,0,0,0,0,0,0,14,136,208,14,136,208
00556F  3  00 00 00 00  
005573  3  03 C0 0F F0  
005591  3  00 00 00 00          .byte 0,0,0,0,63,63,63,63,63,63,63,63,32,1,63,63,63,63,63,63,63,63,0,0,0,0,0,0,0,0,0,0,1,136,120,1,136,120
005595  3  3F 3F 3F 3F  
005599  3  3F 3F 3F 3F  
0055B7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,243,0,243,0,51,252,51,252,3,48,3,48,3,192,3,192,3,0,3,0,0,0,0,0,13,24,88,13,24,88
0055BB  3  00 00 00 00  
0055BF  3  F3 00 F3 00  
0055DD  3  00 00 00 00          .byte 0,0,0,0,224,0,112,0,248,0,124,0,50,0,25,0,15,128,7,192,3,32,1,144,0,248,1,254,0,127,0,0,1,40,120,1,40,120
0055E1  3  E0 00 70 00  
0055E5  3  F8 00 7C 00  
005603  3  7F FE 7F FE          .byte 127,254,127,254,30,120,30,120,6,96,6,96,24,24,24,24,24,24,24,24,6,96,6,96,30,120,30,120,127,254,127,254,3,80,120,3,80,120
005607  3  1E 78 1E 78  
00560B  3  06 60 06 60  
005629  3  07 E0 07 E0          .byte 7,224,7,224,30,120,30,120,7,224,7,224,97,134,97,134,127,254,127,254,97,134,97,134,7,224,7,224,31,248,31,248,12,40,216,12,40,216
00562D  3  1E 78 1E 78  
005631  3  07 E0 07 E0  
00564F  3  00 00 00 00          .byte 0,0,0,0,0,192,0,192,12,204,12,204,12,12,12,12,0,0,0,0,12,12,12,12,12,204,12,204,0,192,0,192,16,40,120,16,40,120
005653  3  00 C0 00 C0  
005657  3  0C CC 0C CC  
005675  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,96,192,16,96,192
005679  3  00 00 00 00  
00567D  3  00 00 00 00  
00569B  3               font:
00569B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00569F  3  00 00 00 00  
0056A3  3  00 7F 1E 06          .byte 0,127,30,6,6,62,254,248
0056A7  3  06 3E FE F8  
0056AB  3  00 FE 78 60          .byte 0,254,120,96,96,124,127,31
0056AF  3  60 7C 7F 1F  
0056B3  3  0E 38 0E 03          .byte 14,56,14,3,14,56,14,3
0056B7  3  0E 38 0E 03  
0056BB  3  70 1C 70 C0          .byte 112,28,112,192,112,28,112,192
0056BF  3  70 1C 70 C0  
0056C3  3  0C 0C 03 03          .byte 12,12,3,3,3,3,12,12
0056C7  3  03 03 0C 0C  
0056CB  3  30 30 C0 C0          .byte 48,48,192,192,192,192,48,48
0056CF  3  C0 C0 30 30  
0056D3  3  3C 3C 33 33          .byte 60,60,51,51,243,243,15,15
0056D7  3  F3 F3 0F 0F  
0056DB  3  3C 3C CC CC          .byte 60,60,204,204,207,207,240,240
0056DF  3  CF CF F0 F0  
0056E3  3  00 20 10 10          .byte 0,32,16,16,16,16,32,0
0056E7  3  10 10 20 00  
0056EB  3  00 00 14 08          .byte 0,0,20,8,62,8,20,0
0056EF  3  3E 08 14 00  
0056F3  3  00 00 08 08          .byte 0,0,8,8,62,8,8,0
0056F7  3  3E 08 08 00  
0056FB  3  00 00 00 00          .byte 0,0,0,0,0,8,8,16
0056FF  3  00 08 08 10  
005703  3  00 00 00 00          .byte 0,0,0,0,62,0,0,0
005707  3  3E 00 00 00  
00570B  3  00 00 00 00          .byte 0,0,0,0,0,0,32,0
00570F  3  00 00 20 00  
005713  3  00 00 44 08          .byte 0,0,68,8,16,32,68,0
005717  3  10 20 44 00  
00571B  3  00 00 38 44          .byte 0,0,56,68,84,68,56,0
00571F  3  54 44 38 00  
005723  3  00 00 30 10          .byte 0,0,48,16,16,16,56,0
005727  3  10 10 38 00  
00572B  3  00 00 7C 04          .byte 0,0,124,4,124,64,124,0
00572F  3  7C 40 7C 00  
005733  3  00 00 7C 04          .byte 0,0,124,4,60,4,124,0
005737  3  3C 04 7C 00  
00573B  3  00 00 18 28          .byte 0,0,24,40,72,124,8,0
00573F  3  48 7C 08 00  
005743  3  00 00 7C 40          .byte 0,0,124,64,124,4,124,0
005747  3  7C 04 7C 00  
00574B  3  00 00 7C 40          .byte 0,0,124,64,124,68,124,0
00574F  3  7C 44 7C 00  
005753  3  00 00 7C 04          .byte 0,0,124,4,8,16,16,0
005757  3  08 10 10 00  
00575B  3  00 00 7C 44          .byte 0,0,124,68,124,68,124,0
00575F  3  7C 44 7C 00  
005763  3  00 00 7C 44          .byte 0,0,124,68,124,4,124,0
005767  3  7C 04 7C 00  
00576B  3  00 00 00 10          .byte 0,0,0,16,0,0,16,0
00576F  3  00 00 10 00  
005773  3  00 00 10 00          .byte 0,0,16,0,0,16,16,32
005777  3  00 10 10 20  
00577B  3  00 00 04 08          .byte 0,0,4,8,16,8,4,0
00577F  3  10 08 04 00  
005783  3  00 00 00 3E          .byte 0,0,0,62,0,62,0,0
005787  3  00 3E 00 00  
00578B  3  00 00 10 08          .byte 0,0,16,8,4,8,16,0
00578F  3  04 08 10 00  
005793  3  00 3C 42 04          .byte 0,60,66,4,8,0,8,0
005797  3  08 00 08 00  
00579B  3  00 00 38 44          .byte 0,0,56,68,92,68,56,0
00579F  3  5C 44 38 00  
0057A3  3  00 00 38 44          .byte 0,0,56,68,124,68,68,0
0057A7  3  7C 44 44 00  
0057AB  3  00 00 78 44          .byte 0,0,120,68,120,68,120,0
0057AF  3  78 44 78 00  
0057B3  3  00 00 38 44          .byte 0,0,56,68,64,68,56,0
0057B7  3  40 44 38 00  
0057BB  3  00 00 78 44          .byte 0,0,120,68,68,68,120,0
0057BF  3  44 44 78 00  
0057C3  3  00 00 7C 40          .byte 0,0,124,64,120,64,124,0
0057C7  3  78 40 7C 00  
0057CB  3  00 00 7C 40          .byte 0,0,124,64,120,64,64,0
0057CF  3  78 40 40 00  
0057D3  3  00 00 3C 40          .byte 0,0,60,64,92,68,60,0
0057D7  3  5C 44 3C 00  
0057DB  3  00 00 44 44          .byte 0,0,68,68,124,68,68,0
0057DF  3  7C 44 44 00  
0057E3  3  00 00 38 10          .byte 0,0,56,16,16,16,56,0
0057E7  3  10 10 38 00  
0057EB  3  00 00 04 04          .byte 0,0,4,4,4,68,56,0
0057EF  3  04 44 38 00  
0057F3  3  00 00 44 48          .byte 0,0,68,72,112,72,68,0
0057F7  3  70 48 44 00  
0057FB  3  00 00 40 40          .byte 0,0,64,64,64,64,124,0
0057FF  3  40 40 7C 00  
005803  3  00 00 44 6C          .byte 0,0,68,108,84,68,68,0
005807  3  54 44 44 00  
00580B  3  00 00 44 64          .byte 0,0,68,100,84,76,68,0
00580F  3  54 4C 44 00  
005813  3  00 00 38 44          .byte 0,0,56,68,68,68,56,0
005817  3  44 44 38 00  
00581B  3  00 00 78 44          .byte 0,0,120,68,120,64,64,0
00581F  3  78 40 40 00  
005823  3  00 00 38 44          .byte 0,0,56,68,68,76,60,0
005827  3  44 4C 3C 00  
00582B  3  00 00 78 44          .byte 0,0,120,68,120,80,76,0
00582F  3  78 50 4C 00  
005833  3  00 00 3C 40          .byte 0,0,60,64,56,4,120,0
005837  3  38 04 78 00  
00583B  3  00 00 7C 10          .byte 0,0,124,16,16,16,16,0
00583F  3  10 10 10 00  
005843  3  00 00 44 44          .byte 0,0,68,68,68,68,56,0
005847  3  44 44 38 00  
00584B  3  00 00 44 44          .byte 0,0,68,68,68,40,16,0
00584F  3  44 28 10 00  
005853  3  00 00 44 44          .byte 0,0,68,68,68,84,40,0
005857  3  44 54 28 00  
00585B  3  00 00 44 28          .byte 0,0,68,40,16,40,68,0
00585F  3  10 28 44 00  
005863  3  00 00 44 28          .byte 0,0,68,40,16,16,16,0
005867  3  10 10 10 00  
00586B  3  00 00 7C 08          .byte 0,0,124,8,16,32,124,0
00586F  3  10 20 7C 00  
005873  3  00 00 00 00          .byte 0,0,0,0,0,0,15,15
005877  3  00 00 0F 0F  
00587B  3  00 00 00 00          .byte 0,0,0,0,0,0,240,240
00587F  3  00 00 F0 F0  
005883  3  0F 0F 00 00          .byte 15,15,0,0,0,0,0,0
005887  3  00 00 00 00  
00588B  3  F0 F0 00 00          .byte 240,240,0,0,0,0,0,0
00588F  3  00 00 00 00  
005893  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
005897  3  00 00 00 00  
00589B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00589F  3  00 00 00 00  
0058A3  3  00 7F 7F 1F          .byte 0,127,127,31,31,102,102,25
0058A7  3  1F 66 66 19  
0058AB  3  00 FE FE F8          .byte 0,254,254,248,248,102,102,152
0058AF  3  F8 66 66 98  
0058B3  3  19 66 66 19          .byte 25,102,102,25,25,7,7,0
0058B7  3  19 07 07 00  
0058BB  3  98 66 66 98          .byte 152,102,102,152,152,224,224,0
0058BF  3  98 E0 E0 00  
0058C3  3  3F 3F 26 19          .byte 63,63,38,25,63,63,32,32
0058C7  3  3F 3F 20 20  
0058CB  3  FC FC 64 98          .byte 252,252,100,152,252,252,4,4
0058CF  3  FC FC 04 04  
0058D3  3  2C 2C 20 20          .byte 44,44,32,32,63,63,63,63
0058D7  3  3F 3F 3F 3F  
0058DB  3  34 34 04 04          .byte 52,52,4,4,252,252,255,255
0058DF  3  FC FC FF FF  
0058E3  3  F0 60 30 18          .byte 240,96,48,24,62,30,14,6
0058E7  3  3E 1E 0E 06  
0058EB  3  00 FE 7C AA          .byte 0,254,124,170,84,170,84,56
0058EF  3  54 AA 54 38  
0058F3  3  00 30 48 84          .byte 0,48,72,132,66,33,193,1
0058F7  3  42 21 C1 01  
0058FB  3  70 7C 02 79          .byte 112,124,2,121,1,253,1,122
0058FF  3  01 FD 01 7A  
005903  3  00 00 BF 7F          .byte 0,0,191,127,208,240,192,192
005907  3  D0 F0 C0 C0  
00590B  3  00 00 40 A0          .byte 0,0,64,160,255,162,69,0
00590F  3  FF A2 45 00  
005913  3  18 3C 00 DB          .byte 24,60,0,219,153,66,36,24
005917  3  99 42 24 18  
00591B  3  00 D6 D6 00          .byte 0,214,214,0,214,0,214,214
00591F  3  D6 00 D6 D6  
005923  3  00 00 D0 5E          .byte 0,0,208,94,20,24,16,0
005927  3  14 18 10 00  
00592B  3  00 00 01 3F          .byte 0,0,1,63,235,255,1,0
00592F  3  EB FF 01 00  
005933  3  FE 6C 28 44          .byte 254,108,40,68,68,40,124,254
005937  3  44 28 7C FE  
00593B  3  38 6C 38 92          .byte 56,108,56,146,254,146,56,124
00593F  3  FE 92 38 7C  
005943  3  00 00 FF FF          .byte 0,0,255,255,255,255,255,255
005947  3  FF FF FF FF  
00594B  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255
00594F  3  FF FF FF FF  
005953  3  FF FF FF FF          .byte 255,255,255,255,255,255,0,0
005957  3  FF FF 00 00  
00595B  3  FF FF 00 FF          .byte 255,255,0,255,255,255,0,0
00595F  3  FF FF 00 00  
005963  3  00 00 00 FF          .byte 0,0,0,255,240,15,0,0
005967  3  F0 0F 00 00  
00596B  3  0F FF 00 0F          .byte 15,255,0,15,15,0,240,15
00596F  3  0F 00 F0 0F  
005973  3  F0 FF 00 F0          .byte 240,255,0,240,240,0,15,240
005977  3  F0 00 0F F0  
00597B  3  00 00 00 FF          .byte 0,0,0,255,15,240,0,0
00597F  3  0F F0 00 00  
005983  3  FF FF FF FF          .byte 255,255,255,255,0,0,0,0
005987  3  00 00 00 00  
00598B  3  00 14 28 00          .byte 0,20,40,0,0,0,0,0
00598F  3  00 00 00 00  
005993  3  3C 42 99 A1          .byte 60,66,153,161,161,153,66,60
005997  3  A1 99 42 3C  
00599B  3               jtab:
00599B  3  F8 FA FC FE          .byte 248,250,252,254,254,255,255,255,0,0,0,1,1,1,2,2,4,6,8,8,8,99
00599F  3  FE FF FF FF  
0059A3  3  00 00 00 01  
0059B1  3  14 24 63 04  keys:   .byte 20,36,99,4,144,33,17,33,17,1,146
0059B5  3  90 21 11 21  
0059B9  3  11 01 92     
0059BC  3               
0059BC  2               
0059BC  1               	.include "z80.asm"
0059BC  2               ;------------------------------------------------------
0059BC  2               ; z80.asm
0059BC  2               ; spectrum stuff
0059BC  2               ; adresses
0059BC  2               
0059BC  2               ;ws	 = $60
0059BC  2               
0059BC  2               ;z80_f	 = ws+$00
0059BC  2               ;z80_a	 = ws+$01
0059BC  2               ;z80_af	 = z80_f
0059BC  2               
0059BC  2               ;z80_c	 = ws+$02
0059BC  2               ;z80_b	 = ws+$03
0059BC  2               ;z80_bc	 = z80_c
0059BC  2               
0059BC  2               ;z80_e	 = ws+$04
0059BC  2               ;z80_d	 = ws+$05
0059BC  2               ;z80_de	 = z80_e
0059BC  2               
0059BC  2               ;z80_l	 = ws+$06
0059BC  2               ;z80_h	 = ws+$07
0059BC  2               ;z80_hl	 = z80_l
0059BC  2               
0059BC  2               ;z80_x    = ws+$08
0059BC  2               ;z80_i    = ws+$09
0059BC  2               ;z80_ix	 = z80_x
0059BC  2               
0059BC  2               ;z80_iy	 = ws+$0a
0059BC  2               
0059BC  2               ;z80_fp	 = ws+$0c
0059BC  2               ;z80_ap	 = ws+$0d
0059BC  2               
0059BC  2               ;z80_cp	 = ws+$0e
0059BC  2               ;z80_bp	 = ws+$0f
0059BC  2               ;z80_bcp = z80_cp
0059BC  2               
0059BC  2               ;z80_ep	 = ws+$10
0059BC  2               ;z80_dp	 = ws+$11
0059BC  2               ;z80_dep = z80_ep
0059BC  2               
0059BC  2               ;z80_lp	 = ws+$12
0059BC  2               ;z80_hp	 = ws+$13
0059BC  2               ;z80_hlp = z80_lp
0059BC  2               
0059BC  2               ;z80_sp   = ws+$14
0059BC  2               
0059BC  2               ;z80_reg0 = ws+$16
0059BC  2               ;z80_reg1 = ws+$17
0059BC  2               ;z80_reg2 = ws+$18
0059BC  2               ;z80_reg3 = ws+$19
0059BC  2               
0059BC  2               ;z80_r	 = ws+$1a
0059BC  2               
0059BC  2               ; Contains seperatly 1 bit set
0059BC  2               
0059BC  2               _bitmem0	= $f8
0059BC  2               _bitmem1	= $f9
0059BC  2               _bitmem2	= $fa
0059BC  2               _bitmem3	= $fb
0059BC  2               _bitmem4	= $fc
0059BC  2               _bitmem5	= $fd
0059BC  2               _bitmem6	= $fe
0059BC  2               _bitmem7	= $ff
0059BC  2               
0059BC  2               ; constants
0059BC  2               _bitvalue0	= $01
0059BC  2               _bitvalue1	= $02
0059BC  2               _bitvalue2	= $04
0059BC  2               _bitvalue3	= $08
0059BC  2               _bitvalue4	= $10
0059BC  2               _bitvalue5	= $20
0059BC  2               _bitvalue6	= $40
0059BC  2               _bitvalue7	= $80
0059BC  2               
0059BC  2               _notbitvalue0	= $fe
0059BC  2               _notbitvalue1	= $fd
0059BC  2               _notbitvalue2	= $fb
0059BC  2               _notbitvalue3	= $f7
0059BC  2               _notbitvalue4	= $ef
0059BC  2               _notbitvalue5	= $df
0059BC  2               _notbitvalue6	= $bf
0059BC  2               _notbitvalue7	= $7f
0059BC  2               
0059BC  2               
0059BC  2               ;add_hl_bc:
0059BC  2               ;		lda z80_l
0059BC  2               ;		clc
0059BC  2               ;		adc z80_c
0059BC  2               ;		sta z80_l
0059BC  2               ;		lda z80_h
0059BC  2               ;		adc z80_b
0059BC  2               ;		sta z80_h
0059BC  2               ;		rts
0059BC  2               ;
0059BC  2               ;add_ix_de:
0059BC  2               ;		lda z80_ix
0059BC  2               ;		clc
0059BC  2               ;		adc z80_e
0059BC  2               ;		sta z80_ix
0059BC  2               ;		lda z80_ix+1
0059BC  2               ;		adc z80_d
0059BC  2               ;		sta z80_ix+1
0059BC  2               ;		rts
0059BC  2               ;
0059BC  2               ;add_iy_de:
0059BC  2               ;		lda z80_iy
0059BC  2               ;		clc
0059BC  2               ;		adc z80_e
0059BC  2               ;		sta z80_iy
0059BC  2               ;		lda z80_iy+1
0059BC  2               ;		adc z80_d
0059BC  2               ;		sta z80_iy+1
0059BC  2               ;		rts
0059BC  2               ;
0059BC  2               ;add_hl_de:
0059BC  2               ;		lda z80_l
0059BC  2               ;		clc
0059BC  2               ;		adc z80_e
0059BC  2               ;		sta z80_l
0059BC  2               ;		lda z80_h
0059BC  2               ;		adc z80_d
0059BC  2               ;		sta z80_h
0059BC  2               ;		rts
0059BC  2               ;
0059BC  2               ;add_ix_bc:
0059BC  2               ;		lda z80_ix
0059BC  2               ;		clc
0059BC  2               ;		adc z80_c
0059BC  2               ;		sta z80_ix
0059BC  2               ;		lda z80_ix+1
0059BC  2               ;		adc z80_b
0059BC  2               ;		sta z80_ix+1
0059BC  2               ;		rts
0059BC  2               ;
0059BC  2               ;add_iy_bc:
0059BC  2               ;		lda z80_iy
0059BC  2               ;		clc
0059BC  2               ;		adc z80_c
0059BC  2               ;		sta z80_iy
0059BC  2               ;		lda z80_iy+1
0059BC  2               ;		adc z80_b
0059BC  2               ;		sta z80_iy+1
0059BC  2               ;		rts
0059BC  2               ;
0059BC  2               ;sbc_hl_de:
0059BC  2               ;		lda z80_l
0059BC  2               ;		sbc z80_e
0059BC  2               ;		sta z80_l
0059BC  2               ;		lda z80_h
0059BC  2               ;		sbc z80_d
0059BC  2               ;		sta z80_h
0059BC  2               ;		rts
0059BC  2               ;
0059BC  2               ;sbc_hl_bc:
0059BC  2               ;		lda z80_l
0059BC  2               ;		sbc z80_c
0059BC  2               ;		sta z80_l
0059BC  2               ;		lda z80_h
0059BC  2               ;		sbc z80_b
0059BC  2               ;		sta z80_h
0059BC  2               ;		rts
0059BC  2               ;
0059BC  2               ;cmp_hl_bc:
0059BC  2               ;		lda z80_l
0059BC  2               ;		cmp z80_c
0059BC  2               ;		bne cmp_hl_bc_end
0059BC  2               ;		lda z80_h
0059BC  2               ;		cmp z80_b
0059BC  2               ;cmp_hl_bc_end:
0059BC  2               ;		rts
0059BC  2               ;
0059BC  2               ;cmp_iy_ix:
0059BC  2               ;		lda z80_iy
0059BC  2               ;		cmp z80_ix
0059BC  2               ;		bne cmp_iy_ix_end
0059BC  2               ;		lda z80_iy+1
0059BC  2               ;		cmp z80_ix+1
0059BC  2               ;cmp_iy_ix_end:
0059BC  2               ;		rts
0059BC  2               ;
0059BC  2               ;dec_hl:
0059BC  2               ;		lda z80_l
0059BC  2               ;		bne dec_hl_no_dec_h
0059BC  2               ;		dec z80_h
0059BC  2               ;dec_hl_no_dec_h:
0059BC  2               ;		dec z80_l
0059BC  2               ;		rts
0059BC  2               ;
0059BC  2               ;dec_ix:
0059BC  2               ;		lda z80_ix
0059BC  2               ;		bne dec_ix_no_dec_h
0059BC  2               ;		dec z80_ix+1
0059BC  2               ;dec_ix_no_dec_h:
0059BC  2               ;		dec z80_ix
0059BC  2               ;		rts
0059BC  2               ;
0059BC  2               ;dec_bc:
0059BC  2               ;		lda z80_c
0059BC  2               ;		bne dec_bc_no_dec_b
0059BC  2               ;		dec z80_b
0059BC  2               ;dec_bc_no_dec_b:
0059BC  2               ;		dec z80_c
0059BC  2               ;		rts
0059BC  2               ;
0059BC  2               ;dec_de:
0059BC  2               ;		lda z80_e
0059BC  2               ;		bne dec_de_no_dec_d
0059BC  2               ;		dec z80_d
0059BC  2               ;dec_de_no_dec_d:
0059BC  2               ;		dec z80_e
0059BC  2               ;		rts
0059BC  2               ;
0059BC  2               ;ex_af_afs:
0059BC  2               ;	rts
0059BC  2               ;ex_de_hl:
0059BC  2               ;		lda z80_e
0059BC  2               ;		ldx z80_l
0059BC  2               ;		stx z80_e
0059BC  2               ;		sta z80_l
0059BC  2               ;		lda z80_d
0059BC  2               ;		ldx z80_h
0059BC  2               ;		stx z80_d
0059BC  2               ;		sta z80_h
0059BC  2               ;		rts
0059BC  2               ;
0059BC  2               exx:
0059BC  2  A5 62        		lda z80_c
0059BE  2  A4 6E        		ldy z80_cp
0059C0  2  84 62        		sty z80_c
0059C2  2  85 6E        		sta z80_cp
0059C4  2  A5 63        		lda z80_b
0059C6  2  A4 6F        		ldy z80_bp
0059C8  2  84 63        		sty z80_b
0059CA  2  85 6F        		sta z80_bp
0059CC  2  A5 64        		lda z80_e
0059CE  2  A4 70        		ldy z80_ep
0059D0  2  84 64        		sty z80_e
0059D2  2  85 70        		sta z80_ep
0059D4  2  A5 65        		lda z80_d
0059D6  2  A4 71        		ldy z80_dp
0059D8  2  84 65        		sty z80_d
0059DA  2  85 71        		sta z80_dp
0059DC  2  A5 rr        		lda scraddr
0059DE  2  A4 72        		ldy z80_lp
0059E0  2  84 rr        		sty scraddr
0059E2  2  85 72        		sta z80_lp
0059E4  2  A5 rr        		lda scraddr+1
0059E6  2  A4 73        		ldy z80_hp
0059E8  2  84 rr        		sty scraddr+1
0059EA  2  85 73        		sta z80_hp
0059EC  2  60           		rts
0059ED  2               
0059ED  2               ;ex_sp_hl:
0059ED  2               ;		tsx
0059ED  2               ;		lda $0103,x
0059ED  2               ;		ldy z80_h
0059ED  2               ;		sta z80_h
0059ED  2               ;		tya
0059ED  2               ;		sta $0103,x
0059ED  2               ;		lda $0104,x
0059ED  2               ;		ldy z80_l
0059ED  2               ;		sta z80_l
0059ED  2               ;		tya
0059ED  2               ;		sta $104,x
0059ED  2               ;		rts
0059ED  2               ;
0059ED  2               ;ldi:
0059ED  2               ;	rts
0059ED  2               ;ldir:
0059ED  2               ;		ldy #$00
0059ED  2               ;		ldx z80_b
0059ED  2               ;		beq ldir_last_page
0059ED  2               ;ldir_loop:
0059ED  2               ;		lda (z80_hl),y
0059ED  2               ;		sta (z80_de),y
0059ED  2               ;		iny
0059ED  2               ;		bne ldir_loop
0059ED  2               ;		inc z80_h
0059ED  2               ;		inc z80_d
0059ED  2               ;		dex
0059ED  2               ;		bne ldir_loop
0059ED  2               ;ldir_last_page:
0059ED  2               ;		lda z80_c
0059ED  2               ;		beq ldir_end
0059ED  2               ;ldir_last_page_loop:
0059ED  2               ;		lda (z80_hl),y
0059ED  2               ;		sta (z80_de),y
0059ED  2               ;		iny
0059ED  2               ;		cpy z80_c
0059ED  2               ;		bne ldir_last_page_loop
0059ED  2               ;ldir_end:
0059ED  2               ;		stx z80_c
0059ED  2               ;		stx z80_b
0059ED  2               ;		tya
0059ED  2               ;		clc
0059ED  2               ;		adc z80_l
0059ED  2               ;		sta z80_l
0059ED  2               ;		bcc *+4
0059ED  2               ;		inc z80_h
0059ED  2               ;		tya
0059ED  2               ;		clc
0059ED  2               ;		adc z80_e
0059ED  2               ;		sta z80_e
0059ED  2               ;		bcc *+4
0059ED  2               ;		inc z80_d
0059ED  2               ;		rts
0059ED  2               ;
0059ED  2               ;lddr:		ldy #$00
0059ED  2               ;lddr_loop:
0059ED  2               ;		lda (z80_hl),y
0059ED  2               ;		sta (z80_de),y
0059ED  2               ;		jsr dec_hl
0059ED  2               ;		jsr dec_de
0059ED  2               ;		jsr dec_bc
0059ED  2               ;		lda z80_b
0059ED  2               ;		ora z80_c
0059ED  2               ;		bne lddr_loop
0059ED  2               ;		rts
0059ED  2               ;ei:
0059ED  2               ;		rts
0059ED  2               ;di:
0059ED  2               ;		rts
0059ED  2               
0059ED  2               ;-------------------------------------------------------------
0059ED  2               ; Set bits in bitmem
0059ED  2               ;-------------------------------------------------------------
0059ED  2               
0059ED  2               ;z80_init:
0059ED  2               ;	ldx #$00
0059ED  2               ;	lda #$01
0059ED  2               ;z80_init_loop:
0059ED  2               ;	sta _bitmem0,x
0059ED  2               ;	inx
0059ED  2               ;	asl a
0059ED  2               ;	bne z80_init_loop
0059ED  2               ;	rts
0059ED  2               
0059ED  2               push_af:
0059ED  2               push_bc:
0059ED  2               push_de:
0059ED  2               push_hl:
0059ED  2               
0059ED  2               pop_af:
0059ED  2               pop_bc:
0059ED  2               pop_de:
0059ED  2               pop_ix:
0059ED  2               pop_hl:
0059ED  2               
0059ED  2               add_hl_hl:
0059ED  2               
0059ED  2               inc_bc:
0059ED  2               inc_de:
0059ED  2               inc_hl:
0059ED  2               inc_ix:
0059ED  2               inc_sp:
0059ED  2               
0059ED  2               cpir:
0059ED  2               
0059ED  2               ex_af_af:
0059ED  2               ;	rts
0059ED  2               
0059ED  1               eind_asm:
0059ED  1               eop:					; End Of Program
0059ED  1               
